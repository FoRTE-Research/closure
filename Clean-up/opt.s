	.text
	.file	"llvm-link"
	.globl	slist_wc_append         # -- Begin function slist_wc_append
	.type	slist_wc_append,@function
slist_wc_append:                        # @slist_wc_append
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r15
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	callq	curl_slist_append
	testq	%rax, %rax
	je	.LBB0_6
# %bb.1:
	movq	%rax, %r14
	testq	%r15, %r15
	je	.LBB0_2
# %bb.5:
	movq	8(%r15), %rax
	movq	%r14, 8(%rax)
	movq	%r14, 8(%r15)
	movq	%r15, %rbx
	jmp	.LBB0_6
.LBB0_2:
	movl	$16, %edi
	callq	myMalloc
	testq	%rax, %rax
	je	.LBB0_3
# %bb.4:
	movq	%rax, %rbx
	movq	%r14, (%rax)
	movq	%r14, 8(%rax)
	jmp	.LBB0_6
.LBB0_3:
	movq	%r14, %rdi
	callq	curl_slist_free_all
	xorl	%ebx, %ebx
.LBB0_6:
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end0:
	.size	slist_wc_append, .Lfunc_end0-slist_wc_append
	.cfi_endproc
                                        # -- End function
	.globl	slist_wc_free_all       # -- Begin function slist_wc_free_all
	.type	slist_wc_free_all,@function
slist_wc_free_all:                      # @slist_wc_free_all
	.cfi_startproc
# %bb.0:
	testq	%rdi, %rdi
	je	.LBB1_1
# %bb.2:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	(%rdi), %rdi
	callq	curl_slist_free_all
	movq	%rbx, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	myFree                  # TAILCALL
.LBB1_1:
	retq
.Lfunc_end1:
	.size	slist_wc_free_all, .Lfunc_end1-slist_wc_free_all
	.cfi_endproc
                                        # -- End function
	.globl	tool_debug_cb           # -- Begin function tool_debug_cb
	.type	tool_debug_cb,@function
tool_debug_cb:                          # @tool_debug_cb
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, %r13
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	movl	%esi, %r12d
	movq	1232(%r8), %rbx
	movq	8(%rbx), %r15
	cmpb	$0, 48(%rbx)
	je	.LBB2_3
# %bb.1:
	movq	%r15, %r14
	callq	tvnow
	movq	%rax, %r15
	movq	%rdx, %rbp
	cmpb	$1, tool_debug_cb.known_offset(%rip)
	jne	.LBB2_4
# %bb.2:
	movq	tool_debug_cb.epoch_offset(%rip), %rax
	jmp	.LBB2_5
.LBB2_3:
	movb	$0, 32(%rsp)
	jmp	.LBB2_6
.LBB2_4:
	xorl	%edi, %edi
	callq	time
	subq	%r15, %rax
	movq	%rax, tool_debug_cb.epoch_offset(%rip)
	movb	$1, tool_debug_cb.known_offset(%rip)
.LBB2_5:
	addq	%r15, %rax
	leaq	80(%rsp), %rdi
	movq	%rax, (%rdi)
	callq	localtime
	movl	8(%rax), %ecx
	movl	(%rax), %r9d
	movl	4(%rax), %r8d
	movq	%rbp, (%rsp)
	leaq	32(%rsp), %rdi
	movl	$20, %esi
	movl	$.L.str, %edx
	xorl	%eax, %eax
	callq	curl_msnprintf
	movq	%r14, %r15
.LBB2_6:
	movq	32(%rbx), %rax
	testq	%rax, %rax
	jne	.LBB2_7
# %bb.17:
	movq	24(%rbx), %rbp
	movl	$.L.str.1, %edi
	movq	%rbp, %rsi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB2_29
# %bb.18:
	movl	$.L.str.2, %edi
	movq	%rbp, %rsi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB2_31
# %bb.19:
	movl	$.L.str.3, %esi
	movq	%rbp, %rdi
	callq	fopen
	movq	%rax, 32(%rbx)
	movb	$1, 40(%rbx)
	jmp	.LBB2_7
.LBB2_29:
	movq	stdout(%rip), %rax
	jmp	.LBB2_30
.LBB2_31:
	movq	8(%rbx), %rax
.LBB2_30:
	movq	%rax, 32(%rbx)
.LBB2_7:
	testq	%rax, %rax
	cmovneq	%rax, %r15
	testq	%r15, %r15
	je	.LBB2_20
# %bb.8:
	movl	44(%rbx), %eax
	movl	%eax, 28(%rsp)          # 4-byte Spill
	cmpl	$3, %eax
	jne	.LBB2_21
# %bb.9:
	leal	-3(%r12), %eax
	cmpl	$4, %eax
	jae	.LBB2_24
# %bb.10:
	cmpb	$0, tool_debug_cb.traced_data(%rip)
	jne	.LBB2_78
# %bb.11:
	cmpb	$0, 6(%rbx)
	je	.LBB2_14
# %bb.12:
	cmpq	stderr(%rip), %r15
	je	.LBB2_78
# %bb.13:
	cmpq	stdout(%rip), %r15
	je	.LBB2_78
.LBB2_14:
	cmpb	$0, tool_debug_cb.newl(%rip)
	jne	.LBB2_16
# %bb.15:
	movl	%r12d, %eax
	movq	tool_debug_cb.s_infotype(,%rax,8), %rcx
	leaq	32(%rsp), %rdx
	movl	$.L.str.10, %esi
	movq	%r15, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
.LBB2_16:
	movl	$.L.str.11, %esi
	movq	%r15, %rdi
	movq	%r13, %rdx
	xorl	%eax, %eax
	callq	curl_mfprintf
	movb	$0, tool_debug_cb.newl(%rip)
	movb	$1, tool_debug_cb.traced_data(%rip)
	jmp	.LBB2_78
.LBB2_20:
	movl	$.L.str.4, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB2_78
.LBB2_21:
	cmpl	$6, %r12d
	ja	.LBB2_78
# %bb.22:
	movl	$.L.str.13, %ecx
	movl	%r12d, %eax
	jmpq	*.LJTI2_0(,%rax,8)
.LBB2_23:
	leaq	32(%rsp), %rdx
	movl	$.L.str.12, %esi
	movq	%r15, %rdi
	movl	%r13d, %ecx
	movq	16(%rsp), %r8           # 8-byte Reload
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB2_78
.LBB2_24:
	cmpl	$2, %r12d
	jae	.LBB2_32
# %bb.25:
	cmpb	$0, tool_debug_cb.newl(%rip)
	movq	16(%rsp), %rdi          # 8-byte Reload
	jne	.LBB2_27
# %bb.26:
	movl	%r12d, %eax
	movq	tool_debug_cb.s_infotype(,%rax,8), %rcx
	leaq	32(%rsp), %rdx
	movl	$.L.str.10, %esi
	movq	%r15, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	16(%rsp), %rdi          # 8-byte Reload
.LBB2_27:
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%r15, %rcx
	movq	%rdi, %rbx
	callq	fwrite
	testq	%r13, %r13
	je	.LBB2_42
# %bb.28:
	cmpb	$10, -1(%r13,%rbx)
	jmp	.LBB2_76
.LBB2_32:
	movq	16(%rsp), %rax          # 8-byte Reload
	jne	.LBB2_71
# %bb.33:
	testq	%r13, %r13
	je	.LBB2_42
# %bb.34:
	movq	%r15, %r14
	movq	%r13, %r15
	decq	%r15
	je	.LBB2_72
# %bb.35:                               # %.preheader
	xorl	%ebx, %ebx
	xorl	%ebp, %ebp
	xorl	%r12d, %r12d
.LBB2_36:                               # =>This Inner Loop Header: Depth=1
	cmpb	$10, (%rax,%rbp)
	jne	.LBB2_40
# %bb.37:                               #   in Loop: Header=BB2_36 Depth=1
	cmpb	$0, tool_debug_cb.newl(%rip)
	jne	.LBB2_39
# %bb.38:                               #   in Loop: Header=BB2_36 Depth=1
	movl	$.L.str.10, %esi
	movl	$.L.str.7, %ecx
	movq	%r14, %rdi
	leaq	32(%rsp), %rdx
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	16(%rsp), %rax          # 8-byte Reload
.LBB2_39:                               #   in Loop: Header=BB2_36 Depth=1
	addq	%rax, %r12
	leaq	(%rbx,%rbp), %rsi
	incq	%rsi
	incq	%rbp
	movl	$1, %edx
	movq	%r12, %rdi
	movq	%r14, %rcx
	callq	fwrite
	movq	16(%rsp), %rax          # 8-byte Reload
	movb	$0, tool_debug_cb.newl(%rip)
	movq	%rbp, %r12
	jmp	.LBB2_41
.LBB2_40:                               #   in Loop: Header=BB2_36 Depth=1
	incq	%rbp
.LBB2_41:                               #   in Loop: Header=BB2_36 Depth=1
	movq	%r12, %rbx
	negq	%rbx
	cmpq	%r15, %rbp
	jne	.LBB2_36
	jmp	.LBB2_73
.LBB2_42:
	xorl	%eax, %eax
	jmp	.LBB2_77
.LBB2_43:
	movl	$.L.str.15, %ecx
	jmp	.LBB2_48
.LBB2_44:
	movl	$.L.str.16, %ecx
	jmp	.LBB2_48
.LBB2_45:
	movl	$.L.str.14, %ecx
	jmp	.LBB2_48
.LBB2_46:
	movl	$.L.str.17, %ecx
	jmp	.LBB2_48
.LBB2_47:
	movl	$.L.str.18, %ecx
.LBB2_48:
	leaq	32(%rsp), %rdx
	movl	$.L.str.19, %esi
	movq	%r15, %rdi
	movq	%r13, %r8
	movq	%r13, %r9
	xorl	%eax, %eax
	callq	curl_mfprintf
	testq	%r13, %r13
	je	.LBB2_70
# %bb.49:
	cmpl	$2, 28(%rsp)            # 4-byte Folded Reload
	movl	$64, %eax
	movl	$16, %r12d
	cmoveq	%rax, %r12
	movq	16(%rsp), %rax          # 8-byte Reload
	addq	$2, %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	movq	%r12, %rax
	negq	%rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	xorl	%ebx, %ebx
.LBB2_50:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_52 Depth 2
                                        #     Child Loop BB2_57 Depth 2
	movl	$.L.str.20, %esi
	movq	%r15, %rdi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	callq	curl_mfprintf
	cmpl	$1, 28(%rsp)            # 4-byte Folded Reload
	jne	.LBB2_56
# %bb.51:                               # %.preheader2
                                        #   in Loop: Header=BB2_50 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	leaq	(%rax,%rbx), %r14
	xorl	%ebp, %ebp
.LBB2_52:                               #   Parent Loop BB2_50 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	(%rbx,%rbp), %rax
	cmpq	%r13, %rax
	jae	.LBB2_54
# %bb.53:                               #   in Loop: Header=BB2_52 Depth=2
	movzbl	(%r14,%rbp), %edx
	movl	$.L.str.21, %esi
	movq	%r15, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB2_55
.LBB2_54:                               #   in Loop: Header=BB2_52 Depth=2
	movl	$.L.str.22, %edi
	movq	%r15, %rsi
	callq	fputs
.LBB2_55:                               #   in Loop: Header=BB2_52 Depth=2
	incq	%rbp
	cmpq	%r12, %rbp
	jb	.LBB2_52
.LBB2_56:                               #   in Loop: Header=BB2_50 Depth=1
	movq	%r15, %rbp
	movq	72(%rsp), %rax          # 8-byte Reload
	leaq	(%rax,%rbx), %r15
	xorl	%r14d, %r14d
.LBB2_57:                               #   Parent Loop BB2_50 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	(%rbx,%r14), %rax
	cmpq	%r13, %rax
	jae	.LBB2_69
# %bb.58:                               #   in Loop: Header=BB2_57 Depth=2
	cmpl	$2, 28(%rsp)            # 4-byte Folded Reload
	jne	.LBB2_65
# %bb.59:                               #   in Loop: Header=BB2_57 Depth=2
	leaq	(%rbx,%r14), %rcx
	incq	%rcx
	movb	-2(%r15,%r14), %al
	cmpq	%r13, %rcx
	jae	.LBB2_62
# %bb.60:                               #   in Loop: Header=BB2_57 Depth=2
	cmpb	$13, %al
	jne	.LBB2_62
# %bb.61:                               #   in Loop: Header=BB2_57 Depth=2
	cmpb	$10, -1(%r15,%r14)
	je	.LBB2_67
.LBB2_62:                               #   in Loop: Header=BB2_57 Depth=2
	movzbl	%al, %edx
	testb	%al, %al
	movl	$46, %ecx
	cmovsl	%ecx, %edx
	cmpb	$31, %al
	cmovbel	%ecx, %edx
	movl	$.L.str.23, %esi
	movq	%rbp, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	leaq	(%rbx,%r14), %rax
	addq	$2, %rax
	cmpq	%r13, %rax
	jae	.LBB2_66
# %bb.63:                               #   in Loop: Header=BB2_57 Depth=2
	cmpb	$13, -1(%r15,%r14)
	jne	.LBB2_66
# %bb.64:                               #   in Loop: Header=BB2_57 Depth=2
	cmpb	$10, (%r15,%r14)
	jne	.LBB2_66
	jmp	.LBB2_68
.LBB2_65:                               #   in Loop: Header=BB2_57 Depth=2
	movzbl	-2(%r15,%r14), %eax
	testb	%al, %al
	movl	%eax, %edx
	movl	$46, %ecx
	cmovsl	%ecx, %edx
	cmpb	$31, %al
	cmovbel	%ecx, %edx
	movl	$.L.str.23, %esi
	movq	%rbp, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
.LBB2_66:                               #   in Loop: Header=BB2_57 Depth=2
	incq	%r14
	cmpq	%r12, %r14
	jb	.LBB2_57
	jmp	.LBB2_69
.LBB2_67:                               #   in Loop: Header=BB2_50 Depth=1
	addq	64(%rsp), %rbx          # 8-byte Folded Reload
	addq	%r14, %rbx
	addq	$2, %rbx
	jmp	.LBB2_69
.LBB2_68:                               #   in Loop: Header=BB2_50 Depth=1
	addq	64(%rsp), %rbx          # 8-byte Folded Reload
	addq	%r14, %rbx
	addq	$3, %rbx
.LBB2_69:                               #   in Loop: Header=BB2_50 Depth=1
	movq	%rbp, %r15
	movl	$10, %edi
	movq	%rbp, %rsi
	callq	fputc
	addq	%r12, %rbx
	cmpq	%r13, %rbx
	jb	.LBB2_50
.LBB2_70:
	movq	%r15, %rdi
	callq	fflush
	jmp	.LBB2_78
.LBB2_71:
	xorl	%eax, %eax
	movb	%al, tool_debug_cb.newl(%rip)
	movb	%al, tool_debug_cb.traced_data(%rip)
	jmp	.LBB2_78
.LBB2_72:
	xorl	%r12d, %r12d
	xorl	%ebx, %ebx
.LBB2_73:
	cmpb	$0, tool_debug_cb.newl(%rip)
	jne	.LBB2_75
# %bb.74:
	leaq	32(%rsp), %rdx
	movl	$.L.str.10, %esi
	movl	$.L.str.7, %ecx
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	16(%rsp), %rax          # 8-byte Reload
.LBB2_75:
	addq	%rax, %r12
	addq	%r13, %rbx
	movl	$1, %edx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rcx
	movq	%rax, %rbx
	callq	fwrite
	cmpb	$10, -1(%rbx,%r13)
.LBB2_76:
	setne	%al
.LBB2_77:
	movb	%al, tool_debug_cb.newl(%rip)
	movb	$0, tool_debug_cb.traced_data(%rip)
.LBB2_78:
	xorl	%eax, %eax
	addq	$88, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end2:
	.size	tool_debug_cb, .Lfunc_end2-tool_debug_cb
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI2_0:
	.quad	.LBB2_23
	.quad	.LBB2_43
	.quad	.LBB2_48
	.quad	.LBB2_44
	.quad	.LBB2_45
	.quad	.LBB2_46
	.quad	.LBB2_47
                                        # -- End function
	.text
	.globl	tvnow                   # -- Begin function tvnow
	.type	tvnow,@function
tvnow:                                  # @tvnow
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	subq	$32, %rsp
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -16
	movq	%rsp, %rsi
	movl	$1, %edi
	callq	clock_gettime
	testl	%eax, %eax
	je	.LBB3_1
# %bb.2:
	leaq	16(%rsp), %rbx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	callq	gettimeofday
	movq	(%rbx), %rcx
	movq	8(%rbx), %rdx
	jmp	.LBB3_3
.LBB3_1:
	movq	(%rsp), %rcx
	movq	%rcx, 16(%rsp)
	movabsq	$2361183241434822607, %rax # imm = 0x20C49BA5E353F7CF
	imulq	8(%rsp)
	movq	%rdx, %rax
	shrq	$63, %rax
	shrq	$7, %rdx
	addl	%eax, %edx
	movslq	%edx, %rdx
	movq	%rdx, 24(%rsp)
.LBB3_3:
	movq	%rcx, %rax
	addq	$32, %rsp
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end3:
	.size	tvnow, .Lfunc_end3-tvnow
	.cfi_endproc
                                        # -- End function
	.globl	warnf                   # -- Begin function warnf
	.type	warnf,@function
warnf:                                  # @warnf
	.cfi_startproc
# %bb.0:
	subq	$200, %rsp
	.cfi_def_cfa_offset 208
	movq	%rdx, %r10
	movq	%rsi, %rdx
	testb	%al, %al
	je	.LBB4_2
# %bb.1:
	movaps	%xmm0, 48(%rsp)
	movaps	%xmm1, 64(%rsp)
	movaps	%xmm2, 80(%rsp)
	movaps	%xmm3, 96(%rsp)
	movaps	%xmm4, 112(%rsp)
	movaps	%xmm5, 128(%rsp)
	movaps	%xmm6, 144(%rsp)
	movaps	%xmm7, 160(%rsp)
.LBB4_2:
	movq	%rsp, %rax
	movq	%r10, 16(%rax)
	movq	%rcx, 24(%rax)
	movq	%r8, 32(%rax)
	movq	%r9, 40(%rax)
	leaq	176(%rsp), %rcx
	movq	%rax, 16(%rcx)
	leaq	208(%rsp), %rax
	movq	%rax, 8(%rcx)
	movabsq	$206158430224, %rax     # imm = 0x3000000010
	movq	%rax, (%rcx)
	movl	$.L.str.1.1139, %esi
	callq	voutf
	addq	$200, %rsp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end4:
	.size	warnf, .Lfunc_end4-warnf
	.cfi_endproc
                                        # -- End function
	.type	voutf,@function         # -- Begin function voutf
voutf:                                  # @voutf
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, %rbx
	movq	%rdx, %rbp
	movq	%rdi, %r12
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	%rsi, %rdi
	callq	strlen
	cmpb	$0, 4(%r12)
	je	.LBB5_1
.LBB5_10:
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB5_1:
	.cfi_def_cfa_offset 80
	movq	%rax, %r15
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	callq	curl_mvaprintf
	testq	%rax, %rax
	je	.LBB5_10
# %bb.2:
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	%rax, %rdi
	callq	strlen
	testq	%rax, %rax
	je	.LBB5_9
# %bb.3:
	movq	%rax, %r13
	movl	$79, %r14d
	subq	%r15, %r14
	movl	$78, %eax
	subq	%r15, %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	(%rsp), %rbx            # 8-byte Reload
.LBB5_4:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_6 Depth 2
	movq	8(%r12), %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	fputs
	cmpq	%r14, %r13
	jbe	.LBB5_11
# %bb.5:                                # %.preheader
                                        #   in Loop: Header=BB5_4 Depth=1
	movq	%r14, %r15
.LBB5_6:                                #   Parent Loop BB5_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-1(%rbx,%r15), %edi
	callq	Curl_isspace
	cmpq	$1, %r15
	leaq	-1(%r15), %r15
	je	.LBB5_8
# %bb.7:                                #   in Loop: Header=BB5_6 Depth=2
	testl	%eax, %eax
	je	.LBB5_6
.LBB5_8:                                #   in Loop: Header=BB5_4 Depth=1
	testq	%r15, %r15
	cmoveq	8(%rsp), %r15           # 8-byte Folded Reload
	leaq	1(%r15), %rbp
	movq	8(%r12), %rcx
	movl	$1, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	callq	fwrite
	movq	8(%r12), %rsi
	movl	$.L.str.4.1136, %edi
	callq	fputs
	addq	%r15, %rbx
	incq	%rbx
	subq	%rbp, %r13
	jne	.LBB5_4
	jmp	.LBB5_9
.LBB5_11:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	callq	fputs
.LBB5_9:
	movq	(%rsp), %rdi            # 8-byte Reload
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	curl_free               # TAILCALL
.Lfunc_end5:
	.size	voutf, .Lfunc_end5-voutf
	.cfi_endproc
                                        # -- End function
	.globl	Curl_isspace            # -- Begin function Curl_isspace
	.type	Curl_isspace,@function
Curl_isspace:                           # @Curl_isspace
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$127, %edi
	ja	.LBB6_2
# %bb.1:
	movl	%edi, %eax
	movzbl	ascii(%rax), %eax
	andl	$8, %eax
.LBB6_2:
	retq
.Lfunc_end6:
	.size	Curl_isspace, .Lfunc_end6-Curl_isspace
	.cfi_endproc
                                        # -- End function
	.globl	tool_header_cb          # -- Begin function tool_header_cb
	.type	tool_header_cb,@function
tool_header_cb:                         # @tool_header_cb
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, %r12
	xorl	%eax, %eax
	movq	%rax, 24(%rsp)
	testq	%rsi, %rsi
	sete	%al
	testq	%rdx, %rdx
	sete	%cl
	orb	%al, %cl
	movzbl	%cl, %ecx
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.LBB7_1
# %bb.2:
	movq	%rsi, %r13
	movq	%rdi, %rbx
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	%rdx, %r15
	imulq	%rsi, %r15
	cmpq	$0, 208(%rax)
	je	.LBB7_6
# %bb.3:
	movq	240(%r12), %rcx
	testq	%rcx, %rcx
	je	.LBB7_6
# %bb.4:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	callq	fwrite
	cmpq	%r15, %rax
	jne	.LBB7_81
# %bb.5:
	movq	240(%r12), %rdi
	callq	fflush
	movq	16(%r12), %rax
.LBB7_6:
	movq	%rbx, (%rsp)            # 8-byte Spill
	leaq	(%rbx,%r15), %r14
	cmpq	$0, 720(%rax)
	je	.LBB7_17
# %bb.7:
	cmpq	$0, 280(%r12)
	je	.LBB7_17
# %bb.8:
	movl	$.L.str.24, %esi
	movl	$5, %edx
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB7_17
# %bb.9:
	cmpb	$10, -1(%r14)
	jne	.LBB7_17
# %bb.10:
	leaq	-1(%r14), %rbx
	movq	(%rsp), %rax            # 8-byte Reload
	leaq	5(%rax), %rbp
.LBB7_11:                               # =>This Inner Loop Header: Depth=1
	movzbl	(%rbp), %edi
	callq	Curl_isspace
	cmpq	%rbx, %rbp
	leaq	1(%rbp), %rbp
	jae	.LBB7_13
# %bb.12:                               #   in Loop: Header=BB7_11 Depth=1
	testl	%eax, %eax
	jne	.LBB7_11
.LBB7_13:                               # %.preheader5
	decq	%rbp
	movq	%r14, %rbx
.LBB7_14:                               # =>This Inner Loop Header: Depth=1
	movzbl	-1(%rbx), %edi
	decq	%rbx
	callq	Curl_isspace
	testl	%eax, %eax
	jne	.LBB7_14
# %bb.15:
	subq	%rbp, %rbx
	jb	.LBB7_17
# %bb.16:
	incq	%rbx
	movq	280(%r12), %rcx
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movq	%rbx, %rdx
	callq	fwrite
	movq	280(%r12), %rsi
	movl	$10, %edi
	callq	fputc
	movq	280(%r12), %rdi
	callq	fflush
.LBB7_17:
	leaq	184(%r12), %r13
	movq	24(%r12), %rdi
	leaq	24(%rsp), %rdx
	movl	$2097200, %esi          # imm = 0x200030
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	cmpq	$21, %r15
	movq	(%rsp), %rbp            # 8-byte Reload
	jb	.LBB7_61
# %bb.18:
	cmpb	$0, 360(%r12)
	je	.LBB7_61
# %bb.19:
	movl	$.L.str.1.25, %edi
	movl	$20, %edx
	movq	%rbp, %rsi
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB7_61
# %bb.20:
	testb	$3, 24(%rsp)
	je	.LBB7_61
# %bb.21:
	movq	%r13, 32(%rsp)          # 8-byte Spill
	movq	%r15, 16(%rsp)          # 8-byte Spill
	leaq	20(%rbp), %r15
	leaq	-9(%r14), %rbp
	movabsq	$7308604897068083558, %r13 # imm = 0x656D616E656C6966
.LBB7_22:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_25 Depth 2
                                        #     Child Loop BB7_33 Depth 2
	cmpq	%r14, %r15
	jae	.LBB7_30
# %bb.23:                               #   in Loop: Header=BB7_22 Depth=1
	movb	(%r15), %al
	testb	%al, %al
	je	.LBB7_30
# %bb.24:                               # %.preheader1
                                        #   in Loop: Header=BB7_22 Depth=1
	incq	%r15
	movq	%r15, %rbx
.LBB7_25:                               #   Parent Loop BB7_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	%al, %edi
	callq	Curl_isalpha
	testl	%eax, %eax
	jne	.LBB7_29
# %bb.26:                               #   in Loop: Header=BB7_25 Depth=2
	leaq	1(%rbx), %r15
	cmpq	%r14, %rbx
	jae	.LBB7_28
# %bb.27:                               #   in Loop: Header=BB7_25 Depth=2
	movb	(%rbx), %al
	movq	%r15, %rbx
	testb	%al, %al
	jne	.LBB7_25
.LBB7_28:                               # %.loopexit2split
                                        #   in Loop: Header=BB7_22 Depth=1
	decq	%r15
	jmp	.LBB7_30
.LBB7_29:                               # %..loopexit2_crit_edge
                                        #   in Loop: Header=BB7_22 Depth=1
	decq	%rbx
	movq	%rbx, %r15
.LBB7_30:                               #   in Loop: Header=BB7_22 Depth=1
	cmpq	%rbp, %r15
	ja	.LBB7_59
# %bb.31:                               #   in Loop: Header=BB7_22 Depth=1
	movq	(%r15), %rax
	xorq	%r13, %rax
	movzbl	8(%r15), %ecx
	xorq	$61, %rcx
	orq	%rax, %rcx
	je	.LBB7_36
# %bb.32:                               #   in Loop: Header=BB7_22 Depth=1
	cmpq	%r14, %r15
	jae	.LBB7_22
.LBB7_33:                               #   Parent Loop BB7_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpb	$59, (%r15)
	je	.LBB7_22
# %bb.34:                               #   in Loop: Header=BB7_33 Depth=2
	incq	%r15
	cmpq	%r15, %r14
	jne	.LBB7_33
# %bb.35:                               #   in Loop: Header=BB7_22 Depth=1
	movq	%r14, %r15
	jmp	.LBB7_22
.LBB7_1:
	movq	%rcx, %rax
	jmp	.LBB7_81
.LBB7_36:
	addq	$9, %r15
	movq	(%rsp), %rbx            # 8-byte Reload
	subq	%r15, %rbx
	movq	16(%rsp), %rax          # 8-byte Reload
	leaq	(%rbx,%rax), %rdi
	incq	%rdi
	callq	myMalloc
	testq	%rax, %rax
	je	.LBB7_59
# %bb.37:
	movq	%rax, %r13
	addq	16(%rsp), %rbx          # 8-byte Folded Reload
	movq	%rax, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	callq	memcpy
	movb	$0, (%r13,%rbx)
	movzbl	(%r13), %eax
	cmpl	$39, %eax
	je	.LBB7_39
# %bb.38:
	movl	$59, %esi
	movq	%r13, %rbx
	cmpb	$34, %al
	jne	.LBB7_40
.LBB7_39:
	leaq	1(%r13), %rbx
	movl	%eax, %esi
.LBB7_40:
	movq	%rbx, %rdi
	callq	strchr
	testq	%rax, %rax
	je	.LBB7_42
# %bb.41:
	movb	$0, (%rax)
.LBB7_42:
	movq	%rbx, %rdi
	movl	$47, %esi
	callq	strrchr
	testq	%rax, %rax
	je	.LBB7_45
# %bb.43:
	cmpb	$0, 1(%rax)
	je	.LBB7_58
# %bb.44:
	incq	%rax
	movq	%rax, %rbx
.LBB7_45:
	movq	%rbx, %rdi
	movl	$92, %esi
	callq	strrchr
	testq	%rax, %rax
	je	.LBB7_48
# %bb.46:
	cmpb	$0, 1(%rax)
	je	.LBB7_58
# %bb.47:
	incq	%rax
	movq	%rax, %rbx
.LBB7_48:
	movq	%rbx, %rdi
	movl	$13, %esi
	callq	strchr
	testq	%rax, %rax
	je	.LBB7_50
# %bb.49:
	movb	$0, (%rax)
.LBB7_50:
	movq	%rbx, %rdi
	movl	$10, %esi
	callq	strchr
	testq	%rax, %rax
	je	.LBB7_52
# %bb.51:
	movb	$0, (%rax)
.LBB7_52:
	cmpq	%rbx, %r13
	je	.LBB7_54
# %bb.53:
	movq	%rbx, %rdi
	callq	strlen
	leaq	1(%rax), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	callq	memmove
.LBB7_54:
	cmpq	$0, 200(%r12)
	je	.LBB7_56
# %bb.55:
	movq	%r13, %rdi
	callq	myFree
	jmp	.LBB7_57
.LBB7_58:
	movq	%r13, %rdi
	callq	myFree
	jmp	.LBB7_59
.LBB7_56:
	movq	%r13, 184(%r12)
	movl	$65793, 192(%r12)       # imm = 0x10101
	movb	$0, 360(%r12)
	movq	16(%r12), %rsi
	movq	32(%rsp), %rdi          # 8-byte Reload
	callq	tool_create_output_file
	testb	%al, %al
	je	.LBB7_57
.LBB7_59:
	cmpq	$0, 200(%r12)
	movq	16(%rsp), %r15          # 8-byte Reload
	movq	(%rsp), %rbp            # 8-byte Reload
	movq	32(%rsp), %r13          # 8-byte Reload
	jne	.LBB7_61
# %bb.60:
	movq	16(%r12), %rsi
	movq	%r13, %rdi
	callq	tool_create_output_file
	testb	%al, %al
	je	.LBB7_57
.LBB7_61:
	movq	328(%r12), %rbx
	cmpq	$0, 808(%rbx)
	je	.LBB7_70
# %bb.62:
	movq	%rbp, %rdi
	movl	$58, %esi
	movq	%r15, %rdx
	callq	memchr
	testq	%rax, %rax
	je	.LBB7_67
# %bb.63:
	cmpb	$0, 376(%r12)
	je	.LBB7_64
# %bb.65:
	movq	$0, 368(%r12)
	movl	$1, %eax
	jmp	.LBB7_66
.LBB7_67:
	movb	(%rbp), %al
	cmpb	$13, %al
	je	.LBB7_69
# %bb.68:
	cmpb	$10, %al
	jne	.LBB7_70
.LBB7_69:
	movb	$1, 376(%r12)
	jmp	.LBB7_70
.LBB7_64:
	movq	368(%r12), %rax
	incq	%rax
.LBB7_66:
	movb	$0, 376(%r12)
	movq	%rax, 368(%r12)
.LBB7_70:
	cmpb	$0, 455(%rbx)
	je	.LBB7_80
# %bb.71:
	testl	$263171, 24(%rsp)       # imm = 0x40403
	je	.LBB7_80
# %bb.72:
	cmpq	$0, 200(%r12)
	jne	.LBB7_74
# %bb.73:
	movq	16(%r12), %rsi
	movq	%r13, %rdi
	callq	tool_create_output_file
	movl	%eax, %ecx
	movq	8(%rsp), %rax           # 8-byte Reload
	testb	%cl, %cl
	je	.LBB7_81
.LBB7_74:
	movq	320(%r12), %rax
	cmpb	$0, 6(%rax)
	je	.LBB7_78
# %bb.75:
	cmpb	$0, 65(%rax)
	je	.LBB7_78
# %bb.76:
	movq	(%rsp), %rdi            # 8-byte Reload
	movl	$58, %esi
	movq	%r15, %rdx
	callq	memchr
	testq	%rax, %rax
	je	.LBB7_78
# %bb.77:
	movq	%rax, %rbp
	movq	%rax, %rbx
	movq	(%rsp), %rcx            # 8-byte Reload
	subq	%rcx, %rbx
	movq	200(%r12), %rdi
	movl	$.L.str.3.27, %esi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	callq	curl_mfprintf
	incq	%rbp
	notq	%rbx
	addq	%r15, %rbx
	movq	200(%r12), %rcx
	movl	$1, %edx
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	jmp	.LBB7_79
.LBB7_78:
	movq	200(%r12), %rcx
	movl	$1, %edx
	movq	(%rsp), %rdi            # 8-byte Reload
	movq	%r15, %rsi
.LBB7_79:
	callq	fwrite
.LBB7_80:
	movq	%r15, %rax
.LBB7_81:
	addq	$40, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB7_57:
	.cfi_def_cfa_offset 96
	movq	8(%rsp), %rax           # 8-byte Reload
	jmp	.LBB7_81
.Lfunc_end7:
	.size	tool_header_cb, .Lfunc_end7-tool_header_cb
	.cfi_endproc
                                        # -- End function
	.globl	Curl_isalpha            # -- Begin function Curl_isalpha
	.type	Curl_isalpha,@function
Curl_isalpha:                           # @Curl_isalpha
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$127, %edi
	ja	.LBB8_2
# %bb.1:
	movl	%edi, %eax
	movzbl	ascii(%rax), %eax
	andl	$3, %eax
.LBB8_2:
	retq
.Lfunc_end8:
	.size	Curl_isalpha, .Lfunc_end8-Curl_isalpha
	.cfi_endproc
                                        # -- End function
	.globl	tool_create_output_file # -- Begin function tool_create_output_file
	.type	tool_create_output_file,@function
tool_create_output_file:                # @tool_create_output_file
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	1232(%rsi), %r14
	movq	(%rdi), %rax
	testq	%rax, %rax
	je	.LBB9_2
# %bb.1:
	cmpb	$0, (%rax)
	je	.LBB9_2
# %bb.3:
	movq	%rdi, %rbx
	cmpb	$0, 9(%rdi)
	je	.LBB9_12
# %bb.4:
	movq	200(%rsi), %rsi
	testq	%rsi, %rsi
	je	.LBB9_5
# %bb.6:
	movl	$.L.str.1.36, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	callq	curl_maprintf
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB9_7
# %bb.11:
	xorl	%ebx, %ebx
	movl	$.L.str.2.38, %esi
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	errorf
	jmp	.LBB9_16
.LBB9_2:
	xorl	%ebx, %ebx
	movl	$.L.str.35, %esi
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB9_16
.LBB9_12:
	movl	$.L.str.3.37, %esi
	movq	%rax, %rdi
	callq	fopen
	movq	%rax, %r12
	jmp	.LBB9_13
.LBB9_5:
	xorl	%r15d, %r15d
.LBB9_7:
	xorl	%r12d, %r12d
	movq	%rax, %rdi
	movl	$193, %esi
	movl	$438, %edx              # imm = 0x1B6
	xorl	%eax, %eax
	callq	open
	cmpl	$-1, %eax
	je	.LBB9_10
# %bb.8:
	movl	%eax, %ebp
	movl	$.L.str.3.37, %esi
	movl	%eax, %edi
	callq	fdopen
	movq	%rax, %r12
	testq	%rax, %rax
	jne	.LBB9_10
# %bb.9:
	movl	%ebp, %edi
	callq	close
	xorl	%r12d, %r12d
.LBB9_10:
	movq	%r15, %rdi
	callq	myFree
.LBB9_13:
	testq	%r12, %r12
	je	.LBB9_14
# %bb.15:
	movw	$257, 10(%rbx)          # imm = 0x101
	movq	%r12, 16(%rbx)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 24(%rbx)
	movb	$1, %bl
	jmp	.LBB9_16
.LBB9_14:
	movq	(%rbx), %rbp
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	xorl	%ebx, %ebx
	movl	$.L.str.4.39, %esi
	movq	%r14, %rdi
	movq	%rbp, %rdx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	warnf
.LBB9_16:
	movl	%ebx, %eax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end9:
	.size	tool_create_output_file, .Lfunc_end9-tool_create_output_file
	.cfi_endproc
                                        # -- End function
	.globl	errorf                  # -- Begin function errorf
	.type	errorf,@function
errorf:                                 # @errorf
	.cfi_startproc
# %bb.0:
	subq	$200, %rsp
	.cfi_def_cfa_offset 208
	movq	%rsi, %r10
	testb	%al, %al
	je	.LBB10_2
# %bb.1:
	movaps	%xmm0, 48(%rsp)
	movaps	%xmm1, 64(%rsp)
	movaps	%xmm2, 80(%rsp)
	movaps	%xmm3, 96(%rsp)
	movaps	%xmm4, 112(%rsp)
	movaps	%xmm5, 128(%rsp)
	movaps	%xmm6, 144(%rsp)
	movaps	%xmm7, 160(%rsp)
.LBB10_2:
	movq	%r9, 40(%rsp)
	movq	%r8, 32(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 16(%rsp)
	cmpb	$0, 4(%rdi)
	jne	.LBB10_4
# %bb.3:
	movq	%rsp, %rax
	leaq	176(%rsp), %rcx
	movq	%rax, 16(%rcx)
	leaq	208(%rsp), %rax
	movq	%rax, 8(%rcx)
	movabsq	$206158430224, %rax     # imm = 0x3000000010
	movq	%rax, (%rcx)
	movl	$.L.str.2.1142, %esi
	movq	%r10, %rdx
	callq	voutf
.LBB10_4:
	addq	$200, %rsp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end10:
	.size	errorf, .Lfunc_end10-errorf
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function tool_progress_cb
.LCPI11_0:
	.quad	4636737291354636288     # double 100
	.text
	.globl	tool_progress_cb
	.type	tool_progress_cb,@function
tool_progress_cb:                       # @tool_progress_cb
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$344, %rsp              # imm = 0x158
	.cfi_def_cfa_offset 400
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r8, %rbx
	movq	%rcx, %rbp
	movq	%rdx, %r12
	movq	%rsi, %r14
	movq	%rdi, %r13
	movabsq	$9223372036854775807, %r15 # imm = 0x7FFFFFFFFFFFFFFF
	callq	tvnow
	movq	%rax, %rdi
	movq	%rdx, %rsi
	movq	16(%r13), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	160(%r13), %rdx
	testq	%rdx, %rdx
	js	.LBB11_1
# %bb.2:
	movq	%r15, %rax
	subq	%rdx, %rax
	addq	%r14, %rbp
	leaq	(%rdx,%rbp), %rcx
	cmpq	%rbp, %rax
	cmovlq	%r15, %rcx
	addq	%r12, %rbx
	addq	%rbx, %rdx
	cmpq	%rbx, %rax
	cmovlq	%r15, %rdx
	movq	%rcx, %r15
	jmp	.LBB11_3
.LBB11_1:
	movq	%r15, %rdx
.LBB11_3:
	cmpl	$0, 112(%r13)
	je	.LBB11_4
# %bb.5:
	testq	%r15, %r15
	je	.LBB11_13
# %bb.6:
	cmpq	%rdx, 120(%r13)
	je	.LBB11_23
# %bb.7:
	movq	%rsi, %r14
	movq	%rdi, %r12
	movq	%rdx, %rbx
	movq	128(%r13), %rdx
	movq	136(%r13), %rcx
	callq	tvdiff
	movq	%rbx, %rdx
	cmpq	%r15, %rbx
	jge	.LBB11_9
# %bb.8:
	cmpq	$100, %rax
	jl	.LBB11_23
.LBB11_9:
	movl	112(%r13), %eax
	incl	%eax
	jmp	.LBB11_10
.LBB11_4:
	movq	%rsi, %r14
	movq	%rdi, %r12
	movl	$1, %eax
.LBB11_10:
	movl	%eax, 112(%r13)
	testq	%r15, %r15
	jle	.LBB11_21
# %bb.11:
	cmpq	120(%r13), %rdx
	je	.LBB11_21
# %bb.12:
	cmpq	%r15, %rdx
	cmovgeq	%rdx, %r15
	cvtsi2sd	%rdx, %xmm0
	cvtsi2sd	%r15, %xmm1
	divsd	%xmm1, %xmm0
	movsd	.LCPI11_0(%rip), %xmm1  # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsp)          # 8-byte Spill
	movl	144(%r13), %ebx
	addl	$-7, %ebx
	xorps	%xmm1, %xmm1
	cvtsi2sd	%ebx, %xmm1
	mulsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	cmpl	$257, %eax              # imm = 0x101
	movl	$256, %ecx              # imm = 0x100
	cmovll	%eax, %ecx
	movslq	%ecx, %rbp
	leaq	32(%rsp), %rdi
	movl	$35, %esi
	movq	%rdx, %r15
	movq	%rbp, %rdx
	callq	memset
	movb	$0, 32(%rsp,%rbp)
	leaq	304(%rsp), %rbp
	movl	$40, %esi
	movl	$.L.str.31, %edx
	movq	%rbp, %rdi
	movl	%ebx, %ecx
	xorl	%eax, %eax
	callq	curl_msnprintf
	movq	152(%r13), %rdi
	movq	%rbp, %rsi
	leaq	32(%rsp), %rdx
	movsd	8(%rsp), %xmm0          # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movb	$1, %al
	callq	curl_mfprintf
	movq	%r15, %rdx
	jmp	.LBB11_21
.LBB11_13:
	movq	%rdx, %r15
	movq	128(%r13), %rdx
	movq	136(%r13), %rcx
	movq	%rdi, %r12
	movq	%rsi, %r14
	callq	tvdiff
	cmpq	$100, %rax
	jl	.LBB11_23
# %bb.14:
	movq	120(%r13), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	144(%r13), %ecx
	leal	-2(%rcx), %eax
	movl	%eax, 20(%rsp)          # 4-byte Spill
	decl	%ecx
	xorl	%ebx, %ebx
	leaq	32(%rsp), %rdi
	movl	$256, %esi              # imm = 0x100
	movl	$.L.str.2.28, %edx
	movl	$.L.str.3.29, %r8d
                                        # kill: def $ecx killed $ecx killed $rcx
	xorl	%eax, %eax
	callq	curl_msnprintf
	movslq	172(%r13), %rax
	movb	$45, 36(%rsp,%rax)
	movl	$1028603181, 32(%rsp,%rax) # imm = 0x3D4F3D2D
	movl	168(%r13), %eax
	imulq	$1374389535, %rax, %rcx # imm = 0x51EB851F
	shrq	$38, %rcx
	imull	$200, %ecx, %ecx
	leal	5(%rax), %edx
	imulq	$1374389535, %rdx, %rdx # imm = 0x51EB851F
	shrq	$38, %rdx
	imull	$200, %edx, %edx
	negl	%edx
	leal	(%rax,%rdx), %r8d
	addl	$5, %r8d
	leal	10(%rax), %edx
	imulq	$1374389535, %rdx, %rdx # imm = 0x51EB851F
	shrq	$38, %rdx
	imull	$200, %edx, %edx
	negl	%edx
	leal	(%rax,%rdx), %ebp
	addl	$10, %ebp
	leal	15(%rax), %edx
	imulq	$1374389535, %rdx, %rdx # imm = 0x51EB851F
	shrq	$38, %rdx
	imull	$200, %edx, %edx
	negl	%edx
	leal	(%rax,%rdx), %edi
	addl	$15, %edi
                                        # kill: def $eax killed $eax killed $rax def $rax
	subl	%ecx, %eax
	movl	sinus(,%rax,4), %ecx
	movl	$1000000, %eax          # imm = 0xF4240
	xorl	%edx, %edx
	idivl	20(%rsp)                # 4-byte Folded Reload
	movl	%eax, %esi
	movl	%ecx, %eax
	xorl	%edx, %edx
	divl	%esi
	cltq
	movb	$35, %cl
	movb	%cl, 32(%rsp,%rax)
	movl	sinus(,%r8,4), %eax
	xorl	%edx, %edx
	divl	%esi
	cltq
	movb	%cl, 32(%rsp,%rax)
	movl	sinus(,%rbp,4), %eax
	xorl	%edx, %edx
	divl	%esi
	cltq
	movb	%cl, 32(%rsp,%rax)
	movl	sinus(,%rdi,4), %eax
	xorl	%edx, %edx
	divl	%esi
	cltq
	movb	%cl, 32(%rsp,%rax)
	movq	152(%r13), %rsi
	leaq	32(%rsp), %rdi
	callq	fputs
	movq	%r15, %rdx
	movl	168(%r13), %eax
	leal	2(%rax), %ecx
	addl	$-198, %eax
	cmpl	$199, %ecx
	cmovbel	%ecx, %eax
	movl	%eax, 168(%r13)
	cmpq	8(%rsp), %r15           # 8-byte Folded Reload
	je	.LBB11_16
# %bb.15:
	movl	176(%r13), %ebx
.LBB11_16:
	addl	172(%r13), %ebx
	movl	%ebx, 172(%r13)
	movl	144(%r13), %eax
	addl	$-6, %eax
	movl	$-1, %ecx
	cmpl	%eax, %ebx
	jge	.LBB11_19
# %bb.17:
	testl	%ebx, %ebx
	jns	.LBB11_20
# %bb.18:
	xorl	%eax, %eax
	movl	$1, %ecx
.LBB11_19:
	movl	%ecx, 176(%r13)
	movl	%eax, 172(%r13)
.LBB11_20:
	incl	112(%r13)
.LBB11_21:
	movq	152(%r13), %rdi
	movq	%rdx, %rbx
	callq	fflush
	movq	%rbx, 120(%r13)
	movq	%r12, 128(%r13)
	movq	%r14, 136(%r13)
	movq	24(%rsp), %rax          # 8-byte Reload
	cmpb	$0, 786(%rax)
	je	.LBB11_23
# %bb.22:
	movq	24(%rsp), %rax          # 8-byte Reload
	movb	$0, 786(%rax)
	movq	24(%r13), %rdi
	xorl	%esi, %esi
	callq	curl_easy_pause
.LBB11_23:
	xorl	%eax, %eax
	addq	$344, %rsp              # imm = 0x158
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end11:
	.size	tool_progress_cb, .Lfunc_end11-tool_progress_cb
	.cfi_endproc
                                        # -- End function
	.globl	tvdiff                  # -- Begin function tvdiff
	.type	tvdiff,@function
tvdiff:                                 # @tvdiff
	.cfi_startproc
# %bb.0:
	movq	%rsi, %rax
	subq	%rdx, %rdi
	imulq	$1000, %rdi, %rsi       # imm = 0x3E8
	subq	%rcx, %rax
	movabsq	$2361183241434822607, %rcx # imm = 0x20C49BA5E353F7CF
	imulq	%rcx
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$7, %rdx
	addq	%rdx, %rax
	addq	%rsi, %rax
	retq
.Lfunc_end12:
	.size	tvdiff, .Lfunc_end12-tvdiff
	.cfi_endproc
                                        # -- End function
	.globl	progressbarinit         # -- Begin function progressbarinit
	.type	progressbarinit,@function
progressbarinit:                        # @progressbarinit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r14
	movq	%rdi, %rbx
	xorps	%xmm0, %xmm0
	movups	%xmm0, 48(%rdi)
	movups	%xmm0, 32(%rdi)
	movups	%xmm0, 16(%rdi)
	movups	%xmm0, (%rdi)
	movq	$0, 64(%rdi)
	cmpb	$0, 88(%rsi)
	je	.LBB13_2
# %bb.1:
	movq	136(%r14), %rax
	movq	%rax, 48(%rbx)
.LBB13_2:
	movl	$.L.str.1.32, %edi
	callq	curl_getenv
	testq	%rax, %rax
	je	.LBB13_8
# %bb.3:
	movq	%rax, %r15
	movq	%rsp, %r13
	movq	%rax, %rdi
	movq	%r13, %rsi
	movl	$10, %edx
	callq	strtol
	movq	(%r13), %rbp
	cmpq	%r15, %rbp
	je	.LBB13_7
# %bb.4:
	movq	%rax, %r12
	movq	%r15, %rdi
	callq	strlen
	leaq	-21(%r12), %rcx
	cmpq	$9978, %rcx             # imm = 0x26FA
	ja	.LBB13_7
# %bb.5:
	movq	%r15, %rcx
	addq	%rax, %rcx
	cmpq	%rcx, %rbp
	jne	.LBB13_7
# %bb.6:
	movl	%r12d, 32(%rbx)
.LBB13_7:
	movq	%r15, %rdi
	callq	curl_free
.LBB13_8:
	movl	32(%rbx), %eax
	testl	%eax, %eax
	jne	.LBB13_11
# %bb.9:
	xorl	%ebp, %ebp
	movq	%rsp, %r15
	movl	$21523, %esi            # imm = 0x5413
	xorl	%edi, %edi
	movq	%r15, %rdx
	xorl	%eax, %eax
	callq	ioctl
	testl	%eax, %eax
	movzwl	2(%r15), %eax
	cmovel	%eax, %ebp
	cmpl	$21, %ebp
	jb	.LBB13_12
# %bb.10:
	movl	%ebp, 32(%rbx)
	jmp	.LBB13_11
.LBB13_12:
	movl	32(%rbx), %eax
	testl	%eax, %eax
	je	.LBB13_13
.LBB13_11:
	movl	$256, %ecx              # imm = 0x100
	cmpl	$257, %eax              # imm = 0x101
	jl	.LBB13_15
.LBB13_14:
	movl	%ecx, 32(%rbx)
.LBB13_15:
	movq	1232(%r14), %rax
	movq	8(%rax), %rax
	movq	%rax, 40(%rbx)
	movl	$150, 56(%rbx)
	movl	$1, 64(%rbx)
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB13_13:
	.cfi_def_cfa_offset 64
	movl	$79, %ecx
	jmp	.LBB13_14
.Lfunc_end13:
	.size	progressbarinit, .Lfunc_end13-progressbarinit
	.cfi_endproc
                                        # -- End function
	.globl	tool_read_cb            # -- Begin function tool_read_cb
	.type	tool_read_cb,@function
tool_read_cb:                           # @tool_read_cb
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rcx, %rbx
	movq	%rdi, %rax
	movl	(%rcx), %edi
	imulq	%rsi, %rdx
	movq	%rax, %rsi
	callq	read
	testq	%rax, %rax
	js	.LBB14_2
# %bb.1:
	xorl	%ecx, %ecx
	jmp	.LBB14_5
.LBB14_2:
	callq	__errno_location
	cmpl	$11, (%rax)
	jne	.LBB14_3
# %bb.4:
	movl	$0, (%rax)
	movl	$268435457, %eax        # imm = 0x10000001
	movb	$1, %cl
	jmp	.LBB14_5
.LBB14_3:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
.LBB14_5:
	movq	8(%rbx), %rdx
	movb	%cl, 786(%rdx)
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end14:
	.size	tool_read_cb, .Lfunc_end14-tool_read_cb
	.cfi_endproc
                                        # -- End function
	.globl	tool_readbusy_cb        # -- Begin function tool_readbusy_cb
	.type	tool_readbusy_cb,@function
tool_readbusy_cb:                       # @tool_readbusy_cb
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	16(%rdi), %rax
	cmpb	$0, 786(%rax)
	je	.LBB15_2
# %bb.1:
	movb	$0, 786(%rax)
	movq	24(%rbx), %rdi
	xorl	%esi, %esi
	callq	curl_easy_pause
.LBB15_2:
	xorl	%ecx, %ecx
	cmpb	$0, 104(%rbx)
	movl	$268435457, %eax        # imm = 0x10000001
	cmovnel	%ecx, %eax
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end15:
	.size	tool_readbusy_cb, .Lfunc_end15-tool_readbusy_cb
	.cfi_endproc
                                        # -- End function
	.globl	tool_seek_cb            # -- Begin function tool_seek_cb
	.type	tool_seek_cb,@function
tool_seek_cb:                           # @tool_seek_cb
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	movl	(%rdi), %edi
	callq	lseek
	xorl	%ecx, %ecx
	cmpq	$-1, %rax
	sete	%cl
	addl	%ecx, %ecx
	movl	%ecx, %eax
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end16:
	.size	tool_seek_cb, .Lfunc_end16-tool_seek_cb
	.cfi_endproc
                                        # -- End function
	.globl	tool_write_cb           # -- Begin function tool_write_cb
	.type	tool_write_cb,@function
tool_write_cb:                          # @tool_write_cb
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, %r12
	movq	%rsi, %rbp
	movq	16(%rcx), %r15
	movq	%rdx, %rbx
	imulq	%rsi, %rbx
	movq	1232(%r15), %rax
	movb	6(%rax), %r13b
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	sete	%r14b
	xorl	%eax, %eax
	cmpq	%rax, 200(%rcx)
	jne	.LBB17_2
# %bb.1:
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	leaq	184(%r12), %rdi
	movq	%r15, %rsi
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	callq	tool_create_output_file
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rdx           # 8-byte Reload
	testb	%al, %al
	je	.LBB17_14
.LBB17_2:
	testb	%r13b, %r13b
	je	.LBB17_7
# %bb.3:
	cmpq	$1999, 208(%r12)        # imm = 0x7CF
	jg	.LBB17_7
# %bb.4:
	cmpb	$0, 792(%r15)
	je	.LBB17_5
.LBB17_7:
	movq	200(%r12), %rcx
	movq	%rbp, %rsi
	callq	fwrite
	movq	%rax, %rbp
	cmpq	%rax, %rbx
	jne	.LBB17_9
# %bb.8:
	addq	%rbx, 208(%r12)
.LBB17_9:
	cmpb	$0, 786(%r15)
	je	.LBB17_11
# %bb.10:
	movb	$0, 786(%r15)
	movq	24(%r12), %rdi
	xorl	%esi, %esi
	callq	curl_easy_pause
.LBB17_11:
	cmpb	$0, 785(%r15)
	je	.LBB17_13
# %bb.12:
	movq	200(%r12), %rdi
	callq	fflush
	testl	%eax, %eax
	jne	.LBB17_14
.LBB17_13:
	movq	%rbp, %r14
.LBB17_14:
	movq	%r14, %rax
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB17_5:
	.cfi_def_cfa_offset 80
	movq	%rdi, %r13
	xorl	%esi, %esi
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%rbx, %rdx
	callq	memchr
	movq	%r13, %rdi
	movq	8(%rsp), %rdx           # 8-byte Reload
	testq	%rax, %rax
	je	.LBB17_7
# %bb.6:
	movq	1232(%r15), %rdi
	movl	$.L.str.5.40, %esi
	xorl	%eax, %eax
	callq	warnf
	movl	$1, 1196(%r15)
	jmp	.LBB17_14
.Lfunc_end17:
	.size	tool_write_cb, .Lfunc_end17-tool_write_cb
	.cfi_endproc
                                        # -- End function
	.globl	config_init             # -- Begin function config_init
	.type	config_init,@function
config_init:                            # @config_init
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %rbx
	xorl	%ebp, %ebp
	movl	$1336, %edx             # imm = 0x538
	xorl	%esi, %esi
	callq	memset
	movq	$-1, %rax
	movq	%rax, 152(%rbx)
	movb	%bpl, 788(%rbx)
	movb	%bpl, 795(%rbx)
	movq	$50, 184(%rbx)
	movq	%rax, 96(%rbx)
	movb	%bpl, 104(%rbx)
	movq	$-201327633, 112(%rbx)  # imm = 0xF3FFFBEF
	movb	%bpl, 120(%rbx)
	movq	$0, 128(%rbx)
	movb	$1, %al
	movb	%al, 1032(%rbx)
	movq	$200, 1208(%rbx)
	movb	%bpl, 784(%rbx)
	movb	%al, 797(%rbx)
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end18:
	.size	config_init, .Lfunc_end18-config_init
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4               # -- Begin function config_free
.LCPI19_0:
	.zero	16
	.text
	.globl	config_free
	.type	config_free,@function
config_free:                            # @config_free
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	testq	%rdi, %rdi
	je	.LBB19_5
# %bb.1:                                # %.preheader1
	movq	%rdi, %r14
	xorl	%r15d, %r15d
.LBB19_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	movq	1240(%r14), %r12
	movq	8(%r14), %rdi
	callq	myFree
	movq	%r15, 8(%r14)
	movq	16(%r14), %rdi
	callq	myFree
	movq	%r15, 16(%r14)
	movq	24(%r14), %rdi
	callq	myFree
	movq	%r15, 24(%r14)
	movq	56(%r14), %rdi
	callq	myFree
	movq	%r15, 56(%r14)
	movq	64(%r14), %rdi
	callq	myFree
	movq	%r15, 64(%r14)
	movq	32(%r14), %rdi
	callq	curl_slist_free_all
	movq	40(%r14), %rdi
	callq	myFree
	movq	%r15, 40(%r14)
	movq	48(%r14), %rdi
	callq	curl_slist_free_all
	movq	144(%r14), %rdi
	callq	myFree
	movq	%r15, 144(%r14)
	movq	160(%r14), %rdi
	callq	myFree
	movq	%r15, 160(%r14)
	movq	208(%r14), %rdi
	callq	myFree
	movq	%r15, 208(%r14)
	movq	216(%r14), %rdi
	callq	myFree
	movq	%r15, 216(%r14)
	movq	224(%r14), %rdi
	callq	myFree
	movq	%r15, 224(%r14)
	movq	256(%r14), %rdi
	callq	myFree
	movq	%r15, 256(%r14)
	movq	312(%r14), %rdi
	callq	myFree
	movq	%r15, 312(%r14)
	movq	328(%r14), %rdi
	callq	myFree
	movq	%r15, 328(%r14)
	movq	336(%r14), %rdi
	callq	myFree
	movq	%r15, 336(%r14)
	movq	344(%r14), %rdi
	callq	myFree
	movq	%r15, 344(%r14)
	movq	352(%r14), %rdi
	callq	myFree
	movq	%r15, 352(%r14)
	movq	360(%r14), %rdi
	callq	myFree
	movq	%r15, 360(%r14)
	movq	368(%r14), %rdi
	callq	myFree
	movq	%r15, 368(%r14)
	movq	376(%r14), %rdi
	callq	myFree
	movq	%r15, 376(%r14)
	movq	384(%r14), %rdi
	callq	myFree
	movq	%r15, 384(%r14)
	movq	304(%r14), %rdi
	callq	myFree
	movq	%r15, 304(%r14)
	movq	296(%r14), %rdi
	callq	myFree
	movq	%r15, 296(%r14)
	movq	288(%r14), %rdi
	callq	myFree
	movq	%r15, 288(%r14)
	movq	280(%r14), %rdi
	callq	myFree
	movq	%r15, 280(%r14)
	movq	400(%r14), %rdi
	callq	myFree
	movq	%r15, 400(%r14)
	movq	408(%r14), %rdi
	callq	myFree
	movq	%r15, 408(%r14)
	movq	416(%r14), %rdi
	callq	curl_slist_free_all
	movq	424(%r14), %rdi
	callq	myFree
	movq	%r15, 424(%r14)
	movq	464(%r14), %rdi
	callq	myFree
	movq	%r15, 464(%r14)
	movq	200(%r14), %rdi
	callq	myFree
	movq	%r15, 200(%r14)
	leaq	472(%r14), %r13
	movq	472(%r14), %rbx
	testq	%rbx, %rbx
	je	.LBB19_4
.LBB19_3:                               #   Parent Loop BB19_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx), %rbp
	movq	8(%rbx), %rdi
	callq	myFree
	movq	%r15, 8(%rbx)
	movq	16(%rbx), %rdi
	callq	myFree
	movq	%r15, 16(%rbx)
	movq	24(%rbx), %rdi
	callq	myFree
	movq	%rbx, %rdi
	callq	myFree
	movq	%rbp, %rbx
	testq	%rbp, %rbp
	jne	.LBB19_3
.LBB19_4:                               #   in Loop: Header=BB19_2 Depth=1
	xorps	%xmm0, %xmm0
	movups	%xmm0, 16(%r13)
	movups	%xmm0, (%r13)
	movq	512(%r14), %rdi
	callq	myFree
	movq	%r15, 512(%r14)
	movq	520(%r14), %rdi
	callq	myFree
	movq	%r15, 520(%r14)
	movq	528(%r14), %rdi
	callq	myFree
	movq	%r15, 528(%r14)
	movq	552(%r14), %rdi
	callq	myFree
	movq	%r15, 552(%r14)
	movq	560(%r14), %rdi
	callq	myFree
	movq	%r15, 560(%r14)
	movq	568(%r14), %rdi
	callq	myFree
	movq	%r15, 568(%r14)
	movq	576(%r14), %rdi
	callq	myFree
	movq	%r15, 576(%r14)
	movq	584(%r14), %rdi
	callq	myFree
	movq	%r15, 584(%r14)
	movq	320(%r14), %rdi
	callq	myFree
	movq	%r15, 320(%r14)
	movq	592(%r14), %rdi
	callq	myFree
	movq	%r15, 592(%r14)
	movq	600(%r14), %rdi
	callq	myFree
	movq	%r15, 600(%r14)
	movq	608(%r14), %rdi
	callq	myFree
	movq	%r15, 608(%r14)
	movq	616(%r14), %rdi
	callq	myFree
	movq	%r15, 616(%r14)
	movq	632(%r14), %rdi
	callq	myFree
	movq	%r15, 632(%r14)
	movq	640(%r14), %rdi
	callq	myFree
	movq	%r15, 640(%r14)
	movq	624(%r14), %rdi
	callq	myFree
	movq	%r15, 624(%r14)
	movq	648(%r14), %rdi
	callq	myFree
	movq	%r15, 648(%r14)
	movq	656(%r14), %rdi
	callq	myFree
	movq	%r15, 656(%r14)
	movq	664(%r14), %rdi
	callq	myFree
	movq	%r15, 664(%r14)
	movq	672(%r14), %rdi
	callq	myFree
	movq	%r15, 672(%r14)
	movq	680(%r14), %rdi
	callq	myFree
	movq	%r15, 680(%r14)
	movq	688(%r14), %rdi
	callq	myFree
	movq	%r15, 688(%r14)
	movq	696(%r14), %rdi
	callq	myFree
	movq	%r15, 696(%r14)
	movq	704(%r14), %rdi
	callq	myFree
	movq	%r15, 704(%r14)
	movq	712(%r14), %rdi
	callq	myFree
	movq	%r15, 712(%r14)
	movq	720(%r14), %rdi
	callq	myFree
	movq	%r15, 720(%r14)
	movq	728(%r14), %rdi
	callq	myFree
	movq	%r15, 728(%r14)
	movq	768(%r14), %rdi
	callq	myFree
	movq	%r15, 768(%r14)
	movq	744(%r14), %rdi
	callq	myFree
	movq	%r15, 744(%r14)
	movq	760(%r14), %rdi
	callq	myFree
	movq	%r15, 760(%r14)
	movq	1152(%r14), %rdi
	callq	myFree
	movq	%r15, 1152(%r14)
	movq	440(%r14), %rdi
	callq	myFree
	movq	%r15, 440(%r14)
	movq	1168(%r14), %rdi
	callq	myFree
	movq	%r15, 1168(%r14)
	movq	808(%r14), %rdi
	callq	myFree
	movq	%r15, 808(%r14)
	movq	128(%r14), %rdi
	callq	myFree
	movq	%r15, 128(%r14)
	movq	816(%r14), %rdi
	callq	curl_slist_free_all
	movq	824(%r14), %rdi
	callq	curl_slist_free_all
	movq	832(%r14), %rdi
	callq	curl_slist_free_all
	movq	896(%r14), %rdi
	callq	curl_slist_free_all
	movq	904(%r14), %rdi
	callq	curl_slist_free_all
	movq	928(%r14), %rdi
	callq	curl_mime_free
	movq	%r15, 928(%r14)
	movq	912(%r14), %rdi
	callq	tool_mime_free
	xorps	%xmm0, %xmm0
	movups	%xmm0, 912(%r14)
	movq	936(%r14), %rdi
	callq	curl_slist_free_all
	movq	944(%r14), %rdi
	callq	curl_slist_free_all
	movq	952(%r14), %rdi
	callq	curl_slist_free_all
	movq	992(%r14), %rdi
	callq	myFree
	movq	%r15, 992(%r14)
	movq	1016(%r14), %rdi
	callq	myFree
	movq	%r15, 1016(%r14)
	movq	1024(%r14), %rdi
	callq	myFree
	movq	%r15, 1024(%r14)
	movq	1072(%r14), %rdi
	callq	myFree
	movq	%r15, 1072(%r14)
	movq	1080(%r14), %rdi
	callq	myFree
	movq	%r15, 1080(%r14)
	movq	1224(%r14), %rdi
	callq	myFree
	movq	%r14, %rdi
	callq	myFree
	movq	%r12, %r14
	testq	%r12, %r12
	jne	.LBB19_2
.LBB19_5:
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end19:
	.size	config_free, .Lfunc_end19-config_free
	.cfi_endproc
                                        # -- End function
	.globl	tool_mime_free          # -- Begin function tool_mime_free
	.type	tool_mime_free,@function
tool_mime_free:                         # @tool_mime_free
	.cfi_startproc
# %bb.0:
	testq	%rdi, %rdi
	je	.LBB20_6
# %bb.1:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movq	72(%rdi), %rdi
	testq	%rdi, %rdi
	je	.LBB20_3
# %bb.2:
	callq	tool_mime_free
.LBB20_3:
	movq	16(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB20_5
# %bb.4:
	callq	tool_mime_free
.LBB20_5:
	movq	32(%rbx), %rdi
	callq	myFree
	xorl	%r14d, %r14d
	movq	%r14, 32(%rbx)
	movq	40(%rbx), %rdi
	callq	myFree
	movq	%r14, 40(%rbx)
	movq	48(%rbx), %rdi
	callq	myFree
	movq	%r14, 48(%rbx)
	movq	56(%rbx), %rdi
	callq	myFree
	movq	%r14, 56(%rbx)
	movq	24(%rbx), %rdi
	callq	myFree
	movq	%r14, 24(%rbx)
	movq	64(%rbx), %rdi
	callq	curl_slist_free_all
	movq	%rbx, %rdi
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	jmp	myFree                  # TAILCALL
.LBB20_6:
	retq
.Lfunc_end20:
	.size	tool_mime_free, .Lfunc_end20-tool_mime_free
	.cfi_endproc
                                        # -- End function
	.globl	create_dir_hierarchy    # -- Begin function create_dir_hierarchy
	.type	create_dir_hierarchy,@function
create_dir_hierarchy:                   # @create_dir_hierarchy
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	strlen
	movq	%rax, %r12
	movq	%rbx, %rdi
	callq	strdup
	movl	$27, %ebp
	testq	%rax, %rax
	je	.LBB21_6
# %bb.1:
	movq	%rax, %r14
	leaq	1(%r12), %rdi
	callq	myMalloc
	testq	%rax, %rax
	je	.LBB21_5
# %bb.2:
	movq	%rax, %r13
	movb	$0, (%rax)
	movl	$.L.str.41, %esi
	movq	%r14, %rdi
	callq	strtok
	testq	%rax, %rax
	je	.LBB21_3
# %bb.7:
	movq	%rax, %rbx
.LBB21_8:                               # =>This Inner Loop Header: Depth=1
	xorl	%ebp, %ebp
	movl	$.L.str.41, %esi
	xorl	%edi, %edi
	callq	strtok
	testq	%rax, %rax
	je	.LBB21_4
# %bb.9:                                #   in Loop: Header=BB21_8 Depth=1
	movq	%rbx, %rbp
	movq	%rax, %rbx
	movq	%r13, %rdi
	callq	strlen
	testq	%rax, %rax
	je	.LBB21_11
# %bb.10:                               #   in Loop: Header=BB21_8 Depth=1
	leaq	(%rax,%r13), %rdi
	movq	%r12, %rsi
	subq	%rax, %rsi
	movl	$.L.str.1.42, %edx
	movl	$.L.str.41, %ecx
	jmp	.LBB21_14
.LBB21_11:                              #   in Loop: Header=BB21_8 Depth=1
	cmpq	%rbp, %r14
	je	.LBB21_12
# %bb.13:                               #   in Loop: Header=BB21_8 Depth=1
	movl	$.L.str.1.42, %edx
	movl	$.L.str.41, %ecx
	movq	%r13, %rdi
	movq	%r12, %rsi
.LBB21_14:                              #   in Loop: Header=BB21_8 Depth=1
	movq	%rbp, %r8
	xorl	%eax, %eax
	callq	curl_msnprintf
.LBB21_15:                              #   in Loop: Header=BB21_8 Depth=1
	movq	%r13, %rdi
	movl	$488, %esi              # imm = 0x1E8
	callq	mkdir
	cmpl	$-1, %eax
	jne	.LBB21_8
# %bb.16:                               #   in Loop: Header=BB21_8 Depth=1
	callq	__errno_location
	movl	(%rax), %eax
	cmpl	$16, %eax
	jle	.LBB21_17
# %bb.18:                               #   in Loop: Header=BB21_8 Depth=1
	cmpl	$27, %eax
	jg	.LBB21_21
# %bb.19:                               #   in Loop: Header=BB21_8 Depth=1
	cmpl	$17, %eax
	je	.LBB21_8
	jmp	.LBB21_20
.LBB21_17:                              #   in Loop: Header=BB21_8 Depth=1
	cmpl	$13, %eax
	je	.LBB21_8
	jmp	.LBB21_20
.LBB21_12:                              #   in Loop: Header=BB21_8 Depth=1
	movq	%r13, %rdi
	movq	%r14, %rsi
	callq	strcpy
	jmp	.LBB21_15
.LBB21_3:
	xorl	%ebp, %ebp
	jmp	.LBB21_4
.LBB21_21:
	cmpl	$35, %eax
	jg	.LBB21_25
# %bb.22:
	cmpl	$28, %eax
	je	.LBB21_29
# %bb.23:
	cmpl	$30, %eax
	jne	.LBB21_20
# %bb.24:
	movl	$.L.str.4.44, %esi
	jmp	.LBB21_28
.LBB21_25:
	cmpl	$122, %eax
	je	.LBB21_30
# %bb.26:
	cmpl	$36, %eax
	jne	.LBB21_20
# %bb.27:
	movl	$.L.str.3.43, %esi
	jmp	.LBB21_28
.LBB21_29:
	movl	$.L.str.5.45, %esi
	jmp	.LBB21_28
.LBB21_30:
	movl	$.L.str.6.46, %esi
	jmp	.LBB21_28
.LBB21_20:
	movl	$.L.str.7.47, %esi
.LBB21_28:
	movq	%r15, %rdi
	movq	%r13, %rdx
	xorl	%eax, %eax
	callq	curl_mfprintf
	movl	$23, %ebp
.LBB21_4:
	movq	%r13, %rdi
	callq	myFree
.LBB21_5:
	movq	%r14, %rdi
	callq	myFree
.LBB21_6:
	movl	%ebp, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end21:
	.size	create_dir_hierarchy, .Lfunc_end21-create_dir_hierarchy
	.cfi_endproc
                                        # -- End function
	.globl	easysrc_add             # -- Begin function easysrc_add
	.type	easysrc_add,@function
easysrc_add:                            # @easysrc_add
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	(%rdi), %rdi
	callq	slist_wc_append
	testq	%rax, %rax
	je	.LBB22_1
# %bb.2:
	movq	%rax, (%rbx)
	xorl	%eax, %eax
	jmp	.LBB22_3
.LBB22_1:
	callq	easysrc_free
	movl	$27, %eax
.LBB22_3:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end22:
	.size	easysrc_add, .Lfunc_end22-easysrc_add
	.cfi_endproc
                                        # -- End function
	.type	easysrc_free,@function  # -- Begin function easysrc_free
easysrc_free:                           # @easysrc_free
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	easysrc_decl(%rip), %rdi
	callq	slist_wc_free_all
	xorl	%ebx, %ebx
	movq	%rbx, easysrc_decl(%rip)
	movq	easysrc_data(%rip), %rdi
	callq	slist_wc_free_all
	movq	%rbx, easysrc_data(%rip)
	movq	easysrc_code(%rip), %rdi
	callq	slist_wc_free_all
	movq	%rbx, easysrc_code(%rip)
	movq	easysrc_toohard(%rip), %rdi
	callq	slist_wc_free_all
	movq	%rbx, easysrc_toohard(%rip)
	movq	easysrc_clean(%rip), %rdi
	callq	slist_wc_free_all
	movq	%rbx, easysrc_clean(%rip)
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end23:
	.size	easysrc_free, .Lfunc_end23-easysrc_free
	.cfi_endproc
                                        # -- End function
	.globl	easysrc_addf            # -- Begin function easysrc_addf
	.type	easysrc_addf,@function
easysrc_addf:                           # @easysrc_addf
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$208, %rsp
	.cfi_def_cfa_offset 240
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbp
	movq	%rdi, %r14
	testb	%al, %al
	je	.LBB24_2
# %bb.1:
	movaps	%xmm0, 48(%rsp)
	movaps	%xmm1, 64(%rsp)
	movaps	%xmm2, 80(%rsp)
	movaps	%xmm3, 96(%rsp)
	movaps	%xmm4, 112(%rsp)
	movaps	%xmm5, 128(%rsp)
	movaps	%xmm6, 144(%rsp)
	movaps	%xmm7, 160(%rsp)
.LBB24_2:
	movq	%rsp, %rax
	movq	%rdx, 16(%rax)
	movq	%rcx, 24(%rax)
	movq	%r8, 32(%rax)
	movq	%r9, 40(%rax)
	leaq	176(%rsp), %rsi
	movq	%rax, 16(%rsi)
	leaq	240(%rsp), %rax
	movq	%rax, 8(%rsi)
	movabsq	$206158430224, %rax     # imm = 0x3000000010
	movq	%rax, (%rsi)
	movq	%rbp, %rdi
	callq	curl_mvaprintf
	testq	%rax, %rax
	je	.LBB24_3
# %bb.4:
	movq	%rax, %rbx
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	easysrc_add
	movl	%eax, %ebp
	movq	%rbx, %rdi
	callq	curl_free
	jmp	.LBB24_5
.LBB24_3:
	movl	$27, %ebp
.LBB24_5:
	movl	%ebp, %eax
	addq	$208, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end24:
	.size	easysrc_addf, .Lfunc_end24-easysrc_addf
	.cfi_endproc
                                        # -- End function
	.globl	easysrc_init            # -- Begin function easysrc_init
	.type	easysrc_init,@function
easysrc_init:                           # @easysrc_init
	.cfi_startproc
# %bb.0:
	movl	$easysrc_code, %edi
	movl	$.L.str.48, %esi
	jmp	easysrc_add             # TAILCALL
.Lfunc_end25:
	.size	easysrc_init, .Lfunc_end25-easysrc_init
	.cfi_endproc
                                        # -- End function
	.globl	easysrc_perform         # -- Begin function easysrc_perform
	.type	easysrc_perform,@function
easysrc_perform:                        # @easysrc_perform
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	cmpq	$0, easysrc_toohard(%rip)
	je	.LBB26_11
# %bb.1:
	movl	$easysrc_code, %edi
	movl	$.L.str.1.49, %esi
	callq	easysrc_add
	testl	%eax, %eax
	jne	.LBB26_16
# %bb.2:                                # %.preheader2
	movq	$-32, %rbx
.LBB26_4:                               # =>This Inner Loop Header: Depth=1
	movq	srchard+32(%rbx), %rsi
	movl	$easysrc_code, %edi
	callq	easysrc_add
	testl	%eax, %eax
	jne	.LBB26_16
# %bb.3:                                #   in Loop: Header=BB26_4 Depth=1
	addq	$8, %rbx
	jne	.LBB26_4
# %bb.5:
	movq	easysrc_toohard(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_8
# %bb.6:
	movq	(%rax), %rbx
.LBB26_7:                               # =>This Inner Loop Header: Depth=1
	testq	%rbx, %rbx
	je	.LBB26_8
# %bb.15:                               #   in Loop: Header=BB26_7 Depth=1
	movq	(%rbx), %rsi
	movl	$easysrc_code, %edi
	callq	easysrc_add
	testl	%eax, %eax
	jne	.LBB26_16
# %bb.14:                               #   in Loop: Header=BB26_7 Depth=1
	movq	8(%rbx), %rbx
	jmp	.LBB26_7
.LBB26_8:
	movl	$easysrc_code, %edi
	movl	$.L.str.1.49, %esi
	callq	easysrc_add
	testl	%eax, %eax
	jne	.LBB26_16
# %bb.9:
	movl	$easysrc_code, %edi
	movl	$.L.str.2.50, %esi
	callq	easysrc_add
	testl	%eax, %eax
	jne	.LBB26_16
# %bb.10:
	movq	easysrc_toohard(%rip), %rdi
	callq	slist_wc_free_all
	movq	$0, easysrc_toohard(%rip)
.LBB26_11:
	movl	$easysrc_code, %edi
	movl	$.L.str.1.49, %esi
	callq	easysrc_add
	testl	%eax, %eax
	jne	.LBB26_16
# %bb.12:
	movl	$easysrc_code, %edi
	movl	$.L.str.3.51, %esi
	callq	easysrc_add
	testl	%eax, %eax
	je	.LBB26_13
.LBB26_16:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.LBB26_13:
	.cfi_def_cfa_offset 16
	movl	$easysrc_code, %edi
	movl	$.L.str.1.49, %esi
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	easysrc_add             # TAILCALL
.Lfunc_end26:
	.size	easysrc_perform, .Lfunc_end26-easysrc_perform
	.cfi_endproc
                                        # -- End function
	.globl	easysrc_cleanup         # -- Begin function easysrc_cleanup
	.type	easysrc_cleanup,@function
easysrc_cleanup:                        # @easysrc_cleanup
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	movl	$easysrc_code, %edi
	movl	$.L.str.4.55, %esi
	callq	easysrc_add
	testl	%eax, %eax
	je	.LBB27_2
# %bb.1:
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.LBB27_2:
	.cfi_def_cfa_offset 16
	movl	$easysrc_code, %edi
	movl	$.L.str.5.56, %esi
	popq	%rax
	.cfi_def_cfa_offset 8
	jmp	easysrc_add             # TAILCALL
.Lfunc_end27:
	.size	easysrc_cleanup, .Lfunc_end27-easysrc_cleanup
	.cfi_endproc
                                        # -- End function
	.globl	dumpeasysrc             # -- Begin function dumpeasysrc
	.type	dumpeasysrc,@function
dumpeasysrc:                            # @dumpeasysrc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	movq	56(%rdi), %r15
	movl	$.L.str.6.57, %esi
	movq	%r15, %rdi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB28_2
# %bb.1:
	movl	$.L.str.7.58, %esi
	movq	%r15, %rdi
	callq	fopen
	movq	%rax, %rbx
	movb	$1, %r12b
	jmp	.LBB28_3
.LBB28_2:
	movq	stdout(%rip), %rbx
	xorl	%r12d, %r12d
.LBB28_3:
	testq	%rbx, %rbx
	je	.LBB28_30
# %bb.4:                                # %.preheader7
	movq	$-80, %rbp
.LBB28_5:                               # =>This Inner Loop Header: Depth=1
	movq	srchead+80(%rbp), %rdx
	movl	$.L.str.9.60, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	addq	$8, %rbp
	jne	.LBB28_5
# %bb.6:
	movq	easysrc_decl(%rip), %rax
	testq	%rax, %rax
	je	.LBB28_10
# %bb.7:
	movq	(%rax), %rbp
.LBB28_9:                               # =>This Inner Loop Header: Depth=1
	testq	%rbp, %rbp
	je	.LBB28_10
# %bb.8:                                #   in Loop: Header=BB28_9 Depth=1
	movq	(%rbp), %rdx
	movl	$.L.str.10.61, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	8(%rbp), %rbp
	jmp	.LBB28_9
.LBB28_10:
	cmpq	$0, easysrc_data(%rip)
	je	.LBB28_14
# %bb.11:
	movl	$.L.str.11.62, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	easysrc_data(%rip), %rax
	movq	(%rax), %rbp
.LBB28_13:                              # =>This Inner Loop Header: Depth=1
	testq	%rbp, %rbp
	je	.LBB28_14
# %bb.12:                               #   in Loop: Header=BB28_13 Depth=1
	movq	(%rbp), %rdx
	movl	$.L.str.10.61, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	8(%rbp), %rbp
	jmp	.LBB28_13
.LBB28_14:
	movl	$.L.str.11.62, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	easysrc_code(%rip), %rax
	testq	%rax, %rax
	je	.LBB28_21
# %bb.15:
	movq	(%rax), %rbp
.LBB28_16:                              # =>This Inner Loop Header: Depth=1
	testq	%rbp, %rbp
	je	.LBB28_21
# %bb.17:                               #   in Loop: Header=BB28_16 Depth=1
	movq	(%rbp), %rdx
	cmpb	$0, (%rdx)
	je	.LBB28_19
# %bb.18:                               #   in Loop: Header=BB28_16 Depth=1
	movl	$.L.str.10.61, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB28_20
.LBB28_19:                              #   in Loop: Header=BB28_16 Depth=1
	movl	$.L.str.11.62, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
.LBB28_20:                              #   in Loop: Header=BB28_16 Depth=1
	movq	8(%rbp), %rbp
	jmp	.LBB28_16
.LBB28_21:
	movq	easysrc_clean(%rip), %rax
	testq	%rax, %rax
	je	.LBB28_25
# %bb.22:
	movq	(%rax), %rbp
.LBB28_24:                              # =>This Inner Loop Header: Depth=1
	testq	%rbp, %rbp
	je	.LBB28_25
# %bb.23:                               #   in Loop: Header=BB28_24 Depth=1
	movq	(%rbp), %rdx
	movl	$.L.str.10.61, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	8(%rbp), %rbp
	jmp	.LBB28_24
.LBB28_25:
	movq	$-32, %rbp
.LBB28_26:                              # =>This Inner Loop Header: Depth=1
	movq	srcend+32(%rbp), %rdx
	movl	$.L.str.9.60, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	addq	$8, %rbp
	jne	.LBB28_26
# %bb.27:
	testb	%r12b, %r12b
	je	.LBB28_29
# %bb.28:
	movq	%rbx, %rdi
	callq	fclose
	jmp	.LBB28_29
.LBB28_30:
	movl	$.L.str.8.59, %esi
	movq	%r14, %rdi
	movq	%r15, %rdx
	xorl	%eax, %eax
	callq	warnf
.LBB28_29:
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	easysrc_free            # TAILCALL
.Lfunc_end28:
	.size	dumpeasysrc, .Lfunc_end28-dumpeasysrc
	.cfi_endproc
                                        # -- End function
	.globl	getfiletime             # -- Begin function getfiletime
	.type	getfiletime,@function
getfiletime:                            # @getfiletime
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	subq	$152, %rsp
	.cfi_def_cfa_offset 176
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rsi, %r14
	leaq	8(%rsp), %rsi
	callq	stat
	cmpl	$-1, %eax
	je	.LBB29_2
# %bb.1:
	movq	96(%rsp), %rbx
	jmp	.LBB29_4
.LBB29_2:
	callq	__errno_location
	movl	(%rax), %edi
	movq	$-1, %rbx
	cmpl	$2, %edi
	je	.LBB29_4
# %bb.3:
	callq	strerror
	movl	$.L.str.73, %esi
	movq	%r14, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	callq	warnf
.LBB29_4:
	movq	%rbx, %rax
	addq	$152, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end29:
	.size	getfiletime, .Lfunc_end29-getfiletime
	.cfi_endproc
                                        # -- End function
	.globl	setfiletime             # -- Begin function setfiletime
	.type	setfiletime,@function
setfiletime:                            # @setfiletime
	.cfi_startproc
# %bb.0:
	testq	%rdi, %rdi
	js	.LBB30_4
# %bb.1:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$32, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	%rsp, %rsi
	movq	%rdi, 16(%rsi)
	movq	%rdi, (%rsi)
	xorl	%eax, %eax
	movq	%rax, 24(%rsi)
	movq	%rax, 8(%rsi)
	movq	%r15, %rdi
	callq	utimes
	testl	%eax, %eax
	je	.LBB30_3
# %bb.2:
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movl	$.L.str.1.74, %esi
	movq	%r14, %rdi
	movq	%rbx, %rdx
	movq	%r15, %rcx
	movq	%rax, %r8
	xorl	%eax, %eax
	callq	warnf
.LBB30_3:
	addq	$32, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
.LBB30_4:
	retq
.Lfunc_end30:
	.size	setfiletime, .Lfunc_end30-setfiletime
	.cfi_endproc
                                        # -- End function
	.globl	tool_mime_stdin_read    # -- Begin function tool_mime_stdin_read
	.type	tool_mime_stdin_read,@function
tool_mime_stdin_read:                   # @tool_mime_stdin_read
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rcx, %r14
	movq	%rdx, %r12
	movq	%rdi, %r15
	movq	88(%rcx), %rbx
	testq	%rbx, %rbx
	js	.LBB31_5
# %bb.1:
	subq	96(%r14), %rbx
	jle	.LBB31_2
# %bb.3:
	movq	%r12, %rdi
	callq	curlx_uztoso
	cmpq	%rbx, %rax
	jle	.LBB31_5
# %bb.4:
	movq	%rbx, %rdi
	callq	curlx_sotouz
	movq	%rax, %r12
.LBB31_5:
	testq	%r12, %r12
	je	.LBB31_2
# %bb.6:
	movq	24(%r14), %rbx
	testq	%rbx, %rbx
	je	.LBB31_9
# %bb.7:
	movq	96(%r14), %rdi
	callq	curlx_sotouz
	addq	%rax, %rbx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	memcpy
.LBB31_8:
	movq	%r12, %rdi
	callq	curlx_uztoso
	addq	%rax, 96(%r14)
	jmp	.LBB31_12
.LBB31_2:
	xorl	%r12d, %r12d
.LBB31_12:
	movq	%r12, %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.LBB31_9:
	.cfi_def_cfa_offset 48
	movq	stdin(%rip), %rcx
	movl	$1, %esi
	movq	%r15, %rdi
	movq	%r12, %rdx
	callq	fread
	movq	%rax, %r12
	movq	stdin(%rip), %rdi
	callq	ferror
	testl	%eax, %eax
	je	.LBB31_8
# %bb.10:
	movq	104(%r14), %r15
	movl	$268435456, %r12d       # imm = 0x10000000
	testq	%r15, %r15
	je	.LBB31_12
# %bb.11:
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movl	$.L.str.77, %esi
	movq	%r15, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	callq	warnf
	movq	$0, 104(%r14)
	jmp	.LBB31_12
.Lfunc_end31:
	.size	tool_mime_stdin_read, .Lfunc_end31-tool_mime_stdin_read
	.cfi_endproc
                                        # -- End function
	.globl	curlx_uztoso            # -- Begin function curlx_uztoso
	.type	curlx_uztoso,@function
curlx_uztoso:                           # @curlx_uztoso
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	btrq	$63, %rax
	retq
.Lfunc_end32:
	.size	curlx_uztoso, .Lfunc_end32-curlx_uztoso
	.cfi_endproc
                                        # -- End function
	.globl	curlx_sotouz            # -- Begin function curlx_sotouz
	.type	curlx_sotouz,@function
curlx_sotouz:                           # @curlx_sotouz
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	retq
.Lfunc_end33:
	.size	curlx_sotouz, .Lfunc_end33-curlx_sotouz
	.cfi_endproc
                                        # -- End function
	.globl	tool_mime_stdin_seek    # -- Begin function tool_mime_stdin_seek
	.type	tool_mime_stdin_seek,@function
tool_mime_stdin_seek:                   # @tool_mime_stdin_seek
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	cmpl	$1, %edx
	je	.LBB34_1
# %bb.2:
	cmpl	$2, %edx
	jne	.LBB34_5
# %bb.3:
	movl	$88, %eax
	jmp	.LBB34_4
.LBB34_1:
	movl	$96, %eax
.LBB34_4:
	addq	(%r14,%rax), %rbx
.LBB34_5:
	movl	$2, %ebp
	testq	%rbx, %rbx
	js	.LBB34_9
# %bb.6:
	cmpq	$0, 24(%r14)
	jne	.LBB34_8
# %bb.7:
	movq	stdin(%rip), %rdi
	movq	80(%r14), %rsi
	addq	%rbx, %rsi
	xorl	%edx, %edx
	callq	fseek
	testl	%eax, %eax
	jne	.LBB34_9
.LBB34_8:
	movq	%rbx, 96(%r14)
	xorl	%ebp, %ebp
.LBB34_9:
	movl	%ebp, %eax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end34:
	.size	tool_mime_stdin_seek, .Lfunc_end34-tool_mime_stdin_seek
	.cfi_endproc
                                        # -- End function
	.globl	tool2curlmime           # -- Begin function tool2curlmime
	.type	tool2curlmime,@function
tool2curlmime:                          # @tool2curlmime
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdx, %r14
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	curl_mime_init
	movq	%rax, (%r14)
	xorl	%r15d, %r15d
	testq	%rax, %rax
	je	.LBB35_1
# %bb.2:
	movq	72(%r12), %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	callq	tool2curlparts
	testl	%eax, %eax
	je	.LBB35_5
# %bb.3:
	movq	(%r14), %rdi
	movl	%eax, %r15d
	jmp	.LBB35_4
.LBB35_1:
	movl	$27, %r15d
	xorl	%edi, %edi
.LBB35_4:
	callq	curl_mime_free
	movq	$0, (%r14)
.LBB35_5:
	movl	%r15d, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end35:
	.size	tool2curlmime, .Lfunc_end35-tool2curlmime
	.cfi_endproc
                                        # -- End function
	.type	tool2curlparts,@function # -- Begin function tool2curlparts
tool2curlparts:                         # @tool2curlparts
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	xorl	%ebp, %ebp
	movq	%rbp, (%rsp)
	testq	%rsi, %rsi
	je	.LBB36_26
# %bb.1:
	movq	%rdx, %rbx
	movq	%rsi, %r13
	movq	%rdi, %r15
	movq	16(%rsi), %rsi
	callq	tool2curlparts
	movl	%eax, %ebp
	testl	%eax, %eax
	je	.LBB36_2
.LBB36_26:
	movl	%ebp, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB36_2:
	.cfi_def_cfa_offset 64
	movq	%rbx, %rdi
	callq	curl_mime_addpart
	testq	%rax, %rax
	je	.LBB36_3
# %bb.4:
	movq	%rax, %r14
	movq	40(%r13), %rbx
	movl	(%r13), %eax
	xorl	%r12d, %r12d
	decl	%eax
	cmpl	$5, %eax
	ja	.LBB36_17
# %bb.5:
	jmpq	*.LJTI36_0(,%rax,8)
.LBB36_10:
	movq	24(%r13), %rsi
	movq	%r14, %rdi
	callq	curl_mime_filedata
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB36_26
# %bb.11:
	testq	%rbx, %rbx
	jne	.LBB36_17
# %bb.12:
	cmpl	$4, (%r13)
	jne	.LBB36_17
# %bb.13:
	movq	%r14, %rdi
	xorl	%esi, %esi
	jmp	.LBB36_20
.LBB36_3:
	movl	$27, %ebp
	jmp	.LBB36_26
.LBB36_6:
	movq	%rsp, %rdx
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	tool2curlmime
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB36_26
# %bb.7:
	movq	(%rsp), %r15
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	curl_mime_subparts
	testl	%eax, %eax
	je	.LBB36_17
# %bb.8:
	movl	%eax, %ebp
	movq	%r15, %rdi
	callq	curl_mime_free
	jmp	.LBB36_26
.LBB36_9:
	movq	24(%r13), %rsi
	movq	%r14, %rdi
	movq	$-1, %rdx
	callq	curl_mime_data
	jmp	.LBB36_16
.LBB36_14:
	testq	%rbx, %rbx
	movl	$.L.str.7.78, %eax
	cmoveq	%rax, %rbx
.LBB36_15:
	movq	88(%r13), %rsi
	movl	$tool_mime_stdin_read, %edx
	movl	$tool_mime_stdin_seek, %ecx
	movq	%r14, %rdi
	xorl	%r8d, %r8d
	movq	%r13, %r9
	callq	curl_mime_data_cb
.LBB36_16:
	movl	%eax, %r12d
.LBB36_17:
	testl	%r12d, %r12d
	jne	.LBB36_21
# %bb.18:
	testq	%rbx, %rbx
	je	.LBB36_21
# %bb.19:
	movq	%r14, %rdi
	movq	%rbx, %rsi
.LBB36_20:
	callq	curl_mime_filename
	movl	%eax, %r12d
.LBB36_21:
	movl	%r12d, %ebp
	testl	%r12d, %r12d
	jne	.LBB36_26
# %bb.22:
	movq	48(%r13), %rsi
	movq	%r14, %rdi
	callq	curl_mime_type
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB36_26
# %bb.23:
	movq	64(%r13), %rsi
	movq	%r14, %rdi
	xorl	%edx, %edx
	callq	curl_mime_headers
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB36_26
# %bb.24:
	movq	56(%r13), %rsi
	movq	%r14, %rdi
	callq	curl_mime_encoder
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB36_26
# %bb.25:
	movq	32(%r13), %rsi
	movq	%r14, %rdi
	callq	curl_mime_name
	movl	%eax, %ebp
	jmp	.LBB36_26
.Lfunc_end36:
	.size	tool2curlparts, .Lfunc_end36-tool2curlparts
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI36_0:
	.quad	.LBB36_6
	.quad	.LBB36_9
	.quad	.LBB36_10
	.quad	.LBB36_10
	.quad	.LBB36_14
	.quad	.LBB36_15
                                        # -- End function
	.text
	.globl	formparse               # -- Begin function formparse
	.type	formparse,@function
formparse:                              # @formparse
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	%r8d, %r13d
	movq	%rcx, %r12
	movq	%rdx, %r15
	movq	%rsi, %rbp
	movq	%rdi, %r14
	xorl	%eax, %eax
	movq	%rax, 32(%rsp)
	movq	%rax, 72(%rsp)
	movq	%rax, 64(%rsp)
	movq	%rax, (%rsp)
	cmpq	%rax, (%rcx)
	jne	.LBB37_3
# %bb.1:
	movl	$1, %edi
	movl	$112, %esi
	callq	calloc
	testq	%rax, %rax
	je	.LBB37_87
# %bb.2:
	movl	$1, (%rax)
	movq	%rax, (%r15)
	movq	%rax, (%r12)
.LBB37_3:
	movq	%rbp, %rdi
	callq	strdup
	testq	%rax, %rax
	je	.LBB37_4
# %bb.5:
	movq	%rax, %rbx
	movq	%rax, %rdi
	movl	$61, %esi
	callq	strchr
	movq	%rax, 48(%rsp)
	testq	%rax, %rax
	je	.LBB37_83
# %bb.6:
	movq	%rax, %rbp
	movq	%r12, 56(%rsp)          # 8-byte Spill
	movq	%r14, 16(%rsp)          # 8-byte Spill
	xorl	%ecx, %ecx
	cmpq	%rbx, %rax
	movq	%rbx, 8(%rsp)           # 8-byte Spill
	cmovaq	%rbx, %rcx
	leaq	1(%rax), %r14
	movq	%r14, 48(%rsp)
	movb	$0, (%rax)
	movb	1(%rax), %r12b
	cmpb	$40, %r12b
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	jne	.LBB37_15
# %bb.7:
	testb	%r13b, %r13b
	jne	.LBB37_15
# %bb.8:
	movq	%rsp, %rax
	leaq	48(%rsp), %rdx
	leaq	40(%rsp), %rcx
	leaq	32(%rsp), %r8
	movq	16(%rsp), %rbp          # 8-byte Reload
	movq	%rbp, %rdi
	movl	$0, %esi
	movl	$0, %r9d
	pushq	%rax
	.cfi_adjust_cfa_offset 8
	pushq	$0
	.cfi_adjust_cfa_offset 8
	callq	get_param_part
	addq	$16, %rsp
	.cfi_adjust_cfa_offset -16
	testl	%eax, %eax
	js	.LBB37_9
# %bb.10:
	movq	56(%rsp), %rbx          # 8-byte Reload
	movq	(%rbx), %rdi
	callq	tool_mime_new_parts
	testq	%rax, %rax
	je	.LBB37_11
# %bb.12:
	movq	%rax, %r13
	movq	%rax, (%rbx)
	movq	(%rsp), %rax
	movq	%rax, 64(%r13)
	movq	$0, (%rsp)
	movq	32(%rsp), %rdi
	testq	%rdi, %rdi
	movq	8(%rsp), %r12           # 8-byte Reload
	je	.LBB37_80
# %bb.13:
	callq	strdup
	movq	%rax, 48(%r13)
	testq	%rax, %rax
	jne	.LBB37_80
# %bb.14:
	movq	1232(%rbp), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	%r12, %rdi
	callq	myFree
	movl	$5, %eax
	jmp	.LBB37_86
.LBB37_4:
	movq	1232(%r14), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	xorl	%edi, %edi
	callq	curl_slist_free_all
	movl	$2, %eax
	jmp	.LBB37_86
.LBB37_83:
	movq	1232(%r14), %rdi
	movl	$.L.str.6.84, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	%rbx, %rdi
	callq	myFree
	movl	$23, %eax
	jmp	.LBB37_86
.LBB37_15:
	testq	%rcx, %rcx
	je	.LBB37_16
.LBB37_20:
	cmpb	$64, %r12b
	jne	.LBB37_47
# %bb.21:
	testb	%r13b, %r13b
	jne	.LBB37_47
# %bb.22:
	addq	$2, %rbp
	leaq	48(%rsp), %rdx
	movq	%rbp, (%rdx)
	movq	%rsp, %r15
	leaq	64(%rsp), %r14
	leaq	40(%rsp), %rcx
	leaq	32(%rsp), %r8
	leaq	72(%rsp), %r9
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	$44, %esi
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	get_param_part
	addq	$16, %rsp
	.cfi_adjust_cfa_offset -16
	testl	%eax, %eax
	movq	8(%rsp), %r12           # 8-byte Reload
	js	.LBB37_45
# %bb.23:                               # %.preheader
	movl	%eax, %ebp
	xorl	%r13d, %r13d
.LBB37_24:                              # =>This Inner Loop Header: Depth=1
	testq	%r13, %r13
	jne	.LBB37_28
# %bb.25:                               #   in Loop: Header=BB37_24 Depth=1
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %r13
	cmpl	$44, %ebp
	jne	.LBB37_28
# %bb.26:                               #   in Loop: Header=BB37_24 Depth=1
	movq	%r13, %rdi
	callq	tool_mime_new_parts
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB37_27
.LBB37_28:                              #   in Loop: Header=BB37_24 Depth=1
	movq	40(%rsp), %rsi
	movq	%r13, %rdi
	movl	$1, %edx
	leaq	28(%rsp), %rcx
	callq	tool_mime_new_filedata
	testq	%rax, %rax
	je	.LBB37_29
# %bb.30:                               #   in Loop: Header=BB37_24 Depth=1
	movq	%rax, %rbx
	movq	(%rsp), %rax
	movq	%rax, 64(%rbx)
	movq	$0, (%rsp)
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	1232(%rax), %rdi
	movq	%rdi, 104(%rbx)
	cmpl	$26, 28(%rsp)
	jne	.LBB37_34
# %bb.31:                               #   in Loop: Header=BB37_24 Depth=1
	cmpq	$0, 88(%rbx)
	jg	.LBB37_32
# %bb.33:                               #   in Loop: Header=BB37_24 Depth=1
	movq	24(%rbx), %rdi
	callq	myFree
	movq	$0, 24(%rbx)
	movq	$-1, 88(%rbx)
	movl	$0, 28(%rsp)
.LBB37_34:                              #   in Loop: Header=BB37_24 Depth=1
	movq	72(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB37_37
# %bb.35:                               #   in Loop: Header=BB37_24 Depth=1
	callq	strdup
	movq	%rax, 40(%rbx)
	testq	%rax, %rax
	je	.LBB37_36
.LBB37_37:                              #   in Loop: Header=BB37_24 Depth=1
	movq	32(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB37_40
# %bb.38:                               #   in Loop: Header=BB37_24 Depth=1
	callq	strdup
	movq	%rax, 48(%rbx)
	testq	%rax, %rax
	je	.LBB37_39
.LBB37_40:                              #   in Loop: Header=BB37_24 Depth=1
	movq	64(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB37_43
# %bb.41:                               #   in Loop: Header=BB37_24 Depth=1
	callq	strdup
	movq	%rax, 56(%rbx)
	testq	%rax, %rax
	je	.LBB37_42
.LBB37_43:                              #   in Loop: Header=BB37_24 Depth=1
	testl	%ebp, %ebp
	je	.LBB37_46
# %bb.44:                               #   in Loop: Header=BB37_24 Depth=1
	incq	48(%rsp)
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	$44, %esi
	leaq	48(%rsp), %rdx
	leaq	40(%rsp), %rcx
	leaq	32(%rsp), %r8
	leaq	72(%rsp), %r9
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	%r14
	.cfi_adjust_cfa_offset 8
	callq	get_param_part
	addq	$16, %rsp
	.cfi_adjust_cfa_offset -16
	movl	%eax, %ebp
	testl	%eax, %eax
	jns	.LBB37_24
.LBB37_45:
	movq	%r12, %rdi
	callq	myFree
	movl	$7, %eax
	jmp	.LBB37_86
.LBB37_87:
	movq	$0, (%r15)
	movq	1232(%r14), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	xorl	%edi, %edi
	callq	curl_slist_free_all
	movl	$1, %eax
	jmp	.LBB37_86
.LBB37_47:
	cmpb	$60, %r12b
	jne	.LBB37_60
# %bb.48:
	testb	%r13b, %r13b
	jne	.LBB37_60
# %bb.49:
	addq	$2, %rbp
	leaq	48(%rsp), %rdx
	movq	%rbp, (%rdx)
	movq	%rsp, %rax
	leaq	64(%rsp), %rbx
	leaq	40(%rsp), %rcx
	leaq	32(%rsp), %r8
	movq	16(%rsp), %rbp          # 8-byte Reload
	movq	%rbp, %rdi
	movl	$0, %esi
	movl	$0, %r9d
	pushq	%rax
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	callq	get_param_part
	addq	$16, %rsp
	.cfi_adjust_cfa_offset -16
	testl	%eax, %eax
	js	.LBB37_50
# %bb.51:
	movl	%eax, %r12d
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rdi
	movq	40(%rsp), %rsi
	leaq	28(%rsp), %rcx
	xorl	%edx, %edx
	callq	tool_mime_new_filedata
	testq	%rax, %rax
	je	.LBB37_52
# %bb.53:
	movq	%rax, %r13
	movq	(%rsp), %rax
	movq	%rax, 64(%r13)
	movq	$0, (%rsp)
	movq	1232(%rbp), %rdi
	movq	%rdi, 104(%r13)
	cmpl	$26, 28(%rsp)
	jne	.LBB37_57
# %bb.54:
	cmpq	$0, 88(%r13)
	jle	.LBB37_56
# %bb.55:
	movl	$.L.str.4.82, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$16, %eax
	jmp	.LBB37_86
.LBB37_9:
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$3, %eax
	jmp	.LBB37_86
.LBB37_16:
	movl	$.L.str.2.80, %esi
	movq	%r14, %rdi
	callq	strcmp
	testl	%eax, %eax
	jne	.LBB37_20
# %bb.17:
	testb	%r13b, %r13b
	jne	.LBB37_20
# %bb.18:
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rax
	cmpq	(%r15), %rax
	je	.LBB37_19
# %bb.84:
	movq	8(%rax), %rax
	movq	%rax, (%rcx)
	movq	8(%rsp), %r12           # 8-byte Reload
	jmp	.LBB37_85
.LBB37_11:
	movq	1232(%rbp), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$4, %eax
	jmp	.LBB37_86
.LBB37_60:
	testb	%r13b, %r13b
	je	.LBB37_62
# %bb.61:
	movq	%r14, 40(%rsp)
	xorl	%r12d, %r12d
	jmp	.LBB37_64
.LBB37_62:
	movq	%rsp, %rax
	leaq	64(%rsp), %rbp
	leaq	48(%rsp), %rdx
	leaq	40(%rsp), %rcx
	leaq	32(%rsp), %r8
	leaq	72(%rsp), %r9
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	pushq	%rax
	.cfi_adjust_cfa_offset 8
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	callq	get_param_part
	addq	$16, %rsp
	.cfi_adjust_cfa_offset -16
	testl	%eax, %eax
	js	.LBB37_88
# %bb.63:
	movl	%eax, %r12d
	movq	40(%rsp), %r14
.LBB37_64:
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %r15
	movq	%r14, %rdi
	callq	strdup
	testq	%rax, %rax
	movq	16(%rsp), %rbp          # 8-byte Reload
	je	.LBB37_70
# %bb.65:
	movq	%rax, %rbx
	movl	$1, %edi
	movl	$112, %esi
	callq	calloc
	testq	%rax, %rax
	je	.LBB37_69
# %bb.66:
	movq	%rax, %r13
	movl	$2, (%rax)
	movq	%r15, 8(%rax)
	testq	%r15, %r15
	je	.LBB37_68
# %bb.67:
	movq	72(%r15), %rax
	movq	%rax, 16(%r13)
	movq	%r13, 72(%r15)
.LBB37_68:
	movq	%rbx, 24(%r13)
	movq	(%rsp), %rax
	movq	%rax, 64(%r13)
	movq	$0, (%rsp)
.LBB37_57:
	movq	72(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB37_71
# %bb.58:
	callq	strdup
	movq	%rax, 40(%r13)
	testq	%rax, %rax
	je	.LBB37_59
.LBB37_71:
	movq	32(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB37_74
# %bb.72:
	callq	strdup
	movq	%rax, 48(%r13)
	testq	%rax, %rax
	je	.LBB37_73
.LBB37_74:
	movq	64(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB37_77
# %bb.75:
	callq	strdup
	movq	%rax, 56(%r13)
	testq	%rax, %rax
	je	.LBB37_76
.LBB37_77:
	testl	%r12d, %r12d
	je	.LBB37_79
# %bb.78:
	movq	48(%rsp), %rdx
	movb	%r12b, (%rdx)
	movq	1232(%rbp), %rdi
	movl	$.L.str.5.83, %esi
	xorl	%eax, %eax
	callq	warnf
.LBB37_79:
	movq	8(%rsp), %r12           # 8-byte Reload
	jmp	.LBB37_80
.LBB37_50:
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$14, %eax
	jmp	.LBB37_86
.LBB37_19:
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	1232(%rax), %rdi
	movl	$.L.str.3.81, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$6, %eax
	jmp	.LBB37_86
.LBB37_29:
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	1232(%rax), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	%r12, %rdi
	callq	myFree
	movl	$9, %eax
	jmp	.LBB37_86
.LBB37_52:
	movq	1232(%rbp), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$15, %eax
	jmp	.LBB37_86
.LBB37_46:
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rax
	movq	72(%rax), %r13
	movq	16(%rsp), %rbp          # 8-byte Reload
.LBB37_80:
	movq	80(%rsp), %rdi          # 8-byte Reload
	testq	%rdi, %rdi
	je	.LBB37_85
# %bb.81:
	callq	strdup
	movq	%rax, 32(%r13)
	testq	%rax, %rax
	je	.LBB37_82
.LBB37_85:
	movq	%r12, %rdi
	callq	myFree
	xorl	%eax, %eax
.LBB37_86:
	addq	$88, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB37_82:
	.cfi_def_cfa_offset 144
	movq	1232(%rbp), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	%r12, %rdi
	callq	myFree
	movl	$22, %eax
	jmp	.LBB37_86
.LBB37_88:
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$17, %eax
	jmp	.LBB37_86
.LBB37_69:
	movq	%rbx, %rdi
	callq	myFree
.LBB37_70:
	movq	1232(%rbp), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$18, %eax
	jmp	.LBB37_86
.LBB37_36:
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	1232(%rax), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	%r12, %rdi
	callq	myFree
	movl	$11, %eax
	jmp	.LBB37_86
.LBB37_39:
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	1232(%rax), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	%r12, %rdi
	callq	myFree
	movl	$12, %eax
	jmp	.LBB37_86
.LBB37_42:
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	1232(%rax), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	%r12, %rdi
	callq	myFree
	movl	$13, %eax
	jmp	.LBB37_86
.LBB37_59:
	movq	1232(%rbp), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$19, %eax
	jmp	.LBB37_86
.LBB37_32:
	movl	$.L.str.4.82, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	%r12, %rdi
	callq	myFree
	movl	$10, %eax
	jmp	.LBB37_86
.LBB37_73:
	movq	1232(%rbp), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$20, %eax
	jmp	.LBB37_86
.LBB37_76:
	movq	1232(%rbp), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	myFree
	movl	$21, %eax
	jmp	.LBB37_86
.LBB37_56:
	movq	24(%r13), %rdi
	callq	myFree
	movq	$0, 24(%r13)
	movq	$-1, 88(%r13)
	movl	$0, 28(%rsp)
	jmp	.LBB37_57
.LBB37_27:
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	1232(%rax), %rdi
	movl	$.L.str.1.79, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	(%rsp), %rdi
	callq	curl_slist_free_all
	movq	%r12, %rdi
	callq	myFree
	movl	$8, %eax
	jmp	.LBB37_86
.Lfunc_end37:
	.size	formparse, .Lfunc_end37-formparse
	.cfi_endproc
                                        # -- End function
	.type	get_param_part,@function # -- Begin function get_param_part
get_param_part:                         # @get_param_part
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$1368, %rsp             # imm = 0x558
	.cfi_def_cfa_offset 1424
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r9, %rbx
	movq	%rcx, %r15
	movl	%esi, %r13d
	movq	%rdi, %r12
	movq	%rdx, 104(%rsp)         # 8-byte Spill
	movq	(%rdx), %rbp
	movq	%rbp, (%rsp)
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 352(%rsp)
	movaps	%xmm0, 336(%rsp)
	movaps	%xmm0, 320(%rsp)
	movaps	%xmm0, 304(%rsp)
	movaps	%xmm0, 288(%rsp)
	movaps	%xmm0, 272(%rsp)
	movaps	%xmm0, 256(%rsp)
	movaps	%xmm0, 240(%rsp)
	movaps	%xmm0, 224(%rsp)
	movaps	%xmm0, 208(%rsp)
	movaps	%xmm0, 192(%rsp)
	movaps	%xmm0, 176(%rsp)
	movaps	%xmm0, 160(%rsp)
	movaps	%xmm0, 144(%rsp)
	movaps	%xmm0, 128(%rsp)
	movaps	%xmm0, 112(%rsp)
	testq	%r8, %r8
	je	.LBB38_2
# %bb.1:
	movq	$0, (%r8)
.LBB38_2:
	movq	%r8, 80(%rsp)           # 8-byte Spill
	movq	1432(%rsp), %rax
	testq	%rbx, %rbx
	je	.LBB38_4
# %bb.3:
	movq	$0, (%rbx)
.LBB38_4:
	movq	1424(%rsp), %rcx
	testq	%rax, %rax
	je	.LBB38_6
# %bb.5:
	movq	$0, (%rax)
.LBB38_6:
	testq	%rcx, %rcx
	je	.LBB38_8
# %bb.7:
	movq	$0, (%rcx)
.LBB38_8:
	movzbl	(%rbp), %edi
	callq	Curl_isspace
	testl	%eax, %eax
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	je	.LBB38_12
# %bb.9:                                # %.preheader17
	incq	%rbp
.LBB38_10:                              # =>This Inner Loop Header: Depth=1
	movq	%rbp, (%rsp)
	movzbl	(%rbp), %edi
	callq	Curl_isspace
	incq	%rbp
	testl	%eax, %eax
	jne	.LBB38_10
# %bb.11:                               # %.loopexit18
	decq	%rbp
.LBB38_12:
	movsbl	%r13b, %ecx
	movq	%rsp, %rsi
	leaq	8(%rsp), %r14
	movq	%r12, %rdi
	movq	%r14, %rdx
	movl	%ecx, 20(%rsp)          # 4-byte Spill
	callq	get_param_word
	movq	%rax, (%r15)
	movq	(%r14), %rbx
	cmpq	%rbp, %rax
	movl	%r13d, 52(%rsp)         # 4-byte Spill
	jne	.LBB38_13
# %bb.14:
	cmpq	%rbp, %rbx
	jbe	.LBB38_13
# %bb.15:                               # %.preheader14
	decq	%rbx
	movq	40(%rsp), %rbp          # 8-byte Reload
	movq	1424(%rsp), %r14
.LBB38_16:                              # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %edi
	callq	Curl_isspace
	testl	%eax, %eax
	je	.LBB38_18
# %bb.17:                               #   in Loop: Header=BB38_16 Depth=1
	movq	%rbx, 8(%rsp)
	cmpq	(%r15), %rbx
	leaq	-1(%rbx), %rbx
	ja	.LBB38_16
.LBB38_18:                              # %..loopexit15_crit_edge
	incq	%rbx
	jmp	.LBB38_19
.LBB38_13:
	movq	40(%rsp), %rbp          # 8-byte Reload
	movq	1424(%rsp), %r14
.LBB38_19:
	movq	(%rsp), %rax
	movzbl	(%rax), %r13d
	movb	$0, (%rbx)
	xorl	%eax, %eax
	cmpl	$59, %r13d
	jne	.LBB38_20
# %bb.21:
	movq	%rax, 64(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	xorl	%r14d, %r14d
	xorl	%eax, %eax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	52(%rsp), %r13d         # 4-byte Reload
	movq	%r12, 32(%rsp)          # 8-byte Spill
.LBB38_22:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_26 Depth 2
                                        #     Child Loop BB38_30 Depth 2
                                        #     Child Loop BB38_39 Depth 2
                                        #     Child Loop BB38_42 Depth 2
                                        #     Child Loop BB38_52 Depth 2
                                        #     Child Loop BB38_55 Depth 2
                                        #     Child Loop BB38_60 Depth 2
                                        #     Child Loop BB38_63 Depth 2
                                        #     Child Loop BB38_69 Depth 2
                                        #       Child Loop BB38_70 Depth 3
                                        #         Child Loop BB38_73 Depth 4
                                        #     Child Loop BB38_100 Depth 2
                                        #     Child Loop BB38_103 Depth 2
                                        #     Child Loop BB38_108 Depth 2
	movq	(%rsp), %rax
	leaq	1(%rax), %rcx
	movq	%rcx, (%rsp)
	movzbl	1(%rax), %edi
	callq	Curl_isspace
	testl	%eax, %eax
	jne	.LBB38_22
# %bb.23:                               #   in Loop: Header=BB38_22 Depth=1
	testq	%r14, %r14
	je	.LBB38_24
.LBB38_35:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rsi
	movl	$.L.str.11.89, %edi
	movl	$9, %edx
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB38_46
# %bb.36:                               #   in Loop: Header=BB38_22 Depth=1
	testq	%r14, %r14
	je	.LBB38_38
# %bb.37:                               #   in Loop: Header=BB38_22 Depth=1
	movb	$0, (%r14)
.LBB38_38:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rcx
	addq	$9, %rcx
.LBB38_39:                              #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rcx, (%rsp)
	movzbl	(%rcx), %edi
	callq	Curl_isspace
	movq	(%rsp), %rbx
	leaq	1(%rbx), %rcx
	testl	%eax, %eax
	jne	.LBB38_39
# %bb.40:                               #   in Loop: Header=BB38_22 Depth=1
	movq	%r12, %rdi
	movq	%rsp, %rsi
	leaq	8(%rsp), %rdx
	movl	20(%rsp), %ecx          # 4-byte Reload
	callq	get_param_word
	movq	%rax, %rcx
	movq	%rax, 72(%rsp)          # 8-byte Spill
	cmpq	%rbx, %rax
	je	.LBB38_41
.LBB38_45:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rax
	movb	(%rax), %bpl
	movq	8(%rsp), %rax
	movb	$0, (%rax)
.LBB38_114:                             #   in Loop: Header=BB38_22 Depth=1
	xorl	%r14d, %r14d
.LBB38_115:                             #   in Loop: Header=BB38_22 Depth=1
	cmpb	$59, %bpl
	je	.LBB38_22
	jmp	.LBB38_116
.LBB38_24:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rsi
	movl	$.L.str.8.86, %edi
	movl	$5, %edx
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB38_35
# %bb.25:                               #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rbx
	addq	$5, %rbx
.LBB38_26:                              #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, (%rsp)
	movzbl	(%rbx), %edi
	callq	Curl_isspace
	movq	(%rsp), %rdi
	leaq	1(%rdi), %rbx
	testl	%eax, %eax
	jne	.LBB38_26
# %bb.27:                               #   in Loop: Header=BB38_22 Depth=1
	movl	$.L.str.9.87, %esi
	movq	%rdi, 64(%rsp)          # 8-byte Spill
	leaq	240(%rsp), %rbp
	movq	%rbp, %rdx
	leaq	112(%rsp), %r14
	movq	%r14, %rcx
	xorl	%eax, %eax
	callq	__isoc99_sscanf
	cmpl	$2, %eax
	jne	.LBB38_28
# %bb.29:                               #   in Loop: Header=BB38_22 Depth=1
	movq	%rbp, %rdi
	callq	strlen
	movq	%rax, %rbp
	movq	%r14, %rdi
	callq	strlen
	addq	%rbp, %rbx
	addq	%rax, %rbx
	movq	%rbx, %r14
.LBB38_30:                              #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, (%rsp)
	movzbl	(%rbx), %ebp
	testl	%ebp, %ebp
	je	.LBB38_115
# %bb.31:                               #   in Loop: Header=BB38_30 Depth=2
	cmpb	$59, %bpl
	je	.LBB38_115
# %bb.32:                               #   in Loop: Header=BB38_30 Depth=2
	cmpb	%r13b, %bpl
	je	.LBB38_33
# %bb.34:                               #   in Loop: Header=BB38_30 Depth=2
	movl	%ebp, %edi
	callq	Curl_isspace
	movq	(%rsp), %rbx
	incq	%rbx
	testl	%eax, %eax
	cmoveq	%rbx, %r14
	jmp	.LBB38_30
.LBB38_46:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rsi
	movl	$.L.str.12.90, %edi
	movl	$8, %edx
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB38_96
# %bb.47:                               #   in Loop: Header=BB38_22 Depth=1
	testq	%r14, %r14
	je	.LBB38_49
# %bb.48:                               #   in Loop: Header=BB38_22 Depth=1
	movb	$0, (%r14)
.LBB38_49:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rax
	leaq	8(%rax), %rbx
	movq	%rbx, (%rsp)
	movzbl	8(%rax), %edi
	cmpl	$64, %edi
	je	.LBB38_60
# %bb.50:                               #   in Loop: Header=BB38_22 Depth=1
	cmpb	$60, %dil
	jne	.LBB38_51
.LBB38_60:                              #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	1(%rbx), %rax
	movq	%rax, (%rsp)
	movzbl	1(%rbx), %edi
	callq	Curl_isspace
	movq	(%rsp), %rbx
	testl	%eax, %eax
	jne	.LBB38_60
# %bb.61:                               #   in Loop: Header=BB38_22 Depth=1
	movq	%r12, %rdi
	movq	%rsp, %rsi
	leaq	8(%rsp), %rdx
	movl	20(%rsp), %ecx          # 4-byte Reload
	callq	get_param_word
	movq	%rax, %r14
	cmpq	%rbx, %rax
	je	.LBB38_62
.LBB38_66:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rax
	movb	(%rax), %bpl
	movq	8(%rsp), %rax
	movb	$0, (%rax)
	movl	$.L.str.13.91, %esi
	movq	%r14, %rdi
	callq	fopen
	testq	%rax, %rax
	je	.LBB38_67
# %bb.68:                               #   in Loop: Header=BB38_22 Depth=1
	movq	%rax, %r12
	movl	%ebp, 92(%rsp)          # 4-byte Spill
	movq	%r14, 96(%rsp)          # 8-byte Spill
	movl	$1, 48(%rsp)            # 4-byte Folded Spill
	xorl	%r14d, %r14d
.LBB38_69:                              #   Parent Loop BB38_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_70 Depth 3
                                        #         Child Loop BB38_73 Depth 4
	xorl	%ebx, %ebx
	xorl	%r15d, %r15d
.LBB38_70:                              #   Parent Loop BB38_22 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_73 Depth 4
	movq	%r12, %rdi
	callq	getc
	movl	%eax, %r13d
	cmpl	$-1, %eax
	je	.LBB38_73
# %bb.71:                               #   in Loop: Header=BB38_70 Depth=3
	testq	%rbx, %rbx
	jne	.LBB38_78
# %bb.72:                               #   in Loop: Header=BB38_70 Depth=3
	movzbl	%r13b, %edi
	callq	Curl_isspace
	testl	%eax, %eax
	jne	.LBB38_78
.LBB38_73:                              #   Parent Loop BB38_22 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        #       Parent Loop BB38_70 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	testq	%r14, %r14
	je	.LBB38_74
# %bb.75:                               #   in Loop: Header=BB38_73 Depth=4
	movzbl	367(%rsp,%r14), %edi
	decq	%r14
	callq	Curl_isspace
	testl	%eax, %eax
	jne	.LBB38_73
# %bb.76:                               #   in Loop: Header=BB38_70 Depth=3
	movq	%r12, %rbp
	movq	%rbx, %r12
	movb	$0, 369(%rsp,%r14)
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	leaq	368(%rsp), %rsi
	callq	curl_slist_append
	testq	%rax, %rax
	je	.LBB38_92
# %bb.77:                               #   in Loop: Header=BB38_70 Depth=3
	movq	%rax, 24(%rsp)          # 8-byte Spill
	xorl	%r14d, %r14d
	movq	%r12, %rbx
	movq	%rbp, %r12
	jmp	.LBB38_78
.LBB38_74:                              #   in Loop: Header=BB38_70 Depth=3
	xorl	%r14d, %r14d
.LBB38_78:                              #   in Loop: Header=BB38_70 Depth=3
	cmpl	$13, %r13d
	je	.LBB38_70
# %bb.79:                               #   in Loop: Header=BB38_70 Depth=3
	cmpl	$35, %r13d
	je	.LBB38_85
# %bb.80:                               #   in Loop: Header=BB38_70 Depth=3
	cmpl	$10, %r13d
	je	.LBB38_84
# %bb.81:                               #   in Loop: Header=BB38_70 Depth=3
	cmpl	$-1, %r13d
	je	.LBB38_82
	jmp	.LBB38_86
.LBB38_85:                              #   in Loop: Header=BB38_70 Depth=3
	testq	%rbx, %rbx
	movzbl	%r15b, %r15d
	movl	$1, %eax
	cmovel	%eax, %r15d
.LBB38_86:                              #   in Loop: Header=BB38_70 Depth=3
	incq	%rbx
	testb	$1, %r15b
	jne	.LBB38_70
# %bb.87:                               #   in Loop: Header=BB38_70 Depth=3
	cmpq	$998, %r14              # imm = 0x3E6
	jne	.LBB38_89
# %bb.88:                               #   in Loop: Header=BB38_70 Depth=3
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	1232(%rax), %rdi
	movl	$.L.str.25.95, %esi
	movq	96(%rsp), %rdx          # 8-byte Reload
	movl	48(%rsp), %ecx          # 4-byte Reload
	xorl	%eax, %eax
	callq	warnf
	movl	$32, %r13d
	jmp	.LBB38_90
.LBB38_89:                              #   in Loop: Header=BB38_70 Depth=3
	ja	.LBB38_70
.LBB38_90:                              #   in Loop: Header=BB38_70 Depth=3
	movb	%r13b, 368(%rsp,%r14)
	incq	%r14
	jmp	.LBB38_70
.LBB38_84:                              #   in Loop: Header=BB38_69 Depth=2
	incl	48(%rsp)                # 4-byte Folded Spill
	jmp	.LBB38_69
.LBB38_41:                              #   in Loop: Header=BB38_22 Depth=1
	movq	8(%rsp), %rax
.LBB38_42:                              #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%rbx, %rax
	jbe	.LBB38_45
# %bb.43:                               #   in Loop: Header=BB38_42 Depth=2
	movzbl	-1(%rax), %edi
	callq	Curl_isspace
	testl	%eax, %eax
	je	.LBB38_45
# %bb.44:                               #   in Loop: Header=BB38_42 Depth=2
	movq	8(%rsp), %rax
	decq	%rax
	movq	%rax, 8(%rsp)
	jmp	.LBB38_42
.LBB38_96:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rsi
	movl	$.L.str.16.97, %edi
	movl	$8, %edx
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB38_106
# %bb.97:                               #   in Loop: Header=BB38_22 Depth=1
	testq	%r14, %r14
	je	.LBB38_99
# %bb.98:                               #   in Loop: Header=BB38_22 Depth=1
	movb	$0, (%r14)
.LBB38_99:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rcx
	addq	$8, %rcx
.LBB38_100:                             #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rcx, (%rsp)
	movzbl	(%rcx), %edi
	callq	Curl_isspace
	movq	(%rsp), %rbx
	leaq	1(%rbx), %rcx
	testl	%eax, %eax
	jne	.LBB38_100
# %bb.101:                              #   in Loop: Header=BB38_22 Depth=1
	movq	%r12, %rdi
	movq	%rsp, %rsi
	leaq	8(%rsp), %rdx
	movl	20(%rsp), %ecx          # 4-byte Reload
	callq	get_param_word
	movq	%rax, %rcx
	movq	%rax, 56(%rsp)          # 8-byte Spill
	cmpq	%rbx, %rax
	jne	.LBB38_45
# %bb.102:                              #   in Loop: Header=BB38_22 Depth=1
	movq	8(%rsp), %rax
.LBB38_103:                             #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%rbx, %rax
	jbe	.LBB38_45
# %bb.104:                              #   in Loop: Header=BB38_103 Depth=2
	movzbl	-1(%rax), %edi
	callq	Curl_isspace
	testl	%eax, %eax
	je	.LBB38_45
# %bb.105:                              #   in Loop: Header=BB38_103 Depth=2
	movq	8(%rsp), %rax
	decq	%rax
	movq	%rax, 8(%rsp)
	jmp	.LBB38_103
.LBB38_51:                              #   in Loop: Header=BB38_22 Depth=1
	callq	Curl_isspace
	movq	(%rsp), %rbp
	testl	%eax, %eax
	movq	24(%rsp), %r14          # 8-byte Reload
	je	.LBB38_53
.LBB38_52:                              #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	1(%rbp), %rax
	movq	%rax, (%rsp)
	movzbl	1(%rbp), %edi
	callq	Curl_isspace
	movq	(%rsp), %rbp
	testl	%eax, %eax
	jne	.LBB38_52
.LBB38_53:                              #   in Loop: Header=BB38_22 Depth=1
	movq	%r12, %rdi
	movq	%rsp, %rsi
	leaq	8(%rsp), %rdx
	movl	20(%rsp), %ecx          # 4-byte Reload
	callq	get_param_word
	movq	%rax, %rbx
	cmpq	%rbp, %rax
	je	.LBB38_54
.LBB38_58:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rax
	movb	(%rax), %bpl
	movq	8(%rsp), %rax
	movb	$0, (%rax)
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	curl_slist_append
	testq	%rax, %rax
	je	.LBB38_95
# %bb.59:                               #   in Loop: Header=BB38_22 Depth=1
	movq	%rax, 24(%rsp)          # 8-byte Spill
	jmp	.LBB38_114
.LBB38_62:                              #   in Loop: Header=BB38_22 Depth=1
	movq	8(%rsp), %rax
.LBB38_63:                              #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%rbx, %rax
	jbe	.LBB38_66
# %bb.64:                               #   in Loop: Header=BB38_63 Depth=2
	movzbl	-1(%rax), %edi
	callq	Curl_isspace
	testl	%eax, %eax
	je	.LBB38_66
# %bb.65:                               #   in Loop: Header=BB38_63 Depth=2
	movq	8(%rsp), %rax
	decq	%rax
	movq	%rax, 8(%rsp)
	jmp	.LBB38_63
.LBB38_67:                              #   in Loop: Header=BB38_22 Depth=1
	movq	32(%rsp), %r12          # 8-byte Reload
	movq	1232(%r12), %rbx
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movl	$.L.str.14.92, %esi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB38_114
.LBB38_106:                             #   in Loop: Header=BB38_22 Depth=1
	testq	%r14, %r14
	je	.LBB38_112
# %bb.107:                              #   in Loop: Header=BB38_22 Depth=1
	movq	(%rsp), %rcx
	movq	%rcx, %r14
.LBB38_108:                             #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rcx), %ebp
	testl	%ebp, %ebp
	je	.LBB38_115
# %bb.109:                              #   in Loop: Header=BB38_108 Depth=2
	cmpb	$59, %bpl
	je	.LBB38_115
# %bb.110:                              #   in Loop: Header=BB38_108 Depth=2
	cmpb	%r13b, %bpl
	je	.LBB38_33
# %bb.111:                              #   in Loop: Header=BB38_108 Depth=2
	movl	%ebp, %edi
	callq	Curl_isspace
	movq	(%rsp), %rcx
	incq	%rcx
	testl	%eax, %eax
	cmoveq	%rcx, %r14
	movq	%rcx, (%rsp)
	jmp	.LBB38_108
.LBB38_33:                              #   in Loop: Header=BB38_22 Depth=1
	movl	%r13d, %ebp
	jmp	.LBB38_115
.LBB38_82:                              #   in Loop: Header=BB38_22 Depth=1
	movq	%r12, %rdi
	callq	ferror
	testl	%eax, %eax
	jne	.LBB38_83
# %bb.91:                               #   in Loop: Header=BB38_22 Depth=1
	movq	%r12, %rdi
	callq	fclose
	xorl	%r14d, %r14d
	movq	32(%rsp), %r12          # 8-byte Reload
	movl	52(%rsp), %r13d         # 4-byte Reload
	movl	92(%rsp), %ebp          # 4-byte Reload
	jmp	.LBB38_115
.LBB38_54:                              #   in Loop: Header=BB38_22 Depth=1
	movq	8(%rsp), %rax
.LBB38_55:                              #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%rbp, %rax
	jbe	.LBB38_58
# %bb.56:                               #   in Loop: Header=BB38_55 Depth=2
	movzbl	-1(%rax), %edi
	callq	Curl_isspace
	testl	%eax, %eax
	je	.LBB38_58
# %bb.57:                               #   in Loop: Header=BB38_55 Depth=2
	movq	8(%rsp), %rax
	decq	%rax
	movq	%rax, 8(%rsp)
	jmp	.LBB38_55
.LBB38_112:                             #   in Loop: Header=BB38_22 Depth=1
	movq	%r12, %rdi
	movq	%rsp, %rsi
	leaq	8(%rsp), %rdx
	movl	20(%rsp), %ecx          # 4-byte Reload
	callq	get_param_word
	movq	(%rsp), %rcx
	movb	(%rcx), %bpl
	movq	8(%rsp), %rcx
	xorl	%edx, %edx
	movb	%dl, (%rcx)
	cmpb	%dl, (%rax)
	je	.LBB38_114
# %bb.113:                              #   in Loop: Header=BB38_22 Depth=1
	movq	1232(%r12), %rdi
	movl	$.L.str.17.98, %esi
	movq	%rax, %rdx
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB38_114
.LBB38_20:
	movq	%rax, 64(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	1432(%rsp), %rbx
	jmp	.LBB38_119
.LBB38_92:
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	1232(%rax), %rax
	movq	8(%rax), %rdi
	movl	$.L.str.23.93, %esi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	%rbp, %r12
.LBB38_93:
	movq	%r12, %rdi
	callq	fclose
	movq	%rbx, %rdi
.LBB38_94:
	callq	curl_slist_free_all
	movl	$-1, %r13d
	jmp	.LBB38_136
.LBB38_116:
	movzbl	%bpl, %r13d
	testq	%r14, %r14
	je	.LBB38_118
# %bb.117:
	movb	$0, (%r14)
.LBB38_118:
	movq	1432(%rsp), %rbx
	movq	40(%rsp), %rbp          # 8-byte Reload
	movq	1424(%rsp), %r14
.LBB38_119:
	movq	80(%rsp), %rax          # 8-byte Reload
	testq	%rax, %rax
	je	.LBB38_121
# %bb.120:
	movq	64(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB38_123
.LBB38_121:
	movq	64(%rsp), %rdx          # 8-byte Reload
	testq	%rdx, %rdx
	je	.LBB38_123
# %bb.122:
	movq	1232(%r12), %rdi
	movl	$.L.str.18.99, %esi
	xorl	%eax, %eax
	callq	warnf
.LBB38_123:
	testq	%rbp, %rbp
	je	.LBB38_125
# %bb.124:
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rbp)
	jmp	.LBB38_127
.LBB38_125:
	movq	72(%rsp), %rdx          # 8-byte Reload
	testq	%rdx, %rdx
	je	.LBB38_127
# %bb.126:
	movq	1232(%r12), %rdi
	movl	$.L.str.19.100, %esi
	xorl	%eax, %eax
	callq	warnf
.LBB38_127:
	testq	%r14, %r14
	je	.LBB38_129
# %bb.128:
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%r14)
	movq	24(%rsp), %rbp          # 8-byte Reload
	jmp	.LBB38_131
.LBB38_129:
	movq	56(%rsp), %rdx          # 8-byte Reload
	testq	%rdx, %rdx
	movq	24(%rsp), %rbp          # 8-byte Reload
	je	.LBB38_131
# %bb.130:
	movq	1232(%r12), %rdi
	movl	$.L.str.20.101, %esi
	xorl	%eax, %eax
	callq	warnf
.LBB38_131:
	testq	%rbx, %rbx
	je	.LBB38_133
# %bb.132:
	movq	%rbp, (%rbx)
	jmp	.LBB38_135
.LBB38_133:
	testq	%rbp, %rbp
	je	.LBB38_135
# %bb.134:
	movq	1232(%r12), %rdi
	movq	(%rbp), %rdx
	movl	$.L.str.21.102, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	%rbp, %rdi
	callq	curl_slist_free_all
.LBB38_135:
	movq	(%rsp), %rax
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
.LBB38_136:
	movl	%r13d, %eax
	addq	$1368, %rsp             # imm = 0x558
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB38_28:
	.cfi_def_cfa_offset 1424
	movq	1232(%r12), %rdi
	movl	$.L.str.10.88, %esi
	xorl	%eax, %eax
	callq	warnf
	movq	24(%rsp), %rdi          # 8-byte Reload
	jmp	.LBB38_94
.LBB38_95:
	movq	1232(%r12), %rax
	movq	8(%rax), %rdi
	movl	$.L.str.15.96, %esi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	%r14, %rdi
	jmp	.LBB38_94
.LBB38_83:
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	1232(%rax), %rax
	movq	8(%rax), %rbx
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movl	$.L.str.24.94, %esi
	movq	%rbx, %rdi
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	24(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB38_93
.Lfunc_end38:
	.size	get_param_part, .Lfunc_end38-get_param_part
	.cfi_endproc
                                        # -- End function
	.type	tool_mime_new_parts,@function # -- Begin function tool_mime_new_parts
tool_mime_new_parts:                    # @tool_mime_new_parts
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movl	$1, %edi
	movl	$112, %esi
	callq	calloc
	testq	%rax, %rax
	je	.LBB39_3
# %bb.1:
	movl	$1, (%rax)
	movq	%rbx, 8(%rax)
	testq	%rbx, %rbx
	je	.LBB39_3
# %bb.2:
	movq	72(%rbx), %rcx
	movq	%rcx, 16(%rax)
	movq	%rax, 72(%rbx)
.LBB39_3:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end39:
	.size	tool_mime_new_parts, .Lfunc_end39-tool_mime_new_parts
	.cfi_endproc
                                        # -- End function
	.type	tool_mime_new_filedata,@function # -- Begin function tool_mime_new_filedata
tool_mime_new_filedata:                 # @tool_mime_new_filedata
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, %r15
	movl	%edx, %r14d
	movq	%rsi, %rbx
	movq	%rdi, %r13
	movl	$27, (%rcx)
	movl	$.L.str.7.78, %esi
	movq	%rbx, %rdi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB40_8
# %bb.1:
	movq	%rbx, %rdi
	callq	strdup
	testq	%rax, %rax
	je	.LBB40_26
# %bb.2:
	movq	%rax, %rbp
	movl	$1, %edi
	movl	$112, %esi
	callq	calloc
	testq	%rax, %rax
	je	.LBB40_25
# %bb.3:
	movq	%rax, %rbx
	movl	$3, (%rax)
	movq	%r13, 8(%rax)
	testq	%r13, %r13
	je	.LBB40_5
# %bb.4:
	movq	72(%r13), %rax
	movq	%rax, 16(%rbx)
	movq	%rbx, 72(%r13)
.LBB40_5:
	movq	%rbp, 24(%rbx)
	testb	%r14b, %r14b
	jne	.LBB40_7
# %bb.6:
	movl	$4, (%rbx)
.LBB40_7:
	movl	$0, (%r15)
	jmp	.LBB40_27
.LBB40_8:
	movq	stdin(%rip), %rdi
	callq	fileno
	movl	%eax, %ebx
	movq	$0, (%rsp)
	movq	stdin(%rip), %rdi
	callq	ftell
	testl	%ebx, %ebx
	js	.LBB40_13
# %bb.9:
	movq	%rax, %r12
	testq	%rax, %rax
	js	.LBB40_13
# %bb.10:
	leaq	24(%rsp), %rsi
	movl	%ebx, %edi
	callq	fstat
	testl	%eax, %eax
	jne	.LBB40_13
# %bb.11:
	movl	$61440, %eax            # imm = 0xF000
	andl	48(%rsp), %eax
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB40_13
# %bb.12:
	movq	72(%rsp), %rbp
	xorl	%ecx, %ecx
	subq	%r12, %rbp
	movl	$0, %eax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	cmovsq	%rcx, %rbp
	jmp	.LBB40_19
.LBB40_13:
	leaq	16(%rsp), %rsi
	movq	$0, (%rsi)
	movq	stdin(%rip), %rdx
	movq	%rsp, %rdi
	callq	file2memory
	testl	%eax, %eax
	jne	.LBB40_26
# %bb.14:
	movq	stdin(%rip), %rdi
	callq	ferror
	testl	%eax, %eax
	je	.LBB40_16
# %bb.15:
	movq	(%rsp), %rdi
	callq	myFree
	movq	$0, (%rsp)
	movl	$26, %ebx
	jmp	.LBB40_18
.LBB40_25:
	movq	%rbp, %rdi
	callq	myFree
.LBB40_26:
	xorl	%ebx, %ebx
.LBB40_27:
	movq	%rbx, %rax
	addq	$168, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB40_16:
	.cfi_def_cfa_offset 224
	xorl	%ebx, %ebx
	cmpq	$0, 16(%rsp)
	jne	.LBB40_18
# %bb.17:
	movl	$.L.str.26.85, %edi
	callq	strdup
	movq	%rax, (%rsp)
	testq	%rax, %rax
	je	.LBB40_26
.LBB40_18:
	movq	%rbx, 8(%rsp)           # 8-byte Spill
	movq	16(%rsp), %rdi
	callq	curlx_uztoso
	movq	%rax, %rbp
	xorl	%r12d, %r12d
.LBB40_19:
	movl	$1, %edi
	movl	$112, %esi
	callq	calloc
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB40_28
# %bb.20:
	movl	$5, (%rbx)
	movq	%r13, 8(%rbx)
	testq	%r13, %r13
	je	.LBB40_22
# %bb.21:
	movq	72(%r13), %rax
	movq	%rax, 16(%rbx)
	movq	%rbx, 72(%r13)
.LBB40_22:
	movq	(%rsp), %rax
	movq	%rax, 24(%rbx)
	movq	%r12, 80(%rbx)
	movq	%rbp, 88(%rbx)
	testb	%r14b, %r14b
	jne	.LBB40_24
# %bb.23:
	movl	$6, (%rbx)
.LBB40_24:
	movq	8(%rsp), %rax           # 8-byte Reload
	movl	%eax, (%r15)
	jmp	.LBB40_27
.LBB40_28:
	movq	(%rsp), %rdi
	callq	myFree
	movq	$0, (%rsp)
	jmp	.LBB40_27
.Lfunc_end40:
	.size	tool_mime_new_filedata, .Lfunc_end40-tool_mime_new_filedata
	.cfi_endproc
                                        # -- End function
	.globl	file2memory             # -- Begin function file2memory
	.type	file2memory,@function
file2memory:                            # @file2memory
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$4128, %rsp             # imm = 0x1020
	.cfi_def_cfa_offset 4176
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, %r14
	testq	%rdx, %rdx
	je	.LBB41_5
# %bb.1:
	movq	%rdx, %r13
	movq	%rsp, %r12
	movl	$1073741824, %esi       # imm = 0x40000000
	movq	%r12, %rdi
	callq	curlx_dyn_init
	leaq	32(%rsp), %rbx
.LBB41_2:                               # =>This Inner Loop Header: Depth=1
	movl	$1, %esi
	movl	$4096, %edx             # imm = 0x1000
	movq	%rbx, %rdi
	movq	%r13, %rcx
	callq	fread
	testq	%rax, %rax
	je	.LBB41_7
# %bb.3:                                #   in Loop: Header=BB41_2 Depth=1
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	curlx_dyn_addn
	testl	%eax, %eax
	je	.LBB41_2
# %bb.4:
	movl	$14, %eax
	jmp	.LBB41_6
.LBB41_5:
	xorl	%eax, %eax
	movq	%rax, (%r15)
	movq	%rax, (%r14)
	jmp	.LBB41_6
.LBB41_7:
	movq	%rsp, %rbx
	movq	%rbx, %rdi
	callq	curlx_dyn_len
	movq	%rax, (%r15)
	movq	%rbx, %rdi
	callq	curlx_dyn_ptr
	movq	%rax, (%r14)
	xorl	%eax, %eax
.LBB41_6:
                                        # kill: def $eax killed $eax killed $rax
	addq	$4128, %rsp             # imm = 0x1020
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end41:
	.size	file2memory, .Lfunc_end41-file2memory
	.cfi_endproc
                                        # -- End function
	.globl	curlx_dyn_init          # -- Begin function curlx_dyn_init
	.type	curlx_dyn_init,@function
curlx_dyn_init:                         # @curlx_dyn_init
	.cfi_startproc
# %bb.0:
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%rdi)
	movq	$0, 16(%rdi)
	movq	%rsi, 24(%rdi)
	retq
.Lfunc_end42:
	.size	curlx_dyn_init, .Lfunc_end42-curlx_dyn_init
	.cfi_endproc
                                        # -- End function
	.globl	curlx_dyn_addn          # -- Begin function curlx_dyn_addn
	.type	curlx_dyn_addn,@function
curlx_dyn_addn:                         # @curlx_dyn_addn
	.cfi_startproc
# %bb.0:
	jmp	dyn_nappend             # TAILCALL
.Lfunc_end43:
	.size	curlx_dyn_addn, .Lfunc_end43-curlx_dyn_addn
	.cfi_endproc
                                        # -- End function
	.globl	curlx_dyn_len           # -- Begin function curlx_dyn_len
	.type	curlx_dyn_len,@function
curlx_dyn_len:                          # @curlx_dyn_len
	.cfi_startproc
# %bb.0:
	movq	8(%rdi), %rax
	retq
.Lfunc_end44:
	.size	curlx_dyn_len, .Lfunc_end44-curlx_dyn_len
	.cfi_endproc
                                        # -- End function
	.globl	curlx_dyn_ptr           # -- Begin function curlx_dyn_ptr
	.type	curlx_dyn_ptr,@function
curlx_dyn_ptr:                          # @curlx_dyn_ptr
	.cfi_startproc
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end45:
	.size	curlx_dyn_ptr, .Lfunc_end45-curlx_dyn_ptr
	.cfi_endproc
                                        # -- End function
	.type	dyn_nappend,@function   # -- Begin function dyn_nappend
dyn_nappend:                            # @dyn_nappend
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r13
	movq	8(%rdi), %r12
	leaq	(%r12,%rdx), %rcx
	incq	%rcx
	cmpq	24(%rdi), %rcx
	jbe	.LBB46_2
.LBB46_1:
	movq	(%r13), %rdi
	callq	myFree
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%r13)
	movq	$0, 16(%r13)
	movl	$27, %eax
	jmp	.LBB46_11
.LBB46_2:
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	16(%r13), %rax
	testq	%rax, %rax
	je	.LBB46_12
# %bb.3:
	movq	%rax, %rdx
.LBB46_4:                               # =>This Inner Loop Header: Depth=1
	movq	%rdx, %rbx
	addq	%rdx, %rdx
	cmpq	%rcx, %rbx
	jb	.LBB46_4
	jmp	.LBB46_5
.LBB46_12:
	movl	$32, %ebx
	cmpq	%rbx, %rcx
	cmovaq	%rcx, %rbx
.LBB46_5:
	cmpq	%rax, %rbx
	je	.LBB46_8
# %bb.6:
	movq	(%r13), %rdi
	movq	%rbx, %rsi
	callq	realloc
	testq	%rax, %rax
	je	.LBB46_1
# %bb.7:
	movq	%rax, (%r13)
	movq	%rbx, 16(%r13)
.LBB46_8:
	leaq	(%r12,%r14), %rbx
	testq	%r14, %r14
	je	.LBB46_10
# %bb.9:
	addq	(%r13), %r12
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	memcpy
.LBB46_10:
	movq	%rbx, 8(%r13)
	movq	(%r13), %rax
	movb	$0, (%rax,%rbx)
	xorl	%eax, %eax
.LBB46_11:
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end46:
	.size	dyn_nappend, .Lfunc_end46-dyn_nappend
	.cfi_endproc
                                        # -- End function
	.type	get_param_word,@function # -- Begin function get_param_word
get_param_word:                         # @get_param_word
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	%ecx, %r13d
	movq	%rsi, %r12
	movq	(%rsi), %rax
	movb	(%rax), %r8b
	cmpb	$34, %r8b
	jne	.LBB47_1
# %bb.6:
	leaq	1(%rax), %r15
	xorl	%esi, %esi
	movq	%r15, %rbx
.LBB47_7:                               # =>This Inner Loop Header: Depth=1
	movb	(%rbx), %cl
	cmpb	$92, %cl
	je	.LBB47_16
# %bb.8:                                #   in Loop: Header=BB47_7 Depth=1
	testb	%cl, %cl
	je	.LBB47_1
# %bb.9:                                #   in Loop: Header=BB47_7 Depth=1
	cmpb	$34, %cl
	jne	.LBB47_30
	jmp	.LBB47_10
.LBB47_16:                              #   in Loop: Header=BB47_7 Depth=1
	movb	1(%rbx), %cl
	cmpb	$92, %cl
	je	.LBB47_18
# %bb.17:                               #   in Loop: Header=BB47_7 Depth=1
	cmpb	$34, %cl
	je	.LBB47_18
.LBB47_30:                              #   in Loop: Header=BB47_7 Depth=1
	incq	%rbx
	jmp	.LBB47_7
.LBB47_18:                              #   in Loop: Header=BB47_7 Depth=1
	testq	%rsi, %rsi
	cmoveq	%rbx, %rsi
	addq	$2, %rbx
	jmp	.LBB47_7
.LBB47_1:
	movq	%rax, %rbx
.LBB47_2:                               # =>This Inner Loop Header: Depth=1
	testb	%r8b, %r8b
	je	.LBB47_31
# %bb.3:                                #   in Loop: Header=BB47_2 Depth=1
	cmpb	$59, %r8b
	je	.LBB47_31
# %bb.4:                                #   in Loop: Header=BB47_2 Depth=1
	cmpb	%r13b, %r8b
	je	.LBB47_31
# %bb.5:                                #   in Loop: Header=BB47_2 Depth=1
	movb	1(%rbx), %r8b
	incq	%rbx
	jmp	.LBB47_2
.LBB47_31:
	movq	%rbx, (%rdx)
	jmp	.LBB47_32
.LBB47_10:
	movq	%rbx, (%rdx)
	testq	%rsi, %rsi
	je	.LBB47_22
# %bb.11:                               # %.preheader
	movq	%rsi, %rax
.LBB47_12:                              # =>This Inner Loop Header: Depth=1
	movb	(%rsi), %cl
	cmpb	$92, %cl
	jne	.LBB47_20
# %bb.13:                               #   in Loop: Header=BB47_12 Depth=1
	movb	1(%rsi), %cl
	cmpb	$92, %cl
	je	.LBB47_19
# %bb.14:                               #   in Loop: Header=BB47_12 Depth=1
	cmpb	$34, %cl
	jne	.LBB47_15
.LBB47_19:                              #   in Loop: Header=BB47_12 Depth=1
	incq	%rsi
	jmp	.LBB47_20
.LBB47_15:                              #   in Loop: Header=BB47_12 Depth=1
	movb	$92, %cl
.LBB47_20:                              #   in Loop: Header=BB47_12 Depth=1
	incq	%rsi
	movb	%cl, (%rax)
	incq	%rax
	cmpq	(%rdx), %rsi
	jb	.LBB47_12
# %bb.21:
	movq	%rax, (%rdx)
	movq	%rsi, %rbx
.LBB47_22:
	movq	%rdi, (%rsp)            # 8-byte Spill
	incq	%rbx
	xorl	%ebp, %ebp
	movl	$1, %r14d
.LBB47_23:                              # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %edi
	testl	%edi, %edi
	je	.LBB47_27
# %bb.24:                               #   in Loop: Header=BB47_23 Depth=1
	cmpb	$59, %dil
	je	.LBB47_27
# %bb.25:                               #   in Loop: Header=BB47_23 Depth=1
	cmpb	%r13b, %dil
	je	.LBB47_27
# %bb.26:                               #   in Loop: Header=BB47_23 Depth=1
	callq	Curl_isspace
	testl	%eax, %eax
	movzbl	%bpl, %ebp
	cmovel	%r14d, %ebp
	incq	%rbx
	jmp	.LBB47_23
.LBB47_27:
	testb	$1, %bpl
	je	.LBB47_28
# %bb.29:
	movq	(%rsp), %rax            # 8-byte Reload
	movq	1232(%rax), %rdi
	movl	$.L.str.22.103, %esi
	xorl	%eax, %eax
	callq	warnf
.LBB47_28:
	movq	%r15, %rax
.LBB47_32:
	movq	%rbx, (%r12)
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end47:
	.size	get_param_word, .Lfunc_end47-get_param_word
	.cfi_endproc
                                        # -- End function
	.globl	getparameter            # -- Begin function getparameter
	.type	getparameter,@function
getparameter:                           # @getparameter
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$472, %rsp              # imm = 0x1D8
	.cfi_def_cfa_offset 528
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r8, %r13
	movq	%rcx, %r12
	movq	%rsi, %r9
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movb	$0, (%rdx)
	movb	(%rdi), %al
	cmpb	$45, %al
	jne	.LBB48_2
# %bb.1:
	cmpb	$45, 1(%rdi)
	jne	.LBB48_15
.LBB48_2:
	movq	%r9, 24(%rsp)           # 8-byte Spill
	movq	%r13, 56(%rsp)          # 8-byte Spill
	movq	%r12, 104(%rsp)         # 8-byte Spill
	leaq	2(%rdi), %rbp
	cmpb	$45, %al
	cmovneq	%rdi, %rbp
	movq	%rbp, %rdi
	callq	strlen
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	$.L.str.104, %esi
	movl	$3, %edx
	movq	%rbp, %rdi
	callq	strncmp
	leaq	3(%rbp), %rbx
	movl	%eax, 4(%rsp)           # 4-byte Spill
	testl	%eax, %eax
	cmovneq	%rbp, %rbx
	xorl	%r12d, %r12d
	movl	$-1, %r15d
	movl	$aliases+8, %r14d
	xorl	%eax, %eax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	xorl	%r13d, %r13d
.LBB48_3:                               # =>This Inner Loop Header: Depth=1
	movq	(%r14), %rbp
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB48_6
# %bb.4:                                #   in Loop: Header=BB48_3 Depth=1
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	callq	curl_strequal
	movq	-8(%r14), %rcx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	testl	%eax, %eax
	jne	.LBB48_11
# %bb.5:                                # %._crit_edge138
                                        #   in Loop: Header=BB48_3 Depth=1
	incl	%r13d
	movb	$1, %al
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movl	%r12d, %r15d
.LBB48_6:                               #   in Loop: Header=BB48_3 Depth=1
	incq	%r12
	addq	$24, %r14
	cmpq	$248, %r12
	jne	.LBB48_3
# %bb.7:
	movl	$1, %ebp
	cmpl	$1, %r13d
	movq	104(%rsp), %r12         # 8-byte Reload
	movq	56(%rsp), %r13          # 8-byte Reload
	movq	24(%rsp), %r9           # 8-byte Reload
	jg	.LBB48_10
# %bb.8:
	testl	%r15d, %r15d
	movq	96(%rsp), %rcx          # 8-byte Reload
	jns	.LBB48_12
.LBB48_9:                               # %.loopexit9
	movl	$2, %ebp
.LBB48_10:
	movl	%ebp, %eax
	addq	$472, %rsp              # imm = 0x1D8
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB48_11:
	.cfi_def_cfa_offset 528
	movb	$1, %cl
	movl	%r12d, %r15d
	movq	104(%rsp), %r12         # 8-byte Reload
	movq	56(%rsp), %r13          # 8-byte Reload
	movq	24(%rsp), %r9           # 8-byte Reload
.LBB48_12:
	movb	$1, %dl
	cmpl	$0, 4(%rsp)             # 4-byte Folded Reload
	jne	.LBB48_16
# %bb.13:
	movl	%r15d, %eax
	leaq	(%rax,%rax,2), %rax
	movl	$18, %ebp
	cmpl	$1, aliases+16(,%rax,8)
	jne	.LBB48_10
# %bb.14:
	xorl	%edx, %edx
	jmp	.LBB48_16
.LBB48_15:
	incq	%rdi
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movl	$-1, %r15d
	movb	$1, %dl
	xorl	%ecx, %ecx
.LBB48_16:
	movb	$1, %al
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	testb	%al, %cl
	sete	%sil
	leaq	72(%r12), %rcx
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	leaq	264(%r13), %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	272(%r13), %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	leaq	808(%r13), %rcx
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	leaq	936(%r13), %rcx
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movzbl	%dl, %edi
	movl	%edx, %ecx
	xorb	%al, %cl
	movb	%cl, 23(%rsp)           # 1-byte Spill
	movzbl	%cl, %ecx
	movl	%ecx, 136(%rsp)         # 4-byte Spill
	leaq	832(%r13), %rcx
	movq	%rcx, 416(%rsp)         # 8-byte Spill
	leaq	824(%r13), %rcx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	leaq	816(%r13), %rcx
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	leal	(,%rdi,4), %ecx
	movzbl	%cl, %ecx
	movl	%ecx, 132(%rsp)         # 4-byte Spill
	leaq	168(%r13), %rcx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	cmpb	%al, %dil
	movl	$2, %eax
	sbbl	$0, %eax
	movl	%eax, 140(%rsp)         # 4-byte Spill
	leaq	960(%r13), %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	896(%r13), %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	904(%r13), %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	912(%r13), %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	920(%r13), %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	688(%r13), %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	leaq	560(%r13), %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	680(%r13), %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	leaq	552(%r13), %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	136(%r13), %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	32(%r13), %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	48(%r13), %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	leaq	1208(%r13), %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	leaq	848(%r13), %rax
	movq	%rax, 328(%rsp)         # 8-byte Spill
	leaq	952(%r13), %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	leaq	1184(%r13), %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	leaq	944(%r13), %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	112(%r13), %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	leaq	96(%r13), %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	416(%r13), %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	leaq	1096(%r13), %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	leaq	1112(%r13), %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	232(%r13), %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	240(%r13), %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	1064(%r13), %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	leaq	1056(%r13), %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	leaq	1040(%r13), %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	80(%r13), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	leaq	184(%r13), %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	leaq	872(%r13), %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	leaq	176(%r13), %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	xorl	%edi, %edi
	movl	%edx, 4(%rsp)           # 4-byte Spill
	movb	%sil, 8(%rsp)           # 1-byte Spill
.LBB48_17:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_29 Depth 2
                                        #     Child Loop BB48_177 Depth 2
                                        #     Child Loop BB48_352 Depth 2
                                        #     Child Loop BB48_294 Depth 2
                                        #     Child Loop BB48_756 Depth 2
	testb	$1, 96(%rsp)            # 1-byte Folded Reload
	je	.LBB48_19
# %bb.18:                               #   in Loop: Header=BB48_17 Depth=1
	movq	48(%rsp), %rax          # 8-byte Reload
	movb	1(%rax), %r14b
	jmp	.LBB48_20
.LBB48_19:                              #   in Loop: Header=BB48_17 Depth=1
	xorl	%r14d, %r14d
	movq	48(%rsp), %rax          # 8-byte Reload
.LBB48_20:                              #   in Loop: Header=BB48_17 Depth=1
	movsbl	(%rax), %ebx
	testl	%r15d, %r15d
	js	.LBB48_28
.LBB48_21:                              #   in Loop: Header=BB48_17 Depth=1
	movl	%r15d, %eax
	leaq	(%rax,%rax,2), %rax
	movl	aliases+16(,%rax,8), %eax
	cmpl	$2, %eax
	jb	.LBB48_25
# %bb.22:                               #   in Loop: Header=BB48_17 Depth=1
	testb	$1, 96(%rsp)            # 1-byte Folded Reload
	jne	.LBB48_31
# %bb.23:                               #   in Loop: Header=BB48_17 Depth=1
	movq	48(%rsp), %rcx          # 8-byte Reload
	cmpb	$0, 1(%rcx)
	je	.LBB48_31
# %bb.24:                               #   in Loop: Header=BB48_17 Depth=1
	movq	48(%rsp), %rcx          # 8-byte Reload
	leaq	1(%rcx), %r9
	movb	$1, %dil
	jmp	.LBB48_33
.LBB48_25:                              #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	jne	.LBB48_37
# %bb.26:                               #   in Loop: Header=BB48_17 Depth=1
	testl	%eax, %eax
	jne	.LBB48_37
	jmp	.LBB48_27
.LBB48_28:                              # %.preheader7
                                        #   in Loop: Header=BB48_17 Depth=1
	movl	$aliases, %eax
	xorl	%r15d, %r15d
.LBB48_29:                              #   Parent Loop BB48_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax), %rcx
	cmpb	(%rcx), %bl
	je	.LBB48_21
# %bb.30:                               #   in Loop: Header=BB48_29 Depth=2
	incq	%r15
	addq	$24, %rax
	cmpq	$248, %r15
	jne	.LBB48_29
	jmp	.LBB48_9
.LBB48_31:                              #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_838
# %bb.32:                               #   in Loop: Header=BB48_17 Depth=1
	movq	200(%rsp), %rcx         # 8-byte Reload
	movb	$1, (%rcx)
.LBB48_33:                              #   in Loop: Header=BB48_17 Depth=1
	cmpl	$3, %eax
	jne	.LBB48_37
# %bb.34:                               #   in Loop: Header=BB48_17 Depth=1
	cmpb	$45, (%r9)
	jne	.LBB48_37
# %bb.35:                               #   in Loop: Header=BB48_17 Depth=1
	cmpb	$0, 1(%r9)
	je	.LBB48_37
# %bb.36:                               #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.1.105, %esi
	movq	%rdi, %r15
	movq	%r12, %rdi
	movq	%r9, %rdx
	xorl	%eax, %eax
	movq	%r9, %rbp
	callq	warnf
	movq	%r15, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbp, %r9
.LBB48_37:                              #   in Loop: Header=BB48_17 Depth=1
	leal	-35(%rbx), %eax
	cmpl	$87, %eax
	ja	.LBB48_9
# %bb.38:                               #   in Loop: Header=BB48_17 Depth=1
	movl	$15, %ebp
	jmpq	*.LJTI48_0(,%rax,8)
.LBB48_39:                              #   in Loop: Header=BB48_17 Depth=1
	cmpb	$109, %r14b
	jne	.LBB48_211
# %bb.40:                               #   in Loop: Header=BB48_17 Depth=1
	movb	23(%rsp), %al           # 1-byte Reload
	movb	%al, 5(%r12)
	jmp	.LBB48_782
.LBB48_41:                              #   in Loop: Header=BB48_17 Depth=1
	movsbl	%r14b, %eax
	addl	$-33, %eax
	cmpl	$93, %eax
	ja	.LBB48_782
# %bb.42:                               #   in Loop: Header=BB48_17 Depth=1
	jmpq	*.LJTI48_5(,%rax,8)
.LBB48_43:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1048(%r13)
	jmp	.LBB48_782
.LBB48_44:                              #   in Loop: Header=BB48_17 Depth=1
	movsbl	%r14b, %eax
	addl	$-52, %eax
	cmpl	$74, %eax
	ja	.LBB48_782
# %bb.45:                               #   in Loop: Header=BB48_17 Depth=1
	jmpq	*.LJTI48_6(,%rax,8)
.LBB48_46:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	296(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_48
# %bb.47:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 296(%r13)
.LBB48_48:                              #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.49:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 296(%r13)
	jmp	.LBB48_781
.LBB48_50:                              #   in Loop: Header=BB48_17 Depth=1
	movsbl	%r14b, %eax
	leal	-49(%rax), %ecx
	cmpl	$8, %ecx
	ja	.LBB48_276
# %bb.51:                               #   in Loop: Header=BB48_17 Depth=1
	jmpq	*.LJTI48_4(,%rcx,8)
.LBB48_52:                              #   in Loop: Header=BB48_17 Depth=1
	movq	$2, 776(%r13)
	jmp	.LBB48_782
.LBB48_53:                              #   in Loop: Header=BB48_17 Depth=1
	movsbl	%r14b, %eax
	cmpl	$64, %eax
	jg	.LBB48_256
# %bb.54:                               #   in Loop: Header=BB48_17 Depth=1
	leal	-48(%rax), %ecx
	cmpl	$3, %ecx
	ja	.LBB48_286
# %bb.55:                               #   in Loop: Header=BB48_17 Depth=1
	jmpq	*.LJTI48_3(,%rcx,8)
.LBB48_56:                              #   in Loop: Header=BB48_17 Depth=1
	movq	$4, 840(%r13)
	jmp	.LBB48_782
.LBB48_57:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.12.116, %esi
	jmp	.LBB48_59
.LBB48_58:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.13.117, %esi
.LBB48_59:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	%r9, %rbx
	callq	warnf
.LBB48_60:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rbp, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbx, %r9
	jmp	.LBB48_782
.LBB48_61:                              #   in Loop: Header=BB48_17 Depth=1
	movq	$1, 864(%r13)
	jmp	.LBB48_782
.LBB48_62:                              #   in Loop: Header=BB48_17 Depth=1
	movq	$2, 864(%r13)
	jmp	.LBB48_782
.LBB48_63:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_65
# %bb.64:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 24(%r13)
.LBB48_65:                              #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.66:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 24(%r13)
	jmp	.LBB48_781
.LBB48_67:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 451(%r13)
	jmp	.LBB48_782
.LBB48_68:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movl	$.L.str.5.109, %esi
	movq	%r9, %rdi
	movq	%r9, %rbp
	callq	strcmp
	testl	%eax, %eax
	je	.LBB48_227
# %bb.69:                               #   in Loop: Header=BB48_17 Depth=1
	movq	424(%rsp), %rdi         # 8-byte Reload
	movq	%rbp, %rbx
	movq	%rbp, %rsi
	callq	str2offset
	testl	%eax, %eax
	jne	.LBB48_840
# %bb.70:                               #   in Loop: Header=BB48_17 Depth=1
	movb	$0, 89(%r13)
	movq	%rbx, %r9
	jmp	.LBB48_228
.LBB48_71:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	208(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_73
# %bb.72:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 208(%r13)
.LBB48_73:                              #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.74:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 208(%r13)
	jmp	.LBB48_781
.LBB48_75:                              #   in Loop: Header=BB48_17 Depth=1
	movsbl	%r14b, %eax
	movl	$2, %ebp
	leal	-48(%rax), %ecx
	cmpl	$74, %ecx
	ja	.LBB48_379
# %bb.76:                               #   in Loop: Header=BB48_17 Depth=1
	jmpq	*.LJTI48_2(,%rcx,8)
.LBB48_77:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	672(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_79
# %bb.78:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 672(%r13)
.LBB48_79:                              #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.80:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 672(%r13)
	jmp	.LBB48_781
.LBB48_81:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r15
	xorl	%r8d, %r8d
	cmpb	$115, %r14b
	sete	%r8b
	movq	%r13, %rdi
	movq	%r9, %rbx
	movq	%r9, %rsi
	movq	440(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	callq	formparse
	movl	$4, %ebp
	testl	%eax, %eax
	jne	.LBB48_10
# %bb.82:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r13, %rdi
	movl	$3, %esi
	movq	176(%rsp), %rdx         # 8-byte Reload
	callq	SetHTTPrequest
	testl	%eax, %eax
	movq	%rbx, %r9
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r15, %rdi
	je	.LBB48_782
	jmp	.LBB48_10
.LBB48_83:                              #   in Loop: Header=BB48_17 Depth=1
	cmpb	$97, %r14b
	jne	.LBB48_212
# %bb.84:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	768(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_86
# %bb.85:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 768(%r13)
.LBB48_86:                              #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.87:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 768(%r13)
	jmp	.LBB48_781
.LBB48_88:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r15
	cmpb	$64, (%r9)
	jne	.LBB48_839
# %bb.89:                               #   in Loop: Header=BB48_17 Depth=1
	movq	%r13, 56(%rsp)          # 8-byte Spill
	movq	%r9, 24(%rsp)           # 8-byte Spill
	leaq	1(%r9), %rbp
	movl	$.L.str.5.109, %esi
	movq	%rbp, %rdi
	callq	strcmp
	movl	%eax, %ebx
	testl	%eax, %eax
	je	.LBB48_288
# %bb.90:                               #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.22.126, %esi
	movq	%rbp, %rdi
	callq	fopen
	movq	%rax, %r13
	jmp	.LBB48_289
.LBB48_91:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 456(%r13)
	movb	%dl, 455(%r13)
	movq	%rdi, %rbp
	movq	%r13, %rdi
	movl	140(%rsp), %esi         # 4-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	%r9, %rbx
	callq	SetHTTPrequest
	movq	%rbp, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbx, %r9
	testl	%eax, %eax
	je	.LBB48_782
	jmp	.LBB48_805
.LBB48_92:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1120(%r13)
	jmp	.LBB48_782
.LBB48_93:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	%r9, %rdi
	movq	%r12, %rsi
	movq	%r9, %rbx
	callq	parseconfig
	testl	%eax, %eax
	je	.LBB48_271
# %bb.94:                               #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.24.128, %esi
	movq	%r12, %rdi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB48_271
.LBB48_95:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 458(%r13)
	cmpb	$116, %r14b
	jne	.LBB48_782
# %bb.96:                               #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 459(%r13)
	jmp	.LBB48_782
.LBB48_844:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_782
	jmp	.LBB48_845
.LBB48_97:                              #   in Loop: Header=BB48_17 Depth=1
	testb	$1, 96(%rsp)            # 1-byte Folded Reload
	jne	.LBB48_846
# %bb.98:                               #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 785(%r13)
	jmp	.LBB48_782
.LBB48_99:                              #   in Loop: Header=BB48_17 Depth=1
	cmpb	$98, %r14b
	je	.LBB48_236
# %bb.100:                              #   in Loop: Header=BB48_17 Depth=1
	cmpb	$97, %r14b
	jne	.LBB48_102
# %bb.101:                              #   in Loop: Header=BB48_17 Depth=1
	movl	132(%rsp), %eax         # 4-byte Reload
	movl	%eax, 1124(%r13)
	jmp	.LBB48_782
.LBB48_102:                             #   in Loop: Header=BB48_17 Depth=1
	movq	496(%r13), %rbp
	testq	%rbp, %rbp
	jne	.LBB48_105
# %bb.103:                              #   in Loop: Header=BB48_17 Depth=1
	movq	472(%r13), %rbp
	jmp	.LBB48_104
.LBB48_107:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	216(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_109
# %bb.108:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 216(%r13)
.LBB48_109:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.110:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 216(%r13)
	jmp	.LBB48_781
.LBB48_111:                             #   in Loop: Header=BB48_17 Depth=1
	movsbl	(%r9), %eax
	movq	%rdi, %r14
	cmpl	$43, %eax
	je	.LBB48_240
# %bb.112:                              #   in Loop: Header=BB48_17 Depth=1
	cmpl	$45, %eax
	jne	.LBB48_241
# %bb.113:                              #   in Loop: Header=BB48_17 Depth=1
	incq	%r9
	movq	408(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_242
.LBB48_114:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, (%r13)
	jmp	.LBB48_782
.LBB48_115:                             #   in Loop: Header=BB48_17 Depth=1
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	%eax, (%r12)
	jmp	.LBB48_782
.LBB48_116:                             #   in Loop: Header=BB48_17 Depth=1
	movq	504(%r13), %rbx
	testq	%rbx, %rbx
	jne	.LBB48_119
# %bb.117:                              #   in Loop: Header=BB48_17 Depth=1
	movq	472(%r13), %rbx
	jmp	.LBB48_118
.LBB48_121:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	376(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_123
# %bb.122:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 376(%r13)
.LBB48_123:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_188
# %bb.124:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 376(%r13)
	jmp	.LBB48_187
.LBB48_847:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_782
	jmp	.LBB48_848
.LBB48_125:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	744(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_127
# %bb.126:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 744(%r13)
.LBB48_127:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.128:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 744(%r13)
	jmp	.LBB48_781
.LBB48_129:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	%r9, %rbx
	movq	%r9, %rsi
	callq	str2unum
	testl	%eax, %eax
	jne	.LBB48_840
# %bb.130:                              #   in Loop: Header=BB48_17 Depth=1
	movq	184(%rsp), %rax         # 8-byte Reload
	cmpq	$0, (%rax)
	jne	.LBB48_271
# %bb.131:                              #   in Loop: Header=BB48_17 Depth=1
	movq	$30, (%rax)
	jmp	.LBB48_271
.LBB48_132:                             #   in Loop: Header=BB48_17 Depth=1
	movsbl	%r14b, %eax
	testl	%eax, %eax
	je	.LBB48_262
# %bb.133:                              #   in Loop: Header=BB48_17 Depth=1
	cmpl	$98, %eax
	je	.LBB48_263
# %bb.134:                              #   in Loop: Header=BB48_17 Depth=1
	cmpl	$99, %eax
	jne	.LBB48_782
# %bb.135:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 80(%r12)
	jmp	.LBB48_782
.LBB48_136:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 450(%r13)
	jmp	.LBB48_782
.LBB48_137:                             #   in Loop: Header=BB48_17 Depth=1
	movsbl	%r14b, %eax
	cmpl	$98, %eax
	je	.LBB48_244
# %bb.138:                              #   in Loop: Header=BB48_17 Depth=1
	cmpl	$97, %eax
	jne	.LBB48_249
# %bb.139:                              #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$1, 35(%rax)
	je	.LBB48_841
# %bb.140:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	56(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_142
# %bb.141:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 56(%r13)
.LBB48_142:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.143:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 56(%r13)
	jmp	.LBB48_781
.LBB48_144:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	40(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_146
# %bb.145:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 40(%r13)
.LBB48_146:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.147:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 40(%r13)
	jmp	.LBB48_781
.LBB48_148:                             #   in Loop: Header=BB48_17 Depth=1
	xorl	%eax, %eax
	movq	%rax, 64(%rsp)
	movq	%rax, 32(%rsp)
	cmpb	$101, %r14b
	movq	%r12, 104(%rsp)         # 8-byte Spill
	movq	%rdi, 208(%rsp)         # 8-byte Spill
	jne	.LBB48_213
# %bb.149:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movl	$61, %esi
	movq	%r9, %rbp
	callq	strchr
	testq	%rax, %rax
	movq	%rbp, 24(%rsp)          # 8-byte Spill
	jne	.LBB48_151
# %bb.150:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rbp, %rdi
	movl	$64, %esi
	callq	strchr
	testq	%rax, %rax
	je	.LBB48_345
.LBB48_151:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, %r15
	subq	%rbp, %r15
	cmpb	$64, (%rax)
	leaq	1(%rax), %rbx
	jne	.LBB48_347
# %bb.152:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.5.109, %edi
	movq	%rbx, %rsi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB48_337
# %bb.153:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.14.118, %esi
	movq	%rbx, %rdi
	callq	fopen
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	.LBB48_338
# %bb.154:                              #   in Loop: Header=BB48_17 Depth=1
	xorl	%ebx, %ebx
	movl	$.L.str.15.119, %esi
	movq	%r12, %rdi
	movq	24(%rsp), %rdx          # 8-byte Reload
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB48_338
.LBB48_155:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movl	$.L.str.18.122, %esi
	movq	%r9, %rbp
	movq	%r9, %rdi
	callq	strstr
	testq	%rax, %rax
	je	.LBB48_229
# %bb.156:                              #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 452(%r13)
	movb	$0, (%rax)
	jmp	.LBB48_230
.LBB48_157:                             #   in Loop: Header=BB48_17 Depth=1
	movsbl	%r14b, %eax
	addl	$-97, %eax
	cmpl	$3, %eax
	ja	.LBB48_278
# %bb.158:                              #   in Loop: Header=BB48_17 Depth=1
	jmpq	*.LJTI48_1(,%rax,8)
.LBB48_159:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 64(%r12)
	jmp	.LBB48_282
.LBB48_160:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 787(%r13)
	jmp	.LBB48_782
.LBB48_849:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_782
	jmp	.LBB48_850
.LBB48_161:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 455(%r13)
	jmp	.LBB48_782
.LBB48_162:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 72(%r13)
	jmp	.LBB48_782
.LBB48_163:                             #   in Loop: Header=BB48_17 Depth=1
	cmpb	$100, %r14b
	jne	.LBB48_218
# %bb.164:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 790(%r13)
	jmp	.LBB48_782
.LBB48_165:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 457(%r13)
	jmp	.LBB48_782
.LBB48_166:                             #   in Loop: Header=BB48_17 Depth=1
	movabsq	$9223372036854775, %rdx # imm = 0x20C49BA5E353F7
	movq	%rdi, %rbp
	movq	448(%rsp), %rdi         # 8-byte Reload
.LBB48_711:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	str2udouble
	jmp	.LBB48_712
.LBB48_167:                             #   in Loop: Header=BB48_17 Depth=1
	movsbl	%r14b, %eax
	cmpl	$101, %eax
	je	.LBB48_251
# %bb.168:                              #   in Loop: Header=BB48_17 Depth=1
	cmpl	$111, %eax
	jne	.LBB48_255
# %bb.169:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 460(%r13)
	jmp	.LBB48_782
.LBB48_170:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 449(%r13)
	jmp	.LBB48_782
.LBB48_171:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movzbl	(%r9), %edi
	movq	%r9, %rbx
	callq	Curl_isdigit
	testl	%eax, %eax
	je	.LBB48_175
# %bb.172:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %rdi
	movl	$45, %esi
	callq	strchr
	testq	%rax, %rax
	jne	.LBB48_175
# %bb.173:                              #   in Loop: Header=BB48_17 Depth=1
	leaq	32(%rsp), %rcx
	movq	%rbx, %rbp
	movq	%rbx, %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	curlx_strtoofft
	testl	%eax, %eax
	jne	.LBB48_856
# %bb.174:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.26.130, %esi
	movq	%r12, %rdi
	xorl	%eax, %eax
	callq	warnf
	movq	32(%rsp), %rcx
	leaq	64(%rsp), %rbx
	movl	$32, %esi
	movl	$.L.str.27, %edx
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_msnprintf
	movq	256(%r13), %rdi
	callq	myFree
	movq	$0, 256(%r13)
	movq	%rbx, %rdi
	callq	strdup
	movq	%rax, 256(%r13)
	testq	%rax, %rax
	movq	%rbp, %rbx
	je	.LBB48_709
.LBB48_175:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %rbp
	movb	(%rbx), %al
	testb	%al, %al
	je	.LBB48_305
# %bb.176:                              # %.preheader4
                                        #   in Loop: Header=BB48_17 Depth=1
	leaq	1(%rbp), %rbx
.LBB48_177:                             #   Parent Loop BB48_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	%al, %edi
	callq	Curl_isdigit
	testl	%eax, %eax
	jne	.LBB48_179
# %bb.178:                              #   in Loop: Header=BB48_177 Depth=2
	movb	-1(%rbx), %al
	andb	$-2, %al
	cmpb	$44, %al
	jne	.LBB48_304
.LBB48_179:                             #   in Loop: Header=BB48_177 Depth=2
	movb	(%rbx), %al
	incq	%rbx
	testb	%al, %al
	jne	.LBB48_177
	jmp	.LBB48_305
.LBB48_180:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 5(%r12)
	movb	%dl, 4(%r12)
	cmpl	$0, (%r12)
	jns	.LBB48_782
# %bb.181:                              #   in Loop: Header=BB48_17 Depth=1
	movl	136(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%r12)
	jmp	.LBB48_782
.LBB48_182:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	456(%rsp), %rdi         # 8-byte Reload
.LBB48_682:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	add2list
.LBB48_712:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbp, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbx, %r9
	testl	%eax, %eax
	je	.LBB48_782
	jmp	.LBB48_840
.LBB48_183:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	312(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_185
# %bb.184:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 312(%r13)
.LBB48_185:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_188
# %bb.186:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 312(%r13)
.LBB48_187:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_188:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	cleanarg
	jmp	.LBB48_271
.LBB48_189:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_235
# %bb.190:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	%r9, %rbx
	movq	24(%r12), %rdi
	callq	myFree
	movq	$0, 24(%r12)
	movl	$.L.str.29, %edi
	callq	strdup
	movq	%rax, 24(%r12)
	testq	%rax, %rax
	je	.LBB48_709
# %bb.191:                              #   in Loop: Header=BB48_17 Depth=1
	movl	44(%r12), %eax
	testl	%eax, %eax
	movq	%rbx, %r9
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%rbp, %rdi
	je	.LBB48_194
# %bb.192:                              #   in Loop: Header=BB48_17 Depth=1
	cmpl	$3, %eax
	je	.LBB48_194
# %bb.193:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.30, %esi
	movq	%r12, %rdi
	xorl	%eax, %eax
	callq	warnf
	movq	%rbp, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%rbx, %r9
.LBB48_194:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$3, 44(%r12)
	movl	4(%rsp), %edx           # 4-byte Reload
	jmp	.LBB48_782
.LBB48_195:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r15
	cmpb	$64, (%r9)
	jne	.LBB48_219
# %bb.196:                              #   in Loop: Header=BB48_17 Depth=1
	incq	%r9
	movl	$.L.str.5.109, %edi
	movq	%r9, %rsi
	movq	%r9, %r14
	callq	strcmp
	testl	%eax, %eax
	movq	%r14, 24(%rsp)          # 8-byte Spill
	je	.LBB48_296
# %bb.197:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.22.126, %esi
	movq	%r14, %rdi
	callq	fopen
	movq	%rax, %rbp
	jmp	.LBB48_297
.LBB48_198:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	cmpb	$97, %r14b
	jne	.LBB48_222
# %bb.199:                              #   in Loop: Header=BB48_17 Depth=1
	movq	992(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_201
# %bb.200:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 992(%r13)
.LBB48_201:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.202:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 992(%r13)
	jmp	.LBB48_781
.LBB48_203:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	%r9, %rbx
	movq	%r9, %rsi
	callq	str2unum
	testl	%eax, %eax
	jne	.LBB48_840
# %bb.204:                              #   in Loop: Header=BB48_17 Depth=1
	movq	192(%rsp), %rax         # 8-byte Reload
	cmpq	$0, (%rax)
	jne	.LBB48_271
# %bb.205:                              #   in Loop: Header=BB48_17 Depth=1
	movq	$1, (%rax)
	jmp	.LBB48_271
.LBB48_206:                             #   in Loop: Header=BB48_17 Depth=1
	movsbl	(%r9), %eax
	cmpl	$61, %eax
	je	.LBB48_267
# %bb.207:                              #   in Loop: Header=BB48_17 Depth=1
	cmpl	$45, %eax
	je	.LBB48_268
# %bb.208:                              #   in Loop: Header=BB48_17 Depth=1
	cmpl	$43, %eax
	jne	.LBB48_210
# %bb.209:                              #   in Loop: Header=BB48_17 Depth=1
	incq	%r9
.LBB48_210:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movl	$1, 880(%r13)
	jmp	.LBB48_270
.LBB48_211:                             #   in Loop: Header=BB48_17 Depth=1
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	%eax, 52(%r12)
	jmp	.LBB48_782
.LBB48_212:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 788(%r13)
	jmp	.LBB48_782
.LBB48_839:                             #   in Loop: Header=BB48_17 Depth=1
	cmpb	$112, %r14b
	movq	168(%rsp), %rdi         # 8-byte Reload
	cmoveq	160(%rsp), %rdi         # 8-byte Folded Reload
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	add2list
	movq	%rbx, %r9
	testl	%eax, %eax
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r15, %rdi
	je	.LBB48_782
	jmp	.LBB48_840
.LBB48_213:                             #   in Loop: Header=BB48_17 Depth=1
	cmpb	$114, %r14b
	je	.LBB48_274
# %bb.214:                              #   in Loop: Header=BB48_17 Depth=1
	cmpb	$64, (%r9)
	jne	.LBB48_274
# %bb.215:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r13, %rbx
	incq	%r9
	movl	$.L.str.5.109, %edi
	movq	%r9, %rsi
	movq	%r9, %rbp
	callq	strcmp
	testl	%eax, %eax
	movq	%rbp, 24(%rsp)          # 8-byte Spill
	je	.LBB48_325
# %bb.216:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.14.118, %esi
	movq	%rbp, %rdi
	callq	fopen
	movq	%rax, %r13
	testq	%rax, %rax
	jne	.LBB48_326
# %bb.217:                              #   in Loop: Header=BB48_17 Depth=1
	xorl	%r13d, %r13d
	movl	$.L.str.15.119, %esi
	movq	%r12, %rdi
	movq	24(%rsp), %rdx          # 8-byte Reload
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB48_326
.LBB48_218:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 789(%r13)
	jmp	.LBB48_782
.LBB48_219:                             #   in Loop: Header=BB48_17 Depth=1
	movq	112(%rsp), %rbp         # 8-byte Reload
	movq	(%rbp), %rdi
	testq	%rdi, %rdi
	je	.LBB48_221
# %bb.220:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, (%rbp)
.LBB48_221:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, (%rbp)
	testq	%rax, %rax
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r15, %rdi
	jne	.LBB48_782
	jmp	.LBB48_709
.LBB48_222:                             #   in Loop: Header=BB48_17 Depth=1
	movq	384(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_224
# %bb.223:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 384(%r13)
.LBB48_224:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_226
# %bb.225:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 384(%r13)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_226:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$0, 392(%r13)
	jmp	.LBB48_317
.LBB48_227:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 89(%r13)
	movq	$0, 136(%r13)
	movq	%rbp, %r9
.LBB48_228:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 88(%r13)
	jmp	.LBB48_816
.LBB48_229:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$0, 452(%r13)
.LBB48_230:                             #   in Loop: Header=BB48_17 Depth=1
	xorl	%ebx, %ebx
	movq	%rbp, %r9
	cmpb	$0, (%rbp)
	cmovneq	%rbp, %rbx
	movq	160(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_232
# %bb.231:                              #   in Loop: Header=BB48_17 Depth=1
	callq	myFree
	movq	%rbp, %r9
	movq	$0, 160(%r13)
.LBB48_232:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%rbx, %rbx
	je	.LBB48_816
# %bb.233:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %rdi
	callq	strdup
	movq	%rbp, %r9
	movq	%rax, 160(%r13)
	jmp	.LBB48_234
.LBB48_235:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$0, 44(%r12)
	jmp	.LBB48_782
.LBB48_236:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	200(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_238
# %bb.237:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 200(%r13)
.LBB48_238:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.239:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 200(%r13)
	jmp	.LBB48_781
.LBB48_240:                             #   in Loop: Header=BB48_17 Depth=1
	incq	%r9
	movq	416(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_242
.LBB48_241:                             #   in Loop: Header=BB48_17 Depth=1
	movq	400(%rsp), %rdi         # 8-byte Reload
.LBB48_242:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	movq	%r9, %rsi
	callq	add2list
	movl	%eax, %ebp
	testl	%eax, %eax
.LBB48_243:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %r9
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r14, %rdi
	je	.LBB48_782
	jmp	.LBB48_10
.LBB48_244:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$16, 35(%rax)
	je	.LBB48_841
# %bb.245:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	64(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_247
# %bb.246:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 64(%r13)
.LBB48_247:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.248:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 64(%r13)
	jmp	.LBB48_781
.LBB48_249:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	cmpb	$64, (%r9)
	jne	.LBB48_308
# %bb.250:                              #   in Loop: Header=BB48_17 Depth=1
	incq	%r9
	jmp	.LBB48_370
.LBB48_251:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	464(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_253
# %bb.252:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 464(%r13)
.LBB48_253:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.254:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 464(%r13)
	jmp	.LBB48_781
.LBB48_255:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 461(%r13)
	jmp	.LBB48_782
.LBB48_256:                             #   in Loop: Header=BB48_17 Depth=1
	cmpl	$65, %eax
	je	.LBB48_321
# %bb.257:                              #   in Loop: Header=BB48_17 Depth=1
	cmpl	$66, %eax
	jne	.LBB48_782
# %bb.258:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	544(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_260
# %bb.259:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 544(%r13)
.LBB48_260:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.261:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 544(%r13)
	jmp	.LBB48_781
.LBB48_262:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 66(%r12)
	jmp	.LBB48_782
.LBB48_263:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movq	392(%rsp), %rbp         # 8-byte Reload
	movq	%rbp, %rdi
	movq	%r9, %rbx
	movq	%r9, %rsi
	callq	str2unum
	testl	%eax, %eax
	jne	.LBB48_840
# %bb.264:                              #   in Loop: Header=BB48_17 Depth=1
	movq	(%rbp), %rax
	decq	%rax
	cmpq	$300, %rax              # imm = 0x12C
	movl	4(%rsp), %edx           # 4-byte Reload
	jb	.LBB48_266
# %bb.265:                              #   in Loop: Header=BB48_17 Depth=1
	movq	$50, (%rbp)
.LBB48_266:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %r9
	jmp	.LBB48_817
.LBB48_267:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movl	$3, 880(%r13)
	jmp	.LBB48_269
.LBB48_268:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movl	$2, 880(%r13)
.LBB48_269:                             #   in Loop: Header=BB48_17 Depth=1
	incq	%r9
.LBB48_270:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	xorl	%edi, %edi
	callq	time
	leaq	464(%rsp), %rsi
	movq	%rax, (%rsi)
	movq	%rbx, %rdi
	callq	curl_getdate
	movq	%rax, 888(%r13)
	cmpq	$-1, %rax
	je	.LBB48_272
.LBB48_271:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %r9
	jmp	.LBB48_317
.LBB48_272:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %r14
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	getfiletime
	testq	%rax, %rax
	js	.LBB48_315
# %bb.273:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, 888(%r13)
	jmp	.LBB48_316
.LBB48_274:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, 24(%rsp)           # 8-byte Spill
	movq	%r9, %rdi
	callq	strdup
	movq	%rax, 64(%rsp)
	testq	%rax, %rax
	je	.LBB48_709
# %bb.275:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, %r12
	movq	%rax, %rdi
	callq	strlen
	movq	%rax, 32(%rsp)
	jmp	.LBB48_364
.LBB48_276:                             #   in Loop: Header=BB48_17 Depth=1
	testl	%eax, %eax
	jne	.LBB48_782
# %bb.277:                              #   in Loop: Header=BB48_17 Depth=1
	movq	$1, 776(%r13)
	jmp	.LBB48_782
.LBB48_278:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 453(%r13)
	movl	%edx, %eax
	jmp	.LBB48_283
.LBB48_279:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 65(%r12)
	jmp	.LBB48_282
.LBB48_280:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 432(%r13)
	jmp	.LBB48_282
.LBB48_281:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 454(%r13)
.LBB48_282:                             #   in Loop: Header=BB48_17 Depth=1
	movb	453(%r13), %al
.LBB48_283:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%al, %al
	je	.LBB48_782
# %bb.284:                              #   in Loop: Header=BB48_17 Depth=1
	cmpb	$0, 454(%r13)
	je	.LBB48_782
	jmp	.LBB48_285
.LBB48_286:                             #   in Loop: Header=BB48_17 Depth=1
	testl	%eax, %eax
	jne	.LBB48_782
# %bb.287:                              #   in Loop: Header=BB48_17 Depth=1
	movq	$1, 840(%r13)
	jmp	.LBB48_782
.LBB48_288:                             #   in Loop: Header=BB48_17 Depth=1
	movq	stdin(%rip), %r13
.LBB48_289:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r13, %r13
	je	.LBB48_303
# %bb.290:                              #   in Loop: Header=BB48_17 Depth=1
	leaq	64(%rsp), %rdi
	leaq	32(%rsp), %rsi
	movq	%r13, %rdx
	callq	file2memory
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB48_374
# %bb.291:                              #   in Loop: Header=BB48_17 Depth=1
	movq	64(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB48_374
# %bb.292:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.23.127, %esi
	callq	strtok
	testq	%rax, %rax
	je	.LBB48_371
# %bb.293:                              #   in Loop: Header=BB48_17 Depth=1
	cmpb	$112, %r14b
	movq	168(%rsp), %r14         # 8-byte Reload
	cmoveq	160(%rsp), %r14         # 8-byte Folded Reload
.LBB48_294:                             #   Parent Loop BB48_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	add2list
	testl	%eax, %eax
	jne	.LBB48_372
# %bb.295:                              #   in Loop: Header=BB48_294 Depth=2
	xorl	%ebp, %ebp
	movl	$.L.str.23.127, %esi
	xorl	%edi, %edi
	callq	strtok
	testq	%rax, %rax
	jne	.LBB48_294
	jmp	.LBB48_373
.LBB48_296:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.31.131, %r14d
	movq	stdin(%rip), %rbp
.LBB48_297:                             #   in Loop: Header=BB48_17 Depth=1
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	(%rbx), %rdi
	callq	myFree
	xorl	%eax, %eax
	movq	%rax, (%rbx)
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	callq	file2string
	movl	%eax, %ebx
	testq	%rbp, %rbp
	je	.LBB48_300
# %bb.298:                              #   in Loop: Header=BB48_17 Depth=1
	cmpq	stdin(%rip), %rbp
	je	.LBB48_300
# %bb.299:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rbp, %rdi
	callq	fclose
.LBB48_300:                             #   in Loop: Header=BB48_17 Depth=1
	testl	%ebx, %ebx
	jne	.LBB48_854
# %bb.301:                              #   in Loop: Header=BB48_17 Depth=1
	movq	112(%rsp), %rax         # 8-byte Reload
	cmpq	$0, (%rax)
	jne	.LBB48_378
# %bb.302:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.32, %esi
	movq	%r12, %rdi
	movq	%r14, %rdx
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB48_378
.LBB48_303:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.7.111, %esi
	movq	%r12, %rdi
	movq	%rbp, %rdx
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB48_377
.LBB48_304:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.28, %esi
	movq	%r12, %rdi
	xorl	%eax, %eax
	callq	warnf
.LBB48_305:                             #   in Loop: Header=BB48_17 Depth=1
	movq	256(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_307
# %bb.306:                              #   in Loop: Header=BB48_17 Depth=1
	callq	myFree
	movq	$0, 256(%r13)
.LBB48_307:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbp, %rbx
	movq	%rbp, %rdi
	callq	strdup
	movq	%rbp, %r9
	movq	%rax, 256(%r13)
	jmp	.LBB48_234
.LBB48_308:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movl	$61, %esi
	movq	%r9, %rbx
	callq	strchr
	testq	%rax, %rax
	je	.LBB48_369
# %bb.309:                              #   in Loop: Header=BB48_17 Depth=1
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	%rbx, %rsi
	callq	add2list
.LBB48_796:                             #   in Loop: Header=BB48_17 Depth=1
	testl	%eax, %eax
	movq	%rbx, %r9
	jmp	.LBB48_797
.LBB48_310:                             #   in Loop: Header=BB48_17 Depth=1
	movq	$3, 776(%r13)
	jmp	.LBB48_782
.LBB48_311:                             #   in Loop: Header=BB48_17 Depth=1
	movq	$5, 776(%r13)
	jmp	.LBB48_782
.LBB48_312:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$2, 35(%rax)
	je	.LBB48_841
# %bb.313:                              #   in Loop: Header=BB48_17 Depth=1
	movq	$30, 776(%r13)
	jmp	.LBB48_782
.LBB48_314:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 784(%r13)
	jmp	.LBB48_782
.LBB48_315:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$0, 880(%r13)
	movl	$.L.str.33, %esi
	movq	%r12, %rdi
	xorl	%eax, %eax
	callq	warnf
.LBB48_316:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r14, %r9
	jmp	.LBB48_317
.LBB48_318:                             #   in Loop: Header=BB48_17 Depth=1
	movq	$5, 840(%r13)
	jmp	.LBB48_782
.LBB48_319:                             #   in Loop: Header=BB48_17 Depth=1
	movq	$6, 840(%r13)
	jmp	.LBB48_782
.LBB48_320:                             #   in Loop: Header=BB48_17 Depth=1
	movq	$7, 840(%r13)
	jmp	.LBB48_782
.LBB48_321:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	536(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_323
# %bb.322:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 536(%r13)
.LBB48_323:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.324:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 536(%r13)
.LBB48_781:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%rax, %rax
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%rbp, %rdi
	jne	.LBB48_782
	jmp	.LBB48_709
.LBB48_325:                             #   in Loop: Header=BB48_17 Depth=1
	movq	stdin(%rip), %r13
.LBB48_326:                             #   in Loop: Header=BB48_17 Depth=1
	cmpb	$98, %r14b
	jne	.LBB48_328
# %bb.327:                              #   in Loop: Header=BB48_17 Depth=1
	leaq	64(%rsp), %rdi
	leaq	32(%rsp), %rsi
	movq	%r13, %rdx
	callq	file2memory
	movl	%eax, %ebp
	jmp	.LBB48_330
.LBB48_328:                             #   in Loop: Header=BB48_17 Depth=1
	leaq	64(%rsp), %r14
	movq	%r14, %rdi
	movq	%r13, %rsi
	callq	file2string
	movl	%eax, %ebp
	movq	(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB48_330
# %bb.329:                              #   in Loop: Header=BB48_17 Depth=1
	callq	strlen
	movq	%rax, 32(%rsp)
.LBB48_330:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r13, %r13
	je	.LBB48_333
# %bb.331:                              #   in Loop: Header=BB48_17 Depth=1
	cmpq	stdin(%rip), %r13
	je	.LBB48_333
# %bb.332:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r13, %rdi
	callq	fclose
.LBB48_333:                             #   in Loop: Header=BB48_17 Depth=1
	testl	%ebp, %ebp
	jne	.LBB48_10
# %bb.334:                              #   in Loop: Header=BB48_17 Depth=1
	movq	64(%rsp), %r12
	testq	%r12, %r12
	je	.LBB48_336
# %bb.335:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %r13
	jmp	.LBB48_364
.LBB48_336:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.16.120, %edi
	callq	strdup
	movq	%rax, %r12
	movq	%rax, 64(%rsp)
	testq	%rax, %rax
	movq	%rbx, %r13
	jne	.LBB48_364
	jmp	.LBB48_709
.LBB48_337:                             #   in Loop: Header=BB48_17 Depth=1
	movq	stdin(%rip), %rbx
.LBB48_338:                             #   in Loop: Header=BB48_17 Depth=1
	leaq	64(%rsp), %rdi
	leaq	32(%rsp), %rsi
	movq	%rbx, %rdx
	callq	file2memory
	movl	%eax, %ebp
	testq	%rbx, %rbx
	je	.LBB48_341
# %bb.339:                              #   in Loop: Header=BB48_17 Depth=1
	cmpq	stdin(%rip), %rbx
	je	.LBB48_341
# %bb.340:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %rdi
	callq	fclose
.LBB48_341:                             #   in Loop: Header=BB48_17 Depth=1
	testl	%ebp, %ebp
	jne	.LBB48_10
# %bb.342:                              #   in Loop: Header=BB48_17 Depth=1
	movq	64(%rsp), %rbx
	testq	%rbx, %rbx
	jne	.LBB48_349
	jmp	.LBB48_343
.LBB48_345:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%rbp, %rbp
	je	.LBB48_343
# %bb.346:                              #   in Loop: Header=BB48_17 Depth=1
	xorl	%r15d, %r15d
	movq	24(%rsp), %rbx          # 8-byte Reload
.LBB48_347:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %rdi
	callq	strdup
	movq	%rax, 64(%rsp)
	testq	%rax, %rax
	je	.LBB48_709
# %bb.348:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, %rbx
	movq	%rax, %rdi
	callq	strlen
	movq	%rax, 32(%rsp)
.LBB48_349:                             #   in Loop: Header=BB48_17 Depth=1
	movl	32(%rsp), %edx
	xorl	%ebp, %ebp
	xorl	%edi, %edi
	movq	%rbx, %rsi
	callq	curl_easy_escape
	movq	%rax, %r14
	movq	64(%rsp), %rdi
	callq	myFree
	movq	%rbp, 64(%rsp)
	movl	$14, %ebp
	testq	%r14, %r14
	je	.LBB48_10
# %bb.350:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r14, %rdi
	callq	strlen
	xorl	%ebx, %ebx
	testq	%rax, %rax
	je	.LBB48_359
# %bb.351:                              # %.preheader
                                        #   in Loop: Header=BB48_17 Depth=1
	xorl	%ecx, %ecx
.LBB48_352:                             #   Parent Loop BB48_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	(%r14,%rcx), %dl
	cmpb	$37, %dl
	jne	.LBB48_356
# %bb.353:                              #   in Loop: Header=BB48_352 Depth=2
	cmpb	$50, 1(%rcx,%r14)
	jne	.LBB48_356
# %bb.354:                              #   in Loop: Header=BB48_352 Depth=2
	cmpb	$48, 2(%rcx,%r14)
	jne	.LBB48_356
# %bb.355:                              #   in Loop: Header=BB48_352 Depth=2
	movl	$3, %esi
	movb	$43, %dl
	jmp	.LBB48_357
.LBB48_356:                             #   in Loop: Header=BB48_352 Depth=2
	movl	$1, %esi
	cmpq	%rcx, %rbx
	je	.LBB48_358
.LBB48_357:                             #   in Loop: Header=BB48_352 Depth=2
	movb	%dl, (%r14,%rbx)
.LBB48_358:                             #   in Loop: Header=BB48_352 Depth=2
	addq	%rsi, %rcx
	incq	%rbx
	cmpq	%rax, %rcx
	jb	.LBB48_352
.LBB48_359:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r13, 56(%rsp)          # 8-byte Spill
	movb	$0, (%r14,%rbx)
	leaq	(%rbx,%r15), %r13
	addq	$2, %r13
	movq	%r13, %rdi
	callq	myMalloc
	testq	%rax, %rax
	je	.LBB48_855
# %bb.360:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, %r12
	addq	%r15, %rbx
	testq	%r15, %r15
	je	.LBB48_362
# %bb.361:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.17.121, %edx
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r15, %rcx
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	%r14, %r9
	xorl	%eax, %eax
	callq	curl_msnprintf
	incq	%rbx
	jmp	.LBB48_363
.LBB48_362:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	strcpy
.LBB48_363:                             #   in Loop: Header=BB48_17 Depth=1
	movq	56(%rsp), %r13          # 8-byte Reload
	movq	%rbx, 32(%rsp)
	movq	%r14, %rdi
	callq	curl_free
	movq	%r12, 64(%rsp)
	jmp	.LBB48_364
.LBB48_343:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.16.120, %edi
	callq	strdup
	movq	%rax, 64(%rsp)
	testq	%rax, %rax
	je	.LBB48_709
# %bb.344:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, %r12
	movq	$0, 32(%rsp)
.LBB48_364:                             #   in Loop: Header=BB48_17 Depth=1
	movq	144(%r13), %r14
	testq	%r14, %r14
	je	.LBB48_367
# %bb.365:                              #   in Loop: Header=BB48_17 Depth=1
	movq	152(%r13), %rbx
	movq	32(%rsp), %rdi
	callq	curlx_uztoso
	leaq	(%rbx,%rax), %rdi
	addq	$2, %rdi
	callq	myMalloc
	movq	%rax, 144(%r13)
	testq	%rax, %rax
	je	.LBB48_853
# %bb.366:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, %rbp
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	memcpy
	movb	$38, (%rbp,%rbx)
	leaq	(%rbx,%rbp), %rdi
	incq	%rdi
	movq	64(%rsp), %rsi
	movq	%r13, %r15
	movq	32(%rsp), %r13
	movq	%r13, %rdx
	callq	memcpy
	leaq	(%rbx,%r13), %rax
	incq	%rax
	movq	%r15, %r13
	movb	$0, (%rbp,%rax)
	movq	%r14, %rdi
	callq	myFree
	movq	64(%rsp), %rdi
	callq	myFree
	movq	$0, 64(%rsp)
	movq	32(%rsp), %rax
	movq	152(%r15), %rcx
	addq	%rcx, %rax
	incq	%rax
	jmp	.LBB48_368
.LBB48_367:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r12, 144(%r13)
	movq	32(%rsp), %rdi
	callq	curlx_uztoso
.LBB48_368:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, 152(%r13)
	movq	104(%rsp), %r12         # 8-byte Reload
	movq	24(%rsp), %r9           # 8-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	208(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_782
.LBB48_369:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %r9
.LBB48_370:                             #   in Loop: Header=BB48_17 Depth=1
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	add2list
	movq	%rbx, %r9
	testl	%eax, %eax
.LBB48_797:                             #   in Loop: Header=BB48_17 Depth=1
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r14, %rdi
	je	.LBB48_782
	jmp	.LBB48_840
.LBB48_371:                             #   in Loop: Header=BB48_17 Depth=1
	xorl	%ebp, %ebp
	jmp	.LBB48_373
.LBB48_372:                             #   in Loop: Header=BB48_17 Depth=1
	movl	%eax, %ebp
.LBB48_373:                             #   in Loop: Header=BB48_17 Depth=1
	movq	64(%rsp), %rdi
	callq	myFree
.LBB48_374:                             #   in Loop: Header=BB48_17 Depth=1
	testl	%ebx, %ebx
	je	.LBB48_376
# %bb.375:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r13, %rdi
	callq	fclose
.LBB48_376:                             #   in Loop: Header=BB48_17 Depth=1
	testl	%ebp, %ebp
	jne	.LBB48_10
.LBB48_377:                             #   in Loop: Header=BB48_17 Depth=1
	movq	56(%rsp), %r13          # 8-byte Reload
.LBB48_378:                             #   in Loop: Header=BB48_17 Depth=1
	movq	24(%rsp), %r9           # 8-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r15, %rdi
	jmp	.LBB48_782
.LBB48_379:                             #   in Loop: Header=BB48_17 Depth=1
	testl	%eax, %eax
	jne	.LBB48_10
# %bb.380:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	%r9, %rdi
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	jmp	.LBB48_636
.LBB48_381:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	304(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_383
# %bb.382:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 304(%r13)
.LBB48_383:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.384:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 304(%r13)
	jmp	.LBB48_781
.LBB48_385:                             #   in Loop: Header=BB48_17 Depth=1
	movq	488(%r13), %rbx
	testq	%rbx, %rbx
	jne	.LBB48_388
# %bb.386:                              #   in Loop: Header=BB48_17 Depth=1
	movq	472(%r13), %rbx
	jmp	.LBB48_387
.LBB48_390:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	1152(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_392
# %bb.391:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 1152(%r13)
.LBB48_392:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_394
# %bb.393:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 1152(%r13)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_394:                             #   in Loop: Header=BB48_17 Depth=1
	movq	40(%rsp), %rax          # 8-byte Reload
	orb	$64, (%rax)
	jmp	.LBB48_317
.LBB48_395:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	512(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_397
# %bb.396:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 512(%r13)
.LBB48_397:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.398:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 512(%r13)
	jmp	.LBB48_781
.LBB48_399:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	288(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_401
# %bb.400:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 288(%r13)
.LBB48_401:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.402:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 288(%r13)
	jmp	.LBB48_781
.LBB48_403:                             #   in Loop: Header=BB48_17 Depth=1
	movb	23(%rsp), %al           # 1-byte Reload
	movb	%al, 90(%r13)
	jmp	.LBB48_782
.LBB48_404:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	280(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_406
# %bb.405:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 280(%r13)
.LBB48_406:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.407:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 280(%r13)
	jmp	.LBB48_781
.LBB48_408:                             #   in Loop: Header=BB48_17 Depth=1
	movb	23(%rsp), %al           # 1-byte Reload
	movb	%al, 1160(%r13)
	jmp	.LBB48_782
.LBB48_409:                             #   in Loop: Header=BB48_17 Depth=1
	movb	23(%rsp), %al           # 1-byte Reload
	movb	%al, 1161(%r13)
	jmp	.LBB48_782
.LBB48_410:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 74(%r13)
	jmp	.LBB48_782
.LBB48_411:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_786
# %bb.412:                              #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	cmpw	$0, 32(%rax)
	movq	40(%rsp), %rax          # 8-byte Reload
	jns	.LBB48_841
# %bb.413:                              #   in Loop: Header=BB48_17 Depth=1
	orb	$32, (%rax)
	jmp	.LBB48_782
.LBB48_414:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$511, %edx              # imm = 0x1FF
	movq	%rdi, %rbp
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	oct2nummax
	jmp	.LBB48_712
.LBB48_415:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	orb	$-128, 80(%r13)
	movq	1224(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_417
# %bb.416:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 1224(%r13)
.LBB48_417:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.418:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 1224(%r13)
	jmp	.LBB48_781
.LBB48_419:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1216(%r13)
	jmp	.LBB48_782
.LBB48_420:                             #   in Loop: Header=BB48_17 Depth=1
	movb	23(%rsp), %al           # 1-byte Reload
	movb	%al, 91(%r13)
	jmp	.LBB48_782
.LBB48_421:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	8(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_423
# %bb.422:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 8(%r13)
.LBB48_423:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.424:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 8(%r13)
	jmp	.LBB48_781
.LBB48_425:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	16(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_427
# %bb.426:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 16(%r13)
.LBB48_427:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.428:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 16(%r13)
	jmp	.LBB48_781
.LBB48_429:                             #   in Loop: Header=BB48_17 Depth=1
	movabsq	$9223372036854775, %rdx # imm = 0x20C49BA5E353F7
	movq	%rdi, %rbp
	movq	352(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_711
.LBB48_430:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	520(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_432
# %bb.431:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 520(%r13)
.LBB48_432:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.433:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 520(%r13)
	jmp	.LBB48_781
.LBB48_434:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 90(%r13)
	jmp	.LBB48_782
.LBB48_435:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1217(%r13)
	jmp	.LBB48_782
.LBB48_436:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.LBB48_438
# %bb.437:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 24(%r12)
.LBB48_438:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_440
# %bb.439:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 24(%r12)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_440:                             #   in Loop: Header=BB48_17 Depth=1
	cmpl	$2, 44(%r12)
	jb	.LBB48_442
# %bb.441:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.2.106, %esi
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	%r9, %rbx
	callq	warnf
	movq	%rbx, %r9
.LBB48_442:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$1, 44(%r12)
	jmp	.LBB48_317
.LBB48_443:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.LBB48_445
# %bb.444:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 24(%r12)
.LBB48_445:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_447
# %bb.446:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 24(%r12)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_447:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$2, %eax
	movl	44(%r12), %ecx
	orl	%eax, %ecx
	cmpl	%eax, %ecx
	je	.LBB48_449
# %bb.448:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.3.107, %esi
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	%r9, %rbx
	callq	warnf
	movq	%rbx, %r9
.LBB48_449:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$2, 44(%r12)
	jmp	.LBB48_317
.LBB48_450:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	leaq	64(%rsp), %rcx
	movl	$.L.str.4.108, %edx
	movq	%r12, %rdi
	movq	%r9, %rbx
	movq	%r9, %rsi
	callq	GetSizeParameter
	testl	%eax, %eax
	jne	.LBB48_840
# %bb.451:                              #   in Loop: Header=BB48_17 Depth=1
	movq	64(%rsp), %rax
	movq	%rax, 976(%r13)
	movq	%rax, 968(%r13)
	jmp	.LBB48_492
.LBB48_452:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_454
# %bb.453:                              #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testl	$75497480, 32(%rax)     # imm = 0x4800008
	je	.LBB48_841
.LBB48_454:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 73(%r13)
	jmp	.LBB48_782
.LBB48_455:                             #   in Loop: Header=BB48_17 Depth=1
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rax
	testb	%dl, %dl
	je	.LBB48_787
# %bb.456:                              #   in Loop: Header=BB48_17 Depth=1
	orq	$2, %rax
	jmp	.LBB48_457
.LBB48_458:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_788
# %bb.459:                              #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$1, 33(%rax)
	movq	40(%rsp), %rax          # 8-byte Reload
	je	.LBB48_841
# %bb.460:                              #   in Loop: Header=BB48_17 Depth=1
	orb	$4, (%rax)
	jmp	.LBB48_782
.LBB48_461:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_789
# %bb.462:                              #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$16, 32(%rax)
	movq	40(%rsp), %rax          # 8-byte Reload
	je	.LBB48_841
# %bb.463:                              #   in Loop: Header=BB48_17 Depth=1
	orb	$8, (%rax)
	jmp	.LBB48_782
.LBB48_464:                             #   in Loop: Header=BB48_17 Depth=1
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rax
	testb	%dl, %dl
	je	.LBB48_790
# %bb.465:                              #   in Loop: Header=BB48_17 Depth=1
	orq	$1, %rax
	jmp	.LBB48_457
.LBB48_466:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_782
# %bb.467:                              #   in Loop: Header=BB48_17 Depth=1
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	$-17, (%rax)
	jmp	.LBB48_782
.LBB48_468:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 796(%r13)
	jmp	.LBB48_782
.LBB48_469:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 795(%r13)
	jmp	.LBB48_782
.LBB48_470:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r15
	movq	368(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r9, %r14
	movq	%r9, %rsi
	callq	str2num
	testl	%eax, %eax
	jne	.LBB48_840
# %bb.471:                              #   in Loop: Header=BB48_17 Depth=1
	cmpq	$-1, (%rbx)
	movq	%r14, %r9
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r15, %rdi
	jge	.LBB48_782
	jmp	.LBB48_472
.LBB48_473:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$16, 32(%rax)
	je	.LBB48_841
# %bb.474:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 799(%r13)
	jmp	.LBB48_782
.LBB48_475:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 736(%r13)
	jmp	.LBB48_782
.LBB48_476:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movl	$.L.str.5.109, %esi
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strcmp
	testl	%eax, %eax
	je	.LBB48_791
# %bb.477:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.6.110, %esi
	movq	%rbx, %r14
	movq	%rbx, %rdi
	callq	fopen
	testq	%rax, %rax
	je	.LBB48_806
# %bb.478:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, %rbx
	cmpb	$0, 16(%r12)
	je	.LBB48_480
# %bb.479:                              #   in Loop: Header=BB48_17 Depth=1
	movq	8(%r12), %rdi
	callq	fclose
.LBB48_480:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, 8(%r12)
	movb	$1, 16(%r12)
	jmp	.LBB48_316
.LBB48_481:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	224(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_483
# %bb.482:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 224(%r13)
.LBB48_483:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.484:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 224(%r13)
	jmp	.LBB48_781
.LBB48_485:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$1, 33(%rax)
	je	.LBB48_841
# %bb.486:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	760(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_488
# %bb.487:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 760(%r13)
.LBB48_488:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.489:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 760(%r13)
	jmp	.LBB48_781
.LBB48_490:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	leaq	64(%rsp), %rcx
	movl	$.L.str.8.112, %edx
	movq	%r12, %rdi
	movq	%r9, %rbx
	movq	%r9, %rsi
	callq	GetSizeParameter
	testl	%eax, %eax
	jne	.LBB48_840
# %bb.491:                              #   in Loop: Header=BB48_17 Depth=1
	movq	64(%rsp), %rax
	movq	%rax, 192(%r13)
	jmp	.LBB48_492
.LBB48_493:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 91(%r13)
	jmp	.LBB48_782
.LBB48_494:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1128(%r13)
	jmp	.LBB48_782
.LBB48_495:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movq	152(%rsp), %rbp         # 8-byte Reload
	jmp	.LBB48_563
.LBB48_496:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	528(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_498
# %bb.497:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 528(%r13)
.LBB48_498:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.499:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 528(%r13)
	jmp	.LBB48_781
.LBB48_500:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	624(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_502
# %bb.501:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 624(%r13)
.LBB48_502:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.503:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 624(%r13)
	jmp	.LBB48_781
.LBB48_504:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$4, 32(%rax)
	je	.LBB48_782
# %bb.505:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1145(%r13)
	jmp	.LBB48_782
.LBB48_506:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	320(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_508
# %bb.507:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 320(%r13)
.LBB48_508:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.509:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 320(%r13)
	jmp	.LBB48_781
.LBB48_510:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	592(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_512
# %bb.511:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 592(%r13)
.LBB48_512:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.513:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 592(%r13)
	jmp	.LBB48_781
.LBB48_514:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	608(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_516
# %bb.515:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 608(%r13)
.LBB48_516:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.517:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 608(%r13)
	jmp	.LBB48_781
.LBB48_518:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 791(%r13)
	jmp	.LBB48_782
.LBB48_519:                             #   in Loop: Header=BB48_17 Depth=1
	movq	$1, 856(%r13)
	jmp	.LBB48_782
.LBB48_520:                             #   in Loop: Header=BB48_17 Depth=1
	movq	1008(%r13), %rax
	testb	%dl, %dl
	je	.LBB48_792
# %bb.521:                              #   in Loop: Header=BB48_17 Depth=1
	orq	$1, %rax
	jmp	.LBB48_522
.LBB48_523:                             #   in Loop: Header=BB48_17 Depth=1
	movq	1008(%r13), %rax
	testb	%dl, %dl
	je	.LBB48_793
# %bb.524:                              #   in Loop: Header=BB48_17 Depth=1
	orq	$4, %rax
	jmp	.LBB48_522
.LBB48_525:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	720(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_527
# %bb.526:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 720(%r13)
.LBB48_527:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.528:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 720(%r13)
	jmp	.LBB48_781
.LBB48_529:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	728(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_531
# %bb.530:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 728(%r13)
.LBB48_531:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.532:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 728(%r13)
	jmp	.LBB48_781
.LBB48_533:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	752(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_535
# %bb.534:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 752(%r13)
.LBB48_535:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.536:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 752(%r13)
	jmp	.LBB48_781
.LBB48_537:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$4, 32(%rax)
	je	.LBB48_782
# %bb.538:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1150(%r13)
	jmp	.LBB48_782
.LBB48_539:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	640(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_541
# %bb.540:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 640(%r13)
.LBB48_541:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.542:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 640(%r13)
	jmp	.LBB48_781
.LBB48_543:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 794(%r13)
	jmp	.LBB48_782
.LBB48_544:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$4, 32(%rax)
	je	.LBB48_782
# %bb.545:                              #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 1147(%r13)
	jmp	.LBB48_782
.LBB48_546:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	584(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_548
# %bb.547:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 584(%r13)
.LBB48_548:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.549:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 584(%r13)
	jmp	.LBB48_781
.LBB48_550:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	568(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_552
# %bb.551:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 568(%r13)
.LBB48_552:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.553:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 568(%r13)
	jmp	.LBB48_781
.LBB48_554:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	648(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_556
# %bb.555:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 648(%r13)
.LBB48_556:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.557:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 648(%r13)
	jmp	.LBB48_781
.LBB48_558:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	664(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_560
# %bb.559:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 664(%r13)
.LBB48_560:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.561:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 664(%r13)
	jmp	.LBB48_781
.LBB48_562:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movq	144(%rsp), %rbp         # 8-byte Reload
.LBB48_563:                             #   in Loop: Header=BB48_17 Depth=1
	movq	(%rbp), %rdi
	testq	%rdi, %rdi
	je	.LBB48_565
# %bb.564:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, (%rbp)
.LBB48_565:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_567
# %bb.566:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, (%rbp)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_567:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	cleanarg
.LBB48_492:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, %r9
	jmp	.LBB48_816
.LBB48_568:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	712(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_570
# %bb.569:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 712(%r13)
.LBB48_570:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.571:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	movq	%r9, %rdi
	callq	strdup
	movq	%rax, 712(%r13)
	testq	%rax, %rax
	je	.LBB48_709
# %bb.572:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.19.123, %esi
	movq	%rax, %rdi
	callq	curl_strequal
	testl	%eax, %eax
	movq	%rbx, %r9
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%rbp, %rdi
	je	.LBB48_782
	jmp	.LBB48_573
.LBB48_574:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	600(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_576
# %bb.575:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 600(%r13)
.LBB48_576:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.577:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 600(%r13)
	jmp	.LBB48_781
.LBB48_578:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	696(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_580
# %bb.579:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 696(%r13)
.LBB48_580:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.581:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 696(%r13)
	jmp	.LBB48_781
.LBB48_582:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movq	704(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_584
# %bb.583:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 704(%r13)
.LBB48_584:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$4, %ebp
	testq	%r9, %r9
	je	.LBB48_10
# %bb.585:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	movq	%r9, %rdi
	callq	strdup
	movq	%rax, 704(%r13)
	testq	%rax, %rax
	je	.LBB48_709
# %bb.586:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, %rdi
	callq	strlen
	cmpq	$32, %rax
	jmp	.LBB48_243
.LBB48_587:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	616(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_589
# %bb.588:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 616(%r13)
.LBB48_589:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.590:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 616(%r13)
	jmp	.LBB48_781
.LBB48_591:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$64, 33(%rax)
	je	.LBB48_841
# %bb.592:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	328(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_594
# %bb.593:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 328(%r13)
.LBB48_594:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.595:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 328(%r13)
	jmp	.LBB48_781
.LBB48_596:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$64, 33(%rax)
	je	.LBB48_841
# %bb.597:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	336(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_599
# %bb.598:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 336(%r13)
.LBB48_599:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.600:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 336(%r13)
	jmp	.LBB48_781
.LBB48_601:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	movl	$12, %ebp
	testb	$64, 33(%rax)
	je	.LBB48_10
# %bb.602:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movq	344(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_604
# %bb.603:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 344(%r13)
.LBB48_604:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_645
# %bb.605:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	movq	%r9, %rdi
	callq	strdup
	movq	%rax, 344(%r13)
	jmp	.LBB48_634
.LBB48_606:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$4, 32(%rax)
	je	.LBB48_782
# %bb.607:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1144(%r13)
	jmp	.LBB48_782
.LBB48_608:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$4, 32(%rax)
	je	.LBB48_782
# %bb.609:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1149(%r13)
	jmp	.LBB48_782
.LBB48_610:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	632(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_612
# %bb.611:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 632(%r13)
.LBB48_612:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.613:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 632(%r13)
	jmp	.LBB48_781
.LBB48_614:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 793(%r13)
	jmp	.LBB48_782
.LBB48_615:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 1177(%r13)
	jmp	.LBB48_782
.LBB48_616:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$4, 32(%rax)
	je	.LBB48_782
# %bb.617:                              #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 1146(%r13)
	jmp	.LBB48_782
.LBB48_618:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 1033(%r13)
	jmp	.LBB48_782
.LBB48_619:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$64, 33(%rax)
	je	.LBB48_841
# %bb.620:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	352(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_622
# %bb.621:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 352(%r13)
.LBB48_622:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.623:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 352(%r13)
	jmp	.LBB48_781
.LBB48_624:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$64, 33(%rax)
	je	.LBB48_841
# %bb.625:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	360(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_627
# %bb.626:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 360(%r13)
.LBB48_627:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.628:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 360(%r13)
	jmp	.LBB48_781
.LBB48_629:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	movl	$12, %ebp
	testb	$64, 33(%rax)
	je	.LBB48_10
# %bb.630:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movq	368(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_632
# %bb.631:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 368(%r13)
.LBB48_632:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_645
# %bb.633:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	movq	%r9, %rdi
	callq	strdup
	movq	%rax, 368(%r13)
.LBB48_634:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%rax, %rax
	jne	.LBB48_646
	jmp	.LBB48_709
.LBB48_635:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	%r9, %rdi
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
.LBB48_636:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	GetFileAndPassword
	jmp	.LBB48_60
.LBB48_637:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	576(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_639
# %bb.638:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 576(%r13)
.LBB48_639:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.640:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 576(%r13)
	jmp	.LBB48_781
.LBB48_641:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	656(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_643
# %bb.642:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 656(%r13)
.LBB48_643:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.644:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 656(%r13)
	jmp	.LBB48_781
.LBB48_645:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	xorl	%eax, %eax
.LBB48_646:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.20.124, %esi
	movq	%rax, %rdi
	callq	curl_strequal
	testl	%eax, %eax
	movq	%rbx, %r9
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r14, %rdi
	jne	.LBB48_782
	jmp	.LBB48_10
.LBB48_647:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1107(%r13)
	jmp	.LBB48_782
.LBB48_648:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1108(%r13)
	jmp	.LBB48_782
.LBB48_649:                             #   in Loop: Header=BB48_17 Depth=1
	movb	23(%rsp), %al           # 1-byte Reload
	movb	%al, 1111(%r13)
	jmp	.LBB48_782
.LBB48_650:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	384(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_652
# %bb.651:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 384(%r13)
.LBB48_652:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_654
# %bb.653:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 384(%r13)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_654:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$7, 392(%r13)
	jmp	.LBB48_317
.LBB48_655:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	264(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_739
.LBB48_656:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1109(%r13)
	jmp	.LBB48_782
.LBB48_657:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	400(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_659
# %bb.658:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 400(%r13)
.LBB48_659:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.660:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 400(%r13)
	jmp	.LBB48_781
.LBB48_661:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	440(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_663
# %bb.662:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 440(%r13)
.LBB48_663:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.664:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 440(%r13)
	jmp	.LBB48_781
.LBB48_665:                             #   in Loop: Header=BB48_17 Depth=1
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	%eax, 1000(%r13)
	jmp	.LBB48_782
.LBB48_666:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	384(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_668
# %bb.667:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 384(%r13)
.LBB48_668:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_670
# %bb.669:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 384(%r13)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_670:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$1, 392(%r13)
	jmp	.LBB48_317
.LBB48_671:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	272(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_739
.LBB48_672:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	408(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_674
# %bb.673:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 408(%r13)
.LBB48_674:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.675:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 408(%r13)
	jmp	.LBB48_781
.LBB48_676:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	280(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_682
.LBB48_677:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 92(%r13)
	jmp	.LBB48_782
.LBB48_678:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 104(%r13)
	movq	%rdi, %rbp
	movq	%r13, %rdi
	movq	288(%rsp), %rsi         # 8-byte Reload
	jmp	.LBB48_680
.LBB48_679:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 120(%r13)
	movq	%rdi, %rbp
	movq	%r13, %rdi
	movq	296(%rsp), %rsi         # 8-byte Reload
.LBB48_680:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdx
	movq	%r9, %rbx
	callq	proto2num
	movq	%rbp, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbx, %r9
	testq	%rax, %rax
	je	.LBB48_782
	jmp	.LBB48_805
.LBB48_681:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	304(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_682
.LBB48_683:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	%r13, %rdi
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	delegation
	movq	%rbp, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbx, %r9
	movq	%rax, 1136(%r13)
	jmp	.LBB48_782
.LBB48_684:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	424(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_686
# %bb.685:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 424(%r13)
.LBB48_686:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.687:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 424(%r13)
	jmp	.LBB48_781
.LBB48_688:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1110(%r13)
	jmp	.LBB48_782
.LBB48_689:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 448(%r13)
	jmp	.LBB48_782
.LBB48_690:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.11.115, %esi
	jmp	.LBB48_59
.LBB48_691:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movb	$0, 1176(%r13)
	jmp	.LBB48_692
.LBB48_696:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1178(%r13)
	jmp	.LBB48_782
.LBB48_697:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	1016(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_699
# %bb.698:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 1016(%r13)
.LBB48_699:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.700:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 1016(%r13)
	jmp	.LBB48_781
.LBB48_701:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	1024(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_703
# %bb.702:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 1024(%r13)
.LBB48_703:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.704:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 1024(%r13)
	jmp	.LBB48_781
.LBB48_705:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movq	128(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_707
# %bb.706:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 128(%r13)
.LBB48_707:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_794
# %bb.708:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	movq	%r9, %rdi
	callq	strdup
	movq	%rax, 128(%r13)
	testq	%rax, %rax
	jne	.LBB48_795
	jmp	.LBB48_709
.LBB48_710:                             #   in Loop: Header=BB48_17 Depth=1
	movabsq	$9223372036854775, %rdx # imm = 0x20C49BA5E353F7
	movq	%rdi, %rbp
	movq	312(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_711
.LBB48_713:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1104(%r13)
	jmp	.LBB48_782
.LBB48_714:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	384(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_716
# %bb.715:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 384(%r13)
.LBB48_716:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_718
# %bb.717:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 384(%r13)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_718:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$6, 392(%r13)
	jmp	.LBB48_317
.LBB48_719:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	320(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_682
.LBB48_720:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1049(%r13)
	jmp	.LBB48_782
.LBB48_721:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movb	$1, 1176(%r13)
.LBB48_692:                             #   in Loop: Header=BB48_17 Depth=1
	movq	1168(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_694
# %bb.693:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 1168(%r13)
.LBB48_694:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.695:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 1168(%r13)
	jmp	.LBB48_781
.LBB48_723:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	str2tls_max
	jmp	.LBB48_712
.LBB48_724:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1192(%r13)
	jmp	.LBB48_782
.LBB48_725:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1200(%r13)
	jmp	.LBB48_782
.LBB48_726:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_728
# %bb.727:                              #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$4, 32(%rax)
	je	.LBB48_841
.LBB48_728:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 984(%r13)
	jmp	.LBB48_782
.LBB48_729:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	216(%r13), %rdi
	movq	%r9, %rbx
	callq	myFree
	movq	%rbp, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbx, %r9
	movq	$0, 216(%r13)
	jmp	.LBB48_782
.LBB48_730:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	384(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_732
# %bb.731:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 384(%r13)
.LBB48_732:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_734
# %bb.733:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 384(%r13)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_734:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$5, 392(%r13)
	jmp	.LBB48_317
.LBB48_735:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1032(%r13)
	jmp	.LBB48_782
.LBB48_736:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 800(%r13)
	jmp	.LBB48_782
.LBB48_737:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 801(%r13)
	jmp	.LBB48_782
.LBB48_738:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	224(%rsp), %rdi         # 8-byte Reload
.LBB48_739:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	str2unum
	jmp	.LBB48_712
.LBB48_740:                             #   in Loop: Header=BB48_17 Depth=1
	movabsq	$9223372036854775, %rdx # imm = 0x20C49BA5E353F7
	movq	%rdi, %rbp
	movq	232(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB48_742
.LBB48_741:                             #   in Loop: Header=BB48_17 Depth=1
	movabsq	$9223372036854775, %rdx # imm = 0x20C49BA5E353F7
	movq	%rdi, %rbp
	movq	240(%rsp), %rdi         # 8-byte Reload
.LBB48_742:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	str2unummax
	jmp	.LBB48_712
.LBB48_743:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, 987(%r13)
	movq	%rdi, %rbp
	movq	%r13, %rdi
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	ftpcccmethod
	movq	%rbp, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbx, %r9
	movl	%eax, 988(%r13)
	jmp	.LBB48_782
.LBB48_744:                             #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$1, 33(%rax)
	je	.LBB48_841
# %bb.745:                              #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 798(%r13)
	jmp	.LBB48_782
.LBB48_746:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	1072(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_748
# %bb.747:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 1072(%r13)
.LBB48_748:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.749:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 1072(%r13)
	jmp	.LBB48_781
.LBB48_750:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 802(%r13)
	jmp	.LBB48_782
.LBB48_751:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 48(%r12)
	jmp	.LBB48_782
.LBB48_752:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 1105(%r13)
	jmp	.LBB48_782
.LBB48_753:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 797(%r13)
	jmp	.LBB48_782
.LBB48_754:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	%r13, %rdi
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	ftpfilemethod
	movq	%rbp, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbx, %r9
	movl	%eax, 1088(%r13)
	jmp	.LBB48_782
.LBB48_755:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	xorl	%eax, %eax
	movl	%eax, 67(%rsp)
	movl	%eax, 64(%rsp)
	movq	%r9, 24(%rsp)           # 8-byte Spill
	leaq	-1(%r9), %rbx
.LBB48_756:                             #   Parent Loop BB48_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	1(%rbx), %edi
	incq	%rbx
	callq	Curl_isdigit
	testl	%eax, %eax
	jne	.LBB48_756
# %bb.757:                              #   in Loop: Header=BB48_17 Depth=1
	cmpb	$0, (%rbx)
	movq	248(%rsp), %r15         # 8-byte Reload
	je	.LBB48_798
# %bb.758:                              #   in Loop: Header=BB48_17 Depth=1
	leaq	64(%rsp), %rdx
	movl	$.L.str.9.113, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	__isoc99_sscanf
	movl	%eax, %ebp
	movb	$0, (%rbx)
	jmp	.LBB48_799
.LBB48_759:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	384(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_761
# %bb.760:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 384(%r13)
.LBB48_761:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_763
# %bb.762:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 384(%r13)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_763:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$4, 392(%r13)
	jmp	.LBB48_317
.LBB48_764:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	1080(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB48_766
# %bb.765:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 1080(%r13)
.LBB48_766:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.767:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 1080(%r13)
	jmp	.LBB48_781
.LBB48_768:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_770
# %bb.769:                              #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$4, 32(%rax)
	je	.LBB48_841
.LBB48_770:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 985(%r13)
	jmp	.LBB48_782
.LBB48_771:                             #   in Loop: Header=BB48_17 Depth=1
	movb	23(%rsp), %al           # 1-byte Reload
	movb	%al, 1106(%r13)
	jmp	.LBB48_782
.LBB48_772:                             #   in Loop: Header=BB48_17 Depth=1
	testb	%dl, %dl
	je	.LBB48_774
# %bb.773:                              #   in Loop: Header=BB48_17 Depth=1
	movq	curlinfo(%rip), %rax
	testb	$4, 32(%rax)
	je	.LBB48_841
.LBB48_774:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 986(%r13)
	jmp	.LBB48_782
.LBB48_775:                             #   in Loop: Header=BB48_17 Depth=1
	movb	%dl, 987(%r13)
	cmpl	$0, 988(%r13)
	jne	.LBB48_782
# %bb.776:                              #   in Loop: Header=BB48_17 Depth=1
	movl	$1, 988(%r13)
	jmp	.LBB48_782
.LBB48_777:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	56(%r12), %rdi
	testq	%rdi, %rdi
	je	.LBB48_779
# %bb.778:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 56(%r12)
.LBB48_779:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_722
# %bb.780:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 56(%r12)
	jmp	.LBB48_781
.LBB48_722:                             #   in Loop: Header=BB48_17 Depth=1
	xorl	%r9d, %r9d
.LBB48_317:                             #   in Loop: Header=BB48_17 Depth=1
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%rbp, %rdi
.LBB48_782:                             #   in Loop: Header=BB48_17 Depth=1
	movb	$1, %al
	movl	%edi, %ecx
	andb	%al, %cl
	xorb	%sil, %al
	xorl	%ebp, %ebp
	orb	%cl, %al
	jne	.LBB48_10
# %bb.783:                              #   in Loop: Header=BB48_17 Depth=1
	movq	48(%rsp), %rax          # 8-byte Reload
	cmpb	$0, 1(%rax)
	je	.LBB48_10
# %bb.784:                              #   in Loop: Header=BB48_17 Depth=1
	incq	%rax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movl	$-1, %r15d
	movq	200(%rsp), %rax         # 8-byte Reload
	cmpb	$0, (%rax)
	je	.LBB48_17
	jmp	.LBB48_10
.LBB48_785:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	%r9, %rsi
	movq	%r9, %rbx
	callq	str2unum
	jmp	.LBB48_712
.LBB48_786:                             #   in Loop: Header=BB48_17 Depth=1
	movq	40(%rsp), %rax          # 8-byte Reload
	andb	$-33, (%rax)
	jmp	.LBB48_782
.LBB48_787:                             #   in Loop: Header=BB48_17 Depth=1
	andq	$-3, %rax
	jmp	.LBB48_457
.LBB48_788:                             #   in Loop: Header=BB48_17 Depth=1
	movq	40(%rsp), %rax          # 8-byte Reload
	andb	$-5, (%rax)
	jmp	.LBB48_782
.LBB48_789:                             #   in Loop: Header=BB48_17 Depth=1
	movq	40(%rsp), %rax          # 8-byte Reload
	andb	$-9, (%rax)
	jmp	.LBB48_782
.LBB48_790:                             #   in Loop: Header=BB48_17 Depth=1
	andq	$-2, %rax
.LBB48_457:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, (%rcx)
	jmp	.LBB48_782
.LBB48_791:                             #   in Loop: Header=BB48_17 Depth=1
	movq	stdout(%rip), %rax
	movq	%rax, 8(%r12)
	jmp	.LBB48_271
.LBB48_792:                             #   in Loop: Header=BB48_17 Depth=1
	andq	$-2, %rax
	jmp	.LBB48_522
.LBB48_793:                             #   in Loop: Header=BB48_17 Depth=1
	andq	$-5, %rax
.LBB48_522:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, 1008(%r13)
	jmp	.LBB48_782
.LBB48_794:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	xorl	%eax, %eax
.LBB48_795:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rax, %rdi
	callq	check_protocol
	jmp	.LBB48_796
.LBB48_798:                             #   in Loop: Header=BB48_17 Depth=1
	xorl	%ebp, %ebp
.LBB48_799:                             #   in Loop: Header=BB48_17 Depth=1
	movq	256(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	str2unum
	testl	%eax, %eax
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	jne	.LBB48_805
# %bb.800:                              #   in Loop: Header=BB48_17 Depth=1
	cmpq	$65535, (%rbx)          # imm = 0xFFFF
	jg	.LBB48_805
# %bb.801:                              #   in Loop: Header=BB48_17 Depth=1
	testl	%ebp, %ebp
	je	.LBB48_807
# %bb.802:                              #   in Loop: Header=BB48_17 Depth=1
	leaq	64(%rsp), %rsi
	movq	%r15, %rdi
	callq	str2unum
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	testl	%eax, %eax
	jne	.LBB48_805
# %bb.803:                              #   in Loop: Header=BB48_17 Depth=1
	movq	(%r15), %rax
	cmpq	$65535, %rax            # imm = 0xFFFF
	jg	.LBB48_805
# %bb.804:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r14, %rdi
	subq	(%rbx), %rax
	incq	%rax
	movq	%rax, (%r15)
	testq	%rax, %rax
	jg	.LBB48_808
	jmp	.LBB48_805
.LBB48_806:                             #   in Loop: Header=BB48_17 Depth=1
	movl	$.L.str.7.111, %esi
	movq	%r12, %rdi
	movq	%r14, %rbx
	movq	%r14, %rdx
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB48_316
.LBB48_807:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r14, %rdi
	movq	$1, (%r15)
.LBB48_808:                             #   in Loop: Header=BB48_17 Depth=1
	movq	24(%rsp), %r9           # 8-byte Reload
	jmp	.LBB48_782
.LBB48_104:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbp, 496(%r13)
	testq	%rbp, %rbp
	je	.LBB48_818
.LBB48_105:                             #   in Loop: Header=BB48_17 Depth=1
	testb	$1, 32(%rbp)
	je	.LBB48_818
# %bb.106:                              #   in Loop: Header=BB48_17 Depth=1
	movq	(%rbp), %rbp
	jmp	.LBB48_104
.LBB48_818:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%rbp, %rbp
	jne	.LBB48_820
# %bb.819:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movq	%r13, %rdi
	movq	%r9, %rbp
	callq	new_getout
	movq	%r14, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbp, %r9
	movq	%rax, %rbp
	movq	%rax, 496(%r13)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_820:                             #   in Loop: Header=BB48_17 Depth=1
	cmpb	$111, %bl
	jne	.LBB48_826
# %bb.821:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movq	16(%rbp), %rdi
	testq	%rdi, %rdi
	je	.LBB48_823
# %bb.822:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbx
	callq	myFree
	movq	%rbx, %r9
	movq	$0, 16(%rbp)
.LBB48_823:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_825
# %bb.824:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	strdup
	movq	%rbx, %r9
	movq	%rax, 16(%rbp)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_825:                             #   in Loop: Header=BB48_17 Depth=1
	movl	32(%rbp), %eax
	andl	$-5, %eax
	movl	%eax, 32(%rbp)
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r14, %rdi
	jmp	.LBB48_830
.LBB48_826:                             #   in Loop: Header=BB48_17 Depth=1
	movq	$0, 16(%rbp)
	movl	32(%rbp), %eax
	testb	%dl, %dl
	je	.LBB48_828
# %bb.827:                              #   in Loop: Header=BB48_17 Depth=1
	orl	$4, %eax
	jmp	.LBB48_829
.LBB48_828:                             #   in Loop: Header=BB48_17 Depth=1
	andl	$-5, %eax
.LBB48_829:                             #   in Loop: Header=BB48_17 Depth=1
	movl	%eax, 32(%rbp)
.LBB48_830:                             #   in Loop: Header=BB48_17 Depth=1
	orl	$1, %eax
	movl	%eax, 32(%rbp)
	jmp	.LBB48_782
.LBB48_118:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, 504(%r13)
	testq	%rbx, %rbx
	je	.LBB48_831
.LBB48_119:                             #   in Loop: Header=BB48_17 Depth=1
	testb	$8, 32(%rbx)
	je	.LBB48_831
# %bb.120:                              #   in Loop: Header=BB48_17 Depth=1
	movq	(%rbx), %rbx
	jmp	.LBB48_118
.LBB48_831:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%rbx, %rbx
	jne	.LBB48_833
# %bb.832:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %rbp
	movq	%r13, %rdi
	movq	%r9, %rbx
	callq	new_getout
	movq	%rbp, %rdi
	movb	8(%rsp), %sil           # 1-byte Reload
	movl	4(%rsp), %edx           # 4-byte Reload
	movq	%rbx, %r9
	movq	%rax, %rbx
	movq	%rax, 504(%r13)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_833:                             #   in Loop: Header=BB48_17 Depth=1
	movl	32(%rbx), %eax
	movl	%eax, %ecx
	orl	$8, %ecx
	movl	%ecx, 32(%rbx)
	cmpb	$0, (%r9)
	je	.LBB48_837
# %bb.834:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB48_836
# %bb.835:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbp
	callq	myFree
	movq	%rbp, %r9
	movq	$0, 24(%rbx)
.LBB48_836:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbp
	callq	strdup
	movq	%rbp, %r9
	movq	%rax, 24(%rbx)
.LBB48_234:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%rax, %rax
	movl	4(%rsp), %edx           # 4-byte Reload
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r14, %rdi
	jne	.LBB48_782
	jmp	.LBB48_709
.LBB48_837:                             #   in Loop: Header=BB48_17 Depth=1
	orl	$24, %eax
	movl	%eax, 32(%rbx)
	jmp	.LBB48_782
.LBB48_387:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rbx, 488(%r13)
	testq	%rbx, %rbx
	je	.LBB48_809
.LBB48_388:                             #   in Loop: Header=BB48_17 Depth=1
	testb	$2, 32(%rbx)
	je	.LBB48_809
# %bb.389:                              #   in Loop: Header=BB48_17 Depth=1
	movq	(%rbx), %rbx
	jmp	.LBB48_387
.LBB48_809:                             #   in Loop: Header=BB48_17 Depth=1
	movq	%rdi, %r14
	testq	%rbx, %rbx
	jne	.LBB48_811
# %bb.810:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r13, %rdi
	movq	%r9, %rbx
	callq	new_getout
	movq	%rbx, %r9
	movq	%rax, %rbx
	movq	%rax, 488(%r13)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_811:                             #   in Loop: Header=BB48_17 Depth=1
	movq	8(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB48_813
# %bb.812:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rbp
	callq	myFree
	movq	%rbp, %r9
	movq	$0, 8(%rbx)
.LBB48_813:                             #   in Loop: Header=BB48_17 Depth=1
	testq	%r9, %r9
	je	.LBB48_815
# %bb.814:                              #   in Loop: Header=BB48_17 Depth=1
	movq	%r9, %rdi
	movq	%r9, %rbp
	callq	strdup
	movq	%rbp, %r9
	movq	%rax, 8(%rbx)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_815:                             #   in Loop: Header=BB48_17 Depth=1
	orb	$2, 32(%rbx)
.LBB48_816:                             #   in Loop: Header=BB48_17 Depth=1
	movl	4(%rsp), %edx           # 4-byte Reload
.LBB48_817:                             #   in Loop: Header=BB48_17 Depth=1
	movb	8(%rsp), %sil           # 1-byte Reload
	movq	%r14, %rdi
	jmp	.LBB48_782
.LBB48_27:
	movl	$16, %ebp
	jmp	.LBB48_10
.LBB48_838:
	movl	$3, %ebp
	jmp	.LBB48_10
.LBB48_840:
	movl	%eax, %ebp
	jmp	.LBB48_10
.LBB48_841:
	movl	$12, %ebp
	jmp	.LBB48_10
.LBB48_842:
	movl	$.L.str.10.114, %esi
	movq	%r12, %rdi
	jmp	.LBB48_843
.LBB48_845:
	movl	$6, %ebp
	jmp	.LBB48_10
.LBB48_846:
	movb	23(%rsp), %al           # 1-byte Reload
	movb	%al, 785(%r13)
	xorl	%ebp, %ebp
	jmp	.LBB48_10
.LBB48_848:
	movl	$7, %ebp
	jmp	.LBB48_10
.LBB48_850:
	testq	%r9, %r9
	je	.LBB48_852
# %bb.851:
	movq	%r9, %rdi
	callq	strdup
	movq	%rax, 88(%r12)
	testq	%rax, %rax
	je	.LBB48_709
.LBB48_852:
	movl	$5, %ebp
	jmp	.LBB48_10
.LBB48_285:
	movq	1232(%r13), %rdi
	movl	$.L.str.21.125, %esi
.LBB48_843:
	xorl	%eax, %eax
	callq	errorf
.LBB48_805:
	movl	$4, %ebp
	jmp	.LBB48_10
.LBB48_853:
	movq	%r14, %rdi
	callq	myFree
	movq	64(%rsp), %rdi
	callq	myFree
	movq	$0, 64(%rsp)
.LBB48_709:
	movl	$14, %ebp
	jmp	.LBB48_10
.LBB48_854:
	movl	%ebx, %ebp
	jmp	.LBB48_10
.LBB48_855:
	movq	%r14, %rdi
	callq	curl_free
	jmp	.LBB48_10
.LBB48_856:
	movl	$.L.str.25.129, %esi
	movq	%r12, %rdi
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB48_805
.LBB48_472:
	movl	$10, %ebp
	jmp	.LBB48_10
.LBB48_573:
	movl	$8, %ebp
	jmp	.LBB48_10
.Lfunc_end48:
	.size	getparameter, .Lfunc_end48-getparameter
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI48_0:
	.quad	.LBB48_39
	.quad	.LBB48_41
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_44
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_50
	.quad	.LBB48_53
	.quad	.LBB48_57
	.quad	.LBB48_58
	.quad	.LBB48_61
	.quad	.LBB48_9
	.quad	.LBB48_62
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_10
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_63
	.quad	.LBB48_67
	.quad	.LBB48_68
	.quad	.LBB48_71
	.quad	.LBB48_75
	.quad	.LBB48_81
	.quad	.LBB48_83
	.quad	.LBB48_88
	.quad	.LBB48_91
	.quad	.LBB48_92
	.quad	.LBB48_93
	.quad	.LBB48_95
	.quad	.LBB48_844
	.quad	.LBB48_97
	.quad	.LBB48_99
	.quad	.LBB48_107
	.quad	.LBB48_111
	.quad	.LBB48_114
	.quad	.LBB48_115
	.quad	.LBB48_116
	.quad	.LBB48_121
	.quad	.LBB48_847
	.quad	.LBB48_9
	.quad	.LBB48_125
	.quad	.LBB48_129
	.quad	.LBB48_132
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_9
	.quad	.LBB48_136
	.quad	.LBB48_137
	.quad	.LBB48_144
	.quad	.LBB48_148
	.quad	.LBB48_155
	.quad	.LBB48_157
	.quad	.LBB48_160
	.quad	.LBB48_849
	.quad	.LBB48_161
	.quad	.LBB48_162
	.quad	.LBB48_163
	.quad	.LBB48_165
	.quad	.LBB48_166
	.quad	.LBB48_167
	.quad	.LBB48_102
	.quad	.LBB48_170
	.quad	.LBB48_782
	.quad	.LBB48_171
	.quad	.LBB48_180
	.quad	.LBB48_182
	.quad	.LBB48_183
	.quad	.LBB48_189
	.quad	.LBB48_195
	.quad	.LBB48_198
	.quad	.LBB48_203
	.quad	.LBB48_206
.LJTI48_1:
	.quad	.LBB48_159
	.quad	.LBB48_279
	.quad	.LBB48_280
	.quad	.LBB48_281
.LJTI48_2:
	.quad	.LBB48_77
	.quad	.LBB48_495
	.quad	.LBB48_496
	.quad	.LBB48_500
	.quad	.LBB48_504
	.quad	.LBB48_506
	.quad	.LBB48_510
	.quad	.LBB48_514
	.quad	.LBB48_518
	.quad	.LBB48_519
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_520
	.quad	.LBB48_523
	.quad	.LBB48_525
	.quad	.LBB48_529
	.quad	.LBB48_533
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_537
	.quad	.LBB48_539
	.quad	.LBB48_543
	.quad	.LBB48_10
	.quad	.LBB48_544
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_10
	.quad	.LBB48_546
	.quad	.LBB48_550
	.quad	.LBB48_554
	.quad	.LBB48_558
	.quad	.LBB48_562
	.quad	.LBB48_568
	.quad	.LBB48_574
	.quad	.LBB48_578
	.quad	.LBB48_582
	.quad	.LBB48_587
	.quad	.LBB48_591
	.quad	.LBB48_596
	.quad	.LBB48_601
	.quad	.LBB48_606
	.quad	.LBB48_608
	.quad	.LBB48_610
	.quad	.LBB48_614
	.quad	.LBB48_615
	.quad	.LBB48_616
	.quad	.LBB48_618
	.quad	.LBB48_619
	.quad	.LBB48_624
	.quad	.LBB48_629
	.quad	.LBB48_635
	.quad	.LBB48_637
	.quad	.LBB48_641
.LJTI48_3:
	.quad	.LBB48_56
	.quad	.LBB48_318
	.quad	.LBB48_319
	.quad	.LBB48_320
.LJTI48_4:
	.quad	.LBB48_52
	.quad	.LBB48_310
	.quad	.LBB48_311
	.quad	.LBB48_312
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_314
.LJTI48_5:
	.quad	.LBB48_43
	.quad	.LBB48_782
	.quad	.LBB48_647
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_648
	.quad	.LBB48_649
	.quad	.LBB48_650
	.quad	.LBB48_655
	.quad	.LBB48_656
	.quad	.LBB48_657
	.quad	.LBB48_661
	.quad	.LBB48_665
	.quad	.LBB48_666
	.quad	.LBB48_671
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_672
	.quad	.LBB48_676
	.quad	.LBB48_677
	.quad	.LBB48_678
	.quad	.LBB48_679
	.quad	.LBB48_681
	.quad	.LBB48_683
	.quad	.LBB48_684
	.quad	.LBB48_688
	.quad	.LBB48_842
	.quad	.LBB48_689
	.quad	.LBB48_690
	.quad	.LBB48_691
	.quad	.LBB48_696
	.quad	.LBB48_697
	.quad	.LBB48_701
	.quad	.LBB48_705
	.quad	.LBB48_710
	.quad	.LBB48_713
	.quad	.LBB48_714
	.quad	.LBB48_719
	.quad	.LBB48_720
	.quad	.LBB48_721
	.quad	.LBB48_723
	.quad	.LBB48_724
	.quad	.LBB48_725
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_726
	.quad	.LBB48_729
	.quad	.LBB48_730
	.quad	.LBB48_735
	.quad	.LBB48_736
	.quad	.LBB48_737
	.quad	.LBB48_738
	.quad	.LBB48_740
	.quad	.LBB48_741
	.quad	.LBB48_743
	.quad	.LBB48_744
	.quad	.LBB48_782
	.quad	.LBB48_746
	.quad	.LBB48_750
	.quad	.LBB48_751
	.quad	.LBB48_752
	.quad	.LBB48_753
	.quad	.LBB48_754
	.quad	.LBB48_755
	.quad	.LBB48_759
	.quad	.LBB48_764
	.quad	.LBB48_768
	.quad	.LBB48_771
	.quad	.LBB48_772
	.quad	.LBB48_775
	.quad	.LBB48_777
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_785
.LJTI48_6:
	.quad	.LBB48_46
	.quad	.LBB48_782
	.quad	.LBB48_381
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_385
	.quad	.LBB48_782
	.quad	.LBB48_390
	.quad	.LBB48_395
	.quad	.LBB48_399
	.quad	.LBB48_403
	.quad	.LBB48_404
	.quad	.LBB48_408
	.quad	.LBB48_409
	.quad	.LBB48_782
	.quad	.LBB48_410
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_411
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_414
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_415
	.quad	.LBB48_782
	.quad	.LBB48_419
	.quad	.LBB48_782
	.quad	.LBB48_420
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_421
	.quad	.LBB48_425
	.quad	.LBB48_429
	.quad	.LBB48_430
	.quad	.LBB48_434
	.quad	.LBB48_435
	.quad	.LBB48_436
	.quad	.LBB48_443
	.quad	.LBB48_450
	.quad	.LBB48_452
	.quad	.LBB48_455
	.quad	.LBB48_458
	.quad	.LBB48_461
	.quad	.LBB48_464
	.quad	.LBB48_466
	.quad	.LBB48_782
	.quad	.LBB48_468
	.quad	.LBB48_469
	.quad	.LBB48_470
	.quad	.LBB48_473
	.quad	.LBB48_475
	.quad	.LBB48_476
	.quad	.LBB48_481
	.quad	.LBB48_485
	.quad	.LBB48_490
	.quad	.LBB48_493
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_782
	.quad	.LBB48_494
                                        # -- End function
	.text
	.globl	str2udouble             # -- Begin function str2udouble
	.type	str2udouble,@function
str2udouble:                            # @str2udouble
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	$10, %r15d
	testq	%rsi, %rsi
	je	.LBB49_7
# %bb.1:
	movq	%rdx, %r12
	movq	%rsi, %rbx
	movq	%rdi, %r14
	callq	__errno_location
	movq	%rax, %rbp
	movl	$0, (%rax)
	leaq	8(%rsp), %rsi
	movq	%rbx, %rdi
	callq	strtod
	cvtsi2sd	%r12, %xmm1
	ucomisd	%xmm1, %xmm0
	ja	.LBB49_8
# %bb.2:
	cmpl	$34, (%rbp)
	je	.LBB49_8
# %bb.3:
	movsd	%xmm0, (%rsp)           # 8-byte Spill
	movq	8(%rsp), %rbp
	cmpq	%rbx, %rbp
	je	.LBB49_7
# %bb.4:
	movq	%rbx, %rdi
	callq	strlen
	addq	%rbx, %rax
	cmpq	%rax, %rbp
	jne	.LBB49_7
# %bb.5:
	movl	$11, %r15d
	xorpd	%xmm0, %xmm0
	movsd	(%rsp), %xmm1           # 8-byte Reload
                                        # xmm1 = mem[0],zero
	ucomisd	%xmm1, %xmm0
	ja	.LBB49_7
# %bb.6:
	movsd	%xmm1, (%r14)
	xorl	%r15d, %r15d
	jmp	.LBB49_7
.LBB49_8:
	movl	$17, %r15d
.LBB49_7:
	movl	%r15d, %eax
	addq	$16, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end49:
	.size	str2udouble, .Lfunc_end49-str2udouble
	.cfi_endproc
                                        # -- End function
	.type	GetSizeParameter,@function # -- Begin function GetSizeParameter
GetSizeParameter:                       # @GetSizeParameter
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$24, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rsi, %rax
	movq	%rdi, %r12
	leaq	16(%rsp), %rsi
	leaq	8(%rsp), %rcx
	movq	%rax, %rdi
	xorl	%edx, %edx
	callq	curlx_strtoofft
	testl	%eax, %eax
	je	.LBB50_3
# %bb.1:
	movl	$.L.str.527, %esi
.LBB50_2:
	movq	%r12, %rdi
	movq	%r15, %rdx
	xorl	%eax, %eax
	callq	warnf
	movl	$4, %eax
	jmp	.LBB50_27
.LBB50_3:
	movq	16(%rsp), %rbx
	cmpb	$0, (%rbx)
	je	.LBB50_4
# %bb.5:
	movq	%rbx, %rdi
	callq	strlen
	cmpq	$2, %rax
	jb	.LBB50_7
# %bb.6:
	movq	$.L.str.6.110, 16(%rsp)
	movl	$.L.str.6.110, %ebx
	jmp	.LBB50_7
.LBB50_4:
	movq	$.L.str.292, 16(%rsp)
	movl	$.L.str.292, %ebx
.LBB50_7:
	movsbl	(%rbx), %eax
	cmpl	$97, %eax
	jg	.LBB50_14
# %bb.8:
	cmpl	$74, %eax
	jg	.LBB50_11
# %bb.9:
	cmpl	$66, %eax
	je	.LBB50_26
# %bb.10:
	cmpl	$71, %eax
	je	.LBB50_17
	jmp	.LBB50_13
.LBB50_14:
	cmpl	$106, %eax
	jg	.LBB50_19
# %bb.15:
	cmpl	$98, %eax
	je	.LBB50_26
# %bb.16:
	cmpl	$103, %eax
	jne	.LBB50_13
.LBB50_17:
	movq	8(%rsp), %rcx
	movl	$17, %eax
	movabsq	$8589934591, %rdx       # imm = 0x1FFFFFFFF
	cmpq	%rdx, %rcx
	jg	.LBB50_27
# %bb.18:
	shlq	$30, %rcx
	jmp	.LBB50_25
.LBB50_11:
	cmpl	$75, %eax
	je	.LBB50_23
# %bb.12:
	cmpl	$77, %eax
	je	.LBB50_21
.LBB50_13:
	movl	$.L.str.528, %esi
	jmp	.LBB50_2
.LBB50_19:
	cmpl	$107, %eax
	je	.LBB50_23
# %bb.20:
	cmpl	$109, %eax
	jne	.LBB50_13
.LBB50_21:
	movq	8(%rsp), %rcx
	movl	$17, %eax
	movabsq	$8796093022207, %rdx    # imm = 0x7FFFFFFFFFF
	cmpq	%rdx, %rcx
	jg	.LBB50_27
# %bb.22:
	shlq	$20, %rcx
	jmp	.LBB50_25
.LBB50_23:
	movq	8(%rsp), %rcx
	movl	$17, %eax
	movabsq	$9007199254740991, %rdx # imm = 0x1FFFFFFFFFFFFF
	cmpq	%rdx, %rcx
	jg	.LBB50_27
# %bb.24:
	shlq	$10, %rcx
.LBB50_25:
	movq	%rcx, 8(%rsp)
.LBB50_26:
	movq	8(%rsp), %rax
	movq	%rax, (%r14)
	xorl	%eax, %eax
.LBB50_27:
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end50:
	.size	GetSizeParameter, .Lfunc_end50-GetSizeParameter
	.cfi_endproc
                                        # -- End function
	.globl	oct2nummax              # -- Begin function oct2nummax
	.type	oct2nummax,@function
oct2nummax:                             # @oct2nummax
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rdx, %r14
	movq	%rdi, %rbx
	movl	$8, %edx
	callq	getnum
	testl	%eax, %eax
	jne	.LBB51_3
# %bb.1:
	movq	(%rbx), %rcx
	movl	$17, %eax
	cmpq	%r14, %rcx
	jg	.LBB51_3
# %bb.2:
	sarq	$63, %rcx
	andl	$11, %ecx
	movl	%ecx, %eax
.LBB51_3:
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end51:
	.size	oct2nummax, .Lfunc_end51-oct2nummax
	.cfi_endproc
                                        # -- End function
	.globl	str2num                 # -- Begin function str2num
	.type	str2num,@function
str2num:                                # @str2num
	.cfi_startproc
# %bb.0:
	movl	$10, %edx
	jmp	getnum                  # TAILCALL
.Lfunc_end52:
	.size	str2num, .Lfunc_end52-str2num
	.cfi_endproc
                                        # -- End function
	.globl	new_getout              # -- Begin function new_getout
	.type	new_getout,@function
new_getout:                             # @new_getout
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movl	$1, %edi
	movl	$40, %esi
	callq	calloc
	testq	%rax, %rax
	je	.LBB53_2
# %bb.1:
	movq	480(%rbx), %rcx
	leaq	472(%rbx), %rdx
	testq	%rcx, %rcx
	cmovneq	%rcx, %rdx
	movq	%rax, (%rdx)
	movq	%rax, 480(%rbx)
	movl	1124(%rbx), %ecx
	movl	%ecx, 32(%rax)
	movl	new_getout.outnum(%rip), %ecx
	leal	1(%rcx), %edx
	movl	%edx, new_getout.outnum(%rip)
	movl	%ecx, 36(%rax)
.LBB53_2:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end53:
	.size	new_getout, .Lfunc_end53-new_getout
	.cfi_endproc
                                        # -- End function
	.globl	str2unum                # -- Begin function str2unum
	.type	str2unum,@function
str2unum:                               # @str2unum
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movl	$10, %edx
	callq	getnum
                                        # kill: def $eax killed $eax def $rax
	testl	%eax, %eax
	jne	.LBB54_2
# %bb.1:
	movq	(%rbx), %rax
	sarq	$63, %rax
	andl	$11, %eax
.LBB54_2:
                                        # kill: def $eax killed $eax killed $rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end54:
	.size	str2unum, .Lfunc_end54-str2unum
	.cfi_endproc
                                        # -- End function
	.globl	str2unummax             # -- Begin function str2unummax
	.type	str2unummax,@function
str2unummax:                            # @str2unummax
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rdx, %r14
	movq	%rdi, %rbx
	movl	$10, %edx
	callq	getnum
	testl	%eax, %eax
	jne	.LBB55_4
# %bb.1:
	movq	(%rbx), %rax
	testq	%rax, %rax
	js	.LBB55_2
# %bb.3:
	xorl	%ecx, %ecx
	cmpq	%r14, %rax
	movl	$17, %eax
	cmovlel	%ecx, %eax
	jmp	.LBB55_4
.LBB55_2:
	movl	$11, %eax
.LBB55_4:
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end55:
	.size	str2unummax, .Lfunc_end55-str2unummax
	.cfi_endproc
                                        # -- End function
	.globl	ftpfilemethod           # -- Begin function ftpfilemethod
	.type	ftpfilemethod,@function
ftpfilemethod:                          # @ftpfilemethod
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	$.L.str.25.1469, %edi
	callq	curl_strequal
	movl	$3, %ebp
	testl	%eax, %eax
	jne	.LBB56_4
# %bb.1:
	movl	$.L.str.26.1470, %edi
	movq	%rbx, %rsi
	callq	curl_strequal
	movl	$2, %ebp
	testl	%eax, %eax
	jne	.LBB56_4
# %bb.2:
	movl	$.L.str.27.1471, %edi
	movq	%rbx, %rsi
	callq	curl_strequal
	movl	$1, %ebp
	testl	%eax, %eax
	jne	.LBB56_4
# %bb.3:
	movq	1232(%r14), %rdi
	movl	$.L.str.28.1472, %esi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	callq	warnf
.LBB56_4:
	movl	%ebp, %eax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end56:
	.size	ftpfilemethod, .Lfunc_end56-ftpfilemethod
	.cfi_endproc
                                        # -- End function
	.globl	Curl_isdigit            # -- Begin function Curl_isdigit
	.type	Curl_isdigit,@function
Curl_isdigit:                           # @Curl_isdigit
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$127, %edi
	ja	.LBB57_2
# %bb.1:
	movl	%edi, %eax
	movzbl	ascii(%rax), %eax
	andl	$4, %eax
.LBB57_2:
	retq
.Lfunc_end57:
	.size	Curl_isdigit, .Lfunc_end57-Curl_isdigit
	.cfi_endproc
                                        # -- End function
	.globl	ftpcccmethod            # -- Begin function ftpcccmethod
	.type	ftpcccmethod,@function
ftpcccmethod:                           # @ftpcccmethod
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	$.L.str.29.1475, %edi
	callq	curl_strequal
	movl	%eax, %ecx
	movl	$1, %eax
	testl	%ecx, %ecx
	jne	.LBB58_3
# %bb.1:
	movl	$.L.str.30.1476, %edi
	movq	%rbx, %rsi
	callq	curl_strequal
	movl	%eax, %ecx
	movl	$2, %eax
	testl	%ecx, %ecx
	jne	.LBB58_3
# %bb.2:
	movq	1232(%r14), %rdi
	movl	$.L.str.31.1477, %esi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	callq	warnf
	movl	$1, %eax
.LBB58_3:
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end58:
	.size	ftpcccmethod, .Lfunc_end58-ftpcccmethod
	.cfi_endproc
                                        # -- End function
	.globl	add2list                # -- Begin function add2list
	.type	add2list,@function
add2list:                               # @add2list
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	(%rdi), %rdi
	callq	curl_slist_append
	testq	%rax, %rax
	je	.LBB59_1
# %bb.2:
	movq	%rax, (%rbx)
	xorl	%eax, %eax
	jmp	.LBB59_3
.LBB59_1:
	movl	$14, %eax
.LBB59_3:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end59:
	.size	add2list, .Lfunc_end59-add2list
	.cfi_endproc
                                        # -- End function
	.globl	proto2num               # -- Begin function proto2num
	.type	proto2num,@function
proto2num:                              # @proto2num
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, (%rsp)            # 8-byte Spill
	movl	$1, %r12d
	testq	%rdx, %rdx
	je	.LBB60_28
# %bb.1:
	movq	%rsi, %r14
	movq	%rdx, %rdi
	callq	strdup
	testq	%rax, %rax
	je	.LBB60_28
# %bb.2:
	movq	%rax, %r13
	movl	$.L.str.1436, %esi
	movq	%rax, %rdi
	callq	strtok
	testq	%rax, %rax
	je	.LBB60_27
# %bb.3:
	movq	%rax, %rbx
.LBB60_4:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_5 Depth 2
                                        #     Child Loop BB60_7 Depth 2
	movzbl	(%rbx), %edi
	callq	Curl_isalnum
	movl	$0, %ebp
.LBB60_5:                               #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testl	%eax, %eax
	jne	.LBB60_6
# %bb.12:                               #   in Loop: Header=BB60_5 Depth=2
	movsbl	(%rbx), %eax
	cmpl	$43, %eax
	je	.LBB60_16
# %bb.13:                               #   in Loop: Header=BB60_5 Depth=2
	movl	$2, %ebp
	cmpl	$61, %eax
	je	.LBB60_17
# %bb.14:                               #   in Loop: Header=BB60_5 Depth=2
	cmpl	$45, %eax
	jne	.LBB60_29
# %bb.15:                               #   in Loop: Header=BB60_5 Depth=2
	movl	$1, %ebp
	jmp	.LBB60_17
.LBB60_16:                              #   in Loop: Header=BB60_5 Depth=2
	xorl	%ebp, %ebp
.LBB60_17:                              #   in Loop: Header=BB60_5 Depth=2
	movzbl	1(%rbx), %edi
	incq	%rbx
	callq	Curl_isalnum
	jmp	.LBB60_5
.LBB60_6:                               #   in Loop: Header=BB60_4 Depth=1
	movl	$.L.str.1.1437, %esi
	movl	$proto2num.protos+16, %r15d
.LBB60_7:                               #   Parent Loop BB60_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	callq	curl_strequal
	testl	%eax, %eax
	jne	.LBB60_8
# %bb.19:                               #   in Loop: Header=BB60_7 Depth=2
	movq	(%r15), %rsi
	addq	$16, %r15
	testq	%rsi, %rsi
	jne	.LBB60_7
	jmp	.LBB60_23
.LBB60_8:                               #   in Loop: Header=BB60_4 Depth=1
	testl	%ebp, %ebp
	je	.LBB60_20
# %bb.9:                                #   in Loop: Header=BB60_4 Depth=1
	cmpl	$2, %ebp
	je	.LBB60_18
# %bb.10:                               #   in Loop: Header=BB60_4 Depth=1
	cmpl	$1, %ebp
	jne	.LBB60_22
# %bb.11:                               #   in Loop: Header=BB60_4 Depth=1
	movq	-8(%r15), %rax
	notq	%rax
	andq	(%r14), %rax
	jmp	.LBB60_21
.LBB60_20:                              #   in Loop: Header=BB60_4 Depth=1
	movq	(%r14), %rax
	orq	-8(%r15), %rax
	jmp	.LBB60_21
.LBB60_18:                              #   in Loop: Header=BB60_4 Depth=1
	movq	-8(%r15), %rax
.LBB60_21:                              #   in Loop: Header=BB60_4 Depth=1
	movq	%rax, (%r14)
.LBB60_22:                              #   in Loop: Header=BB60_4 Depth=1
	cmpq	$0, -16(%r15)
	jne	.LBB60_26
.LBB60_23:                              #   in Loop: Header=BB60_4 Depth=1
	cmpl	$2, %ebp
	jne	.LBB60_25
# %bb.24:                               #   in Loop: Header=BB60_4 Depth=1
	movq	$0, (%r14)
.LBB60_25:                              #   in Loop: Header=BB60_4 Depth=1
	movq	(%rsp), %rax            # 8-byte Reload
	movq	1232(%rax), %rdi
	movl	$.L.str.24.1438, %esi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	callq	warnf
.LBB60_26:                              #   in Loop: Header=BB60_4 Depth=1
	movl	$.L.str.1436, %esi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	.LBB60_4
.LBB60_27:
	movq	%r13, %rdi
	callq	myFree
	xorl	%r12d, %r12d
	jmp	.LBB60_28
.LBB60_29:
	movq	%r13, %rdi
	callq	myFree
.LBB60_28:
	movq	%r12, %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end60:
	.size	proto2num, .Lfunc_end60-proto2num
	.cfi_endproc
                                        # -- End function
	.globl	delegation              # -- Begin function delegation
	.type	delegation,@function
delegation:                             # @delegation
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$.L.str.32.1480, %edi
	callq	curl_strequal
	testl	%eax, %eax
	je	.LBB61_2
# %bb.1:
	xorl	%ebx, %ebx
	jmp	.LBB61_5
.LBB61_2:
	movl	$.L.str.33.1481, %edi
	movq	%r15, %rsi
	callq	curl_strequal
	movl	$1, %ebx
	testl	%eax, %eax
	jne	.LBB61_5
# %bb.3:
	movl	$.L.str.34.1482, %edi
	movq	%r15, %rsi
	callq	curl_strequal
	movl	$2, %ebx
	testl	%eax, %eax
	jne	.LBB61_5
# %bb.4:
	movq	1232(%r14), %rdi
	xorl	%ebx, %ebx
	movl	$.L.str.35.1483, %esi
	movq	%r15, %rdx
	xorl	%eax, %eax
	callq	warnf
.LBB61_5:
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end61:
	.size	delegation, .Lfunc_end61-delegation
	.cfi_endproc
                                        # -- End function
	.globl	check_protocol          # -- Begin function check_protocol
	.type	check_protocol,@function
check_protocol:                         # @check_protocol
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %rbx
	movl	$9, %edi
	callq	curl_version_info
	testq	%rbx, %rbx
	je	.LBB62_1
# %bb.2:
	movq	64(%rax), %rbp
	movq	(%rbp), %rdi
	movl	$13, %r14d
	testq	%rdi, %rdi
	je	.LBB62_7
# %bb.3:                                # %.preheader
	addq	$8, %rbp
.LBB62_5:                               # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rsi
	callq	curl_strequal
	testl	%eax, %eax
	jne	.LBB62_6
# %bb.4:                                #   in Loop: Header=BB62_5 Depth=1
	movq	(%rbp), %rdi
	addq	$8, %rbp
	testq	%rdi, %rdi
	jne	.LBB62_5
	jmp	.LBB62_7
.LBB62_1:
	movl	$3, %r14d
	jmp	.LBB62_7
.LBB62_6:
	xorl	%r14d, %r14d
.LBB62_7:
	movl	%r14d, %eax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end62:
	.size	check_protocol, .Lfunc_end62-check_protocol
	.cfi_endproc
                                        # -- End function
	.globl	str2tls_max             # -- Begin function str2tls_max
	.type	str2tls_max,@function
str2tls_max:                            # @str2tls_max
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	testq	%rsi, %rsi
	je	.LBB63_1
# %bb.2:                                # %.preheader
	movq	%rsi, %r15
	movq	%rdi, %r14
	movq	$-80, %rbx
.LBB63_3:                               # =>This Inner Loop Header: Depth=1
	movq	str2tls_max.tls_max_array+80(%rbx), %rsi
	movq	%r15, %rdi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB63_4
# %bb.5:                                #   in Loop: Header=BB63_3 Depth=1
	addq	$16, %rbx
	jne	.LBB63_3
# %bb.6:
	movl	$4, %eax
	jmp	.LBB63_7
.LBB63_1:
	movl	$3, %eax
	jmp	.LBB63_7
.LBB63_4:
	movq	str2tls_max.tls_max_array+88(%rbx), %rax
	movq	%rax, (%r14)
	xorl	%eax, %eax
.LBB63_7:
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end63:
	.size	str2tls_max, .Lfunc_end63-str2tls_max
	.cfi_endproc
                                        # -- End function
	.globl	str2offset              # -- Begin function str2offset
	.type	str2offset,@function
str2offset:                             # @str2offset
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movl	$11, %eax
	cmpb	$45, (%rsi)
	je	.LBB64_7
# %bb.1:
	movq	%rsi, %rbx
	movq	%rdi, %r15
	callq	__errno_location
	movq	%rax, %r14
	movl	$0, (%rax)
	leaq	8(%rsp), %rsi
	movq	%rbx, %rdi
	xorl	%edx, %edx
	callq	strtol
	movq	%rax, (%r15)
	movabsq	$-9223372036854775807, %rcx # imm = 0x8000000000000001
	addq	%rax, %rcx
	cmpq	$1, %rcx
	ja	.LBB64_3
# %bb.2:
	movl	$17, %eax
	cmpl	$34, (%r14)
	je	.LBB64_7
.LBB64_3:
	movq	8(%rsp), %r14
	cmpq	%rbx, %r14
	je	.LBB64_6
# %bb.4:
	movq	%rbx, %rdi
	callq	strlen
	addq	%rbx, %rax
	cmpq	%rax, %r14
	je	.LBB64_5
.LBB64_6:
	movl	$10, %eax
	jmp	.LBB64_7
.LBB64_5:
	xorl	%eax, %eax
.LBB64_7:
	addq	$16, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end64:
	.size	str2offset, .Lfunc_end64-str2offset
	.cfi_endproc
                                        # -- End function
	.globl	file2string             # -- Begin function file2string
	.type	file2string,@function
file2string:                            # @file2string
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$296, %rsp              # imm = 0x128
	.cfi_def_cfa_offset 336
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, %r14
	movq	%rsp, %rdi
	movl	$268435456, %esi        # imm = 0x10000000
	callq	curlx_dyn_init
	testq	%r15, %r15
	je	.LBB65_9
# %bb.1:
	leaq	32(%rsp), %rbx
	movq	%rsp, %r12
.LBB65_2:                               # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rdi
	movl	$256, %esi              # imm = 0x100
	movq	%r15, %rdx
	callq	fgets
	testq	%rax, %rax
	je	.LBB65_9
# %bb.3:                                #   in Loop: Header=BB65_2 Depth=1
	movq	%rbx, %rdi
	movl	$13, %esi
	callq	strchr
	testq	%rax, %rax
	je	.LBB65_5
# %bb.4:                                #   in Loop: Header=BB65_2 Depth=1
	movb	$0, (%rax)
.LBB65_5:                               #   in Loop: Header=BB65_2 Depth=1
	movq	%rbx, %rdi
	movl	$10, %esi
	callq	strchr
	testq	%rax, %rax
	je	.LBB65_7
# %bb.6:                                #   in Loop: Header=BB65_2 Depth=1
	movb	$0, (%rax)
.LBB65_7:                               #   in Loop: Header=BB65_2 Depth=1
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	curlx_dyn_add
	testl	%eax, %eax
	je	.LBB65_2
# %bb.8:
	movl	$14, %eax
	jmp	.LBB65_10
.LBB65_9:
	movq	%rsp, %rdi
	callq	curlx_dyn_ptr
	movq	%rax, (%r14)
	xorl	%eax, %eax
.LBB65_10:
	addq	$296, %rsp              # imm = 0x128
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end65:
	.size	file2string, .Lfunc_end65-file2string
	.cfi_endproc
                                        # -- End function
	.type	GetFileAndPassword,@function # -- Begin function GetFileAndPassword
GetFileAndPassword:                     # @GetFileAndPassword
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %rbx
	movq	%rsi, %r13
	movq	%rdi, %r15
	callq	strlen
	testq	%rax, %rax
	je	.LBB66_19
# %bb.1:
	movq	%rax, %rbp
	movl	$.L.str.529, %esi
	movl	$7, %edx
	movq	%r15, %rdi
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB66_3
.LBB66_2:
	movq	%r15, %rdi
	callq	strdup
	movq	%rax, %rbp
	jmp	.LBB66_20
.LBB66_3:
	movl	$.L.str.530, %esi
	movq	%r15, %rdi
	callq	strpbrk
	testq	%rax, %rax
	je	.LBB66_2
# %bb.4:
	incq	%rbp
	movq	%rbp, %rdi
	callq	myMalloc
	testq	%rax, %rax
	je	.LBB66_19
# %bb.5:
	cmpb	$0, (%r15)
	movq	%rax, (%rsp)            # 8-byte Spill
	je	.LBB66_24
# %bb.6:                                # %.preheader
	movq	%rax, %rbp
	movq	%r15, %rdi
.LBB66_7:                               # =>This Inner Loop Header: Depth=1
	movq	%rdi, %r14
	movl	$.L.str.530, %esi
	callq	strcspn
	movq	%rax, %r12
	movq	%rbp, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	strncpy
	leaq	(%r14,%r12), %rdi
	addq	%r12, %rbp
	movb	(%r14,%r12), %al
	movsbl	%al, %ecx
	cmpl	$92, %ecx
	je	.LBB66_10
# %bb.8:                                #   in Loop: Header=BB66_7 Depth=1
	cmpl	$58, %ecx
	je	.LBB66_25
# %bb.9:                                #   in Loop: Header=BB66_7 Depth=1
	xorl	%r12d, %r12d
	jmp	.LBB66_18
.LBB66_10:                              #   in Loop: Header=BB66_7 Depth=1
	movb	1(%rdi), %al
	incq	%rdi
	movsbl	%al, %ecx
	cmpl	$92, %ecx
	je	.LBB66_14
# %bb.11:                               #   in Loop: Header=BB66_7 Depth=1
	cmpl	$58, %ecx
	movl	$0, %r12d
	je	.LBB66_15
# %bb.12:                               #   in Loop: Header=BB66_7 Depth=1
	testl	%ecx, %ecx
	jne	.LBB66_16
# %bb.13:                               #   in Loop: Header=BB66_7 Depth=1
	movb	$92, (%rbp)
	incq	%rbp
	jmp	.LBB66_18
.LBB66_14:                              #   in Loop: Header=BB66_7 Depth=1
	movb	$92, (%rbp)
	xorl	%r12d, %r12d
	jmp	.LBB66_17
.LBB66_15:                              #   in Loop: Header=BB66_7 Depth=1
	movb	$58, (%rbp)
	jmp	.LBB66_17
.LBB66_16:                              #   in Loop: Header=BB66_7 Depth=1
	movb	$92, (%rbp)
	movb	%al, 1(%rbp)
	incq	%rbp
.LBB66_17:                              #   in Loop: Header=BB66_7 Depth=1
	incq	%rbp
	movb	1(%rdi), %al
	incq	%rdi
.LBB66_18:                              #   in Loop: Header=BB66_7 Depth=1
	testb	%al, %al
	jne	.LBB66_7
	jmp	.LBB66_28
.LBB66_19:
	xorl	%ebp, %ebp
.LBB66_20:
	xorl	%r12d, %r12d
.LBB66_21:
	movq	(%r13), %rdi
	callq	myFree
	movq	%rbp, (%r13)
	testq	%r12, %r12
	je	.LBB66_23
# %bb.22:
	movq	(%rbx), %rdi
	callq	myFree
	movq	%r12, (%rbx)
.LBB66_23:
	movq	%r15, %rdi
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	cleanarg                # TAILCALL
.LBB66_24:
	.cfi_def_cfa_offset 64
	xorl	%r12d, %r12d
	movq	%rax, %rbp
	jmp	.LBB66_28
.LBB66_25:
	cmpb	$0, 1(%rdi)
	je	.LBB66_27
# %bb.26:
	incq	%rdi
	callq	strdup
	movq	%rax, %r12
	jmp	.LBB66_28
.LBB66_27:
	xorl	%r12d, %r12d
.LBB66_28:
	movb	$0, (%rbp)
	movq	(%rsp), %rbp            # 8-byte Reload
	jmp	.LBB66_21
.Lfunc_end66:
	.size	GetFileAndPassword, .Lfunc_end66-GetFileAndPassword
	.cfi_endproc
                                        # -- End function
	.globl	cleanarg                # -- Begin function cleanarg
	.type	cleanarg,@function
cleanarg:                               # @cleanarg
	.cfi_startproc
# %bb.0:
	testq	%rdi, %rdi
	je	.LBB67_1
# %bb.2:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	callq	strlen
	movq	%rbx, %rdi
	movl	$32, %esi
	movq	%rax, %rdx
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	memset                  # TAILCALL
.LBB67_1:
	retq
.Lfunc_end67:
	.size	cleanarg, .Lfunc_end67-cleanarg
	.cfi_endproc
                                        # -- End function
	.globl	SetHTTPrequest          # -- Begin function SetHTTPrequest
	.type	SetHTTPrequest,@function
SetHTTPrequest:                         # @SetHTTPrequest
	.cfi_startproc
# %bb.0:
	subq	$40, %rsp
	.cfi_def_cfa_offset 48
	movq	$.L.str.16.1085, (%rsp)
	movq	$.L.str.17.1086, 8(%rsp)
	movq	$.L.str.18.1087, 16(%rsp)
	movq	$.L.str.19.1088, 24(%rsp)
	movq	$.L.str.20.1089, 32(%rsp)
	movl	(%rdx), %eax
	testq	%rax, %rax
	je	.LBB68_2
# %bb.1:
	cmpl	%esi, %eax
	je	.LBB68_2
# %bb.3:
	movq	1232(%rdi), %rdi
	movl	%esi, %ecx
	movq	(%rsp,%rcx,8), %rdx
	movq	(%rsp,%rax,8), %rcx
	movl	$.L.str.21.1090, %esi
	xorl	%eax, %eax
	callq	warnf
	movl	$1, %eax
	jmp	.LBB68_4
.LBB68_2:
	movl	%esi, (%rdx)
	xorl	%eax, %eax
.LBB68_4:
	addq	$40, %rsp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end68:
	.size	SetHTTPrequest, .Lfunc_end68-SetHTTPrequest
	.cfi_endproc
                                        # -- End function
	.globl	parseconfig             # -- Begin function parseconfig
	.type	parseconfig,@function
parseconfig:                            # @parseconfig
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$4184, %rsp             # imm = 0x1058
	.cfi_def_cfa_offset 4240
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r13
	movq	%rdi, %rbp
	movb	$0, 3(%rsp)
	movq	112(%rsi), %r15
	testq	%rdi, %rdi
	je	.LBB69_5
# %bb.1:
	cmpb	$0, (%rbp)
	je	.LBB69_5
# %bb.2:
	xorl	%r12d, %r12d
	jmp	.LBB69_3
.LBB69_5:
	movl	$.L.str.1502, %edi
	callq	homedir
	testq	%rax, %rax
	je	.LBB69_8
# %bb.6:
	movq	%rax, %rbx
	movl	$.L.str.1.1503, %edi
	movl	$.L.str.2.1504, %edx
	movq	%rax, %rsi
	xorl	%eax, %eax
	callq	curl_maprintf
	movq	%rax, %rbp
	movq	%rbx, %rdi
	callq	myFree
	movq	%rbp, %r12
	testq	%rbp, %rbp
	jne	.LBB69_3
# %bb.7:
	movl	$1, %ebx
	jmp	.LBB69_20
.LBB69_8:
	xorl	%r12d, %r12d
	testq	%rbp, %rbp
	je	.LBB69_9
.LBB69_3:
	movl	$.L.str.3.1505, %esi
	movq	%rbp, %rdi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB69_10
# %bb.4:
	movl	$.L.str.4.1506, %esi
	movq	%rbp, %rdi
	callq	fopen
	movq	%rax, %r14
	jmp	.LBB69_11
.LBB69_10:
	movq	stdin(%rip), %r14
.LBB69_11:
	testq	%r14, %r14
	je	.LBB69_9
# %bb.12:
	movq	%r15, 8(%rsp)           # 8-byte Spill
	movq	%r13, 32(%rsp)          # 8-byte Spill
	movq	%r12, 40(%rsp)          # 8-byte Spill
	leaq	48(%rsp), %rbx
	movl	$102400, %esi           # imm = 0x19000
	movq	%rbx, %rdi
	callq	curlx_dyn_init
	leaq	80(%rsp), %r15
	xorl	%r12d, %r12d
.LBB69_13:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_28 Depth 2
                                        #     Child Loop BB69_34 Depth 2
                                        #     Child Loop BB69_44 Depth 2
                                        #     Child Loop BB69_53 Depth 2
                                        #     Child Loop BB69_73 Depth 2
                                        #     Child Loop BB69_58 Depth 2
                                        #       Child Loop BB69_59 Depth 3
	movq	%r15, %rdi
	movl	$4096, %esi             # imm = 0x1000
	movq	%r14, %rdx
	callq	fgets
	movq	%rbx, %rdi
	testq	%rax, %rax
	je	.LBB69_24
# %bb.14:                               #   in Loop: Header=BB69_13 Depth=1
	movq	%r15, %rsi
	callq	curlx_dyn_add
	testl	%eax, %eax
	jne	.LBB69_15
# %bb.21:                               #   in Loop: Header=BB69_13 Depth=1
	movq	%r15, %rdi
	movl	$10, %esi
	callq	strchr
	testq	%rax, %rax
	je	.LBB69_13
	jmp	.LBB69_22
.LBB69_24:                              #   in Loop: Header=BB69_13 Depth=1
	callq	curlx_dyn_len
	testq	%rax, %rax
	je	.LBB69_25
.LBB69_22:                              #   in Loop: Header=BB69_13 Depth=1
	movq	%rbx, %rdi
	callq	curlx_dyn_ptr
	testq	%rax, %rax
	je	.LBB69_23
# %bb.26:                               #   in Loop: Header=BB69_13 Depth=1
	movq	%rax, %r13
	incl	%r12d
	movb	(%rax), %al
	testb	%al, %al
	je	.LBB69_95
# %bb.27:                               # %.preheader10
                                        #   in Loop: Header=BB69_13 Depth=1
	movl	%r12d, 4(%rsp)          # 4-byte Spill
	movq	%rbp, 16(%rsp)          # 8-byte Spill
	leaq	1(%r13), %rbp
	movq	%r13, %r12
	addq	$2, %r12
.LBB69_28:                              #   Parent Loop BB69_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	%al, %edi
	callq	Curl_isspace
	testl	%eax, %eax
	je	.LBB69_30
# %bb.29:                               #   in Loop: Header=BB69_28 Depth=2
	movb	1(%r13), %al
	incq	%r13
	incq	%rbp
	incq	%r12
	testb	%al, %al
	jne	.LBB69_28
	jmp	.LBB69_94
.LBB69_30:                              #   in Loop: Header=BB69_13 Depth=1
	movsbl	(%r13), %ecx
	cmpl	$47, %ecx
	ja	.LBB69_32
# %bb.31:                               #   in Loop: Header=BB69_13 Depth=1
	movabsq	$145169894614017, %rax  # imm = 0x840800002401
	btq	%rcx, %rax
	jae	.LBB69_32
.LBB69_94:                              #   in Loop: Header=BB69_13 Depth=1
	movq	16(%rsp), %rbp          # 8-byte Reload
	leaq	48(%rsp), %rbx
	movl	4(%rsp), %r12d          # 4-byte Reload
.LBB69_95:                              #   in Loop: Header=BB69_13 Depth=1
	movq	%rbx, %rdi
	callq	curlx_dyn_reset
	jmp	.LBB69_13
.LBB69_32:                              #   in Loop: Header=BB69_13 Depth=1
	movq	%r13, %rbx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	testb	%cl, %cl
	je	.LBB69_78
# %bb.33:                               # %.preheader7
                                        #   in Loop: Header=BB69_13 Depth=1
	movq	24(%rsp), %rbx          # 8-byte Reload
	movl	%ebx, %eax
.LBB69_34:                              #   Parent Loop BB69_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	%al, %edi
	callq	Curl_isspace
	testl	%eax, %eax
	jne	.LBB69_41
# %bb.35:                               #   in Loop: Header=BB69_34 Depth=2
	cmpb	$45, %bl
	je	.LBB69_38
# %bb.36:                               #   in Loop: Header=BB69_34 Depth=2
	movb	-1(%rbp), %al
	cmpb	$58, %al
	je	.LBB69_42
# %bb.37:                               #   in Loop: Header=BB69_34 Depth=2
	cmpb	$61, %al
	je	.LBB69_42
.LBB69_38:                              #   in Loop: Header=BB69_34 Depth=2
	movb	(%rbp), %al
	incq	%rbp
	incq	%r12
	testb	%al, %al
	jne	.LBB69_34
	jmp	.LBB69_39
.LBB69_41:                              #   in Loop: Header=BB69_13 Depth=1
	cmpb	$0, -1(%rbp)
	je	.LBB69_39
.LBB69_42:                              #   in Loop: Header=BB69_13 Depth=1
	xorl	%eax, %eax
	movb	%al, -1(%rbp)
	movb	(%rbp), %al
	testb	%al, %al
	je	.LBB69_40
# %bb.43:                               # %.preheader4
                                        #   in Loop: Header=BB69_13 Depth=1
	movq	%rbp, %rbx
.LBB69_44:                              #   Parent Loop BB69_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	%al, %edi
	callq	Curl_isspace
	cmpb	$45, 24(%rsp)           # 1-byte Folded Reload
	je	.LBB69_48
# %bb.45:                               #   in Loop: Header=BB69_44 Depth=2
	testl	%eax, %eax
	jne	.LBB69_48
# %bb.46:                               #   in Loop: Header=BB69_44 Depth=2
	movb	(%rbx), %al
	cmpb	$58, %al
	je	.LBB69_49
# %bb.47:                               #   in Loop: Header=BB69_44 Depth=2
	cmpb	$61, %al
	je	.LBB69_49
	jmp	.LBB69_51
.LBB69_48:                              #   in Loop: Header=BB69_44 Depth=2
	testl	%eax, %eax
	je	.LBB69_50
.LBB69_49:                              #   in Loop: Header=BB69_44 Depth=2
	movb	1(%rbx), %al
	incq	%rbx
	incq	%r12
	testb	%al, %al
	jne	.LBB69_44
	jmp	.LBB69_78
.LBB69_39:                              # %.loopexit9
                                        #   in Loop: Header=BB69_13 Depth=1
	decq	%rbp
.LBB69_40:                              #   in Loop: Header=BB69_13 Depth=1
	movq	%rbp, %rbx
.LBB69_78:                              #   in Loop: Header=BB69_13 Depth=1
	xorl	%eax, %eax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	cmpb	$0, (%rbx)
	movl	$0, %r12d
	cmovneq	%rbx, %r12
.LBB69_79:                              #   in Loop: Header=BB69_13 Depth=1
	movq	%r13, %rdi
	movq	%r12, %rsi
	leaq	3(%rsp), %rdx
	movq	32(%rsp), %rbp          # 8-byte Reload
	movq	%rbp, %rcx
	movq	8(%rsp), %r8            # 8-byte Reload
	callq	getparameter
	movq	%r12, %rdi
	movl	%eax, %ebx
	movq	112(%rbp), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	testq	%r12, %r12
	je	.LBB69_83
# %bb.80:                               #   in Loop: Header=BB69_13 Depth=1
	testl	%ebx, %ebx
	jne	.LBB69_83
# %bb.81:                               #   in Loop: Header=BB69_13 Depth=1
	cmpb	$0, (%rdi)
	je	.LBB69_92
# %bb.82:                               #   in Loop: Header=BB69_13 Depth=1
	movl	$9, %ebx
	cmpb	$0, 3(%rsp)
	je	.LBB69_89
	jmp	.LBB69_92
.LBB69_83:                              #   in Loop: Header=BB69_13 Depth=1
	testl	%ebx, %ebx
	je	.LBB69_92
# %bb.84:                               #   in Loop: Header=BB69_13 Depth=1
	cmpl	$15, %ebx
	jne	.LBB69_89
# %bb.85:                               #   in Loop: Header=BB69_13 Depth=1
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	472(%rax), %rax
	testq	%rax, %rax
	je	.LBB69_92
# %bb.86:                               #   in Loop: Header=BB69_13 Depth=1
	cmpq	$0, 8(%rax)
	je	.LBB69_92
# %bb.87:                               #   in Loop: Header=BB69_13 Depth=1
	movl	$1336, %edi             # imm = 0x538
	callq	myMalloc
	movq	8(%rsp), %rbp           # 8-byte Reload
	movq	%rax, 1248(%rbp)
	testq	%rax, %rax
	je	.LBB69_88
# %bb.96:                               #   in Loop: Header=BB69_13 Depth=1
	movq	%rax, %rdi
	callq	config_init
	movq	1248(%rbp), %rax
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 1232(%rax)
	movq	%rax, 112(%rcx)
	movq	%rbp, 1240(%rax)
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jmp	.LBB69_91
.LBB69_50:                              #   in Loop: Header=BB69_13 Depth=1
	movb	(%rbx), %al
.LBB69_51:                              #   in Loop: Header=BB69_13 Depth=1
	cmpb	$34, %al
	je	.LBB69_56
# %bb.52:                               #   in Loop: Header=BB69_13 Depth=1
	movq	%rbx, %rbp
.LBB69_53:                              #   Parent Loop BB69_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	%al, %al
	je	.LBB69_78
# %bb.54:                               #   in Loop: Header=BB69_53 Depth=2
	movzbl	%al, %edi
	callq	Curl_isspace
	testl	%eax, %eax
	jne	.LBB69_71
# %bb.55:                               #   in Loop: Header=BB69_53 Depth=2
	movb	1(%rbp), %al
	incq	%rbp
	incq	%r12
	jmp	.LBB69_53
.LBB69_56:                              #   in Loop: Header=BB69_13 Depth=1
	incq	%rbx
	movq	%rbx, %rdi
	callq	strlen
	leaq	1(%rax), %rdi
	callq	myMalloc
	testq	%rax, %rax
	je	.LBB69_23
# %bb.57:                               # %.preheader3
                                        #   in Loop: Header=BB69_13 Depth=1
	movq	%rax, %r12
.LBB69_58:                              #   Parent Loop BB69_13 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_59 Depth 3
	movb	(%rbx), %cl
	incq	%rbx
.LBB69_59:                              #   Parent Loop BB69_13 Depth=1
                                        #     Parent Loop BB69_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpb	$92, %cl
	jne	.LBB69_60
# %bb.63:                               #   in Loop: Header=BB69_59 Depth=3
	movb	(%rbx), %cl
	movsbl	%cl, %edx
	incq	%rbx
	testl	%edx, %edx
	je	.LBB69_59
# %bb.64:                               #   in Loop: Header=BB69_58 Depth=2
	addl	$-110, %edx
	cmpl	$8, %edx
	ja	.LBB69_70
# %bb.65:                               #   in Loop: Header=BB69_58 Depth=2
	jmpq	*.LJTI69_0(,%rdx,8)
.LBB69_68:                              #   in Loop: Header=BB69_58 Depth=2
	movb	$10, %cl
	jmp	.LBB69_70
.LBB69_60:                              #   in Loop: Header=BB69_58 Depth=2
	testb	%cl, %cl
	je	.LBB69_62
# %bb.61:                               #   in Loop: Header=BB69_58 Depth=2
	cmpb	$34, %cl
	je	.LBB69_62
	jmp	.LBB69_70
.LBB69_69:                              # %.loopexit
                                        #   in Loop: Header=BB69_58 Depth=2
	movb	$13, %cl
	jmp	.LBB69_70
.LBB69_67:                              #   in Loop: Header=BB69_58 Depth=2
	movb	$9, %cl
	jmp	.LBB69_70
.LBB69_66:                              #   in Loop: Header=BB69_58 Depth=2
	movb	$11, %cl
.LBB69_70:                              #   in Loop: Header=BB69_58 Depth=2
	movb	%cl, (%rax)
	incq	%rax
	jmp	.LBB69_58
.LBB69_62:                              #   in Loop: Header=BB69_13 Depth=1
	movb	$0, (%rax)
	movb	$1, %al
	movq	%rax, 24(%rsp)          # 8-byte Spill
	jmp	.LBB69_79
.LBB69_88:                              #   in Loop: Header=BB69_13 Depth=1
	movl	$14, %ebx
.LBB69_89:                              #   in Loop: Header=BB69_13 Depth=1
	movl	$.L.str.3.1505, %esi
	movq	16(%rsp), %rbp          # 8-byte Reload
	movq	%rbp, %rdi
	callq	strcmp
	testl	%eax, %eax
	movl	$.L.str.6.1508, %eax
	cmoveq	%rax, %rbp
	leal	-5(%rbx), %eax
	cmpl	$4, %eax
	movq	%rbp, 16(%rsp)          # 8-byte Spill
	jb	.LBB69_91
# %bb.90:                               #   in Loop: Header=BB69_13 Depth=1
	movl	%ebx, %edi
	callq	param2text
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	1232(%rcx), %rdi
	movl	$.L.str.7.1509, %esi
	movq	%rbp, %rdx
	movl	4(%rsp), %ecx           # 4-byte Reload
	movq	%r13, %r8
	movq	%rax, %r9
	xorl	%eax, %eax
	callq	warnf
.LBB69_91:                              #   in Loop: Header=BB69_13 Depth=1
	movq	%r12, %rdi
.LBB69_92:                              #   in Loop: Header=BB69_13 Depth=1
	cmpb	$0, 24(%rsp)            # 1-byte Folded Reload
	je	.LBB69_94
# %bb.93:                               #   in Loop: Header=BB69_13 Depth=1
	callq	myFree
	jmp	.LBB69_94
.LBB69_71:                              #   in Loop: Header=BB69_13 Depth=1
	cmpb	$0, (%rbp)
	je	.LBB69_78
# %bb.72:                               #   in Loop: Header=BB69_13 Depth=1
	movb	$0, (%rbp)
.LBB69_73:                              #   Parent Loop BB69_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%r12), %edi
	testl	%edi, %edi
	je	.LBB69_78
# %bb.74:                               #   in Loop: Header=BB69_73 Depth=2
	callq	Curl_isspace
	incq	%r12
	testl	%eax, %eax
	jne	.LBB69_73
# %bb.75:                               #   in Loop: Header=BB69_13 Depth=1
	movsbl	-1(%r12), %eax
	cmpl	$35, %eax
	ja	.LBB69_77
# %bb.76:                               #   in Loop: Header=BB69_13 Depth=1
	movabsq	$34359747585, %rcx      # imm = 0x800002401
	btq	%rax, %rcx
	jb	.LBB69_78
.LBB69_77:                              #   in Loop: Header=BB69_13 Depth=1
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	1232(%rax), %rdi
	movl	$.L.str.5.1507, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	4(%rsp), %ecx           # 4-byte Reload
	movq	%r13, %r8
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB69_78
.LBB69_15:
	xorl	%ebp, %ebp
	movb	$1, %r15b
.LBB69_16:
	leaq	48(%rsp), %rdi
	callq	curlx_dyn_free
	cmpq	stdin(%rip), %r14
	movq	40(%rsp), %r12          # 8-byte Reload
	je	.LBB69_18
# %bb.17:
	movq	%r14, %rdi
	callq	fclose
.LBB69_18:
	testb	%r15b, %r15b
	movl	$1, %ebx
	cmovel	%ebp, %ebx
	jmp	.LBB69_19
.LBB69_9:
	movl	$1, %ebx
.LBB69_19:
	movq	%r12, %rdi
	callq	curl_free
.LBB69_20:
	movl	%ebx, %eax
	addq	$4184, %rsp             # imm = 0x1058
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB69_23:
	.cfi_def_cfa_offset 4240
	xorl	%r15d, %r15d
	movl	$1, %ebp
	jmp	.LBB69_16
.LBB69_25:
	xorl	%r15d, %r15d
	xorl	%ebp, %ebp
	jmp	.LBB69_16
.Lfunc_end69:
	.size	parseconfig, .Lfunc_end69-parseconfig
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI69_0:
	.quad	.LBB69_68
	.quad	.LBB69_70
	.quad	.LBB69_70
	.quad	.LBB69_70
	.quad	.LBB69_69
	.quad	.LBB69_70
	.quad	.LBB69_67
	.quad	.LBB69_70
	.quad	.LBB69_66
                                        # -- End function
	.text
	.globl	curlx_strtoofft         # -- Begin function curlx_strtoofft
	.type	curlx_strtoofft,@function
curlx_strtoofft:                        # @curlx_strtoofft
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, %r14
	movl	%edx, %ebp
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	__errno_location
	movq	%rax, %r12
	movl	$0, (%rax)
	movq	$0, (%r14)
	movb	(%rbx), %al
.LBB70_1:                               # =>This Inner Loop Header: Depth=1
	testb	%al, %al
	je	.LBB70_4
# %bb.2:                                #   in Loop: Header=BB70_1 Depth=1
	movzbl	%al, %edi
	callq	Curl_isspace
	testl	%eax, %eax
	je	.LBB70_9
# %bb.3:                                #   in Loop: Header=BB70_1 Depth=1
	movb	1(%rbx), %al
	incq	%rbx
	jmp	.LBB70_1
.LBB70_9:
	cmpb	$45, (%rbx)
	jne	.LBB70_4
# %bb.10:
	movl	$2, %eax
	testq	%r15, %r15
	je	.LBB70_13
# %bb.11:
	movq	%rbx, (%r15)
	jmp	.LBB70_13
.LBB70_4:
	leaq	8(%rsp), %rsi
	movq	%rbx, %rdi
	movl	%ebp, %edx
	callq	strtol
	movq	%rax, %rcx
	testq	%r15, %r15
	je	.LBB70_6
# %bb.5:
	movq	8(%rsp), %rax
	movq	%rax, (%r15)
.LBB70_6:
	movl	$1, %eax
	cmpl	$34, (%r12)
	je	.LBB70_13
# %bb.7:
	cmpq	8(%rsp), %rbx
	je	.LBB70_8
# %bb.12:
	movq	%rcx, (%r14)
	xorl	%eax, %eax
	jmp	.LBB70_13
.LBB70_8:
	movl	$2, %eax
.LBB70_13:
	addq	$16, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end70:
	.size	curlx_strtoofft, .Lfunc_end70-curlx_strtoofft
	.cfi_endproc
                                        # -- End function
	.globl	homedir                 # -- Begin function homedir
	.type	homedir,@function
homedir:                                # @homedir
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	movl	$.L.str.1097, %edi
	callq	GetEnv
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	.LBB71_13
# %bb.1:
	testq	%r14, %r14
	je	.LBB71_6
# %bb.2:
	movl	$.L.str.1.1098, %edi
	callq	GetEnv
	testq	%rax, %rax
	je	.LBB71_6
# %bb.3:
	movq	%rax, %rbx
	movl	$.L.str.2.1099, %edi
	movq	%rax, %rsi
	movq	%r14, %rdx
	xorl	%eax, %eax
	callq	curl_maprintf
	testq	%rax, %rax
	je	.LBB71_5
# %bb.4:
	movq	%rax, %r14
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	callq	open
	movl	%eax, %ebp
	movq	%r14, %rdi
	callq	curl_free
	testl	%ebp, %ebp
	js	.LBB71_5
# %bb.12:
	movl	%ebp, %edi
	callq	close
	jmp	.LBB71_13
.LBB71_5:
	movq	%rbx, %rdi
	callq	myFree
.LBB71_6:
	movl	$.L.str.3.1100, %edi
	callq	GetEnv
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	.LBB71_13
# %bb.7:
	callq	geteuid
	movl	%eax, %edi
	callq	getpwuid
	testq	%rax, %rax
	je	.LBB71_8
# %bb.9:
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	je	.LBB71_8
# %bb.10:
	cmpb	$0, (%rdi)
	je	.LBB71_8
# %bb.11:
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	strdup                  # TAILCALL
.LBB71_8:
	.cfi_def_cfa_offset 32
	xorl	%ebx, %ebx
.LBB71_13:
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end71:
	.size	homedir, .Lfunc_end71-homedir
	.cfi_endproc
                                        # -- End function
	.globl	curlx_dyn_add           # -- Begin function curlx_dyn_add
	.type	curlx_dyn_add,@function
curlx_dyn_add:                          # @curlx_dyn_add
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	%rsi, %rdi
	callq	strlen
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	jmp	dyn_nappend             # TAILCALL
.Lfunc_end72:
	.size	curlx_dyn_add, .Lfunc_end72-curlx_dyn_add
	.cfi_endproc
                                        # -- End function
	.globl	param2text              # -- Begin function param2text
	.type	param2text,@function
param2text:                             # @param2text
	.cfi_startproc
# %bb.0:
	decl	%edi
	cmpl	$19, %edi
	ja	.LBB73_2
# %bb.1:
	movslq	%edi, %rax
	movq	.Lswitch.table.param2text(,%rax,8), %rax
	retq
.LBB73_2:
	movl	$.L.str.15.1067, %eax
	retq
.Lfunc_end73:
	.size	param2text, .Lfunc_end73-param2text
	.cfi_endproc
                                        # -- End function
	.globl	curlx_dyn_reset         # -- Begin function curlx_dyn_reset
	.type	curlx_dyn_reset,@function
curlx_dyn_reset:                        # @curlx_dyn_reset
	.cfi_startproc
# %bb.0:
	cmpq	$0, 8(%rdi)
	je	.LBB74_2
# %bb.1:
	movq	(%rdi), %rax
	movb	$0, (%rax)
.LBB74_2:
	movq	$0, 8(%rdi)
	retq
.Lfunc_end74:
	.size	curlx_dyn_reset, .Lfunc_end74-curlx_dyn_reset
	.cfi_endproc
                                        # -- End function
	.globl	curlx_dyn_free          # -- Begin function curlx_dyn_free
	.type	curlx_dyn_free,@function
curlx_dyn_free:                         # @curlx_dyn_free
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	(%rdi), %rdi
	callq	myFree
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%rbx)
	movq	$0, 16(%rbx)
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end75:
	.size	curlx_dyn_free, .Lfunc_end75-curlx_dyn_free
	.cfi_endproc
                                        # -- End function
	.type	GetEnv,@function        # -- Begin function GetEnv
GetEnv:                                 # @GetEnv
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	callq	curl_getenv
	testq	%rax, %rax
	je	.LBB76_2
# %bb.1:
	movq	%rax, %rbx
	movq	%rax, %rdi
	callq	strdup
	movq	%rax, %r14
	movq	%rbx, %rdi
	callq	curl_free
	movq	%r14, %rax
	jmp	.LBB76_3
.LBB76_2:
	xorl	%eax, %eax
.LBB76_3:
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end76:
	.size	GetEnv, .Lfunc_end76-GetEnv
	.cfi_endproc
                                        # -- End function
	.globl	Curl_isalnum            # -- Begin function Curl_isalnum
	.type	Curl_isalnum,@function
Curl_isalnum:                           # @Curl_isalnum
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$127, %edi
	ja	.LBB77_2
# %bb.1:
	movl	%edi, %eax
	movzbl	ascii(%rax), %eax
	andl	$7, %eax
.LBB77_2:
	retq
.Lfunc_end77:
	.size	Curl_isalnum, .Lfunc_end77-Curl_isalnum
	.cfi_endproc
                                        # -- End function
	.type	getnum,@function        # -- Begin function getnum
getnum:                                 # @getnum
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	$10, %r12d
	testq	%rsi, %rsi
	je	.LBB78_6
# %bb.1:
	movl	%edx, %r13d
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	%rsp, %r15
	movq	$0, (%r15)
	callq	__errno_location
	movq	%rax, %rbp
	movl	$0, (%rax)
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r13d, %edx
	callq	strtol
	movq	%rax, %r15
	movl	$17, %eax
	cmpl	$34, (%rbp)
	je	.LBB78_5
# %bb.2:
	movq	(%rsp), %rbp
	cmpq	%rbx, %rbp
	je	.LBB78_6
# %bb.3:
	movq	%rbx, %rdi
	callq	strlen
	addq	%rbx, %rax
	cmpq	%rax, %rbp
	jne	.LBB78_6
# %bb.4:
	movq	%r15, (%r14)
	xorl	%eax, %eax
.LBB78_5:
	movl	%eax, %r12d
.LBB78_6:
	movl	%r12d, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end78:
	.size	getnum, .Lfunc_end78-getnum
	.cfi_endproc
                                        # -- End function
	.globl	parse_args              # -- Begin function parse_args
	.type	parse_args,@function
parse_args:                             # @parse_args
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
                                        # kill: def $esi killed $esi def $rsi
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	96(%rdi), %r12
	cmpl	$2, %esi
	jl	.LBB79_25
# %bb.1:
	movq	%rdx, %r14
	leal	-1(%rsi), %eax
	movl	%eax, 44(%rsp)          # 4-byte Spill
	movl	$1, %r13d
	movb	$1, %al
	movl	%eax, 40(%rsp)          # 4-byte Spill
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%rdx, 32(%rsp)          # 8-byte Spill
.LBB79_2:                               # =>This Inner Loop Header: Depth=1
	movslq	%r13d, %rbp
	movq	(%r14,%rbp,8), %rdi
	callq	strdup
	testq	%rax, %rax
	je	.LBB79_3
# %bb.4:                                #   in Loop: Header=BB79_2 Depth=1
	movq	%rax, %rbx
	testb	$1, 40(%rsp)            # 1-byte Folded Reload
	je	.LBB79_22
# %bb.5:                                #   in Loop: Header=BB79_2 Depth=1
	cmpb	$45, (%rbx)
	jne	.LBB79_22
# %bb.6:                                #   in Loop: Header=BB79_2 Depth=1
	movl	$.L.str.34, %edi
	movq	%rbx, %rsi
	callq	strcmp
	xorl	%r15d, %r15d
	testl	%eax, %eax
	je	.LBB79_7
# %bb.8:                                #   in Loop: Header=BB79_2 Depth=1
	cmpl	44(%rsp), %r13d         # 4-byte Folded Reload
	jge	.LBB79_9
# %bb.10:                               #   in Loop: Header=BB79_2 Depth=1
	movq	8(%r14,%rbp,8), %rdi
	callq	strdup
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rax, %rbp
	movq	%rbx, %rdi
	movq	%rax, %rsi
	leaq	15(%rsp), %rdx
	movq	%r12, %r8
	callq	getparameter
	movl	%eax, %r14d
	testq	%rbp, %rbp
	je	.LBB79_12
# %bb.11:                               #   in Loop: Header=BB79_2 Depth=1
	movq	%rbp, %rdi
	callq	myFree
	jmp	.LBB79_12
.LBB79_22:                              #   in Loop: Header=BB79_2 Depth=1
	movl	$.L.str.35.137, %edi
	movq	%rbx, %rsi
	leaq	31(%rsp), %rdx
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%r12, %r8
	callq	getparameter
	movl	%eax, %r15d
.LBB79_23:                              #   in Loop: Header=BB79_2 Depth=1
	testl	%r15d, %r15d
	jne	.LBB79_30
# %bb.24:                               #   in Loop: Header=BB79_2 Depth=1
	movq	%rbx, %rdi
	callq	myFree
	incl	%r13d
	cmpl	48(%rsp), %r13d         # 4-byte Folded Reload
	jl	.LBB79_2
	jmp	.LBB79_25
.LBB79_7:                               #   in Loop: Header=BB79_2 Depth=1
	movl	$0, 40(%rsp)            # 4-byte Folded Spill
	jmp	.LBB79_23
.LBB79_9:                               #   in Loop: Header=BB79_2 Depth=1
	movq	%rbx, %rdi
	xorl	%esi, %esi
	leaq	15(%rsp), %rdx
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%r12, %r8
	callq	getparameter
	movl	%eax, %r14d
.LBB79_12:                              #   in Loop: Header=BB79_2 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	112(%rax), %r12
	testl	%r14d, %r14d
	je	.LBB79_20
# %bb.13:                               #   in Loop: Header=BB79_2 Depth=1
	cmpl	$15, %r14d
	jne	.LBB79_14
# %bb.15:                               #   in Loop: Header=BB79_2 Depth=1
	movq	472(%r12), %rax
	testq	%rax, %rax
	je	.LBB79_21
# %bb.16:                               #   in Loop: Header=BB79_2 Depth=1
	cmpq	$0, 8(%rax)
	je	.LBB79_21
# %bb.17:                               #   in Loop: Header=BB79_2 Depth=1
	movl	$1336, %edi             # imm = 0x538
	callq	myMalloc
	movq	%rax, 1248(%r12)
	testq	%rax, %rax
	je	.LBB79_18
# %bb.19:                               #   in Loop: Header=BB79_2 Depth=1
	movq	%rax, %rdi
	callq	config_init
	movq	1248(%r12), %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 1232(%rax)
	movq	%rax, 112(%rcx)
	movq	%r12, 1240(%rax)
	movq	%rax, %r12
	jmp	.LBB79_21
.LBB79_20:                              #   in Loop: Header=BB79_2 Depth=1
	movzbl	15(%rsp), %eax
	addl	%eax, %r13d
	jmp	.LBB79_21
.LBB79_14:                              #   in Loop: Header=BB79_2 Depth=1
	movl	%r14d, %r15d
.LBB79_21:                              #   in Loop: Header=BB79_2 Depth=1
	movq	32(%rsp), %r14          # 8-byte Reload
	jmp	.LBB79_23
.LBB79_18:                              #   in Loop: Header=BB79_2 Depth=1
	movl	$14, %r15d
	jmp	.LBB79_21
.LBB79_25:
	xorl	%r15d, %r15d
	cmpb	$0, 1120(%r12)
	je	.LBB79_34
# %bb.26:
	movl	$19, %r14d
	cmpb	$0, 455(%r12)
	jne	.LBB79_28
# %bb.27:
	movl	$20, %r14d
	cmpb	$0, 89(%r12)
	je	.LBB79_34
.LBB79_28:
	movl	%r14d, %edi
	callq	param2text
	movq	%rax, %rbp
	xorl	%ebx, %ebx
	movl	%r14d, %r15d
.LBB79_29:
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdi
	movl	$.L.str.38, %esi
	movq	%rbp, %rdx
	xorl	%eax, %eax
	callq	helpf
	testq	%rbx, %rbx
	jne	.LBB79_33
	jmp	.LBB79_34
.LBB79_3:
	movl	$14, %r15d
	jmp	.LBB79_34
.LBB79_30:
	leal	-5(%r15), %eax
	cmpl	$4, %eax
	jb	.LBB79_33
# %bb.31:
	movl	%r15d, %edi
	callq	param2text
	movq	%rax, %rbp
	movl	$.L.str.36, %edi
	movq	%rbx, %rsi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB79_29
# %bb.32:
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdi
	movl	$.L.str.37, %esi
	movq	%rbx, %rdx
	movq	%rbp, %rcx
	xorl	%eax, %eax
	callq	helpf
.LBB79_33:
	movq	%rbx, %rdi
	callq	myFree
.LBB79_34:
	movl	%r15d, %eax
	addq	$56, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end79:
	.size	parse_args, .Lfunc_end79-parse_args
	.cfi_endproc
                                        # -- End function
	.globl	helpf                   # -- Begin function helpf
	.type	helpf,@function
helpf:                                  # @helpf
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$208, %rsp
	.cfi_def_cfa_offset 240
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %r14
	movq	%rdi, %rbx
	testb	%al, %al
	je	.LBB80_2
# %bb.1:
	movaps	%xmm0, 48(%rsp)
	movaps	%xmm1, 64(%rsp)
	movaps	%xmm2, 80(%rsp)
	movaps	%xmm3, 96(%rsp)
	movaps	%xmm4, 112(%rsp)
	movaps	%xmm5, 128(%rsp)
	movaps	%xmm6, 144(%rsp)
	movaps	%xmm7, 160(%rsp)
.LBB80_2:
	movq	%rdx, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%r8, 32(%rsp)
	movq	%r9, 40(%rsp)
	testq	%r14, %r14
	je	.LBB80_4
# %bb.3:
	movq	%rsp, %rax
	leaq	176(%rsp), %r15
	movq	%rax, 16(%r15)
	leaq	240(%rsp), %rax
	movq	%rax, 8(%r15)
	movabsq	$206158430224, %rax     # imm = 0x3000000010
	movq	%rax, (%r15)
	movl	$.L.str.2.1142, %edi
	movq	%rbx, %rsi
	callq	fputs
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	callq	curl_mvfprintf
.LBB80_4:
	movl	$.L.str.3.1143, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	addq	$208, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end80:
	.size	helpf, .Lfunc_end80-helpf
	.cfi_endproc
                                        # -- End function
	.globl	getpass_r               # -- Begin function getpass_r
	.type	getpass_r,@function
getpass_r:                              # @getpass_r
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %rbx
	movq	%rdi, %r15
	xorl	%r12d, %r12d
	movl	$.L.str.531, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	callq	open
	movl	%eax, %ebp
	cmpl	$-1, %eax
	cmovel	%r12d, %ebp
	movl	$ttyecho.withecho, %esi
	movl	%ebp, %edi
	callq	tcgetattr
	movups	ttyecho.withecho(%rip), %xmm0
	movups	%xmm0, ttyecho.noecho(%rip)
	movups	ttyecho.withecho+16(%rip), %xmm0
	movups	%xmm0, ttyecho.noecho+16(%rip)
	movups	ttyecho.withecho+32(%rip), %xmm0
	movups	%xmm0, ttyecho.noecho+32(%rip)
	movups	ttyecho.withecho+44(%rip), %xmm0
	movups	%xmm0, ttyecho.noecho+44(%rip)
	andb	$-9, ttyecho.noecho+12(%rip)
	movl	$ttyecho.noecho, %edx
	movl	%ebp, %edi
	xorl	%esi, %esi
	callq	tcsetattr
	movq	stderr(%rip), %rsi
	movq	%r15, %rdi
	callq	fputs
	movl	%ebp, %edi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	read
	testq	%rax, %rax
	leaq	-1(%rax,%rbx), %rax
	cmovleq	%rbx, %rax
	movb	$0, (%rax)
	movq	stderr(%rip), %rsi
	movl	$.L.str.1.532, %edi
	callq	fputs
	movl	$ttyecho.withecho, %edx
	movl	%ebp, %edi
	movl	$2, %esi
	callq	tcsetattr
	testl	%ebp, %ebp
	je	.LBB81_2
# %bb.1:
	movl	%ebp, %edi
	callq	close
.LBB81_2:
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end81:
	.size	getpass_r, .Lfunc_end81-getpass_r
	.cfi_endproc
                                        # -- End function
	.globl	tool_help               # -- Begin function tool_help
	.type	tool_help,@function
tool_help:                              # @tool_help
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	$.L.str.533, %edi
	callq	puts
	testq	%r14, %r14
	je	.LBB82_4
# %bb.1:
	movl	$.L.str.2.535, %esi
	movq	%r14, %rdi
	callq	curl_strequal
	testl	%eax, %eax
	je	.LBB82_5
# %bb.2:
	movl	$-2, %edi
.LBB82_3:
	callq	print_category
	jmp	.LBB82_11
.LBB82_4:
	movl	$512, %edi              # imm = 0x200
	callq	print_category
	movl	$.L.str.1.534, %edi
	callq	puts
	jmp	.LBB82_11
.LBB82_5:
	movl	$.L.str.3.536, %esi
	movq	%r14, %rdi
	callq	curl_strequal
	testl	%eax, %eax
	jne	.LBB82_10
# %bb.6:                                # %.preheader
	movq	$-528, %rbx             # imm = 0xFDF0
.LBB82_7:                               # =>This Inner Loop Header: Depth=1
	movq	categories+528(%rbx), %r15
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	curl_strequal
	testl	%eax, %eax
	jne	.LBB82_12
# %bb.8:                                #   in Loop: Header=BB82_7 Depth=1
	addq	$24, %rbx
	jne	.LBB82_7
# %bb.9:
	movl	$.L.str.4.537, %edi
	callq	puts
.LBB82_10:
	callq	get_categories
.LBB82_11:
	movq	%r14, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	myFree                  # TAILCALL
.LBB82_12:
	.cfi_def_cfa_offset 32
	movq	categories+536(%rbx), %rdx
	movl	$.L.str.546, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	callq	curl_mprintf
	movl	categories+544(%rbx), %edi
	jmp	.LBB82_3
.Lfunc_end82:
	.size	tool_help, .Lfunc_end82-tool_help
	.cfi_endproc
                                        # -- End function
	.type	print_category,@function # -- Begin function print_category
print_category:                         # @print_category
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %rbp, -16
	movl	%edi, %ebp
	movl	$.L.str.19.570, %esi
	movq	$-5808, %rbx            # imm = 0xE950
.LBB83_1:                               # =>This Inner Loop Header: Depth=1
	testl	%ebp, helptext+5824(%rbx)
	je	.LBB83_3
# %bb.2:                                #   in Loop: Header=BB83_1 Depth=1
	movq	helptext+5816(%rbx), %rdx
	movl	$.L.str.18.571, %edi
	xorl	%eax, %eax
	callq	curl_mprintf
.LBB83_3:                               #   in Loop: Header=BB83_1 Depth=1
	movq	helptext+5832(%rbx), %rsi
	addq	$24, %rbx
	jne	.LBB83_1
# %bb.4:
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end83:
	.size	print_category, .Lfunc_end83-print_category
	.cfi_endproc
                                        # -- End function
	.type	get_categories,@function # -- Begin function get_categories
get_categories:                         # @get_categories
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	$-528, %rbx             # imm = 0xFDF0
.LBB84_1:                               # =>This Inner Loop Header: Depth=1
	movq	categories+528(%rbx), %rsi
	movq	categories+536(%rbx), %rdx
	movl	$.L.str.501.569, %edi
	xorl	%eax, %eax
	callq	curl_mprintf
	addq	$24, %rbx
	jne	.LBB84_1
# %bb.2:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end84:
	.size	get_categories, .Lfunc_end84-get_categories
	.cfi_endproc
                                        # -- End function
	.globl	tool_version_info       # -- Begin function tool_version_info
	.type	tool_version_info,@function
tool_version_info:                      # @tool_version_info
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	subq	$232, %rsp
	.cfi_def_cfa_offset 256
	.cfi_offset %rbx, -24
	.cfi_offset %rbp, -16
	callq	curl_version
	movl	$.L.str.5.1053, %edi
	movq	%rax, %rsi
	xorl	%eax, %eax
	callq	curl_mprintf
	movl	$.L.str.6.1054, %edi
	movl	$.L.str.7.1055, %esi
	xorl	%eax, %eax
	callq	curl_mprintf
	movq	curlinfo(%rip), %rax
	cmpq	$0, 64(%rax)
	je	.LBB85_5
# %bb.1:
	movl	$.L.str.8.1056, %edi
	xorl	%eax, %eax
	callq	curl_mprintf
	movq	curlinfo(%rip), %rax
	movq	64(%rax), %rbx
	movq	(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB85_4
# %bb.2:                                # %.preheader1
	addq	$8, %rbx
.LBB85_3:                               # =>This Inner Loop Header: Depth=1
	movl	$.L.str.9.1057, %edi
	xorl	%eax, %eax
	callq	curl_mprintf
	movq	(%rbx), %rsi
	addq	$8, %rbx
	testq	%rsi, %rsi
	jne	.LBB85_3
.LBB85_4:
	movl	$10, %edi
	callq	putchar
	movq	curlinfo(%rip), %rax
.LBB85_5:
	cmpl	$0, 32(%rax)
	je	.LBB85_14
# %bb.6:
	xorl	%ebx, %ebx
	movl	$.L.str.11.1058, %edi
	xorl	%eax, %eax
	callq	curl_mprintf
	movq	curlinfo(%rip), %rax
	movl	32(%rax), %eax
	movq	$-448, %rcx             # imm = 0xFE40
.LBB85_7:                               # =>This Inner Loop Header: Depth=1
	testl	%eax, feats+456(%rcx)
	je	.LBB85_9
# %bb.8:                                #   in Loop: Header=BB85_7 Depth=1
	movq	feats+448(%rcx), %rdx
	movq	%rdx, (%rsp,%rbx,8)
	incq	%rbx
.LBB85_9:                               #   in Loop: Header=BB85_7 Depth=1
	addq	$16, %rcx
	jne	.LBB85_7
# %bb.10:
	movq	%rsp, %rdi
	movl	$8, %edx
	movl	$featcomp, %ecx
	movq	%rbx, %rsi
	callq	qsort
	testq	%rbx, %rbx
	je	.LBB85_13
# %bb.11:                               # %.preheader
	movl	$1, %ebp
	xorl	%eax, %eax
.LBB85_12:                              # =>This Inner Loop Header: Depth=1
	movq	(%rsp,%rax,8), %rsi
	movl	$.L.str.12.1059, %edi
	xorl	%eax, %eax
	callq	curl_mprintf
	movl	%ebp, %eax
	incl	%ebp
	cmpq	%rax, %rbx
	ja	.LBB85_12
.LBB85_13:
	movl	$10, %edi
	callq	putchar
	movq	curlinfo(%rip), %rax
.LBB85_14:
	movq	8(%rax), %rsi
	movl	$.L.str.13.1060, %edi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB85_16
# %bb.15:
	movl	$.L.str.14.1061, %edi
	xorl	%eax, %eax
	callq	curl_mprintf
.LBB85_16:
	addq	$232, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end85:
	.size	tool_version_info, .Lfunc_end85-tool_version_info
	.cfi_endproc
                                        # -- End function
	.type	featcomp,@function      # -- Begin function featcomp
featcomp:                               # @featcomp
	.cfi_startproc
# %bb.0:
	movq	(%rdi), %rdi
	movq	(%rsi), %rsi
	jmp	strcasecmp              # TAILCALL
.Lfunc_end86:
	.size	featcomp, .Lfunc_end86-featcomp
	.cfi_endproc
                                        # -- End function
	.globl	tool_list_engines       # -- Begin function tool_list_engines
	.type	tool_list_engines,@function
tool_list_engines:                      # @tool_list_engines
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	callq	curl_easy_init
	movq	%rax, %r14
	movq	%rsp, %rbx
	movq	$0, (%rbx)
	movq	%rax, %rdi
	movl	$4194331, %esi          # imm = 0x40001B
	movq	%rbx, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	movl	$.L.str.15.1062, %edi
	callq	puts
	movq	(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB87_3
.LBB87_1:                               # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rsi
	movl	$.L.str.16.1063, %edi
	xorl	%eax, %eax
	callq	curl_mprintf
	movq	(%rsp), %rax
	movq	8(%rax), %rdi
	movq	%rdi, (%rsp)
	testq	%rdi, %rdi
	jne	.LBB87_1
	jmp	.LBB87_2
.LBB87_3:
	movl	$.L.str.17.1064, %edi
	callq	puts
	movq	(%rsp), %rdi
.LBB87_2:
	callq	curl_slist_free_all
	movq	%r14, %rdi
	callq	curl_easy_cleanup
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end87:
	.size	tool_list_engines, .Lfunc_end87-tool_list_engines
	.cfi_endproc
                                        # -- End function
	.globl	customrequest_helper    # -- Begin function customrequest_helper
	.type	customrequest_helper,@function
customrequest_helper:                   # @customrequest_helper
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$48, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	$.L.str.22.1091, (%rsp)
	movq	$.L.str.22.1091, 8(%rsp)
	movq	$.L.str.23.1092, 16(%rsp)
	movq	$.L.str.24.1093, 24(%rsp)
	movq	$.L.str.24.1093, 32(%rsp)
	testq	%rdx, %rdx
	je	.LBB88_5
# %bb.1:
	movq	%rdx, %rbx
	movq	%rdi, %r14
	movl	%esi, %eax
	movq	(%rsp,%rax,8), %r15
	movq	%rdx, %rdi
	movq	%r15, %rsi
	callq	curl_strequal
	testl	%eax, %eax
	je	.LBB88_3
# %bb.2:
	movq	1232(%r14), %rdi
	movl	$.L.str.25.1094, %esi
	movq	%r15, %rdx
	xorl	%eax, %eax
	callq	notef
	jmp	.LBB88_5
.LBB88_3:
	movl	$.L.str.26.1095, %esi
	movq	%rbx, %rdi
	callq	curl_strequal
	testl	%eax, %eax
	je	.LBB88_5
# %bb.4:
	movq	1232(%r14), %rdi
	movl	$.L.str.27.1096, %esi
	xorl	%eax, %eax
	callq	warnf
.LBB88_5:
	addq	$48, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end88:
	.size	customrequest_helper, .Lfunc_end88-customrequest_helper
	.cfi_endproc
                                        # -- End function
	.globl	notef                   # -- Begin function notef
	.type	notef,@function
notef:                                  # @notef
	.cfi_startproc
# %bb.0:
	subq	$216, %rsp
	.cfi_def_cfa_offset 224
	movq	%rsi, %r10
	testb	%al, %al
	je	.LBB89_2
# %bb.1:
	movaps	%xmm0, 80(%rsp)
	movaps	%xmm1, 96(%rsp)
	movaps	%xmm2, 112(%rsp)
	movaps	%xmm3, 128(%rsp)
	movaps	%xmm4, 144(%rsp)
	movaps	%xmm5, 160(%rsp)
	movaps	%xmm6, 176(%rsp)
	movaps	%xmm7, 192(%rsp)
.LBB89_2:
	leaq	32(%rsp), %rax
	movq	%rdx, 16(%rax)
	movq	%rcx, 24(%rax)
	movq	%r8, 32(%rax)
	movq	%r9, 40(%rax)
	movq	%rax, 16(%rsp)
	leaq	224(%rsp), %rax
	movq	%rax, 8(%rsp)
	movabsq	$206158430224, %rax     # imm = 0x3000000010
	movq	%rax, (%rsp)
	cmpl	$0, 44(%rdi)
	je	.LBB89_4
# %bb.3:
	movq	%rsp, %rcx
	movl	$.L.str.1135, %esi
	movq	%r10, %rdx
	callq	voutf
.LBB89_4:
	addq	$216, %rsp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end89:
	.size	notef, .Lfunc_end89-notef
	.cfi_endproc
                                        # -- End function
	.globl	hugehelp                # -- Begin function hugehelp
	.type	hugehelp,@function
hugehelp:                               # @hugehelp
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$112, %rsp
	.cfi_def_cfa_offset 144
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	xorps	%xmm0, %xmm0
	movq	%rsp, %rdi
	movaps	%xmm0, 64(%rdi)
	movaps	%xmm0, (%rdi)
	movaps	%xmm0, 96(%rdi)
	movaps	%xmm0, 80(%rdi)
	movaps	%xmm0, 48(%rdi)
	movaps	%xmm0, 32(%rdi)
	movaps	%xmm0, 16(%rdi)
	movq	$zalloc_func, 64(%rdi)
	movq	$zfree_func, 72(%rdi)
	movl	$56323, 8(%rdi)         # imm = 0xDC03
	movq	$hugehelpgz+10, (%rdi)
	movl	$.L.str.1101, %edx
	movl	$-15, %esi
	movl	$112, %ecx
	callq	inflateInit2_
	testl	%eax, %eax
	jne	.LBB90_7
# %bb.1:
	movl	$65536, %edi            # imm = 0x10000
	callq	myMalloc
	testq	%rax, %rax
	je	.LBB90_6
# %bb.2:
	movq	%rax, %rbx
	movq	%rsp, %r14
.LBB90_3:                               # =>This Inner Loop Header: Depth=1
	movl	$65536, 32(%rsp)        # imm = 0x10000
	movq	%rbx, 24(%rsp)
	movq	%r14, %rdi
	movl	$2, %esi
	callq	inflate
	cmpl	$1, %eax
	ja	.LBB90_5
# %bb.4:                                #   in Loop: Header=BB90_3 Depth=1
	movl	%eax, %ebp
	movl	$65536, %esi            # imm = 0x10000
	subl	32(%rsp), %esi
	movq	stdout(%rip), %rcx
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	fwrite
	cmpl	$1, %ebp
	jne	.LBB90_3
.LBB90_5:
	movq	%rbx, %rdi
	callq	myFree
.LBB90_6:
	movq	%rsp, %rdi
	callq	inflateEnd
.LBB90_7:
	addq	$112, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end90:
	.size	hugehelp, .Lfunc_end90-hugehelp
	.cfi_endproc
                                        # -- End function
	.type	zalloc_func,@function   # -- Begin function zalloc_func
zalloc_func:                            # @zalloc_func
	.cfi_startproc
# %bb.0:
	movl	%esi, %edi
	movl	%edx, %esi
	jmp	calloc                  # TAILCALL
.Lfunc_end91:
	.size	zalloc_func, .Lfunc_end91-zalloc_func
	.cfi_endproc
                                        # -- End function
	.type	zfree_func,@function    # -- Begin function zfree_func
zfree_func:                             # @zfree_func
	.cfi_startproc
# %bb.0:
	movq	%rsi, %rdi
	jmp	myFree                  # TAILCALL
.Lfunc_end92:
	.size	zfree_func, .Lfunc_end92-zfree_func
	.cfi_endproc
                                        # -- End function
	.globl	get_libcurl_info        # -- Begin function get_libcurl_info
	.type	get_libcurl_info,@function
get_libcurl_info:                       # @get_libcurl_info
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movl	$9, %edi
	callq	curl_version_info
	movq	%rax, curlinfo(%rip)
	testq	%rax, %rax
	je	.LBB93_1
# %bb.3:
	movq	$0, built_in_protos(%rip)
	movq	64(%rax), %rbx
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.LBB93_2
# %bb.4:
	movq	(%rbx), %rdi
.LBB93_5:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_8 Depth 2
	testq	%rdi, %rdi
	je	.LBB93_2
# %bb.6:                                #   in Loop: Header=BB93_5 Depth=1
	movl	$.L.str.1104, %esi
	callq	curl_strequal
	movl	$get_libcurl_info.possibly_built_in, %ebp
	testl	%eax, %eax
	jne	.LBB93_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB93_5 Depth=1
	movl	$get_libcurl_info.possibly_built_in, %ebp
.LBB93_8:                               #   Parent Loop BB93_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	16(%rbp), %rsi
	testq	%rsi, %rsi
	je	.LBB93_11
# %bb.9:                                #   in Loop: Header=BB93_8 Depth=2
	addq	$16, %rbp
	movq	(%rbx), %rdi
	callq	curl_strequal
	testl	%eax, %eax
	je	.LBB93_8
.LBB93_10:                              #   in Loop: Header=BB93_5 Depth=1
	movq	8(%rbp), %rax
	orq	%rax, built_in_protos(%rip)
.LBB93_11:                              #   in Loop: Header=BB93_5 Depth=1
	movq	8(%rbx), %rdi
	addq	$8, %rbx
	jmp	.LBB93_5
.LBB93_1:
	movl	$2, %r14d
.LBB93_2:
	movl	%r14d, %eax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end93:
	.size	get_libcurl_info, .Lfunc_end93-get_libcurl_info
	.cfi_endproc
                                        # -- End function
	.globl	start_main              # -- Begin function start_main
	.type	start_main,@function
start_main:                             # @start_main
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$136, %rsp
	.cfi_def_cfa_offset 176
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r14
	movl	%edi, %ebp
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 112(%rsp)
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	movaps	%xmm0, 48(%rsp)
	movaps	%xmm0, 32(%rsp)
	movaps	%xmm0, 16(%rsp)
	xorl	%eax, %eax
	movq	%rax, 128(%rsp)
	leaq	8(%rsp), %rbx
	movq	%rax, (%rbx)
.LBB94_1:                               # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rdi
	callq	pipe
	testl	%eax, %eax
	js	.LBB94_5
# %bb.2:                                #   in Loop: Header=BB94_1 Depth=1
	cmpl	$3, 12(%rsp)
	jb	.LBB94_1
# %bb.3:                                #   in Loop: Header=BB94_1 Depth=1
	movl	8(%rsp), %edi
	cmpl	$3, %edi
	jb	.LBB94_1
# %bb.4:
	callq	close
	movl	12(%rsp), %edi
	callq	close
.LBB94_5:
	movl	$1, %esi
	movl	$13, %edi
	callq	signal
	movl	$-1, 16(%rsp)
	movq	stderr(%rip), %rax
	movq	%rax, 24(%rsp)
	movb	$1, 81(%rsp)
	movq	$50, 88(%rsp)
	movl	$1336, %edi             # imm = 0x538
	callq	myMalloc
	movq	%rax, 128(%rsp)
	movq	%rax, 112(%rsp)
	testq	%rax, %rax
	je	.LBB94_11
# %bb.6:
	movl	$3, %edi
	callq	curl_global_init
	testl	%eax, %eax
	je	.LBB94_7
# %bb.10:
	movl	%eax, %ebx
	leaq	16(%rsp), %rbp
	movl	$.L.str.1.1131, %esi
	jmp	.LBB94_9
.LBB94_11:
	leaq	16(%rsp), %rdi
	movl	$.L.str.2.1132, %esi
	xorl	%eax, %eax
	callq	errorf
	movl	$2, %ebx
	jmp	.LBB94_19
.LBB94_7:
	callq	get_libcurl_info
	testl	%eax, %eax
	je	.LBB94_12
# %bb.8:
	movl	%eax, %ebx
	leaq	16(%rsp), %rbp
	movl	$.L.str.1130, %esi
.LBB94_9:
	movq	%rbp, %rdi
	xorl	%eax, %eax
	callq	errorf
	movq	96(%rbp), %rdi
	callq	myFree
.LBB94_19:
	movl	%ebx, %eax
	addq	$136, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB94_12:
	.cfi_def_cfa_offset 176
	leaq	16(%rsp), %r15
	movq	96(%r15), %rdi
	callq	config_init
	movq	96(%r15), %rax
	movq	%r15, 1232(%rax)
	movq	%r15, %rdi
	movl	%ebp, %esi
	movq	%r14, %rdx
	callq	operate
	movl	%eax, %ebx
	callq	curl_global_cleanup
	movq	24(%r15), %rdi
	callq	myFree
	movq	$0, 24(%r15)
	cmpb	$0, 16(%r15)
	je	.LBB94_15
# %bb.13:
	movq	24(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB94_15
# %bb.14:
	callq	fclose
.LBB94_15:
	movq	$0, 24(%rsp)
	cmpb	$0, 56(%rsp)
	je	.LBB94_18
# %bb.16:
	movq	48(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB94_18
# %bb.17:
	callq	fclose
.LBB94_18:
	xorl	%ebp, %ebp
	movq	%rbp, 48(%rsp)
	movq	72(%rsp), %rdi
	callq	myFree
	movq	%rbp, 72(%rsp)
	movq	128(%rsp), %rdi
	callq	config_free
	movq	%rbp, 112(%rsp)
	movq	%rbp, 128(%rsp)
	jmp	.LBB94_19
.Lfunc_end94:
	.size	start_main, .Lfunc_end94-start_main
	.cfi_endproc
                                        # -- End function
	.globl	operate                 # -- Begin function operate
	.type	operate,@function
operate:                                # @operate
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movl	%esi, %ebx
	movq	%rdi, %r12
	cmpl	$1, %esi
	jle	.LBB95_6
# %bb.1:
	movq	8(%r14), %rdi
	callq	strdup
	movq	%rax, %rbp
	movl	$.L.str.1148, %esi
	movl	$6, %edi
	callq	setlocale
	testq	%rbp, %rbp
	je	.LBB95_8
# %bb.2:
	movl	$.L.str.1.1149, %esi
	movl	$2, %edx
	movq	%rbp, %rdi
	callq	strncmp
	testl	%eax, %eax
	je	.LBB95_5
# %bb.3:
	movl	$.L.str.2.1150, %esi
	movq	%rbp, %rdi
	callq	curl_strequal
	testl	%eax, %eax
	jne	.LBB95_5
# %bb.4:
	xorl	%edi, %edi
	movq	%r12, %rsi
	callq	parseconfig
.LBB95_5:
	movq	%rbp, %rdi
	callq	myFree
	jmp	.LBB95_8
.LBB95_6:
	movl	$.L.str.1148, %esi
	movl	$6, %edi
	callq	setlocale
	cmpl	$1, %ebx
	jne	.LBB95_8
# %bb.7:
	xorl	%edi, %edi
	movq	%r12, %rsi
	callq	parseconfig
	movq	96(%r12), %rax
	cmpq	$0, 472(%rax)
	je	.LBB95_18
.LBB95_8:
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r14, %rdx
	callq	parse_args
	cmpl	$13, %eax
	ja	.LBB95_19
# %bb.9:
	movl	$1, %r13d
	movl	%eax, %eax
	jmpq	*.LJTI95_0(,%rax,8)
.LBB95_10:
	cmpq	$0, 56(%r12)
	je	.LBB95_21
# %bb.11:
	callq	easysrc_init
	testl	%eax, %eax
	je	.LBB95_21
# %bb.12:
	movl	%eax, %r13d
	movl	$.L.str.3.1152, %esi
	movq	%r12, %rdi
	xorl	%eax, %eax
	callq	errorf
	jmp	.LBB95_20
.LBB95_13:
	movq	88(%r12), %rdi
	callq	tool_help
	jmp	.LBB95_15
.LBB95_14:
	callq	hugehelp
	jmp	.LBB95_15
.LBB95_16:
	callq	tool_version_info
	jmp	.LBB95_15
.LBB95_17:
	callq	tool_list_engines
.LBB95_15:
	xorl	%r13d, %r13d
	jmp	.LBB95_20
.LBB95_18:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	callq	helpf
.LBB95_19:
	movl	$2, %r13d
.LBB95_20:
	movl	%r13d, %eax
	addq	$88, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB95_21:
	.cfi_def_cfa_offset 144
	movq	96(%r12), %rbx
	callq	curl_share_init
	testq	%rax, %rax
	je	.LBB95_30
# %bb.22:
	movq	%rax, %r15
	xorl	%ebp, %ebp
	movq	%rax, %rdi
	movl	$1, %esi
	movl	$2, %edx
	xorl	%eax, %eax
	callq	curl_share_setopt
	movq	%r15, %rdi
	movl	$1, %esi
	movl	$3, %edx
	xorl	%eax, %eax
	callq	curl_share_setopt
	movq	%r15, %rdi
	movl	$1, %esi
	movl	$4, %edx
	xorl	%eax, %eax
	callq	curl_share_setopt
	movq	%r15, %rdi
	movl	$1, %esi
	movl	$5, %edx
	xorl	%eax, %eax
	callq	curl_share_setopt
	movq	%r15, %rdi
	movl	$1, %esi
	movl	$6, %edx
	xorl	%eax, %eax
	callq	curl_share_setopt
.LBB95_23:                              # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	callq	get_args
	movl	%eax, %r13d
	testl	%eax, %eax
	jne	.LBB95_25
# %bb.24:                               #   in Loop: Header=BB95_23 Depth=1
	incq	%rbp
	movq	1248(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB95_23
.LBB95_25:
	movq	96(%r12), %rax
	movq	%rax, 104(%r12)
	movb	5(%r12), %bl
	movb	6(%r12), %al
	movb	%al, 5(%rsp)            # 1-byte Spill
	testl	%r13d, %r13d
	movb	%bl, 6(%rsp)            # 1-byte Spill
	jne	.LBB95_109
# %bb.26:
	cmpb	$0, 66(%r12)
	je	.LBB95_32
# %bb.27:
	movq	%r15, 32(%rsp)          # 8-byte Spill
	movl	$1, 20(%rsp)
	callq	tvnow
	movq	%rax, 56(%rsp)
	movq	%rdx, 64(%rsp)
	xorl	%edi, %edi
	callq	time
	movq	%rax, %rbp
	callq	curl_multi_init
	testq	%rax, %rax
	je	.LBB95_48
# %bb.28:
	movq	%rax, %r15
	leaq	3(%rsp), %rcx
	leaq	2(%rsp), %r8
	movq	%r12, %rdi
	movq	%rax, %rsi
	movq	32(%rsp), %rdx          # 8-byte Reload
	callq	add_parallel_transfers
	testl	%eax, %eax
	je	.LBB95_49
# %bb.29:
	movl	%eax, %r13d
	jmp	.LBB95_107
.LBB95_30:
	movl	$27, %r13d
	cmpq	$0, 56(%r12)
	je	.LBB95_20
# %bb.31:
	callq	easysrc_cleanup
	jmp	.LBB95_20
.LBB95_32:
	leaq	40(%rsp), %rdx
	movb	$0, (%rdx)
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	create_transfer
	movl	%eax, %r13d
	testl	%eax, %eax
	jne	.LBB95_109
# %bb.33:
	cmpb	$0, 40(%rsp)
	je	.LBB95_109
# %bb.34:
	movq	transfers(%rip), %r14
	testq	%r14, %r14
	je	.LBB95_105
# %bb.35:
	movq	%r15, 32(%rsp)          # 8-byte Spill
	xorl	%r13d, %r13d
	leaq	8(%rsp), %r15
	leaq	56(%rsp), %rbx
.LBB95_36:                              # =>This Inner Loop Header: Depth=1
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	pre_transfer
	testl	%eax, %eax
	jne	.LBB95_100
# %bb.37:                               #   in Loop: Header=BB95_36 Depth=1
	cmpq	$0, 56(%r12)
	je	.LBB95_39
# %bb.38:                               #   in Loop: Header=BB95_36 Depth=1
	callq	easysrc_perform
	testl	%eax, %eax
	jne	.LBB95_100
.LBB95_39:                              #   in Loop: Header=BB95_36 Depth=1
	movq	24(%r14), %rdi
	callq	curl_easy_perform
	movl	%eax, %ebp
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%eax, %edx
	movq	%r15, %rcx
	movq	%rbx, %r8
	callq	post_per_transfer
	movl	%eax, %r13d
	cmpb	$0, 8(%rsp)
	je	.LBB95_41
# %bb.40:                               #   in Loop: Header=BB95_36 Depth=1
	movq	56(%rsp), %rdi
	callq	tool_go_sleep
	jmp	.LBB95_36
.LBB95_41:                              #   in Loop: Header=BB95_36 Depth=1
	movb	$1, %dl
	cmpl	$48, %r13d
	ja	.LBB95_44
# %bb.42:                               #   in Loop: Header=BB95_36 Depth=1
	movl	%r13d, %eax
	movabsq	$292470227206148, %rcx  # imm = 0x10A0008000004
	btq	%rax, %rcx
	jb	.LBB95_46
# %bb.43:                               #   in Loop: Header=BB95_36 Depth=1
	testq	%rax, %rax
	je	.LBB95_45
.LBB95_44:                              #   in Loop: Header=BB95_36 Depth=1
	cmpb	$0, 64(%r12)
	jne	.LBB95_46
.LBB95_45:                              #   in Loop: Header=BB95_36 Depth=1
	movq	%r12, %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	leaq	40(%rsp), %rdx
	callq	create_transfer
	movl	%eax, %ebp
	testl	%eax, %eax
	setne	%dl
.LBB95_46:                              #   in Loop: Header=BB95_36 Depth=1
	movb	%dl, 24(%rsp)           # 1-byte Spill
	movq	%r14, %rdi
	callq	del_per_transfer
	cmpb	$0, 24(%rsp)            # 1-byte Folded Reload
	jne	.LBB95_101
# %bb.47:                               #   in Loop: Header=BB95_36 Depth=1
	movq	%rax, %r14
	testq	%rax, %rax
	jne	.LBB95_36
	jmp	.LBB95_101
.LBB95_48:
	movl	$27, %r13d
	jmp	.LBB95_108
.LBB95_49:
	movq	%rbp, 48(%rsp)          # 8-byte Spill
	leaq	84(%rsp), %rbp
	xorl	%eax, %eax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	xorl	%ecx, %ecx
	xorl	%r13d, %r13d
.LBB95_50:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_51 Depth 2
                                        #       Child Loop BB95_82 Depth 3
                                        #       Child Loop BB95_60 Depth 3
	movb	3(%rsp), %al
	movb	%al, 4(%rsp)            # 1-byte Spill
	xorl	%ebx, %ebx
.LBB95_51:                              #   Parent Loop BB95_50 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_82 Depth 3
                                        #       Child Loop BB95_60 Depth 3
	testl	%ebx, %ebx
	jne	.LBB95_106
# %bb.52:                               #   in Loop: Header=BB95_51 Depth=2
	movl	20(%rsp), %eax
	testb	$1, 4(%rsp)             # 1-byte Folded Reload
	jne	.LBB95_54
# %bb.53:                               #   in Loop: Header=BB95_51 Depth=2
	testl	%eax, %eax
	je	.LBB95_104
.LBB95_54:                              #   in Loop: Header=BB95_51 Depth=2
	testb	$1, %cl
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	je	.LBB95_57
# %bb.55:                               #   in Loop: Header=BB95_51 Depth=2
	testl	%eax, %eax
	je	.LBB95_104
# %bb.56:                               #   in Loop: Header=BB95_51 Depth=2
	testb	$1, 72(%rsp)            # 1-byte Folded Reload
	je	.LBB95_81
.LBB95_57:                              #   in Loop: Header=BB95_51 Depth=2
	movq	%r15, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$1000, %ecx             # imm = 0x3E8
	xorl	%r8d, %r8d
	callq	curl_multi_poll
	testl	%eax, %eax
	jne	.LBB95_86
# %bb.58:                               #   in Loop: Header=BB95_51 Depth=2
	movq	%r15, %rdi
	leaq	20(%rsp), %rsi
	callq	curl_multi_perform
	movl	%eax, %ebx
	movq	%r12, %rdi
	leaq	56(%rsp), %rsi
	xorl	%edx, %edx
	callq	progress_meter
	testl	%ebx, %ebx
	jne	.LBB95_87
# %bb.59:                               #   in Loop: Header=BB95_51 Depth=2
	movq	%r15, %rdi
	movq	%rbp, %rsi
	callq	curl_multi_info_read
	testq	%rax, %rax
	je	.LBB95_78
.LBB95_60:                              #   Parent Loop BB95_50 Depth=1
                                        #     Parent Loop BB95_51 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	8(%rax), %r14
	movl	16(%rax), %ebx
	movq	%r14, %rdi
	movl	$1048597, %esi          # imm = 0x100015
	leaq	8(%rsp), %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	curl_multi_remove_handle
	movq	8(%rsp), %rax
	cmpl	$42, %ebx
	jne	.LBB95_63
# %bb.61:                               #   in Loop: Header=BB95_60 Depth=3
	cmpb	$0, 648(%rax)
	je	.LBB95_63
# %bb.62:                               #   in Loop: Header=BB95_60 Depth=3
	addq	$377, %rax              # imm = 0x179
	movl	$256, %esi              # imm = 0x100
	movl	$.L.str.4.1151, %edx
	movq	%rax, %rdi
	xorl	%eax, %eax
	callq	curl_msnprintf
	movq	8(%rsp), %rax
.LBB95_63:                              #   in Loop: Header=BB95_60 Depth=3
	movq	%r12, %rdi
	movq	%rax, %rsi
	movl	%ebx, %edx
	leaq	7(%rsp), %rcx
	leaq	40(%rsp), %r8
	callq	post_per_transfer
	movl	%eax, %ebx
	movq	8(%rsp), %rdi
	callq	progress_finalize
	decq	all_added(%rip)
	cmpb	$0, 7(%rsp)
	je	.LBB95_66
# %bb.64:                               #   in Loop: Header=BB95_60 Depth=3
	movq	8(%rsp), %rax
	movb	$0, 633(%rax)
	movq	40(%rsp), %rbx
	testq	%rbx, %rbx
	je	.LBB95_72
# %bb.65:                               #   in Loop: Header=BB95_60 Depth=3
	xorl	%edi, %edi
	callq	time
	movq	%rax, %rcx
	movq	%rbx, %rax
	movabsq	$2361183241434822607, %rdx # imm = 0x20C49BA5E353F7CF
	imulq	%rdx
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$7, %rdx
	addq	%rax, %rdx
	addq	%rcx, %rdx
	movq	8(%rsp), %rax
	jmp	.LBB95_73
.LBB95_66:                              #   in Loop: Header=BB95_60 Depth=3
	testl	%ebx, %ebx
	je	.LBB95_68
# %bb.67:                               #   in Loop: Header=BB95_60 Depth=3
	movq	8(%rsp), %rax
	cmpb	$0, 648(%rax)
	movl	%ebx, %eax
	cmovnel	%r13d, %eax
	testl	%r13d, %r13d
	cmovel	%ebx, %eax
	movl	%eax, %r13d
.LBB95_68:                              #   in Loop: Header=BB95_60 Depth=3
	cmpl	$48, %r13d
	ja	.LBB95_76
# %bb.69:                               #   in Loop: Header=BB95_60 Depth=3
	movl	%r13d, %eax
	movabsq	$292470227206148, %rcx  # imm = 0x10A0008000004
	btq	%rax, %rcx
	jae	.LBB95_75
.LBB95_70:                              #   in Loop: Header=BB95_60 Depth=3
	movb	$1, %al
	movq	%rax, 24(%rsp)          # 8-byte Spill
.LBB95_71:                              #   in Loop: Header=BB95_60 Depth=3
	movq	8(%rsp), %rdi
	callq	del_per_transfer
	jmp	.LBB95_74
.LBB95_72:                              #   in Loop: Header=BB95_60 Depth=3
	xorl	%edx, %edx
.LBB95_73:                              #   in Loop: Header=BB95_60 Depth=3
	movq	%rdx, 640(%rax)
.LBB95_74:                              #   in Loop: Header=BB95_60 Depth=3
	movq	%r15, %rdi
	movq	%rbp, %rsi
	callq	curl_multi_info_read
	testq	%rax, %rax
	jne	.LBB95_60
	jmp	.LBB95_77
.LBB95_75:                              #   in Loop: Header=BB95_60 Depth=3
	testq	%rax, %rax
	je	.LBB95_71
.LBB95_76:                              #   in Loop: Header=BB95_60 Depth=3
	cmpb	$0, 64(%r12)
	jne	.LBB95_70
	jmp	.LBB95_71
.LBB95_77:                              #   in Loop: Header=BB95_51 Depth=2
	movb	$1, %al
	jmp	.LBB95_79
.LBB95_78:                              #   in Loop: Header=BB95_51 Depth=2
	xorl	%eax, %eax
.LBB95_79:                              #   in Loop: Header=BB95_51 Depth=2
	movq	24(%rsp), %rcx          # 8-byte Reload
	testb	$1, %cl
	je	.LBB95_88
# %bb.80:                               #   in Loop: Header=BB95_51 Depth=2
	xorl	%ebx, %ebx
	cmpl	$0, 20(%rsp)
	jne	.LBB95_51
	jmp	.LBB95_104
.LBB95_81:                              #   in Loop: Header=BB95_51 Depth=2
	movq	transfers(%rip), %rax
	movb	$1, %cl
	movq	%rcx, 72(%rsp)          # 8-byte Spill
.LBB95_82:                              #   Parent Loop BB95_50 Depth=1
                                        #     Parent Loop BB95_51 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testq	%rax, %rax
	je	.LBB95_57
# %bb.83:                               #   in Loop: Header=BB95_82 Depth=3
	cmpb	$0, 633(%rax)
	je	.LBB95_85
# %bb.84:                               #   in Loop: Header=BB95_82 Depth=3
	movb	$1, 648(%rax)
.LBB95_85:                              #   in Loop: Header=BB95_82 Depth=3
	movq	(%rax), %rax
	jmp	.LBB95_82
.LBB95_86:                              #   in Loop: Header=BB95_51 Depth=2
	movl	%eax, %ebx
	movq	%r12, %rdi
	leaq	56(%rsp), %rsi
	xorl	%edx, %edx
	callq	progress_meter
.LBB95_87:                              #   in Loop: Header=BB95_51 Depth=2
	movq	24(%rsp), %rcx          # 8-byte Reload
	jmp	.LBB95_51
.LBB95_88:                              #   in Loop: Header=BB95_50 Depth=1
	testb	%al, %al
	je	.LBB95_90
# %bb.89:                               #   in Loop: Header=BB95_50 Depth=1
	movq	48(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB95_91
.LBB95_90:                              #   in Loop: Header=BB95_50 Depth=1
	xorl	%edi, %edi
	callq	time
	movq	%rax, %rbx
	cmpq	%rax, 48(%rsp)          # 8-byte Folded Reload
	je	.LBB95_94
.LBB95_91:                              #   in Loop: Header=BB95_50 Depth=1
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	32(%rsp), %rdx          # 8-byte Reload
	leaq	3(%rsp), %rcx
	leaq	2(%rsp), %r8
	callq	add_parallel_transfers
	testl	%eax, %eax
	cmovnel	%eax, %r13d
	cmpb	$0, 2(%rsp)
	je	.LBB95_93
# %bb.92:                               #   in Loop: Header=BB95_50 Depth=1
	movl	$1, 20(%rsp)
.LBB95_93:                              #   in Loop: Header=BB95_50 Depth=1
	movq	%rbx, 48(%rsp)          # 8-byte Spill
.LBB95_94:                              #   in Loop: Header=BB95_50 Depth=1
	cmpl	$48, %r13d
	ja	.LBB95_99
# %bb.95:                               #   in Loop: Header=BB95_50 Depth=1
	movl	%r13d, %eax
	movabsq	$292470227206148, %rcx  # imm = 0x10A0008000004
	btq	%rax, %rcx
	jae	.LBB95_97
.LBB95_96:                              #   in Loop: Header=BB95_50 Depth=1
	movb	$1, %cl
	jmp	.LBB95_50
.LBB95_97:                              #   in Loop: Header=BB95_50 Depth=1
	testq	%rax, %rax
	jne	.LBB95_99
# %bb.98:                               #   in Loop: Header=BB95_50 Depth=1
	movq	24(%rsp), %rcx          # 8-byte Reload
	jmp	.LBB95_50
.LBB95_99:                              #   in Loop: Header=BB95_50 Depth=1
	cmpb	$0, 64(%r12)
	movq	24(%rsp), %rcx          # 8-byte Reload
	jne	.LBB95_96
	jmp	.LBB95_50
.LBB95_100:
	movl	%eax, %ebp
.LBB95_101:
	testl	%r13d, %r13d
	movq	32(%rsp), %r15          # 8-byte Reload
	jne	.LBB95_103
# %bb.102:
	movl	%ebp, %r13d
	testl	%ebp, %ebp
	je	.LBB95_105
.LBB95_103:
	movq	104(%r12), %rdi
	callq	single_transfer_cleanup
	jmp	.LBB95_109
.LBB95_104:
	leaq	56(%rsp), %rsi
	movq	%r12, %rdi
	movl	$1, %edx
	callq	progress_meter
	jmp	.LBB95_107
.LBB95_105:
	xorl	%r13d, %r13d
	jmp	.LBB95_109
.LBB95_106:
	leaq	56(%rsp), %rsi
	movq	%r12, %rdi
	movl	$1, %edx
	callq	progress_meter
	xorl	%r13d, %r13d
	cmpl	$3, %ebx
	setne	%r13b
	shll	$4, %r13d
	addl	$27, %r13d
.LBB95_107:
	movq	%r15, %rdi
	callq	curl_multi_cleanup
.LBB95_108:
	movq	32(%rsp), %r15          # 8-byte Reload
.LBB95_109:
	movq	transfers(%rip), %rbx
	testq	%rbx, %rbx
	je	.LBB95_112
# %bb.110:
	leaq	40(%rsp), %r14
	leaq	56(%rsp), %rbp
.LBB95_111:                             # =>This Inner Loop Header: Depth=1
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movl	%r13d, %edx
	movq	%r14, %rcx
	movq	%rbp, %r8
	callq	post_per_transfer
	testl	%r13d, %r13d
	cmovel	%eax, %r13d
	movq	16(%rbx), %rdi
	callq	clean_getout
	movq	%rbx, %rdi
	callq	del_per_transfer
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	.LBB95_111
.LBB95_112:
	movb	6(%rsp), %al            # 1-byte Reload
	movb	%al, 5(%r12)
	movb	5(%rsp), %al            # 1-byte Reload
	movb	%al, 6(%r12)
	movq	%r15, %rdi
	callq	curl_share_cleanup
	cmpq	$0, 56(%r12)
	je	.LBB95_20
# %bb.113:
	callq	easysrc_cleanup
	movq	%r12, %rdi
	callq	dumpeasysrc
	jmp	.LBB95_20
.Lfunc_end95:
	.size	operate, .Lfunc_end95-operate
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI95_0:
	.quad	.LBB95_10
	.quad	.LBB95_19
	.quad	.LBB95_19
	.quad	.LBB95_19
	.quad	.LBB95_19
	.quad	.LBB95_13
	.quad	.LBB95_14
	.quad	.LBB95_16
	.quad	.LBB95_17
	.quad	.LBB95_19
	.quad	.LBB95_19
	.quad	.LBB95_19
	.quad	.LBB95_19
	.quad	.LBB95_20
                                        # -- End function
	.text
	.globl	get_args                # -- Begin function get_args
	.type	get_args,@function
get_args:                               # @get_args
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	1248(%rdi), %r15
	cmpq	$0, 312(%rdi)
	je	.LBB96_3
# %bb.1:
	cmpq	$0, 1152(%rbx)
	je	.LBB96_2
.LBB96_3:
	cmpq	$0, 376(%rbx)
	je	.LBB96_5
# %bb.4:
	leaq	376(%rbx), %rcx
	xorl	%edx, %edx
	testq	%r15, %r15
	sete	%dl
	movl	$.L.str.37.1487, %edi
	movq	%r14, %rsi
	callq	checkpasswd
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB96_8
.LBB96_5:
	xorl	%ebp, %ebp
	cmpq	$0, 24(%rbx)
	jne	.LBB96_8
# %bb.6:
	movl	$.L.str.47.1488, %edi
	callq	strdup
	movq	%rax, 24(%rbx)
	testq	%rax, %rax
	jne	.LBB96_8
# %bb.7:
	movq	1232(%rbx), %rdi
	movl	$.L.str.38.1489, %esi
	xorl	%eax, %eax
	callq	errorf
	movl	$27, %ebp
	jmp	.LBB96_8
.LBB96_2:
	leaq	312(%rbx), %rcx
	xorl	%edx, %edx
	testq	%r15, %r15
	sete	%dl
	movl	$.L.str.36.1486, %edi
	movq	%r14, %rsi
	callq	checkpasswd
	movl	%eax, %ebp
	testl	%eax, %eax
	je	.LBB96_3
.LBB96_8:
	movl	%ebp, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end96:
	.size	get_args, .Lfunc_end96-get_args
	.cfi_endproc
                                        # -- End function
	.type	add_parallel_transfers,@function # -- Begin function add_parallel_transfers
add_parallel_transfers:                 # @add_parallel_transfers
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r8, %r13
	movq	%rcx, %rbx
	movq	%rdx, %rbp
	movq	%rsi, %r15
	movq	%rdi, %r14
	xorl	%eax, %eax
	movb	%al, (%r8)
	movb	%al, (%rcx)
	movq	%rdx, %rsi
	movq	%r8, %rdx
	callq	create_transfer
	testl	%eax, %eax
	jne	.LBB97_4
# %bb.1:
	movq	transfers(%rip), %r12
	xorl	%eax, %eax
	testq	%r12, %r12
	je	.LBB97_2
# %bb.5:
	movq	%r15, 16(%rsp)          # 8-byte Spill
	movq	%rbp, 8(%rsp)           # 8-byte Spill
	xorl	%ebp, %ebp
	xorl	%ecx, %ecx
.LBB97_6:                               # =>This Inner Loop Header: Depth=1
	movl	%ecx, %r15d
	movq	all_added(%rip), %rax
	cmpq	72(%r14), %rax
	jge	.LBB97_7
# %bb.8:                                #   in Loop: Header=BB97_6 Depth=1
	movb	%bpl, 7(%rsp)
	cmpb	%bpl, 633(%r12)
	jne	.LBB97_9
# %bb.12:                               #   in Loop: Header=BB97_6 Depth=1
	cmpq	$0, 640(%r12)
	je	.LBB97_14
# %bb.13:                               #   in Loop: Header=BB97_6 Depth=1
	xorl	%edi, %edi
	callq	time
	movb	$1, %cl
	cmpq	640(%r12), %rax
	jl	.LBB97_10
.LBB97_14:                              #   in Loop: Header=BB97_6 Depth=1
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	pre_transfer
	testl	%eax, %eax
	jne	.LBB97_4
# %bb.15:                               #   in Loop: Header=BB97_6 Depth=1
	movq	24(%r12), %rdi
	movzbl	80(%r14), %edx
	xorq	$1, %rdx
	movl	$237, %esi
	xorl	%eax, %eax
	callq	curl_easy_setopt
	movq	24(%r12), %rdi
	movl	$10103, %esi            # imm = 0x2777
	movq	%r12, %rdx
	xorl	%eax, %eax
	callq	curl_easy_setopt
	movq	24(%r12), %rdi
	movl	$xferinfo_cb, %edx
	movl	$20219, %esi            # imm = 0x4EFB
	xorl	%eax, %eax
	callq	curl_easy_setopt
	movq	24(%r12), %rdi
	movl	$10057, %esi            # imm = 0x2749
	movq	%r12, %rdx
	xorl	%eax, %eax
	callq	curl_easy_setopt
	movq	24(%r12), %rdi
	movl	$43, %esi
	xorl	%edx, %edx
	xorl	%eax, %eax
	callq	curl_easy_setopt
	movq	24(%r12), %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	curl_multi_add_handle
	testl	%eax, %eax
	jne	.LBB97_16
# %bb.17:                               #   in Loop: Header=BB97_6 Depth=1
	movq	%r14, %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	leaq	7(%rsp), %rdx
	callq	create_transfer
	testl	%eax, %eax
	jne	.LBB97_4
# %bb.18:                               #   in Loop: Header=BB97_6 Depth=1
	movb	$1, %al
	movb	%al, 633(%r12)
	incq	all_added(%rip)
	movb	%al, (%r13)
.LBB97_9:                               #   in Loop: Header=BB97_6 Depth=1
	movl	%r15d, %ecx
.LBB97_10:                              #   in Loop: Header=BB97_6 Depth=1
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.LBB97_6
# %bb.11:
	xorl	%edx, %edx
	xorl	%eax, %eax
	jmp	.LBB97_3
.LBB97_2:
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	jmp	.LBB97_3
.LBB97_7:
	movl	%r15d, %ecx
	xorl	%eax, %eax
	movb	$1, %dl
.LBB97_3:
	andb	$1, %cl
	orb	%dl, %cl
	movb	%cl, (%rbx)
.LBB97_4:
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB97_16:
	.cfi_def_cfa_offset 80
	movl	$27, %eax
	jmp	.LBB97_4
.Lfunc_end97:
	.size	add_parallel_transfers, .Lfunc_end97-add_parallel_transfers
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function progress_meter
.LCPI98_0:
	.quad	4652007308841189376     # double 1000
	.text
	.globl	progress_meter
	.type	progress_meter,@function
progress_meter:                         # @progress_meter
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$136, %rsp
	.cfi_def_cfa_offset 192
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	cmpb	$0, 5(%rdi)
	jne	.LBB98_1
# %bb.2:
	movl	%edx, %r14d
	movq	%rsi, %rbx
	movq	%rdi, %rbp
	callq	tvnow
	movq	%rax, %r12
	movq	%rdx, %r15
	movq	progress_meter.stamp.0(%rip), %rdx
	movq	progress_meter.stamp.1(%rip), %rcx
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	tvdiff
	movq	%rax, %r13
	cmpb	$0, progress_meter.header(%rip)
	jne	.LBB98_4
# %bb.3:
	movb	$1, progress_meter.header(%rip)
	movq	8(%rbp), %rsi
	movl	$.L.str.1516, %edi
	callq	fputs
.LBB98_4:
	cmpq	$500, %r13              # imm = 0x1F4
	jg	.LBB98_6
# %bb.5:
	testb	%r14b, %r14b
	jne	.LBB98_6
.LBB98_1:
	xorl	%eax, %eax
.LBB98_34:
                                        # kill: def $al killed $al killed $eax
	addq	$136, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB98_6:
	.cfi_def_cfa_offset 192
	movq	(%rbx), %rdx
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	8(%rbx), %rcx
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	tvdiff
	movabsq	$2361183241434822607, %rcx # imm = 0x20C49BA5E353F7CF
	imulq	%rcx
	movq	%rdx, %rsi
	movl	$11565, %eax            # imm = 0x2D2D
	movl	%eax, 40(%rsp)
	movl	%eax, 36(%rsp)
	movq	%r12, progress_meter.stamp.0(%rip)
	movq	%r15, progress_meter.stamp.1(%rip)
	movq	all_dlalready(%rip), %rbx
	movq	all_ulalready(%rip), %r13
	movq	transfers(%rip), %rax
	testq	%rax, %rax
	movl	%r14d, 44(%rsp)         # 4-byte Spill
	movq	%rbp, 88(%rsp)          # 8-byte Spill
	movq	%r15, 8(%rsp)           # 8-byte Spill
	movq	%r12, 24(%rsp)          # 8-byte Spill
	je	.LBB98_7
# %bb.8:                                # %.preheader
	movb	$1, %r14b
	xorl	%r12d, %r12d
	xorl	%r15d, %r15d
	movb	$1, %bpl
.LBB98_9:                               # =>This Inner Loop Header: Depth=1
	addq	664(%rax), %rbx
	addq	680(%rax), %r13
	movq	656(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB98_10
# %bb.11:                               #   in Loop: Header=BB98_9 Depth=1
	cmpb	$0, 688(%rax)
	jne	.LBB98_13
# %bb.12:                               #   in Loop: Header=BB98_9 Depth=1
	addq	%rcx, all_dltotal(%rip)
	movb	$1, 688(%rax)
	jmp	.LBB98_13
.LBB98_10:                              #   in Loop: Header=BB98_9 Depth=1
	xorl	%ebp, %ebp
.LBB98_13:                              #   in Loop: Header=BB98_9 Depth=1
	movq	672(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB98_14
# %bb.15:                               #   in Loop: Header=BB98_9 Depth=1
	cmpb	$0, 689(%rax)
	jne	.LBB98_17
# %bb.16:                               #   in Loop: Header=BB98_9 Depth=1
	addq	%rcx, all_ultotal(%rip)
	movb	$1, 689(%rax)
	jmp	.LBB98_17
.LBB98_14:                              #   in Loop: Header=BB98_9 Depth=1
	xorl	%r14d, %r14d
.LBB98_17:                              #   in Loop: Header=BB98_9 Depth=1
	movzbl	633(%rax), %ecx
	addq	%rcx, %r15
	xorq	$1, %rcx
	addq	%rcx, %r12
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB98_9
	jmp	.LBB98_18
.LBB98_7:
	movb	$1, %bpl
	xorl	%r15d, %r15d
	movb	$1, %r14b
	xorl	%r12d, %r12d
.LBB98_18:
	testb	$1, %bpl
	je	.LBB98_21
# %bb.19:
	movq	all_dltotal(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB98_21
# %bb.20:
	imulq	$100, %rbx, %rax
	cqto
	idivq	%rcx
	leaq	40(%rsp), %rdi
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movl	$4, %esi
	movl	$.L.str.1.1517, %edx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	curl_msnprintf
	movq	16(%rsp), %rsi          # 8-byte Reload
.LBB98_21:
	testb	$1, %r14b
	je	.LBB98_24
# %bb.22:
	movq	all_ultotal(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB98_24
# %bb.23:
	imulq	$100, %r13, %rax
	cqto
	idivq	%rcx
	leaq	36(%rsp), %rdi
	movq	%rsi, %r14
	movl	$4, %esi
	movl	$.L.str.1.1517, %edx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	curl_msnprintf
	movq	%r14, %rsi
.LBB98_24:
	movq	%rsi, %r14
	shrq	$63, %r14
	sarq	$7, %rsi
	movl	speedindex(%rip), %ecx
	leal	1(%rcx), %eax
	shlq	$5, %rcx
	movq	%rbx, speedstore(%rcx)
	movq	%r13, speedstore+8(%rcx)
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, speedstore+16(%rcx)
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%rdx, speedstore+24(%rcx)
	movl	%eax, speedindex(%rip)
	cmpl	$10, %eax
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	jb	.LBB98_26
# %bb.25:
	movb	$1, indexwrapped(%rip)
	movl	$0, speedindex(%rip)
	xorl	%eax, %eax
	jmp	.LBB98_27
.LBB98_26:
	cmpb	$1, indexwrapped(%rip)
	jne	.LBB98_28
.LBB98_27:
	movl	%eax, %eax
	shlq	$5, %rax
	movq	speedstore+16(%rax), %rdx
	movq	speedstore+24(%rax), %rcx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	tvdiff
	movl	speedindex(%rip), %esi
	shlq	$5, %rsi
	movq	%rbx, %rdx
	subq	speedstore(%rsi), %rdx
	movq	%r13, %rcx
	subq	speedstore+8(%rsi), %rcx
	jmp	.LBB98_29
.LBB98_28:
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rdx
	movq	8(%rax), %rcx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	tvdiff
	movq	%rbx, %rdx
	movq	%r13, %rcx
.LBB98_29:
	movq	16(%rsp), %rsi          # 8-byte Reload
	cvtsi2sd	%rdx, %xmm0
	cvtsi2sd	%rax, %xmm1
	divsd	.LCPI98_0(%rip), %xmm1
	divsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %rax
	xorps	%xmm0, %xmm0
	cvtsi2sd	%rcx, %xmm0
	addq	%r14, %rsi
	divsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %r14
	cmpq	%r14, %rax
	cmovgeq	%rax, %r14
	testb	$1, %bpl
	je	.LBB98_32
# %bb.30:
	testq	%r14, %r14
	je	.LBB98_32
# %bb.31:
	movq	all_dltotal(%rip), %rcx
	movq	%rcx, %rax
	cqto
	idivq	%r14
	movq	%rax, 8(%rsp)           # 8-byte Spill
	subq	%rbx, %rcx
	movq	%rcx, %rax
	cqto
	idivq	%r14
	leaq	64(%rsp), %rdi
	movq	%rsi, %rbp
	movq	%rax, %rsi
	callq	time2str
	leaq	48(%rsp), %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	time2str
	movq	%rbp, %rsi
	jmp	.LBB98_33
.LBB98_32:
	movabsq	$3255322071365463341, %rax # imm = 0x2D2D3A2D2D3A2D2D
	movq	%rax, 64(%rsp)
	xorl	%ecx, %ecx
	movb	%cl, 72(%rsp)
	movq	%rax, 48(%rsp)
	movb	%cl, 56(%rsp)
.LBB98_33:
	leaq	102(%rsp), %rdi
	callq	time2str
	movq	88(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	leaq	112(%rsp), %rsi
	movq	%rbx, %rdi
	callq	max5data
	movq	%rax, 16(%rsp)          # 8-byte Spill
	leaq	118(%rsp), %rsi
	movq	%r13, %rdi
	callq	max5data
	movq	%rax, %r13
	movq	all_xfers(%rip), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	leaq	124(%rsp), %rsi
	movq	%r14, %rdi
	callq	max5data
	movq	%rax, %rbx
	movl	$.L.str.3.1519, %eax
	movl	$.L.str.4.1520, %ebp
	cmpb	$0, 44(%rsp)            # 1-byte Folded Reload
	cmovneq	%rax, %rbp
	leaq	64(%rsp), %r10
	leaq	48(%rsp), %r11
	leaq	40(%rsp), %rdx
	leaq	36(%rsp), %rcx
	movl	$.L.str.2.1521, %esi
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %r8           # 8-byte Reload
	movq	%r13, %r9
	movl	$0, %eax
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	leaq	126(%rsp), %rbp
	pushq	%rbp
	.cfi_adjust_cfa_offset 8
	pushq	%r11
	.cfi_adjust_cfa_offset 8
	pushq	%r12
	.cfi_adjust_cfa_offset 8
	pushq	%r15
	.cfi_adjust_cfa_offset 8
	pushq	64(%rsp)                # 8-byte Folded Reload
	.cfi_adjust_cfa_offset 8
	callq	curl_mfprintf
	addq	$64, %rsp
	.cfi_adjust_cfa_offset -64
	movb	$1, %al
	jmp	.LBB98_34
.Lfunc_end98:
	.size	progress_meter, .Lfunc_end98-progress_meter
	.cfi_endproc
                                        # -- End function
	.type	post_per_transfer,@function # -- Begin function post_per_transfer
post_per_transfer:                      # @post_per_transfer
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	%edx, %r13d
	movq	24(%rsi), %r14
	testq	%r14, %r14
	je	.LBB99_111
# %bb.1:
	movq	%rsi, %rbx
	movq	16(%rsi), %r12
	testq	%r12, %r12
	je	.LBB99_111
# %bb.2:
	movq	%rdi, %r15
	xorl	%eax, %eax
	movb	%al, (%rcx)
	movq	$0, (%r8)
	cmpb	%al, 96(%rbx)
	movq	%r8, 48(%rsp)           # 8-byte Spill
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	je	.LBB99_4
# %bb.3:
	movl	100(%rbx), %edi
	callq	close
.LBB99_4:
	leaq	184(%rbx), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	testl	%r13d, %r13d
	je	.LBB99_12
# %bb.5:
	cmpl	$0, 1196(%r12)
	jne	.LBB99_12
# %bb.6:
	cmpl	$0, (%r15)
	je	.LBB99_12
# %bb.7:
	movq	8(%r15), %rbp
	cmpb	$0, 377(%rbx)
	je	.LBB99_9
# %bb.8:
	leaq	377(%rbx), %rcx
	jmp	.LBB99_10
.LBB99_12:
	cmpb	$0, 454(%r12)
	je	.LBB99_17
# %bb.13:
	leaq	8(%rsp), %rbp
	movq	$0, (%rbp)
	movq	%r14, %rdi
	movl	$2097154, %esi          # imm = 0x200002
	movq	%rbp, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	movq	(%rbp), %rcx
	cmpq	$400, %rcx              # imm = 0x190
	jl	.LBB99_17
# %bb.14:
	cmpl	$0, (%r15)
	je	.LBB99_15
# %bb.16:
	movq	8(%r15), %rdi
	movl	$22, %r13d
	movl	$.L.str.236.1384, %esi
	movl	$22, %edx
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB99_17
.LBB99_9:
	movl	%r13d, %edi
	callq	curl_easy_strerror
	movq	%rax, %rcx
.LBB99_10:
	movl	$.L.str.234.1382, %esi
	movq	%rbp, %rdi
	movl	%r13d, %edx
	xorl	%eax, %eax
	callq	curl_mfprintf
	cmpl	$60, %r13d
	jne	.LBB99_27
# %bb.11:
	movq	8(%r15), %rsi
	movl	$.L.str.235.1383, %edi
	callq	fputs
	movl	$60, %r13d
	jmp	.LBB99_27
.LBB99_15:
	movl	$22, %r13d
.LBB99_17:
	testl	%r13d, %r13d
	jne	.LBB99_27
# %bb.18:
	cmpb	$0, 1128(%r12)
	je	.LBB99_23
# %bb.19:
	cmpb	$0, 195(%rbx)
	je	.LBB99_23
# %bb.20:
	movq	200(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB99_23
# %bb.21:
	callq	fileno
	movq	%r14, %rdi
	movl	%eax, %esi
	callq	fwrite_xattr
	testl	%eax, %eax
	je	.LBB99_23
# %bb.22:
	movq	1232(%r12), %r13
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rbp
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movl	$.L.str.237.1385, %esi
	movq	%r13, %rdi
	movq	%rbp, %rdx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	warnf
.LBB99_23:
	xorl	%r13d, %r13d
	cmpq	$0, 200(%rbx)
	jne	.LBB99_27
# %bb.24:
	cmpq	$0, 208(%rbx)
	jne	.LBB99_27
# %bb.25:
	xorl	%r13d, %r13d
	leaq	8(%rsp), %rbp
	movq	%r13, (%rbp)
	movq	%r14, %rdi
	movl	$2097187, %esi          # imm = 0x200023
	movq	%rbp, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	cmpq	%r13, (%rbp)
	jne	.LBB99_27
# %bb.26:
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r12, %rsi
	callq	tool_create_output_file
	xorl	%ecx, %ecx
	testb	%al, %al
	movl	$23, %r13d
	cmovnel	%ecx, %r13d
.LBB99_27:
	cmpb	$0, 194(%rbx)
	je	.LBB99_28
.LBB99_34:
	cmpq	$0, 32(%rbx)
	je	.LBB99_81
# %bb.35:
	cmpq	$0, 1064(%r12)
	je	.LBB99_37
# %bb.36:
	callq	tvnow
	movq	56(%rbx), %rbp
	movq	64(%rbx), %rcx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	movq	%rbp, %rdx
	callq	tvdiff
	imulq	$1000, 1064(%r12), %rcx # imm = 0x3E8
	cmpq	%rcx, %rax
	jge	.LBB99_81
.LBB99_37:
	movq	$0, 8(%rsp)
	cmpl	$28, %r13d
	ja	.LBB99_39
# %bb.38:
	movl	$2, %ebp
	movl	$268439648, %eax        # imm = 0x10001060
	btl	%r13d, %eax
	jae	.LBB99_39
.LBB99_56:
	movq	$0, (%rsp)
	leaq	48(%rbx), %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	48(%rbx), %rsi
.LBB99_64:
	movq	1232(%r12), %rdi
	movl	%ebp, %eax
	movq	post_per_transfer.m(,%rax,8), %rbp
	movabsq	$2361183241434822607, %rcx # imm = 0x20C49BA5E353F7CF
	movq	%rsi, %r14
	movq	%rsi, %rax
	imulq	%rcx
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$7, %rdx
	leaq	(%rdx,%rax), %rcx
	movq	32(%rbx), %r8
	movl	$.L.str.245.1387, %esi
	movq	%rbp, %rdx
	xorl	%eax, %eax
	callq	warnf
	decq	32(%rbx)
	cmpq	$0, 1056(%r12)
	jne	.LBB99_66
# %bb.65:
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	(%rdx), %rax
	cmpq	$300000, %rax           # imm = 0x493E0
	leaq	(%rax,%rax), %rax
	movl	$600000, %ecx           # imm = 0x927C0
	cmovgq	%rcx, %rax
	movq	%rax, (%rdx)
.LBB99_66:
	movq	208(%rbx), %rdx
	testq	%rdx, %rdx
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
	je	.LBB99_79
# %bb.67:
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	$0, (%rax)
	je	.LBB99_79
# %bb.68:
	movq	200(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB99_79
# %bb.69:
	cmpb	$0, 4(%r15)
	jne	.LBB99_71
# %bb.70:
	movq	8(%r15), %rdi
	movl	$.L.str.246.1388, %esi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	200(%rbx), %rdi
.LBB99_71:
	callq	fflush
	movq	200(%rbx), %rdi
	callq	fileno
	movq	216(%rbx), %rsi
	movl	%eax, %edi
	callq	ftruncate
	testl	%eax, %eax
	je	.LBB99_75
# %bb.72:
	movl	$23, %r13d
	cmpl	$0, (%r15)
	je	.LBB99_111
# %bb.73:
	movq	8(%r15), %rdi
	movl	$.L.str.247.1389, %esi
	jmp	.LBB99_74
.LBB99_28:
	movq	200(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB99_34
# %bb.29:
	callq	fflush
	testl	%r13d, %r13d
	jne	.LBB99_34
# %bb.30:
	testl	%eax, %eax
	je	.LBB99_34
# %bb.31:
	cmpl	$0, (%r15)
	je	.LBB99_32
# %bb.33:
	movq	8(%r15), %rdi
	movl	$23, %r13d
	movl	$.L.str.238.1386, %esi
	movl	$23, %edx
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB99_34
.LBB99_39:
	cmpl	$7, %r13d
	jne	.LBB99_42
# %bb.40:
	cmpb	$0, 1049(%r12)
	je	.LBB99_42
# %bb.41:
	movq	%rsp, %rbp
	movq	$0, (%rbp)
	movq	%r14, %rdi
	movl	$2097177, %esi          # imm = 0x200019
	movq	%rbp, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	xorl	%eax, %eax
	cmpq	$111, (%rbp)
	sete	%al
	leal	(%rax,%rax,2), %ebp
	jmp	.LBB99_53
.LBB99_32:
	movl	$23, %r13d
	jmp	.LBB99_34
.LBB99_42:
	testl	%r13d, %r13d
	je	.LBB99_45
# %bb.43:
	cmpl	$22, %r13d
	jne	.LBB99_50
# %bb.44:
	cmpb	$0, 453(%r12)
	je	.LBB99_50
.LBB99_45:
	movq	%rsp, %rdx
	movq	$0, (%rdx)
	xorl	%ebp, %ebp
	movq	%r14, %rdi
	movl	$2097200, %esi          # imm = 0x200030
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	movq	%rsp, %rax
	movq	(%rax), %rax
	decq	%rax
	cmpq	$1, %rax
	ja	.LBB99_53
# %bb.46:
	xorl	%ebp, %ebp
	leaq	8(%rsp), %rdx
	movq	%r14, %rdi
	movl	$2097154, %esi          # imm = 0x200002
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	leaq	8(%rsp), %rax
	movq	(%rax), %rax
	leaq	-500(%rax), %rcx
	cmpq	$4, %rcx
	ja	.LBB99_47
# %bb.112:
	cmpq	$1, %rcx
	jne	.LBB99_49
.LBB99_47:
	cmpq	$429, %rax              # imm = 0x1AD
	je	.LBB99_49
# %bb.48:
	cmpq	$408, %rax              # imm = 0x198
	jne	.LBB99_53
.LBB99_49:
	movl	$4, %ebp
	jmp	.LBB99_53
.LBB99_75:
	movq	200(%rbx), %rdi
	xorl	%esi, %esi
	movl	$2, %edx
	callq	fseek
	testl	%eax, %eax
	je	.LBB99_78
# %bb.76:
	movl	$23, %r13d
	cmpl	$0, (%r15)
	je	.LBB99_111
# %bb.77:
	movq	8(%r15), %rdi
	movl	$.L.str.248.1390, %esi
.LBB99_74:
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB99_111
.LBB99_78:
	movq	$0, 208(%rbx)
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
.LBB99_79:
	movb	$1, (%rsi)
	movq	%r14, (%rcx)
	xorl	%r13d, %r13d
	jmp	.LBB99_111
.LBB99_50:
	movq	%rsp, %rax
	movq	$0, (%rax)
	xorl	%ebp, %ebp
	leaq	8(%rsp), %rdx
	movq	%r14, %rdi
	movl	$2097154, %esi          # imm = 0x200002
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	movq	%r14, %rdi
	movl	$2097200, %esi          # imm = 0x200030
	movq	%rsp, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	movq	%rsp, %rax
	movq	(%rax), %rax
	cmpq	$8, %rax
	je	.LBB99_52
# %bb.51:
	cmpq	$4, %rax
	jne	.LBB99_53
.LBB99_52:
	movq	$-400, %rax             # imm = 0xFE70
	addq	8(%rsp), %rax
	xorl	%ecx, %ecx
	cmpq	$100, %rax
	setb	%cl
	leal	(%rcx,%rcx,4), %ebp
.LBB99_53:
	testl	%r13d, %r13d
	je	.LBB99_57
# %bb.54:
	testl	%ebp, %ebp
	jne	.LBB99_57
# %bb.55:
	movl	$1, %ebp
	cmpb	$0, 1048(%r12)
	jne	.LBB99_56
	jmp	.LBB99_81
.LBB99_57:
	testl	%ebp, %ebp
	je	.LBB99_81
# %bb.58:
	movq	$0, (%rsp)
	leaq	48(%rbx), %rax
	movq	48(%rbx), %rsi
	cmpl	$4, %ebp
	movq	%rax, 32(%rsp)          # 8-byte Spill
	jne	.LBB99_64
# %bb.59:
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movq	%rsp, %rbp
	movq	%r14, %rdi
	movl	$6291513, %esi          # imm = 0x600039
	movq	%rbp, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	movq	(%rbp), %rax
	movl	$4, %ebp
	testq	%rax, %rax
	je	.LBB99_60
# %bb.61:
	movabsq	$9223372036854775807, %rdx # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$1000, %rax, %rsi       # imm = 0x3E8
	movabsq	$9223372036854775, %rcx # imm = 0x20C49BA5E353F7
	cmpq	%rcx, %rax
	cmovgq	%rdx, %rsi
	cmpq	$0, 1064(%r12)
	je	.LBB99_64
# %bb.62:
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	callq	tvnow
	movq	56(%rbx), %r8
	movq	64(%rbx), %rcx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	movq	%r8, %rdx
	callq	tvdiff
	movq	24(%rsp), %rsi          # 8-byte Reload
	movabsq	$2361183241434822607, %rcx # imm = 0x20C49BA5E353F7CF
	imulq	%rcx
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$7, %rdx
	addq	%rax, %rdx
	movq	(%rsp), %rax
	movabsq	$9223372036854775807, %rcx # imm = 0x7FFFFFFFFFFFFFFF
	subq	%rax, %rcx
	cmpq	%rdx, %rcx
	jl	.LBB99_80
# %bb.63:
	addq	%rax, %rdx
	cmpq	1064(%r12), %rdx
	jle	.LBB99_64
.LBB99_80:
	movq	1232(%r12), %rdi
	movl	$.L.str.244.1391, %esi
	xorl	%eax, %eax
	callq	warnf
.LBB99_81:
	cmpl	$1, 52(%r15)
	jne	.LBB99_84
# %bb.82:
	cmpl	$0, 112(%rbx)
	je	.LBB99_84
# %bb.83:
	movq	152(%rbx), %rsi
	movl	$.L.str.249.1392, %edi
	callq	fputs
.LBB99_84:
	cmpb	$0, 195(%rbx)
	je	.LBB99_91
# %bb.85:
	movq	200(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB99_91
# %bb.86:
	callq	fclose
	testl	%r13d, %r13d
	jne	.LBB99_91
# %bb.87:
	testl	%eax, %eax
	je	.LBB99_91
# %bb.88:
	cmpl	$0, (%r15)
	je	.LBB99_89
# %bb.90:
	movq	8(%r15), %rdi
	movl	$23, %r13d
	movl	$.L.str.238.1386, %esi
	movl	$23, %edx
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB99_96
.LBB99_91:
	testl	%r13d, %r13d
	je	.LBB99_92
.LBB99_96:
	movq	808(%r12), %rdi
	testq	%rdi, %rdi
	je	.LBB99_98
# %bb.97:
	movq	%rbx, %rsi
	movl	%r13d, %edx
	callq	ourWriteOut
.LBB99_98:
	cmpb	$0, 235(%rbx)
	je	.LBB99_101
# %bb.99:
	movq	240(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB99_101
# %bb.100:
	callq	fclose
.LBB99_101:
	cmpb	$0, 232(%rbx)
	je	.LBB99_103
# %bb.102:
	movq	224(%rbx), %rdi
	callq	myFree
	movq	$0, 224(%rbx)
.LBB99_103:
	cmpb	$0, 275(%rbx)
	je	.LBB99_106
# %bb.104:
	movq	280(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB99_106
# %bb.105:
	callq	fclose
.LBB99_106:
	cmpb	$0, 272(%rbx)
	je	.LBB99_108
# %bb.107:
	movq	264(%rbx), %rdi
	callq	myFree
	movq	$0, 264(%rbx)
.LBB99_108:
	movq	24(%rbx), %rdi
	callq	curl_easy_cleanup
	cmpb	$0, 192(%rbx)
	je	.LBB99_110
# %bb.109:
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rdi
	callq	myFree
.LBB99_110:
	movq	72(%rbx), %rdi
	callq	myFree
	movq	696(%rbx), %rdi
	callq	myFree
	movq	704(%rbx), %rdi
	callq	myFree
	movq	88(%rbx), %rdi
	callq	myFree
	movq	712(%rbx), %rdi
	callq	myFree
.LBB99_111:
	movl	%r13d, %eax
	addq	$56, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB99_92:
	.cfi_def_cfa_offset 112
	xorl	%r13d, %r13d
	cmpb	$0, (%r12)
	je	.LBB99_96
# %bb.93:
	cmpb	$0, 194(%rbx)
	je	.LBB99_96
# %bb.94:
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	$0, (%rax)
	je	.LBB99_96
# %bb.95:
	leaq	8(%rsp), %rbp
	movq	$-1, (%rbp)
	xorl	%r13d, %r13d
	movq	%r14, %rdi
	movl	$6291470, %esi          # imm = 0x60000E
	movq	%rbp, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	movq	(%rbp), %rdi
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rsi
	movq	%r15, %rdx
	callq	setfiletime
	jmp	.LBB99_96
.LBB99_89:
	movl	$23, %r13d
	jmp	.LBB99_96
.LBB99_60:
	movq	24(%rsp), %rsi          # 8-byte Reload
	jmp	.LBB99_64
.Lfunc_end99:
	.size	post_per_transfer, .Lfunc_end99-post_per_transfer
	.cfi_endproc
                                        # -- End function
	.globl	progress_finalize       # -- Begin function progress_finalize
	.type	progress_finalize,@function
progress_finalize:                      # @progress_finalize
	.cfi_startproc
# %bb.0:
	movq	664(%rdi), %rax
	addq	%rax, all_dlalready(%rip)
	movq	680(%rdi), %rax
	addq	%rax, all_ulalready(%rip)
	cmpb	$0, 688(%rdi)
	jne	.LBB100_2
# %bb.1:
	movq	656(%rdi), %rax
	addq	%rax, all_dltotal(%rip)
	movb	$1, 688(%rdi)
.LBB100_2:
	cmpb	$0, 689(%rdi)
	je	.LBB100_3
# %bb.4:
	retq
.LBB100_3:
	movq	672(%rdi), %rax
	addq	%rax, all_ultotal(%rip)
	movb	$1, 689(%rdi)
	retq
.Lfunc_end100:
	.size	progress_finalize, .Lfunc_end100-progress_finalize
	.cfi_endproc
                                        # -- End function
	.type	del_per_transfer,@function # -- Begin function del_per_transfer
del_per_transfer:                       # @del_per_transfer
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	(%rdi), %rbx
	movq	8(%rdi), %rax
	testq	%rax, %rax
	movl	$transfers, %ecx
	cmovneq	%rax, %rcx
	movq	%rbx, (%rcx)
	movl	$8, %ecx
	addq	%rbx, %rcx
	testq	%rbx, %rbx
	movl	$transfersl, %edx
	cmovneq	%rcx, %rdx
	movq	%rax, (%rdx)
	callq	myFree
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end101:
	.size	del_per_transfer, .Lfunc_end101-del_per_transfer
	.cfi_endproc
                                        # -- End function
	.type	create_transfer,@function # -- Begin function create_transfer
create_transfer:                        # @create_transfer
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movb	$0, (%rdx)
	movq	104(%rdi), %rbx
	testq	%rbx, %rbx
	je	.LBB102_1
# %bb.2:
	movq	%rdx, %r13
	movq	%rsi, %r15
	movq	%rdi, %r14
.LBB102_3:                              # =>This Inner Loop Header: Depth=1
	movb	$0, (%r13)
	movq	472(%rbx), %rax
	testq	%rax, %rax
	je	.LBB102_5
# %bb.4:                                #   in Loop: Header=BB102_3 Depth=1
	cmpq	$0, 8(%rax)
	je	.LBB102_5
# %bb.6:                                #   in Loop: Header=BB102_3 Depth=1
	cmpq	$0, 584(%rbx)
	jne	.LBB102_7
# %bb.8:                                #   in Loop: Header=BB102_3 Depth=1
	cmpq	$0, 600(%rbx)
	je	.LBB102_9
.LBB102_7:                              #   in Loop: Header=BB102_3 Depth=1
	xorl	%r12d, %r12d
.LBB102_21:                             #   in Loop: Header=BB102_3 Depth=1
	movzbl	%r12b, %ecx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movq	%r13, %r8
	callq	single_transfer
	testl	%eax, %eax
	jne	.LBB102_31
# %bb.22:                               #   in Loop: Header=BB102_3 Depth=1
	xorl	%eax, %eax
	cmpb	$0, (%r13)
	jne	.LBB102_31
# %bb.23:                               #   in Loop: Header=BB102_3 Depth=1
	movq	104(%r14), %rcx
	movq	1248(%rcx), %rbx
	movq	%rbx, 104(%r14)
	testq	%rbx, %rbx
	jne	.LBB102_3
	jmp	.LBB102_31
.LBB102_9:                              #   in Loop: Header=BB102_3 Depth=1
	cmpb	$0, 789(%rbx)
	je	.LBB102_12
# %bb.10:                               #   in Loop: Header=BB102_3 Depth=1
	cmpq	$0, 512(%rbx)
	je	.LBB102_7
# %bb.11:                               #   in Loop: Header=BB102_3 Depth=1
	cmpb	$0, 790(%rbx)
	jne	.LBB102_7
.LBB102_12:                             #   in Loop: Header=BB102_3 Depth=1
	callq	curl_easy_init
	movq	%rax, %rbp
	movq	$0, 16(%rsp)
	movq	%rax, %rdi
	movl	$4194349, %esi          # imm = 0x40002D
	leaq	16(%rsp), %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	testl	%eax, %eax
	jne	.LBB102_31
# %bb.13:                               #   in Loop: Header=BB102_3 Depth=1
	movq	16(%rsp), %rax
	cmpl	$8, (%rax)
	jne	.LBB102_15
# %bb.14:                               #   in Loop: Header=BB102_3 Depth=1
	xorl	%r12d, %r12d
	jmp	.LBB102_20
.LBB102_15:                             #   in Loop: Header=BB102_3 Depth=1
	movq	%rbp, 8(%rsp)           # 8-byte Spill
	movl	$.L.str.6.1157, %edi
	callq	curl_getenv
	testq	%rax, %rax
	je	.LBB102_24
.LBB102_16:                             #   in Loop: Header=BB102_3 Depth=1
	movq	%rax, %rbp
	movq	%rax, %rdi
	callq	strdup
	movq	%rax, 584(%rbx)
	testq	%rax, %rax
	je	.LBB102_29
# %bb.17:                               #   in Loop: Header=BB102_3 Depth=1
	movq	%rbp, (%rsp)            # 8-byte Spill
	xorl	%r12d, %r12d
	jmp	.LBB102_18
.LBB102_24:                             #   in Loop: Header=BB102_3 Depth=1
	movl	$.L.str.7.1158, %edi
	callq	curl_getenv
	testq	%rax, %rax
	je	.LBB102_27
# %bb.25:                               #   in Loop: Header=BB102_3 Depth=1
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	%rax, %rdi
	callq	strdup
	movq	%rax, 600(%rbx)
	movb	$1, %r12b
	testq	%rax, %rax
	je	.LBB102_26
.LBB102_18:                             #   in Loop: Header=BB102_3 Depth=1
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	curl_free
.LBB102_19:                             #   in Loop: Header=BB102_3 Depth=1
	movq	8(%rsp), %rbp           # 8-byte Reload
.LBB102_20:                             #   in Loop: Header=BB102_3 Depth=1
	movq	%rbp, %rdi
	callq	curl_easy_cleanup
	jmp	.LBB102_21
.LBB102_27:                             #   in Loop: Header=BB102_3 Depth=1
	movl	$.L.str.8.1159, %edi
	callq	curl_getenv
	testq	%rax, %rax
	jne	.LBB102_16
# %bb.28:                               #   in Loop: Header=BB102_3 Depth=1
	xorl	%r12d, %r12d
	jmp	.LBB102_19
.LBB102_1:
	xorl	%eax, %eax
	jmp	.LBB102_31
.LBB102_5:
	movq	8(%r14), %rdi
	movl	$.L.str.5.1156, %esi
	xorl	%eax, %eax
	callq	helpf
	movl	$2, %eax
.LBB102_31:
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB102_29:
	.cfi_def_cfa_offset 80
	movq	%rbp, %rdi
	callq	curl_free
	movl	$.L.str.3.1152, %esi
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	errorf
	jmp	.LBB102_30
.LBB102_26:
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	curl_free
	movq	8(%r14), %rdi
	movl	$.L.str.3.1152, %esi
	xorl	%eax, %eax
	callq	helpf
.LBB102_30:
	movl	$27, %eax
	jmp	.LBB102_31
.Lfunc_end102:
	.size	create_transfer, .Lfunc_end102-create_transfer
	.cfi_endproc
                                        # -- End function
	.type	pre_transfer,@function  # -- Begin function pre_transfer
pre_transfer:                           # @pre_transfer
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$160, %rsp
	.cfi_def_cfa_offset 208
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	696(%rsi), %rdx
	testq	%rdx, %rdx
	je	.LBB103_2
# %bb.1:
	movq	8(%r14), %rdi
	movl	$.L.str.232.1153, %esi
	xorl	%eax, %eax
	callq	curl_mfprintf
.LBB103_2:
	movq	704(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB103_4
# %bb.3:
	movl	$.L.str.232.1153, %edi
	xorl	%eax, %eax
	callq	curl_mprintf
.LBB103_4:
	movq	712(%rbx), %rdi
	xorl	%ebp, %ebp
	testq	%rdi, %rdi
	je	.LBB103_15
# %bb.5:
	callq	stdin_upload
	testb	%al, %al
	jne	.LBB103_15
# %bb.6:
	movq	712(%rbx), %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	callq	open
	movl	%eax, 100(%rbx)
	cmpl	$-1, %eax
	je	.LBB103_8
# %bb.7:
	leaq	16(%rsp), %rsi
	movl	%eax, %edi
	callq	fstat
	testl	%eax, %eax
	je	.LBB103_10
.LBB103_8:
	movq	8(%r14), %rdi
	movq	712(%rbx), %rdx
	movl	$.L.str.21.1154, %esi
	xorl	%eax, %eax
	callq	helpf
	movl	100(%rbx), %edi
	movl	$26, %ebp
	cmpl	$-1, %edi
	je	.LBB103_15
# %bb.9:
	callq	close
	movl	$0, 100(%rbx)
	jmp	.LBB103_15
.LBB103_10:
	movb	$1, 96(%rbx)
	movq	64(%rsp), %r12
	xorl	%ebp, %ebp
	cmpq	$-1, %r12
	je	.LBB103_14
# %bb.11:
	movl	$61440, %eax            # imm = 0xF000
	andl	40(%rsp), %eax
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB103_14
# %bb.12:
	movq	16(%rbx), %r15
	movl	$30115, %edi            # imm = 0x75A3
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB103_14
# %bb.13:
	movq	24(%rbx), %rdi
	movq	%r12, (%rsp)
	movl	$.L.str.233.1155, %r8d
	movl	$0, %esi
	movq	%r14, %rdx
	movq	%r15, %rcx
	movl	$30115, %r9d            # imm = 0x75A3
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebp
.LBB103_14:
	movl	100(%rbx), %eax
	movl	%eax, 304(%rbx)
.LBB103_15:
	movl	%ebp, %eax
	addq	$160, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end103:
	.size	pre_transfer, .Lfunc_end103-pre_transfer
	.cfi_endproc
                                        # -- End function
	.globl	tool_go_sleep           # -- Begin function tool_go_sleep
	.type	tool_go_sleep,@function
tool_go_sleep:                          # @tool_go_sleep
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
                                        # kill: def $edx killed $edx killed $rdx
	jmp	poll                    # TAILCALL
.Lfunc_end104:
	.size	tool_go_sleep, .Lfunc_end104-tool_go_sleep
	.cfi_endproc
                                        # -- End function
	.type	single_transfer_cleanup,@function # -- Begin function single_transfer_cleanup
single_transfer_cleanup:                # @single_transfer_cleanup
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	testq	%rdi, %rdi
	je	.LBB105_5
# %bb.1:
	movq	%rdi, %rbx
	movq	1272(%rdi), %rdi
	testq	%rdi, %rdi
	je	.LBB105_3
# %bb.2:
	callq	glob_cleanup
	movq	$0, 1272(%rbx)
.LBB105_3:
	movq	1280(%rbx), %rdi
	callq	myFree
	xorl	%r14d, %r14d
	movq	%r14, 1280(%rbx)
	movq	1288(%rbx), %rdi
	callq	myFree
	movq	%r14, 1288(%rbx)
	movq	1296(%rbx), %rdi
	callq	myFree
	movq	%r14, 1296(%rbx)
	movq	1264(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB105_5
# %bb.4:
	callq	glob_cleanup
	movq	$0, 1264(%rbx)
.LBB105_5:
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end105:
	.size	single_transfer_cleanup, .Lfunc_end105-single_transfer_cleanup
	.cfi_endproc
                                        # -- End function
	.globl	clean_getout            # -- Begin function clean_getout
	.type	clean_getout,@function
clean_getout:                           # @clean_getout
	.cfi_startproc
# %bb.0:
	testq	%rdi, %rdi
	je	.LBB106_5
# %bb.1:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movq	472(%rdi), %rbx
	testq	%rbx, %rbx
	je	.LBB106_4
# %bb.2:                                # %.preheader
	xorl	%r15d, %r15d
.LBB106_3:                              # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %r12
	movq	8(%rbx), %rdi
	callq	myFree
	movq	%r15, 8(%rbx)
	movq	16(%rbx), %rdi
	callq	myFree
	movq	%r15, 16(%rbx)
	movq	24(%rbx), %rdi
	callq	myFree
	movq	%rbx, %rdi
	callq	myFree
	movq	%r12, %rbx
	testq	%r12, %r12
	jne	.LBB106_3
.LBB106_4:
	movq	$0, 472(%r14)
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
.LBB106_5:
	retq
.Lfunc_end106:
	.size	clean_getout, .Lfunc_end106-clean_getout
	.cfi_endproc
                                        # -- End function
	.globl	glob_cleanup            # -- Begin function glob_cleanup
	.type	glob_cleanup,@function
glob_cleanup:                           # @glob_cleanup
	.cfi_startproc
# %bb.0:
	testq	%rdi, %rdi
	je	.LBB107_11
# %bb.1:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movq	4800(%rdi), %rax
	testq	%rax, %rax
	je	.LBB107_10
# %bb.2:                                # %.preheader
	xorl	%r15d, %r15d
.LBB107_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_7 Depth 2
	leaq	(%r15,%r15,2), %rcx
	shlq	$4, %rcx
	cmpl	$1, (%r14,%rcx)
	jne	.LBB107_9
# %bb.4:                                #   in Loop: Header=BB107_3 Depth=1
	movq	8(%r14,%rcx), %rdi
	testq	%rdi, %rdi
	je	.LBB107_9
# %bb.5:                                #   in Loop: Header=BB107_3 Depth=1
	leaq	(%r14,%rcx), %r12
	addq	$8, %r12
	movl	8(%r12), %ebx
	testl	%ebx, %ebx
	jle	.LBB107_8
# %bb.6:                                #   in Loop: Header=BB107_3 Depth=1
	incq	%rbx
.LBB107_7:                              #   Parent Loop BB107_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rdi,%rbx,8), %rdi
	callq	myFree
	movq	(%r12), %rax
	movq	$0, -16(%rax,%rbx,8)
	movq	(%r12), %rdi
	decq	%rbx
	cmpq	$1, %rbx
	jg	.LBB107_7
.LBB107_8:                              #   in Loop: Header=BB107_3 Depth=1
	callq	myFree
	movq	$0, (%r12)
	movq	4800(%r14), %rax
.LBB107_9:                              #   in Loop: Header=BB107_3 Depth=1
	incq	%r15
	cmpq	%rax, %r15
	jb	.LBB107_3
.LBB107_10:
	movq	4816(%r14), %rdi
	callq	myFree
	movq	%r14, %rdi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	myFree                  # TAILCALL
.LBB107_11:
	retq
.Lfunc_end107:
	.size	glob_cleanup, .Lfunc_end107-glob_cleanup
	.cfi_endproc
                                        # -- End function
	.globl	stdin_upload            # -- Begin function stdin_upload
	.type	stdin_upload,@function
stdin_upload:                           # @stdin_upload
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movl	$.L.str.2.1406, %esi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB108_1
# %bb.2:
	movl	$.L.str.3.1407, %esi
	movq	%rbx, %rdi
	callq	strcmp
	testl	%eax, %eax
	sete	%al
	jmp	.LBB108_3
.LBB108_1:
	movb	$1, %al
.LBB108_3:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end108:
	.size	stdin_upload, .Lfunc_end108-stdin_upload
	.cfi_endproc
                                        # -- End function
	.globl	tool_setopt_skip        # -- Begin function tool_setopt_skip
	.type	tool_setopt_skip,@function
tool_setopt_skip:                       # @tool_setopt_skip
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	retq
.Lfunc_end109:
	.size	tool_setopt_skip, .Lfunc_end109-tool_setopt_skip
	.cfi_endproc
                                        # -- End function
	.globl	tool_setopt             # -- Begin function tool_setopt
	.type	tool_setopt,@function
tool_setopt:                            # @tool_setopt
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$504, %rsp              # imm = 0x1F8
	.cfi_def_cfa_offset 560
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	%r9d, %r13d
	movq	%r8, %r15
	movq	%rdx, %rbp
	testb	%al, %al
	je	.LBB110_2
# %bb.1:
	movaps	%xmm0, 112(%rsp)
	movaps	%xmm1, 128(%rsp)
	movaps	%xmm2, 144(%rsp)
	movaps	%xmm3, 160(%rsp)
	movaps	%xmm4, 176(%rsp)
	movaps	%xmm5, 192(%rsp)
	movaps	%xmm6, 208(%rsp)
	movaps	%xmm7, 224(%rsp)
.LBB110_2:
	movabsq	$206158430256, %rax     # imm = 0x3000000030
	movq	%rax, 16(%rsp)
	leaq	560(%rsp), %rax
	movq	%rax, 24(%rsp)
	leaq	64(%rsp), %rax
	movq	%rax, 32(%rsp)
	cmpl	$9999, %r13d            # imm = 0x270F
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movl	%r13d, 12(%rsp)         # 4-byte Spill
	movq	%rbp, 56(%rsp)          # 8-byte Spill
	ja	.LBB110_12
# %bb.3:
	movl	16(%rsp), %edx
	cmpq	$40, %rdx
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	ja	.LBB110_5
# %bb.4:
	movq	%rdx, %rax
	addq	32(%rsp), %rax
	leal	8(%rdx), %ecx
	movl	%ecx, 16(%rsp)
	jmp	.LBB110_6
.LBB110_12:
	cmpl	$29999, %r13d           # imm = 0x752F
	ja	.LBB110_22
# %bb.13:
	movl	16(%rsp), %edx
	cmpq	$40, %rdx
	ja	.LBB110_15
# %bb.14:
	movq	%rdx, %rax
	addq	32(%rsp), %rax
	addl	$8, %edx
	movl	%edx, 16(%rsp)
	jmp	.LBB110_16
.LBB110_5:
	movq	24(%rsp), %rax
	movl	$8, %ecx
	addq	%rax, %rcx
	movq	%rcx, 24(%rsp)
.LBB110_6:
	movq	(%rax), %rbx
	movl	$.L.str.117.1682, %esi
	movl	$setopt_nv_CURLNONZERODEFAULTS+16, %ebp
	xorl	%r12d, %r12d
.LBB110_7:                              # =>This Inner Loop Header: Depth=1
	movq	%r15, %rdi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB110_8
# %bb.9:                                #   in Loop: Header=BB110_7 Depth=1
	movq	(%rbp), %rsi
	addq	$16, %rbp
	testq	%rsi, %rsi
	jne	.LBB110_7
	jmp	.LBB110_10
.LBB110_8:
	movq	-8(%rbp), %r12
.LBB110_10:
	leaq	240(%rsp), %r14
	movl	$0, 8(%rsp)             # 4-byte Folded Spill
	movl	$256, %esi              # imm = 0x100
	movl	$.L.str.87.1683, %edx
	movq	%r14, %rdi
	movq	%rbx, %rcx
	xorl	%eax, %eax
	callq	curl_msnprintf
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	%r13d, %esi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	callq	curl_easy_setopt
	movl	%eax, %ebp
	cmpq	%r12, %rbx
.LBB110_11:
	sete	%r13b
	xorl	%r12d, %r12d
	jmp	.LBB110_33
.LBB110_22:
	movl	16(%rsp), %eax
	cmpl	$39999, %r13d           # imm = 0x9C3F
	ja	.LBB110_27
# %bb.23:
	movq	%rdi, %r12
	cmpl	$40, %eax
	ja	.LBB110_25
# %bb.24:
	movq	%rax, %rcx
	addq	32(%rsp), %rcx
	addl	$8, %eax
	movl	%eax, 16(%rsp)
	jmp	.LBB110_26
.LBB110_15:
	movq	24(%rsp), %rax
	movl	$8, %edx
	addq	%rax, %rdx
	movq	%rdx, 24(%rsp)
.LBB110_16:
	movq	(%rax), %rdx
	testq	%rdx, %rdx
	setne	%r12b
	cmpl	$20000, %r13d           # imm = 0x4E20
	jb	.LBB110_18
# %bb.17:
	testq	%rdx, %rdx
	sete	%r13b
	movl	$.L.str.88.1684, %r14d
	jmp	.LBB110_31
.LBB110_27:
	cmpl	$40, %eax
	ja	.LBB110_29
# %bb.28:
	movq	%rax, %rcx
	addq	32(%rsp), %rcx
	addl	$8, %eax
	movl	%eax, 16(%rsp)
	jmp	.LBB110_30
.LBB110_18:
	testq	%rdx, %rdx
	je	.LBB110_21
# %bb.19:
	testb	%sil, %sil
	je	.LBB110_21
# %bb.20:
	xorl	%r13d, %r13d
	movb	$1, %al
	movl	%eax, 8(%rsp)           # 4-byte Spill
	xorl	%r12d, %r12d
	movq	%rdx, %r14
	jmp	.LBB110_32
.LBB110_25:
	movq	24(%rsp), %rcx
	movl	$8, %eax
	addq	%rcx, %rax
	movq	%rax, 24(%rsp)
.LBB110_26:
	leaq	240(%rsp), %r14
	movq	(%rcx), %rbx
	movl	$0, 8(%rsp)             # 4-byte Folded Spill
	movl	$256, %esi              # imm = 0x100
	movl	$.L.str.90.1686, %edx
	movq	%r14, %rdi
	movq	%rbx, %rcx
	xorl	%eax, %eax
	callq	curl_msnprintf
	movq	%r12, %rdi
	movl	%r13d, %esi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	callq	curl_easy_setopt
	movl	%eax, %ebp
	testq	%rbx, %rbx
	jmp	.LBB110_11
.LBB110_29:
	movq	24(%rsp), %rcx
	movl	$8, %eax
	addq	%rcx, %rax
	movq	%rax, 24(%rsp)
.LBB110_30:
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	sete	%r13b
	setne	%r12b
	movl	$.L.str.91.1687, %r14d
	jmp	.LBB110_31
.LBB110_21:
	testq	%rdx, %rdx
	sete	%r13b
	movl	$.L.str.89.1685, %r14d
.LBB110_31:
	cmoveq	%rdx, %r14
	movl	$0, 8(%rsp)             # 4-byte Folded Spill
.LBB110_32:
	movl	12(%rsp), %esi          # 4-byte Reload
	xorl	%eax, %eax
	callq	curl_easy_setopt
	movl	%eax, %ebp
.LBB110_33:
	xorl	%ebx, %ebx
	testb	%r13b, %r13b
	jne	.LBB110_47
# %bb.34:
	testl	%ebp, %ebp
	jne	.LBB110_47
# %bb.35:
	movq	56(%rsp), %rax          # 8-byte Reload
	cmpq	$0, 56(%rax)
	je	.LBB110_47
# %bb.36:
	testb	%r12b, %r12b
	je	.LBB110_38
# %bb.37:
	xorl	%ebx, %ebx
	movl	$easysrc_toohard, %edi
	movl	$.L.str.92.1688, %esi
	jmp	.LBB110_45
.LBB110_38:
	cmpb	$0, 8(%rsp)             # 1-byte Folded Reload
	je	.LBB110_44
# %bb.39:
	movq	$-1, %rsi
	cmpl	$10015, 12(%rsp)        # 4-byte Folded Reload
                                        # imm = 0x271F
	jne	.LBB110_41
# %bb.40:
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	152(%rax), %rsi
.LBB110_41:
	movq	%r14, %rdi
	callq	c_escape
	testq	%rax, %rax
	je	.LBB110_42
# %bb.43:
	movq	%rax, %rbx
	movl	$easysrc_code, %edi
	movl	$.L.str.93.1689, %esi
	movq	%r15, %rdx
	movq	%rax, %rcx
	jmp	.LBB110_46
.LBB110_44:
	xorl	%ebx, %ebx
	movl	$easysrc_code, %edi
	movl	$.L.str.94.1690, %esi
.LBB110_45:
	movq	%r15, %rdx
	movq	%r14, %rcx
.LBB110_46:
	xorl	%eax, %eax
	callq	easysrc_addf
	movl	%eax, %ebp
.LBB110_47:
	movq	%rbx, %rdi
	callq	myFree
	movl	%ebp, %eax
	addq	$504, %rsp              # imm = 0x1F8
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB110_42:
	.cfi_def_cfa_offset 560
	movl	$27, %ebp
	xorl	%ebx, %ebx
	jmp	.LBB110_47
.Lfunc_end110:
	.size	tool_setopt, .Lfunc_end110-tool_setopt
	.cfi_endproc
                                        # -- End function
	.type	c_escape,@function      # -- Begin function c_escape
c_escape:                               # @c_escape
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	%rdi, %r13
	cmpq	$-1, %rsi
	jne	.LBB111_2
# %bb.1:
	movq	%r13, %rdi
	callq	strlen
	movq	%rax, %rbx
.LBB111_2:
	movl	$2000, %r12d            # imm = 0x7D0
	xorl	%eax, %eax
	cmpq	%r12, %rbx
	setg	%al
	cmovleq	%rbx, %r12
	leal	(%rax,%rax,2), %ebp
	leaq	1(,%r12,4), %rdi
	addq	%rbp, %rdi
	callq	myMalloc
	testq	%rax, %rax
	je	.LBB111_24
# %bb.3:
	movq	%rbp, 8(%rsp)           # 8-byte Spill
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	%rax, %rbx
	testq	%r12, %r12
	je	.LBB111_21
# %bb.4:                                # %.preheader
	xorl	%r15d, %r15d
	movq	(%rsp), %rbx            # 8-byte Reload
.LBB111_5:                              # =>This Inner Loop Header: Depth=1
	movb	(%r13,%r15), %r14b
	cmpb	$12, %r14b
	jle	.LBB111_10
# %bb.6:                                #   in Loop: Header=BB111_5 Depth=1
	cmpb	$13, %r14b
	je	.LBB111_14
# %bb.7:                                #   in Loop: Header=BB111_5 Depth=1
	cmpb	$34, %r14b
	je	.LBB111_15
# %bb.8:                                #   in Loop: Header=BB111_5 Depth=1
	cmpb	$92, %r14b
	jne	.LBB111_17
# %bb.9:                                #   in Loop: Header=BB111_5 Depth=1
	movb	$0, 2(%rbx)
	movw	$23644, (%rbx)          # imm = 0x5C5C
	jmp	.LBB111_13
.LBB111_10:                             #   in Loop: Header=BB111_5 Depth=1
	cmpb	$9, %r14b
	je	.LBB111_16
# %bb.11:                               #   in Loop: Header=BB111_5 Depth=1
	cmpb	$10, %r14b
	jne	.LBB111_17
# %bb.12:                               #   in Loop: Header=BB111_5 Depth=1
	movb	$0, 2(%rbx)
	movw	$28252, (%rbx)          # imm = 0x6E5C
	jmp	.LBB111_13
.LBB111_14:                             #   in Loop: Header=BB111_5 Depth=1
	movb	$0, 2(%rbx)
	movw	$29276, (%rbx)          # imm = 0x725C
	jmp	.LBB111_13
.LBB111_15:                             #   in Loop: Header=BB111_5 Depth=1
	movb	$0, 2(%rbx)
	movw	$8796, (%rbx)           # imm = 0x225C
	jmp	.LBB111_13
.LBB111_16:                             #   in Loop: Header=BB111_5 Depth=1
	movb	$0, 2(%rbx)
	movw	$29788, (%rbx)          # imm = 0x745C
.LBB111_13:                             #   in Loop: Header=BB111_5 Depth=1
	addq	$2, %rbx
.LBB111_20:                             #   in Loop: Header=BB111_5 Depth=1
	incq	%r15
	cmpq	%r15, %r12
	jne	.LBB111_5
	jmp	.LBB111_21
.LBB111_17:                             #   in Loop: Header=BB111_5 Depth=1
	movzbl	%r14b, %ebp
	callq	__ctype_b_loc
	movq	(%rax), %rax
	testb	$64, 1(%rax,%rbp,2)
	jne	.LBB111_19
# %bb.18:                               #   in Loop: Header=BB111_5 Depth=1
	movl	$5, %esi
	movl	$.L.str.130.1676, %edx
	movq	%rbx, %rdi
	movl	%ebp, %ecx
	xorl	%eax, %eax
	callq	curl_msnprintf
	addq	$4, %rbx
	jmp	.LBB111_20
.LBB111_19:                             #   in Loop: Header=BB111_5 Depth=1
	movb	%r14b, (%rbx)
	incq	%rbx
	jmp	.LBB111_20
.LBB111_21:
	cmpq	$2001, 16(%rsp)         # 8-byte Folded Reload
                                        # imm = 0x7D1
	jl	.LBB111_23
# %bb.22:
	movq	8(%rsp), %rdx           # 8-byte Reload
	decl	%edx
	incq	%rdx
	movq	%rbx, %rdi
	movl	$46, %esi
	callq	memset
	addq	$3, %rbx
.LBB111_23:
	movq	(%rsp), %rax            # 8-byte Reload
	movb	$0, (%rbx)
.LBB111_24:
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end111:
	.size	c_escape, .Lfunc_end111-c_escape
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function single_transfer
.LCPI112_0:
	.quad	4652007308841189376     # double 1000
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI112_1:
	.quad	16                      # 0x10
	.quad	32                      # 0x20
.LCPI112_2:
	.quad	2                       # 0x2
	.quad	8                       # 0x8
	.text
	.type	single_transfer,@function
single_transfer:                        # @single_transfer
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$280, %rsp              # imm = 0x118
	.cfi_def_cfa_offset 336
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%r8, %rbp
	movl	%ecx, %r15d
	movq	%rdx, %r12
	movq	%rsi, %r14
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movb	5(%rdi), %al
	movb	%al, 47(%rsp)           # 1-byte Spill
	movb	6(%rdi), %al
	movb	%al, 46(%rsp)           # 1-byte Spill
	movq	1288(%rsi), %rax
	movb	$0, (%r8)
	movq	144(%rsi), %rdi
	testq	%rdi, %rdi
	movq	%rax, 56(%rsp)          # 8-byte Spill
	je	.LBB112_7
# %bb.1:
	cmpb	$0, 788(%r14)
	je	.LBB112_5
# %bb.2:
	testq	%rax, %rax
	jne	.LBB112_7
# %bb.3:
	callq	strdup
	movq	%rax, %rbx
	movq	%rax, 1288(%r14)
	movq	144(%r14), %rdi
	callq	myFree
	xorl	%eax, %eax
	movq	%rax, 144(%r14)
	testq	%rbx, %rbx
	je	.LBB112_53
# %bb.4:
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	cmpb	$1, 456(%r14)
	movl	$2, %ebx
	movl	$2, %esi
	sbbl	$0, %esi
	leaq	960(%r14), %rdx
	movq	%r14, %rdi
	callq	SetHTTPrequest
	jmp	.LBB112_6
.LBB112_5:
	leaq	960(%r14), %rdx
	movq	%r14, %rdi
	movl	$4, %esi
	callq	SetHTTPrequest
	movl	$2, %ebx
.LBB112_6:
	testl	%eax, %eax
	jne	.LBB112_54
.LBB112_7:
	movq	%rbp, 80(%rsp)          # 8-byte Spill
	cmpq	$0, 1256(%r14)
	jne	.LBB112_9
# %bb.8:
	movq	472(%r14), %rax
	movq	%rax, 1256(%r14)
	movq	$1, 1304(%r14)
.LBB112_9:
	movl	$.L.str.102.1160, %eax
	movl	$.L.str.103.1161, %ecx
	testb	%r15b, %r15b
	cmovneq	%rax, %rcx
	movq	1256(%r14), %r15
	xorl	%ebx, %ebx
	movl	$0, %edx
	testq	%r15, %r15
	je	.LBB112_74
# %bb.10:                               # %.preheader3
	movq	%r12, 128(%rsp)         # 8-byte Spill
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	leaq	1304(%r14), %rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	leaq	1296(%r14), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	leaq	1320(%r14), %rax
	movq	%rax, 88(%rsp)          # 8-byte Spill
	leaq	1272(%r14), %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	leaq	896(%r14), %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	leaq	928(%r14), %rax
	movq	%rax, 104(%rsp)         # 8-byte Spill
	xorl	%ebp, %ebp
	movq	16(%rsp), %r12          # 8-byte Reload
.LBB112_11:                             # =>This Inner Loop Header: Depth=1
	movq	1264(%r14), %rsi
	movq	%rsi, 96(%rsp)
	cmpq	$0, 8(%r15)
	movq	16(%r15), %rdi
	je	.LBB112_21
# %bb.12:                               #   in Loop: Header=BB112_11 Depth=1
	testq	%rdi, %rdi
	je	.LBB112_16
# %bb.13:                               #   in Loop: Header=BB112_11 Depth=1
	cmpq	$0, 1280(%r14)
	jne	.LBB112_16
# %bb.14:                               #   in Loop: Header=BB112_11 Depth=1
	callq	strdup
	movq	%rax, 1280(%r14)
	testq	%rax, %rax
	je	.LBB112_55
# %bb.15:                               #   in Loop: Header=BB112_11 Depth=1
	movq	96(%rsp), %rsi
.LBB112_16:                             #   in Loop: Header=BB112_11 Depth=1
	movq	24(%r15), %r13
	testq	%rsi, %rsi
	jne	.LBB112_25
# %bb.17:                               #   in Loop: Header=BB112_11 Depth=1
	testq	%r13, %r13
	je	.LBB112_25
# %bb.18:                               #   in Loop: Header=BB112_11 Depth=1
	cmpb	$0, 787(%r14)
	jne	.LBB112_25
# %bb.19:                               #   in Loop: Header=BB112_11 Depth=1
	cmpl	$0, (%r12)
	je	.LBB112_22
# %bb.20:                               #   in Loop: Header=BB112_11 Depth=1
	movq	8(%r12), %rcx
	jmp	.LBB112_23
.LBB112_21:                             #   in Loop: Header=BB112_11 Depth=1
	callq	myFree
	movq	%rbp, 16(%r15)
	movq	24(%r15), %rdi
	callq	myFree
	movq	%rbp, 24(%r15)
	movl	$0, 32(%r15)
	jmp	.LBB112_47
.LBB112_22:                             #   in Loop: Header=BB112_11 Depth=1
	xorl	%ecx, %ecx
.LBB112_23:                             #   in Loop: Header=BB112_11 Depth=1
	leaq	96(%rsp), %rdi
	movq	%r13, %rsi
	movq	64(%rsp), %rdx          # 8-byte Reload
	callq	glob_url
	testl	%eax, %eax
	jne	.LBB112_52
# %bb.24:                               #   in Loop: Header=BB112_11 Depth=1
	movq	96(%rsp), %rsi
	movq	%rsi, 1264(%r14)
.LBB112_25:                             #   in Loop: Header=BB112_11 Depth=1
	movq	1312(%r14), %rax
	testq	%r13, %r13
	jne	.LBB112_27
# %bb.26:                               #   in Loop: Header=BB112_11 Depth=1
	testq	%rax, %rax
	je	.LBB112_33
.LBB112_27:                             #   in Loop: Header=BB112_11 Depth=1
	xorl	%edx, %edx
	movq	24(%rsp), %rcx          # 8-byte Reload
	cmpq	$0, (%rcx)
	jne	.LBB112_32
# %bb.28:                               #   in Loop: Header=BB112_11 Depth=1
	testq	%rsi, %rsi
	je	.LBB112_30
# %bb.29:                               #   in Loop: Header=BB112_11 Depth=1
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	glob_next_url
	movl	%eax, %edx
	cmpl	$27, %eax
	jne	.LBB112_32
	jmp	.LBB112_55
.LBB112_30:                             #   in Loop: Header=BB112_11 Depth=1
	testq	%rax, %rax
	jne	.LBB112_32
# %bb.31:                               #   in Loop: Header=BB112_11 Depth=1
	movq	%r13, %rdi
	callq	strdup
	xorl	%edx, %edx
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	testq	%rax, %rax
	je	.LBB112_55
.LBB112_32:                             #   in Loop: Header=BB112_11 Depth=1
	testl	%edx, %edx
	jne	.LBB112_73
.LBB112_33:                             #   in Loop: Header=BB112_11 Depth=1
	movq	88(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rbx
	testq	%rbx, %rbx
	jne	.LBB112_40
# %bb.34:                               #   in Loop: Header=BB112_11 Depth=1
	movl	$1, %ebx
	cmpb	$0, 787(%r14)
	jne	.LBB112_40
# %bb.35:                               #   in Loop: Header=BB112_11 Depth=1
	movq	8(%r15), %rsi
	cmpl	$0, (%r12)
	je	.LBB112_37
# %bb.36:                               #   in Loop: Header=BB112_11 Depth=1
	movq	8(%r12), %rcx
	jmp	.LBB112_38
.LBB112_37:                             #   in Loop: Header=BB112_11 Depth=1
	xorl	%ecx, %ecx
.LBB112_38:                             #   in Loop: Header=BB112_11 Depth=1
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdx
	callq	glob_url
	testl	%eax, %eax
	jne	.LBB112_52
# %bb.39:                               #   in Loop: Header=BB112_11 Depth=1
	movq	(%rbx), %rbx
.LBB112_40:                             #   in Loop: Header=BB112_11 Depth=1
	movq	1280(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB112_43
# %bb.41:                               #   in Loop: Header=BB112_11 Depth=1
	movl	$.L.str.9.1162, %esi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB112_43
# %bb.42:                               #   in Loop: Header=BB112_11 Depth=1
	xorl	%r13d, %r13d
	jmp	.LBB112_44
.LBB112_43:                             #   in Loop: Header=BB112_11 Depth=1
	cmpq	$1, %rbx
	seta	%r13b
.LBB112_44:                             #   in Loop: Header=BB112_11 Depth=1
	movq	1312(%r14), %rax
	cmpq	1304(%r14), %rax
	jb	.LBB112_49
# %bb.45:                               #   in Loop: Header=BB112_11 Depth=1
	movq	16(%r15), %rdi
	callq	myFree
	movq	%rbp, 16(%r15)
	movq	24(%r15), %rdi
	callq	myFree
	movq	%rbp, 24(%r15)
	movl	$0, 32(%r15)
	movq	1272(%r14), %rdi
	callq	glob_cleanup
	movq	%rbp, 1272(%r14)
	movq	%rbp, 1320(%r14)
	movq	1280(%r14), %rdi
	callq	myFree
	movq	%rbp, 1280(%r14)
	movq	1296(%r14), %rdi
	callq	myFree
	movq	%rbp, 1296(%r14)
	movq	1264(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB112_47
# %bb.46:                               #   in Loop: Header=BB112_11 Depth=1
	callq	glob_cleanup
	movq	$0, 1264(%r14)
.LBB112_47:                             #   in Loop: Header=BB112_11 Depth=1
	movq	(%r15), %rax
	movq	%rax, 1256(%r14)
	movq	$0, 1312(%r14)
	movq	1256(%r14), %r15
	testq	%r15, %r15
	jne	.LBB112_11
.LBB112_48:
	xorl	%edx, %edx
	jmp	.LBB112_73
.LBB112_49:
	callq	curl_easy_init
	movq	%rax, %rbp
	movl	$720, %edi              # imm = 0x2D0
	movl	$1, %esi
	callq	calloc
	testq	%rax, %rax
	je	.LBB112_71
# %bb.50:
	movq	%rax, %r12
	cmpq	$0, transfers(%rip)
	je	.LBB112_57
# %bb.51:
	movq	transfersl(%rip), %rax
	movq	%r12, (%rax)
	movq	%rax, 8(%r12)
	jmp	.LBB112_58
.LBB112_52:
	movl	%eax, %edx
	jmp	.LBB112_73
.LBB112_53:
	movl	$.L.str.3.1152, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	xorl	%eax, %eax
	callq	errorf
	movl	$27, %ebx
.LBB112_54:
	movq	%r14, %rdi
	jmp	.LBB112_78
.LBB112_55:
	movl	$.L.str.3.1152, %esi
	movq	%r12, %rdi
.LBB112_56:
	xorl	%eax, %eax
	callq	errorf
	jmp	.LBB112_72
.LBB112_57:
	movq	%r12, transfers(%rip)
.LBB112_58:
	movq	%r12, transfersl(%rip)
	incq	all_xfers(%rip)
	testq	%rbp, %rbp
	je	.LBB112_71
# %bb.59:
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rdi
	testq	%rdi, %rdi
	je	.LBB112_61
# %bb.60:
	callq	strdup
	movq	%rax, 712(%r12)
	testq	%rax, %rax
	je	.LBB112_71
.LBB112_61:
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movq	80(%rsp), %rax          # 8-byte Reload
	movb	$1, (%rax)
	movq	%r14, 16(%r12)
	movq	%rbp, 24(%rsp)          # 8-byte Spill
	movq	%rbp, 24(%r12)
	movl	36(%r15), %eax
	movl	%eax, 80(%r12)
	movq	stdout(%rip), %rbx
	movq	%rbx, 240(%r12)
	movq	208(%r14), %rbp
	testq	%rbp, %rbp
	je	.LBB112_65
# %bb.62:
	movl	$.L.str.9.1162, %esi
	movq	%rbp, %rdi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB112_65
# %bb.63:
	cmpq	$0, 8(%r12)
	movl	$.L.str.10.1163, %eax
	movl	$.L.str.11.1164, %esi
	cmoveq	%rax, %rsi
	movq	%rbp, %rdi
	callq	fopen
	testq	%rax, %rax
	je	.LBB112_97
# %bb.64:
	movq	208(%r14), %rcx
	movq	%rcx, 224(%r12)
	movw	$257, 234(%r12)         # imm = 0x101
	movq	%rax, 240(%r12)
	movq	stdout(%rip), %rbx
.LBB112_65:
	movq	$0, 88(%r12)
	movb	$0, 96(%r12)
	movl	$0, 100(%r12)
	movq	%rbx, 200(%r12)
	movq	728(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB112_85
# %bb.66:
	movq	$0, 136(%rsp)
	movl	$.L.str.13.1166, %esi
	callq	fopen
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	.LBB112_68
# %bb.67:
	cmpq	$0, 720(%r14)
	je	.LBB112_101
.LBB112_68:
	leaq	136(%rsp), %rdi
	movq	%rbx, %rsi
	callq	file2string
	testl	%eax, %eax
	jne	.LBB112_80
# %bb.69:
	movq	136(%rsp), %rsi
	testq	%rsi, %rsi
	je	.LBB112_80
# %bb.70:
	movl	$.L.str.14.1167, %edi
	xorl	%eax, %eax
	callq	curl_maprintf
	movq	%rax, %rbp
	movq	136(%rsp), %rdi
	callq	myFree
	movq	$0, 136(%rsp)
	jmp	.LBB112_81
.LBB112_71:
	movq	%rbp, %rdi
	callq	curl_easy_cleanup
.LBB112_72:
	movl	$27, %edx
.LBB112_73:
	xorl	%ebx, %ebx
.LBB112_74:
	testl	%edx, %edx
	jne	.LBB112_76
# %bb.75:
	movq	80(%rsp), %rax          # 8-byte Reload
	cmpb	$0, (%rax)
	jne	.LBB112_79
	jmp	.LBB112_77
.LBB112_76:
	movq	80(%rsp), %rax          # 8-byte Reload
.LBB112_77:
	movb	$0, (%rax)
	movq	%r14, %rdi
	movl	%edx, %ebx
.LBB112_78:
	callq	single_transfer_cleanup
.LBB112_79:
	movl	%ebx, %eax
	addq	$280, %rsp              # imm = 0x118
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB112_80:
	.cfi_def_cfa_offset 336
	movl	$.L.str.15.1168, %edi
	xorl	%eax, %eax
	callq	curl_maprintf
	movq	%rax, %rbp
.LBB112_81:
	testq	%rbp, %rbp
	je	.LBB112_94
# %bb.82:
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	%rbp, %rsi
	callq	add2list
	movq	%rbp, %rdi
	callq	myFree
	testq	%rbx, %rbx
	je	.LBB112_84
# %bb.83:
	movq	%rbx, %rdi
	callq	fclose
.LBB112_84:
	movq	stdout(%rip), %rbx
.LBB112_85:
	movq	%rbx, 280(%r12)
	movq	720(%r14), %rbp
	testq	%rbp, %rbp
	movq	16(%rsp), %rbx          # 8-byte Reload
	je	.LBB112_89
# %bb.86:
	movl	$.L.str.9.1162, %esi
	movq	%rbp, %rdi
	callq	strcmp
	testl	%eax, %eax
	je	.LBB112_89
# %bb.87:
	movl	$.L.str.10.1163, %esi
	movq	%rbp, %rdi
	callq	fopen
	testq	%rax, %rax
	je	.LBB112_98
# %bb.88:
	movq	720(%r14), %rcx
	movq	%rcx, 264(%r12)
	movw	$257, 274(%r12)         # imm = 0x101
	movq	%rax, 280(%r12)
.LBB112_89:
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rsi
	testq	%rsi, %rsi
	je	.LBB112_92
# %bb.90:
	movq	%r12, %rbp
	leaq	72(%r12), %rbx
	movq	%rbx, %rdi
	callq	glob_next_url
	movl	%eax, %edx
	testl	%eax, %eax
	jne	.LBB112_73
# %bb.91:
	cmpq	$0, (%rbx)
	movq	%rbp, %r12
	jne	.LBB112_104
	jmp	.LBB112_48
.LBB112_92:
	cmpq	$0, 1328(%r14)
	je	.LBB112_102
# %bb.93:
	movq	$0, 72(%r12)
	jmp	.LBB112_48
.LBB112_94:
	testq	%rbx, %rbx
	je	.LBB112_96
# %bb.95:
	movq	%rbx, %rdi
	callq	fclose
.LBB112_96:
	movl	$.L.str.16.1169, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	jmp	.LBB112_56
.LBB112_97:
	movq	208(%r14), %rdx
	movl	$.L.str.12.1165, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	jmp	.LBB112_99
.LBB112_98:
	movq	720(%r14), %rdx
	movl	$.L.str.12.1165, %esi
	movq	%rbx, %rdi
.LBB112_99:
	xorl	%eax, %eax
	callq	warnf
.LBB112_100:
	movl	$23, %edx
	jmp	.LBB112_73
.LBB112_101:
	movq	728(%r14), %rdx
	movl	$.L.str.12.1165, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	xorl	%eax, %eax
	callq	errorf
	movl	$26, %edx
	jmp	.LBB112_73
.LBB112_102:
	movq	8(%r15), %rdi
	callq	strdup
	movq	%rax, 72(%r12)
	testq	%rax, %rax
	je	.LBB112_72
# %bb.103:
	leaq	72(%r12), %rbx
.LBB112_104:
	leaq	88(%r12), %rcx
	movq	1280(%r14), %rdi
	testq	%rdi, %rdi
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	je	.LBB112_106
# %bb.105:
	callq	strdup
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%rax, %rbp
	movq	%rax, (%rcx)
	testq	%rax, %rax
	jne	.LBB112_107
	jmp	.LBB112_72
.LBB112_106:
	movq	(%rcx), %rbp
.LBB112_107:
	testb	$4, 32(%r15)
	jne	.LBB112_110
# %bb.108:
	testq	%rbp, %rbp
	je	.LBB112_136
# %bb.109:
	movl	$.L.str.9.1162, %edi
	movq	%rbp, %rsi
	callq	strcmp
	movq	48(%rsp), %rcx          # 8-byte Reload
	testl	%eax, %eax
	jne	.LBB112_111
	jmp	.LBB112_136
.LBB112_110:
	testq	%rbp, %rbp
	je	.LBB112_115
.LBB112_111:
	movq	%rbx, 72(%rsp)          # 8-byte Spill
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rdx
	testq	%rdx, %rdx
	je	.LBB112_119
# %bb.112:
	movq	%rcx, %rdi
	movq	%rbp, %rsi
	callq	glob_match_url
	movl	%eax, %ebx
	movq	%rbp, %rdi
	callq	myFree
	movq	48(%rsp), %rcx          # 8-byte Reload
	testl	%ebx, %ebx
	je	.LBB112_119
# %bb.113:
	movl	$.L.str.19.1172, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB112_114
.LBB112_115:
	movq	(%rbx), %rsi
	movq	%rcx, %rdi
	movq	%rcx, %rbp
	callq	get_url_file_name
	testl	%eax, %eax
	je	.LBB112_117
# %bb.116:
	movl	%eax, %ecx
	movl	$.L.str.17.1170, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	xorl	%eax, %eax
	movl	%ecx, %ebx
	callq	errorf
.LBB112_114:
	movl	%ebx, %edx
	jmp	.LBB112_73
.LBB112_117:
	movq	%rbx, 72(%rsp)          # 8-byte Spill
	movq	(%rbp), %rax
	cmpb	$0, (%rax)
	movq	%rbp, %rcx
	jne	.LBB112_119
# %bb.118:
	cmpb	$0, 1120(%r14)
	je	.LBB112_237
.LBB112_119:
	movq	%r12, 32(%rsp)          # 8-byte Spill
	movq	200(%r14), %rsi
	testq	%rsi, %rsi
	movq	72(%rsp), %rbx          # 8-byte Reload
	je	.LBB112_123
# %bb.120:
	cmpb	$0, (%rsi)
	je	.LBB112_123
# %bb.121:
	movq	(%rcx), %rdx
	movl	$.L.str.20.1173, %edi
	xorl	%eax, %eax
	movq	%rcx, %rbp
	callq	curl_maprintf
	testq	%rax, %rax
	je	.LBB112_100
# %bb.122:
	movq	%rax, %r12
	movq	(%rbp), %rdi
	callq	myFree
	movq	%r12, (%rbp)
	movq	%rbp, %rcx
.LBB112_123:
	cmpb	$0, 795(%r14)
	je	.LBB112_125
# %bb.124:
	movq	(%rcx), %rdi
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rsi
	callq	create_dir_hierarchy
	movq	48(%rsp), %rcx          # 8-byte Reload
	movl	%eax, %edx
	testl	%eax, %eax
	jne	.LBB112_73
.LBB112_125:
	cmpb	$0, 89(%r14)
	je	.LBB112_128
# %bb.126:
	movq	(%rcx), %rdi
	leaq	136(%rsp), %rsi
	callq	stat
	testl	%eax, %eax
	jne	.LBB112_129
# %bb.127:
	movq	184(%rsp), %rax
	jmp	.LBB112_130
.LBB112_128:
	movq	136(%r14), %rax
	movq	32(%rsp), %r12          # 8-byte Reload
	jmp	.LBB112_131
.LBB112_129:
	xorl	%eax, %eax
.LBB112_130:
	movq	%rax, 136(%r14)
	movq	32(%rsp), %r12          # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
.LBB112_131:
	testq	%rax, %rax
	je	.LBB112_134
# %bb.132:
	movq	(%rcx), %rdi
	movl	$.L.str.11.1164, %esi
	callq	fopen
	testq	%rax, %rax
	je	.LBB112_230
# %bb.133:
	movb	$1, 195(%r12)
	movq	%rax, 200(%r12)
	movq	136(%r14), %rax
	movq	%rax, 216(%r12)
	jmp	.LBB112_135
.LBB112_134:
	movq	$0, 200(%r12)
.LBB112_135:
	movq	88(%r12), %rax
	movq	%rax, 184(%r12)
	movb	$1, 194(%r12)
.LBB112_136:
	movq	712(%r12), %rdi
	testq	%rdi, %rdi
	je	.LBB112_156
# %bb.137:
	callq	stdin_upload
	testb	%al, %al
	je	.LBB112_150
# %bb.138:
	movq	712(%r12), %rdi
	testq	%rdi, %rdi
	je	.LBB112_156
# %bb.139:
	callq	stdin_upload
	testb	%al, %al
	je	.LBB112_152
# %bb.140:
	movq	80(%r14), %rax
	xorl	%ecx, %ecx
	xorl	%edx, %edx
.LBB112_141:                            # =>This Inner Loop Header: Depth=1
	btq	%rcx, %rax
	jae	.LBB112_143
# %bb.142:                              #   in Loop: Header=BB112_141 Depth=1
	leal	1(%rdx), %esi
	testl	%edx, %edx
	movl	%esi, %edx
	jg	.LBB112_144
.LBB112_143:                            #   in Loop: Header=BB112_141 Depth=1
	incq	%rcx
	cmpq	$32, %rcx
	jne	.LBB112_141
.LBB112_144:
	cmpl	$1, %edx
	jg	.LBB112_146
# %bb.145:
	cmpb	$0, 802(%r14)
	je	.LBB112_147
.LBB112_146:
	movl	$.L.str.22.1174, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	xorl	%eax, %eax
	callq	warnf
.LBB112_147:
	movq	712(%r12), %rbp
	movl	$.L.str.23.1175, %esi
	movq	%rbp, %rdi
	callq	strcmp
	testl	%eax, %eax
	jne	.LBB112_153
# %bb.148:
	movl	100(%r12), %edi
	movl	$1, %esi
	callq	curlx_nonblock
	testl	%eax, %eax
	jns	.LBB112_152
# %bb.149:
	movl	100(%r12), %ebp
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movl	$.L.str.24.1176, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	%ebp, %edx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB112_152
.LBB112_150:
	movq	72(%r12), %rdi
	movq	712(%r12), %rsi
	callq	add_file_name_to_url
	testq	%rax, %rax
	je	.LBB112_72
# %bb.151:
	movq	%rax, (%rbx)
.LBB112_152:
	movq	712(%r12), %rbp
.LBB112_153:
	testq	%rbp, %rbp
	je	.LBB112_156
# %bb.154:
	cmpb	$0, 89(%r14)
	je	.LBB112_157
# %bb.155:
	movq	$-1, 136(%r14)
	jmp	.LBB112_157
.LBB112_156:
	xorl	%ebp, %ebp
.LBB112_157:
	movq	(%rbx), %rdi
	movq	%rbp, %rsi
	callq	output_expected
	testb	%al, %al
	je	.LBB112_161
# %bb.158:
	movq	200(%r12), %rdi
	testq	%rdi, %rdi
	je	.LBB112_161
# %bb.159:
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	testl	%eax, %eax
	je	.LBB112_161
# %bb.160:
	movq	16(%rsp), %rax          # 8-byte Reload
	movw	$257, 5(%rax)           # imm = 0x101
	movb	$1, 104(%r12)
	jmp	.LBB112_162
.LBB112_161:
	movb	47(%rsp), %al           # 1-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movb	%al, 5(%rcx)
	movb	%al, 104(%r12)
	movb	46(%rsp), %al           # 1-byte Reload
	movb	%al, 6(%rcx)
.LBB112_162:
	cmpq	$2, 64(%rsp)            # 8-byte Folded Reload
	movq	56(%rsp), %rax          # 8-byte Reload
	jb	.LBB112_166
# %bb.163:
	movq	16(%rsp), %rcx          # 8-byte Reload
	cmpb	$0, 4(%rcx)
	jne	.LBB112_166
# %bb.164:
	movq	1328(%r14), %rsi
	incq	%rsi
	movq	72(%r12), %rcx
	movq	88(%r12), %rax
	testq	%rax, %rax
	movl	$.L.str.26.1177, %r8d
	cmovneq	%rax, %r8
	movl	$.L.str.25.1178, %edi
	movq	64(%rsp), %rdx          # 8-byte Reload
	xorl	%eax, %eax
	callq	curl_maprintf
	movq	%rax, 696(%r12)
	movq	56(%rsp), %rax          # 8-byte Reload
	testb	%r13b, %r13b
	je	.LBB112_166
# %bb.165:
	movq	72(%r12), %rdx
	movl	$.L.str.27.1179, %edi
	movl	$.L.str.28.1180, %esi
	xorl	%eax, %eax
	callq	curl_maprintf
	movq	%rax, 704(%r12)
	movq	56(%rsp), %rax          # 8-byte Reload
.LBB112_166:
	testq	%rax, %rax
	je	.LBB112_172
# %bb.167:
	movq	(%rbx), %rbp
	movl	$.L.str.29.1181, %esi
	movq	%rbp, %rdi
	callq	strstr
	testq	%rax, %rax
	leaq	3(%rax), %rdi
	cmoveq	%rbp, %rdi
	movl	$47, %esi
	callq	strrchr
	testq	%rax, %rax
	je	.LBB112_169
# %bb.168:
	movl	$63, %r13d
	movq	%rax, %rdi
	movl	$63, %esi
	callq	strchr
	testq	%rax, %rax
	movl	$38, %edx
	cmovel	%r13d, %edx
	movl	$.L.str.30.1182, %edi
	movq	%rbp, %rsi
	movq	56(%rsp), %rcx          # 8-byte Reload
	xorl	%eax, %eax
	callq	curl_maprintf
	jmp	.LBB112_170
.LBB112_169:
	movl	$.L.str.31.1183, %edi
	movq	%rbp, %rsi
	movq	56(%rsp), %rdx          # 8-byte Reload
	xorl	%eax, %eax
	callq	curl_maprintf
.LBB112_170:
	movq	%rax, %rbp
	testq	%rax, %rax
	je	.LBB112_72
# %bb.171:
	movq	(%rbx), %rdi
	callq	myFree
	movq	%rbp, (%rbx)
.LBB112_172:
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	$0, 8(%rax)
	jne	.LBB112_174
# %bb.173:
	movq	stderr(%rip), %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rax, 8(%rcx)
.LBB112_174:
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rdi
	movq	%r12, %rbp
	testq	%rdi, %rdi
	je	.LBB112_176
# %bb.175:
	movl	$.L.str.9.1162, %esi
	callq	strcmp
	testl	%eax, %eax
	sete	%al
	jmp	.LBB112_177
.LBB112_176:
	xorl	%eax, %eax
.LBB112_177:
	movb	%al, 792(%r14)
	xorl	%r12d, %r12d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$10100, %esi            # imm = 0x2774
	movq	128(%rsp), %rdx         # 8-byte Reload
	xorl	%eax, %eax
	callq	curl_easy_setopt
	movl	%eax, %edx
	testl	%eax, %eax
	jne	.LBB112_73
# %bb.178:
	cmpb	$0, 1032(%r14)
	jne	.LBB112_181
# %bb.179:
	movl	$121, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_181
# %bb.180:
	movq	$0, (%rsp)
	movl	$.L.str.32.1184, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$121, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_181:
	cmpb	$0, 1033(%r14)
	je	.LBB112_184
# %bb.182:
	movl	$244, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_184
# %bb.183:
	movq	$1, (%rsp)
	movl	$.L.str.33.1185, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$244, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_184:
	movl	$10001, %edi            # imm = 0x2711
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_186
# %bb.185:
	movq	%rbp, (%rsp)
	movl	$.L.str.34.1186, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10001, %r9d            # imm = 0x2711
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_186:
	movl	$10195, %edi            # imm = 0x27D3
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_188
# %bb.187:
	movq	%rbp, (%rsp)
	movl	$.L.str.35.1187, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10195, %r9d            # imm = 0x27D3
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_188:
	movq	%rbx, 72(%rsp)          # 8-byte Spill
	movl	$20011, %edi            # imm = 0x4E2B
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_190
# %bb.189:
	movq	$tool_write_cb, (%rsp)
	movl	$.L.str.36.1188, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$20011, %r9d            # imm = 0x4E2B
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_190:
	leaq	304(%rbp), %rbx
	movq	%rbp, 32(%rsp)          # 8-byte Spill
	movq	%r14, 312(%rbp)
	movl	$10009, %edi            # imm = 0x2719
	callq	tool_setopt_skip
	testb	%al, %al
	movq	24(%rsp), %rbp          # 8-byte Reload
	jne	.LBB112_192
# %bb.191:
	movq	%rbx, (%rsp)
	movl	$.L.str.37.1189, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10009, %r9d            # imm = 0x2719
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_192:
	movl	$20012, %edi            # imm = 0x4E2C
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_194
# %bb.193:
	movq	$tool_read_cb, (%rsp)
	movl	$.L.str.38.1190, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$20012, %r9d            # imm = 0x4E2C
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_194:
	movl	$10168, %edi            # imm = 0x27B8
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_196
# %bb.195:
	movq	%rbx, (%rsp)
	movl	$.L.str.39.1191, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10168, %r9d            # imm = 0x27B8
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_196:
	movl	$20167, %edi            # imm = 0x4EC7
	callq	tool_setopt_skip
	testb	%al, %al
	movq	16(%rsp), %r13          # 8-byte Reload
	jne	.LBB112_198
# %bb.197:
	movq	$tool_seek_cb, (%rsp)
	movl	$.L.str.40.1192, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$20167, %r9d            # imm = 0x4EC7
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_198:
	movq	976(%r14), %rbp
	movl	$98, %edi
	callq	tool_setopt_skip
	testq	%rbp, %rbp
	movq	72(%rsp), %rbx          # 8-byte Reload
	je	.LBB112_202
# %bb.199:
	cmpq	$102399, %rbp           # imm = 0x18FFF
	jg	.LBB112_202
# %bb.200:
	testb	%al, %al
	movq	24(%rsp), %rbp          # 8-byte Reload
	jne	.LBB112_205
# %bb.201:
	movq	976(%r14), %rax
	movq	%rax, (%rsp)
	jmp	.LBB112_204
.LBB112_202:
	testb	%al, %al
	movq	24(%rsp), %rbp          # 8-byte Reload
	jne	.LBB112_205
# %bb.203:
	movq	$102400, (%rsp)         # imm = 0x19000
.LBB112_204:
	movl	$.L.str.41.1193, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$98, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_205:
	movl	$10002, %edi            # imm = 0x2712
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_207
# %bb.206:
	movq	(%rbx), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.42.1194, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10002, %r9d            # imm = 0x2712
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_207:
	movl	$43, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_209
# %bb.208:
	movzbl	5(%r13), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.43.1195, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$43, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_209:
	cmpb	$0, 456(%r14)
	je	.LBB112_212
# %bb.210:
	movl	$44, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_212
# %bb.211:
	movq	$1, (%rsp)
	movl	$.L.str.44.1196, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$44, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_212:
	cmpq	$0, 1152(%r14)
	je	.LBB112_215
# %bb.213:
	movl	$10220, %edi            # imm = 0x27EC
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_215
# %bb.214:
	movq	1152(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.45.1197, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10220, %r9d            # imm = 0x27EC
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_215:
	movl	$10004, %edi            # imm = 0x2714
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_217
# %bb.216:
	movq	384(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.46.1198, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10004, %r9d            # imm = 0x2714
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_217:
	cmpq	$0, 384(%r14)
	je	.LBB112_220
# %bb.218:
	movl	$101, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_220
# %bb.219:
	movslq	392(%r14), %r9
	movl	$.L.str.47.1199, %edx
	movl	$setopt_nv_CURLPROXY, %r8d
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movl	$101, %ecx
	callq	tool_setopt_enum
	movl	%eax, %r12d
.LBB112_220:
	movl	$10006, %edi            # imm = 0x2716
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_222
# %bb.221:
	movq	376(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.48.1200, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10006, %r9d            # imm = 0x2716
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_222:
	movl	$61, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_224
# %bb.223:
	movzbl	449(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.49.1201, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$61, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_224:
	cmpq	$0, 992(%r14)
	je	.LBB112_227
# %bb.225:
	movl	$10262, %edi            # imm = 0x2816
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_227
# %bb.226:
	movq	992(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.50.1202, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10262, %r9d            # imm = 0x2816
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_227:
	cmpb	$0, 802(%r14)
	je	.LBB112_231
# %bb.228:
	movl	$111, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_246
# %bb.229:
	movl	$.L.str.51.1203, %edx
	movl	$setopt_nv_CURLAUTH, %r8d
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movl	$111, %ecx
	movq	$-17, %r9
	jmp	.LBB112_245
.LBB112_230:
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rdx
	movl	$.L.str.21.1154, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	xorl	%eax, %eax
	callq	errorf
	jmp	.LBB112_100
.LBB112_231:
	cmpb	$0, 798(%r14)
	je	.LBB112_234
# %bb.232:
	movl	$111, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_246
# %bb.233:
	movl	$.L.str.51.1203, %edx
	movl	$setopt_nv_CURLAUTH, %r8d
	movl	$4, %r9d
	jmp	.LBB112_244
.LBB112_234:
	cmpb	$0, 799(%r14)
	je	.LBB112_238
# %bb.235:
	movl	$111, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	movq	16(%rsp), %r13          # 8-byte Reload
	movq	24(%rsp), %rbp          # 8-byte Reload
	jne	.LBB112_246
# %bb.236:
	movl	$.L.str.51.1203, %edx
	movl	$setopt_nv_CURLAUTH, %r8d
	movl	$8, %r9d
	jmp	.LBB112_244
.LBB112_237:
	movl	$.L.str.18.1171, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	xorl	%eax, %eax
	callq	errorf
	jmp	.LBB112_100
.LBB112_238:
	cmpb	$0, 800(%r14)
	je	.LBB112_241
# %bb.239:
	movl	$111, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	movq	16(%rsp), %r13          # 8-byte Reload
	movq	24(%rsp), %rbp          # 8-byte Reload
	jne	.LBB112_246
# %bb.240:
	movl	$.L.str.51.1203, %edx
	movl	$setopt_nv_CURLAUTH, %r8d
	movl	$2, %r9d
	jmp	.LBB112_244
.LBB112_241:
	cmpb	$0, 801(%r14)
	je	.LBB112_776
# %bb.242:
	movl	$111, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	movq	16(%rsp), %r13          # 8-byte Reload
	movq	24(%rsp), %rbp          # 8-byte Reload
	jne	.LBB112_246
# %bb.243:
	movl	$.L.str.51.1203, %edx
	movl	$setopt_nv_CURLAUTH, %r8d
	movl	$1, %r9d
.LBB112_244:
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movl	$111, %ecx
.LBB112_245:
	callq	tool_setopt_bitmask
	movl	%eax, %r12d
.LBB112_246:
	movl	$10177, %edi            # imm = 0x27C1
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_248
# %bb.247:
	movq	400(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.52.1204, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10177, %r9d            # imm = 0x27C1
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_248:
	movl	$265, %edi              # imm = 0x109
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_250
# %bb.249:
	movzbl	1192(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.53.1205, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$265, %r9d              # imm = 0x109
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_250:
	movl	$45, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_252
# %bb.251:
	movzbl	453(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.54.1206, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$45, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_252:
	movl	$10266, %edi            # imm = 0x281A
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_254
# %bb.253:
	movq	768(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.55.1207, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10266, %r9d            # imm = 0x281A
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_254:
	movl	$46, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_256
# %bb.255:
	xorl	%eax, %eax
	movq	32(%rsp), %rcx          # 8-byte Reload
	cmpq	$0, 712(%rcx)
	setne	%al
	movq	%rax, (%rsp)
	movl	$.L.str.56.1208, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$46, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_256:
	movl	$48, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_258
# %bb.257:
	movzbl	457(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.57.1209, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$48, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_258:
	movl	$50, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_260
# %bb.259:
	movzbl	450(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.58.1210, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$50, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_260:
	cmpb	$0, 460(%r14)
	je	.LBB112_263
# %bb.261:
	movl	$51, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_269
# %bb.262:
	movl	$.L.str.59.1211, %edx
	movl	$setopt_nv_CURL_NETRC, %r8d
	movl	$1, %r9d
	jmp	.LBB112_267
.LBB112_263:
	cmpb	$0, 461(%r14)
	jne	.LBB112_265
# %bb.264:
	cmpq	$0, 464(%r14)
	je	.LBB112_445
.LBB112_265:
	movl	$51, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_269
# %bb.266:
	movl	$.L.str.59.1211, %edx
	movl	$setopt_nv_CURL_NETRC, %r8d
	movl	$2, %r9d
.LBB112_267:
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movl	$51, %ecx
.LBB112_268:
	callq	tool_setopt_enum
	movl	%eax, %r12d
.LBB112_269:
	cmpq	$0, 464(%r14)
	je	.LBB112_272
# %bb.270:
	movl	$10118, %edi            # imm = 0x2786
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_272
# %bb.271:
	movq	464(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.60.1212, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10118, %r9d            # imm = 0x2786
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_272:
	movl	$53, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_274
# %bb.273:
	movzbl	451(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.61.1213, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$53, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_274:
	cmpq	$0, 320(%r14)
	je	.LBB112_277
# %bb.275:
	movl	$10224, %edi            # imm = 0x27F0
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_277
# %bb.276:
	movq	320(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.62.1214, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10224, %r9d            # imm = 0x27F0
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_277:
	movl	$10005, %edi            # imm = 0x2715
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_279
# %bb.278:
	movq	312(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.63.1215, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10005, %r9d            # imm = 0x2715
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_279:
	movl	$10007, %edi            # imm = 0x2717
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_281
# %bb.280:
	movq	256(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.64.1216, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10007, %r9d            # imm = 0x2717
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_281:
	movl	$10010, %edi            # imm = 0x271A
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_283
# %bb.282:
	movq	32(%rsp), %rax          # 8-byte Reload
	addq	$377, %rax              # imm = 0x179
	movq	%rax, (%rsp)
	movl	$.L.str.65.1217, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10010, %r9d            # imm = 0x271A
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r12d
.LBB112_283:
	movl	$155, %edi
	callq	tool_setopt_skip
	movl	%r12d, %edx
	testb	%al, %al
	jne	.LBB112_285
# %bb.284:
	movsd	168(%r14), %xmm0        # xmm0 = mem[0],zero
	mulsd	.LCPI112_0(%rip), %xmm0
	cvttsd2si	%xmm0, %rax
	movq	%rax, (%rsp)
	movl	$.L.str.66.1218, %r8d
	movq	%rbp, %rdi
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$155, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %edx
.LBB112_285:
	movl	960(%r14), %eax
	cmpl	$3, %eax
	je	.LBB112_291
# %bb.286:
	cmpl	$4, %eax
	jne	.LBB112_295
# %bb.287:
	movl	%edx, %ebx
	movl	$10015, %edi            # imm = 0x271F
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_289
# %bb.288:
	movq	144(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.67.1219, %r8d
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$10015, %r9d            # imm = 0x271F
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_289:
	movl	$30120, %edi            # imm = 0x75A8
	callq	tool_setopt_skip
	testb	%al, %al
	movl	%ebx, %edx
	jne	.LBB112_295
# %bb.290:
	movq	152(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.68.1220, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movl	$30120, %r9d            # imm = 0x75A8
	xorl	%eax, %eax
	callq	tool_setopt
	jmp	.LBB112_294
.LBB112_291:
	movq	928(%r14), %rdi
	callq	curl_mime_free
	movq	$0, 928(%r14)
	movq	912(%r14), %rsi
	movq	%rbp, %rdi
	movq	104(%rsp), %rdx         # 8-byte Reload
	callq	tool2curlmime
	movl	%eax, %edx
	testl	%eax, %eax
	jne	.LBB112_73
# %bb.292:
	movl	$10269, %edi            # imm = 0x281D
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_296
# %bb.293:
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %r8
	movl	$.L.str.69.1221, %edx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %rsi
	movl	$10269, %ecx            # imm = 0x281D
	callq	tool_setopt_mimepost
.LBB112_294:
	movl	%eax, %edx
.LBB112_295:
	testl	%edx, %edx
	jne	.LBB112_73
.LBB112_296:
	xorl	%ebx, %ebx
	cmpq	$0, 80(%r14)
	je	.LBB112_299
# %bb.297:
	movl	$107, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_299
# %bb.298:
	movq	80(%r14), %r9
	movl	$.L.str.70.1222, %edx
	movl	$setopt_nv_CURLAUTH, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$107, %ecx
	callq	tool_setopt_bitmask
	movl	%eax, %ebx
.LBB112_299:
	movl	$10023, %edi            # imm = 0x2727
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_301
# %bb.300:
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %r8
	movl	$.L.str.71.1223, %edx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$10023, %ecx            # imm = 0x2727
	callq	tool_setopt_slist
	movl	%eax, %ebx
.LBB112_301:
	testl	$262145, built_in_protos(%rip) # imm = 0x40001
	je	.LBB112_306
# %bb.302:
	movl	$10016, %edi            # imm = 0x2720
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_304
# %bb.303:
	movq	160(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.72.1224, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10016, %r9d            # imm = 0x2720
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_304:
	movl	$10018, %edi            # imm = 0x2722
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_306
# %bb.305:
	movq	24(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.73.1225, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10018, %r9d            # imm = 0x2722
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_306:
	testb	$1, built_in_protos(%rip)
	je	.LBB112_340
# %bb.307:
	movl	$52, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_309
# %bb.308:
	movzbl	458(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.74.1226, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$52, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_309:
	movl	$105, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_311
# %bb.310:
	movzbl	459(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.75.1227, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$105, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_311:
	movl	$58, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_313
# %bb.312:
	movzbl	452(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.76.1228, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$58, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_313:
	cmpq	$0, 904(%r14)
	je	.LBB112_318
# %bb.314:
	movl	$10228, %edi            # imm = 0x27F4
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_316
# %bb.315:
	movq	904(%r14), %r8
	movl	$.L.str.77.1229, %edx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$10228, %ecx            # imm = 0x27F4
	callq	tool_setopt_slist
	movl	%eax, %ebx
.LBB112_316:
	movl	$229, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_318
# %bb.317:
	movl	$1, (%rsp)
	movl	$.L.str.78.1230, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$229, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_318:
	movl	$68, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_320
# %bb.319:
	movq	184(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.79.1231, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$68, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_320:
	cmpq	$0, 776(%r14)
	je	.LBB112_323
# %bb.321:
	movl	$84, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_327
# %bb.322:
	movq	776(%r14), %r9
	movl	$.L.str.80.1232, %edx
	movl	$setopt_nv_CURL_HTTP_VERSION, %r8d
	jmp	.LBB112_326
.LBB112_323:
	movq	curlinfo(%rip), %rax
	testb	$1, 34(%rax)
	je	.LBB112_327
# %bb.324:
	movl	$84, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_327
# %bb.325:
	movl	$.L.str.80.1232, %edx
	movl	$setopt_nv_CURL_HTTP_VERSION, %r8d
	movl	$4, %r9d
.LBB112_326:
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$84, %ecx
	callq	tool_setopt_enum
	movl	%eax, %ebx
.LBB112_327:
	movzbl	1108(%r14), %eax
	movq	%rax, %rbp
	orq	$2, %rbp
	cmpb	$0, 1109(%r14)
	cmoveq	%rax, %rbp
	movb	1110(%r14), %r12b
	movl	$161, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_329
# %bb.328:
	movq	%rbp, %rax
	orq	$4, %rax
	testb	%r12b, %r12b
	cmoveq	%rbp, %rax
	movq	%rax, (%rsp)
	movl	$.L.str.81.1233, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$161, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_329:
	cmpb	$0, 73(%r14)
	je	.LBB112_332
# %bb.330:
	movl	$10102, %edi            # imm = 0x2776
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_332
# %bb.331:
	movq	$.L.str.1148, (%rsp)
	movl	$.L.str.82.1234, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10102, %r9d            # imm = 0x2776
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_332:
	cmpb	$0, 74(%r14)
	je	.LBB112_335
# %bb.333:
	movl	$207, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_335
# %bb.334:
	movq	$1, (%rsp)
	movl	$.L.str.83.1235, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$207, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_335:
	movl	$285, %edi              # imm = 0x11D
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_337
# %bb.336:
	movzbl	784(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.84.1236, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$285, %r9d              # imm = 0x11D
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_337:
	testl	%ebx, %ebx
	je	.LBB112_339
# %bb.338:
	movl	$.L.str.85.1237, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	xorl	%eax, %eax
	callq	errorf
	jmp	.LBB112_79
.LBB112_339:
	xorl	%ebx, %ebx
.LBB112_340:
	movl	$10017, %edi            # imm = 0x2721
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_342
# %bb.341:
	movq	216(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.86.1238, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10017, %r9d            # imm = 0x2721
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_342:
	movl	$19, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_344
# %bb.343:
	movq	264(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.87.1239, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_344:
	movl	$20, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_346
# %bb.345:
	movq	272(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.88.1240, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_346:
	movl	$30145, %edi            # imm = 0x75C1
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_348
# %bb.347:
	movq	968(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.89.1241, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$30145, %r9d            # imm = 0x75C1
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_348:
	movl	$30146, %edi            # imm = 0x75C2
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_350
# %bb.349:
	movq	976(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.90.1242, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$30146, %r9d            # imm = 0x75C2
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_350:
	movb	88(%r14), %bpl
	movl	$30116, %edi            # imm = 0x75A4
	callq	tool_setopt_skip
	testb	%bpl, %bpl
	je	.LBB112_353
# %bb.351:
	testb	%al, %al
	jne	.LBB112_356
# %bb.352:
	movq	136(%r14), %rax
	movq	%rax, (%rsp)
	jmp	.LBB112_355
.LBB112_353:
	testb	%al, %al
	jne	.LBB112_356
# %bb.354:
	movq	$0, (%rsp)
.LBB112_355:
	movl	$.L.str.91.1243, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$30116, %r9d            # imm = 0x75A4
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_356:
	movl	$10026, %edi            # imm = 0x272A
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_358
# %bb.357:
	movq	680(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.92.1244, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10026, %r9d            # imm = 0x272A
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_358:
	movl	$10258, %edi            # imm = 0x2812
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_360
# %bb.359:
	movq	688(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.93.1245, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10258, %r9d            # imm = 0x2812
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_360:
	testb	$48, built_in_protos(%rip)
	je	.LBB112_370
# %bb.361:
	movl	$10153, %edi            # imm = 0x27A9
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_363
# %bb.362:
	movq	648(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.94.1246, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10153, %r9d            # imm = 0x27A9
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_363:
	movl	$10152, %edi            # imm = 0x27A8
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_365
# %bb.364:
	movq	696(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.95.1247, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10152, %r9d            # imm = 0x27A8
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_365:
	movl	$10162, %edi            # imm = 0x27B2
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_367
# %bb.366:
	movq	704(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.96.1248, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10162, %r9d            # imm = 0x27B2
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_367:
	cmpb	$0, 1200(%r14)
	je	.LBB112_370
# %bb.368:
	movl	$268, %edi              # imm = 0x10C
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_370
# %bb.369:
	movq	$1, (%rsp)
	movl	$.L.str.97.1249, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$268, %r9d              # imm = 0x10C
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_370:
	cmpq	$0, 584(%r14)
	je	.LBB112_373
# %bb.371:
	movl	$10065, %edi            # imm = 0x2751
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_373
# %bb.372:
	movq	584(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.98.1250, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10065, %r9d            # imm = 0x2751
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_373:
	cmpq	$0, 592(%r14)
	je	.LBB112_376
# %bb.374:
	movl	$10246, %edi            # imm = 0x2806
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_376
# %bb.375:
	movq	592(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.99.1251, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10246, %r9d            # imm = 0x2806
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_376:
	movq	600(%r14), %rax
	testq	%rax, %rax
	je	.LBB112_380
# %bb.377:
	movq	%rax, (%rsp)
	movl	$.L.str.100.1252, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10097, %r9d            # imm = 0x2771
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
	testl	%eax, %eax
	je	.LBB112_380
# %bb.378:
	movl	%ebx, %edx
	cmpl	$4, %ebx
	movq	16(%rsp), %rdi          # 8-byte Reload
	jne	.LBB112_73
# %bb.379:
	movl	$.L.str.101.1253, %esi
	movq	120(%rsp), %rdx         # 8-byte Reload
	xorl	%eax, %eax
	callq	warnf
	movl	$4, %ebx
.LBB112_380:
	cmpq	$0, 608(%r14)
	jne	.LBB112_382
# %bb.381:
	cmpq	$0, 600(%r14)
	je	.LBB112_389
.LBB112_382:
	movl	$10247, %edi            # imm = 0x2807
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_389
# %bb.383:
	movq	608(%r14), %rax
	testq	%rax, %rax
	jne	.LBB112_385
# %bb.384:
	movq	600(%r14), %rax
.LBB112_385:
	movq	%rax, (%rsp)
	movl	$.L.str.104.1254, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10247, %r9d            # imm = 0x2807
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
	testl	%eax, %eax
	je	.LBB112_389
# %bb.386:
	movl	%ebx, %edx
	cmpl	$4, %ebx
	jne	.LBB112_73
# %bb.387:
	movl	$4, %ebx
	cmpq	$0, 608(%r14)
	je	.LBB112_389
# %bb.388:
	movl	$.L.str.105.1255, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	xorl	%eax, %eax
	callq	warnf
.LBB112_389:
	cmpq	$0, 616(%r14)
	je	.LBB112_392
# %bb.390:
	movl	$10169, %edi            # imm = 0x27B9
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_392
# %bb.391:
	movq	616(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.106.1256, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10169, %r9d            # imm = 0x27B9
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_392:
	cmpq	$0, 624(%r14)
	je	.LBB112_395
# %bb.393:
	movl	$10260, %edi            # imm = 0x2814
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_399
# %bb.394:
	movq	624(%r14), %rax
	jmp	.LBB112_398
.LBB112_395:
	cmpq	$0, 616(%r14)
	je	.LBB112_399
# %bb.396:
	movl	$10260, %edi            # imm = 0x2814
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_399
# %bb.397:
	movq	616(%r14), %rax
.LBB112_398:
	movq	%rax, (%rsp)
	movl	$.L.str.107.1257, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10260, %r9d            # imm = 0x2814
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_399:
	cmpq	$0, 632(%r14)
	je	.LBB112_402
# %bb.400:
	movl	$10230, %edi            # imm = 0x27F6
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_402
# %bb.401:
	movq	632(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.108.1258, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10230, %r9d            # imm = 0x27F6
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_402:
	cmpq	$0, 752(%r14)
	je	.LBB112_405
# %bb.403:
	movl	$10298, %edi            # imm = 0x283A
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_405
# %bb.404:
	movq	752(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.109.1259, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10298, %r9d            # imm = 0x283A
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_405:
	movq	curlinfo(%rip), %rax
	testb	$4, 32(%rax)
	je	.LBB112_482
# %bb.406:
	movq	552(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB112_410
# %bb.407:
	cmpq	$0, 568(%r14)
	jne	.LBB112_410
# %bb.408:
	movl	$.L.str.231.1260, %esi
	movl	$7, %edx
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB112_410
# %bb.409:
	movl	$.L.str.110.1261, %edi
	callq	strdup
	movq	%rax, 568(%r14)
.LBB112_410:
	movq	648(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB112_414
# %bb.411:
	cmpq	$0, 664(%r14)
	jne	.LBB112_414
# %bb.412:
	movl	$.L.str.231.1260, %esi
	movl	$7, %edx
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB112_414
# %bb.413:
	movl	$.L.str.110.1261, %edi
	callq	strdup
	movq	%rax, 664(%r14)
.LBB112_414:
	movq	560(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB112_418
# %bb.415:
	cmpq	$0, 576(%r14)
	jne	.LBB112_418
# %bb.416:
	movl	$.L.str.231.1260, %esi
	movl	$7, %edx
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB112_418
# %bb.417:
	movl	$.L.str.110.1261, %edi
	callq	strdup
	movq	%rax, 576(%r14)
.LBB112_418:
	movq	656(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB112_422
# %bb.419:
	cmpq	$0, 672(%r14)
	jne	.LBB112_422
# %bb.420:
	movl	$.L.str.231.1260, %esi
	movl	$7, %edx
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB112_422
# %bb.421:
	movl	$.L.str.110.1261, %edi
	callq	strdup
	movq	%rax, 672(%r14)
.LBB112_422:
	movl	$10025, %edi            # imm = 0x2729
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_424
# %bb.423:
	movq	552(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.111.1262, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10025, %r9d            # imm = 0x2729
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_424:
	movl	$10254, %edi            # imm = 0x280E
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_426
# %bb.425:
	movq	560(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.112.1263, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10254, %r9d            # imm = 0x280E
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_426:
	movl	$10086, %edi            # imm = 0x2766
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_428
# %bb.427:
	movq	568(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.113.1264, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10086, %r9d            # imm = 0x2766
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_428:
	movl	$10255, %edi            # imm = 0x280F
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_430
# %bb.429:
	movq	576(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.114.1265, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10255, %r9d            # imm = 0x280F
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_430:
	movl	$10087, %edi            # imm = 0x2767
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_432
# %bb.431:
	movq	648(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.115.1266, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10087, %r9d            # imm = 0x2767
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_432:
	movl	$10256, %edi            # imm = 0x2810
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_434
# %bb.433:
	movq	656(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.116.1267, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10256, %r9d            # imm = 0x2810
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_434:
	movl	$10088, %edi            # imm = 0x2768
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_436
# %bb.435:
	movq	664(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.117.1268, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10088, %r9d            # imm = 0x2768
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_436:
	movl	$10257, %edi            # imm = 0x2811
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_438
# %bb.437:
	movq	672(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.118.1269, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10257, %r9d            # imm = 0x2811
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_438:
	movl	$10305, %edi            # imm = 0x2841
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_440
# %bb.439:
	movq	1224(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.119.1270, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10305, %r9d            # imm = 0x2841
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_440:
	movb	789(%r14), %bpl
	movl	$64, %edi
	callq	tool_setopt_skip
	testb	%bpl, %bpl
	je	.LBB112_447
# %bb.441:
	testb	%al, %al
	jne	.LBB112_443
# %bb.442:
	movq	$0, (%rsp)
	movl	$.L.str.120.1271, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$64, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_443:
	movl	$81, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_450
# %bb.444:
	movq	$0, (%rsp)
	movl	$.L.str.121.1272, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$81, %r9d
	jmp	.LBB112_449
.LBB112_445:
	movl	$51, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_269
# %bb.446:
	movl	$.L.str.59.1211, %edx
	movl	$setopt_nv_CURL_NETRC, %r8d
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movl	$51, %ecx
	xorl	%r9d, %r9d
	jmp	.LBB112_268
.LBB112_447:
	testb	%al, %al
	jne	.LBB112_450
# %bb.448:
	movq	$1, (%rsp)
	movl	$.L.str.120.1271, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$64, %r9d
.LBB112_449:
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_450:
	cmpb	$0, 790(%r14)
	je	.LBB112_455
# %bb.451:
	movl	$306, %edi              # imm = 0x132
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_453
# %bb.452:
	movq	$0, (%rsp)
	movl	$.L.str.122.1273, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$306, %r9d              # imm = 0x132
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_453:
	movl	$307, %edi              # imm = 0x133
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_455
# %bb.454:
	movq	$0, (%rsp)
	movl	$.L.str.123.1274, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$307, %r9d              # imm = 0x133
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_455:
	movb	791(%r14), %bpl
	movl	$248, %edi
	callq	tool_setopt_skip
	testb	%bpl, %bpl
	je	.LBB112_460
# %bb.456:
	testb	%al, %al
	jne	.LBB112_458
# %bb.457:
	movq	$0, (%rsp)
	movl	$.L.str.124.1275, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$248, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_458:
	movl	$249, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_463
# %bb.459:
	movq	$0, (%rsp)
	movl	$.L.str.125.1276, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$249, %r9d
	jmp	.LBB112_462
.LBB112_460:
	testb	%al, %al
	jne	.LBB112_463
# %bb.461:
	movq	$1, (%rsp)
	movl	$.L.str.124.1275, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$248, %r9d
.LBB112_462:
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_463:
	cmpb	$0, 793(%r14)
	je	.LBB112_466
# %bb.464:
	movl	$232, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_466
# %bb.465:
	movq	$1, (%rsp)
	movl	$.L.str.126.1277, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$232, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_466:
	cmpb	$0, 794(%r14)
	je	.LBB112_469
# %bb.467:
	movl	$308, %edi              # imm = 0x134
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_469
# %bb.468:
	movq	$1, (%rsp)
	movl	$.L.str.127.1278, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$308, %r9d              # imm = 0x134
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_469:
	cmpb	$0, 1177(%r14)
	je	.LBB112_472
# %bb.470:
	movl	$233, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_472
# %bb.471:
	movq	$1, (%rsp)
	movl	$.L.str.128.1279, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$233, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_472:
	movl	$32, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_474
# %bb.473:
	movq	848(%r14), %r9
	orq	840(%r14), %r9
	movl	$.L.str.129.1280, %edx
	movl	$setopt_nv_CURL_SSLVERSION, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$32, %ecx
	callq	tool_setopt_enum
	movl	%eax, %ebx
.LBB112_474:
	movl	$250, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_476
# %bb.475:
	movq	856(%r14), %r9
	movl	$.L.str.130.1281, %edx
	movl	$setopt_nv_CURL_SSLVERSION, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$250, %ecx
	callq	tool_setopt_enum
	movl	%eax, %ebx
.LBB112_476:
	movzbl	1144(%r14), %eax
	movd	1146(%r14), %xmm0       # xmm0 = mem[0],zero,zero,zero
	pxor	%xmm1, %xmm1
	pcmpeqb	%xmm0, %xmm1
	punpcklbw	%xmm1, %xmm0    # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	punpcklwd	%xmm0, %xmm0    # xmm0 = xmm0[0,0,1,1,2,2,3,3]
	psrad	$24, %xmm0
	pshufd	$246, %xmm0, %xmm1      # xmm1 = xmm0[2,1,3,3]
	pandn	.LCPI112_1(%rip), %xmm1
	pshufd	$212, %xmm0, %xmm0      # xmm0 = xmm0[0,1,1,3]
	pandn	.LCPI112_2(%rip), %xmm0
	por	%xmm1, %xmm0
	pshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	por	%xmm0, %xmm1
	movq	%xmm1, %rbp
	orq	%rax, %rbp
	je	.LBB112_479
# %bb.477:
	movl	$216, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_479
# %bb.478:
	movl	$.L.str.131.1282, %edx
	movl	$setopt_nv_CURLSSLOPT, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$216, %ecx
	movq	%rbp, %r9
	callq	tool_setopt_bitmask
	movl	%eax, %ebx
.LBB112_479:
	movzbl	1145(%r14), %eax
	movzbl	1150(%r14), %ebp
	shlq	$5, %rbp
	orq	%rax, %rbp
	je	.LBB112_482
# %bb.480:
	movl	$261, %edi              # imm = 0x105
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_482
# %bb.481:
	movl	$.L.str.132.1283, %edx
	movl	$setopt_nv_CURLSSLOPT, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$261, %ecx              # imm = 0x105
	movq	%rbp, %r9
	callq	tool_setopt_bitmask
	movl	%eax, %ebx
.LBB112_482:
	cmpb	$0, 1178(%r14)
	je	.LBB112_485
# %bb.483:
	movl	$234, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_485
# %bb.484:
	movq	$1, (%rsp)
	movl	$.L.str.133.1284, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$234, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
.LBB112_485:
	testb	$48, built_in_protos(%rip)
	je	.LBB112_487
# %bb.486:
	cmpb	$0, 789(%r14)
	je	.LBB112_506
.LBB112_487:
	movl	%ebx, %r13d
.LBB112_488:
	cmpb	$0, 456(%r14)
	jne	.LBB112_490
# %bb.489:
	cmpb	$0, (%r14)
	je	.LBB112_492
.LBB112_490:
	movl	$69, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_492
# %bb.491:
	movq	$1, (%rsp)
	movl	$.L.str.137.1288, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$69, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_492:
	movl	$27, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_494
# %bb.493:
	movzbl	736(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.138.1289, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$27, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_494:
	movl	$10028, %edi            # imm = 0x272C
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_496
# %bb.495:
	movq	816(%r14), %r8
	movl	$.L.str.139.1290, %edx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$10028, %ecx            # imm = 0x272C
	callq	tool_setopt_slist
	movl	%eax, %r13d
.LBB112_496:
	movl	$10039, %edi            # imm = 0x2737
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_498
# %bb.497:
	movq	824(%r14), %r8
	movl	$.L.str.140.1291, %edx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$10039, %ecx            # imm = 0x2737
	callq	tool_setopt_slist
	movl	%eax, %r13d
.LBB112_498:
	movl	$10093, %edi            # imm = 0x276D
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_500
# %bb.499:
	movq	832(%r14), %r8
	movl	$.L.str.141.1292, %edx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$10093, %ecx            # imm = 0x276D
	callq	tool_setopt_slist
	movl	%eax, %r13d
.LBB112_500:
	cmpq	$0, 32(%r14)
	je	.LBB112_514
# %bb.501:
	leaq	136(%rsp), %rdi
	movl	$4096, %esi             # imm = 0x1000
	callq	curlx_dyn_init
	movq	32(%r14), %rax
	testq	%rax, %rax
	je	.LBB112_511
# %bb.502:
	movl	$.L.str.142.1293, %ebx
	leaq	136(%rsp), %r12
	movq	%rax, %rbp
.LBB112_503:                            # =>This Inner Loop Header: Depth=1
	cmpq	%rax, %rbp
	movq	(%rbp), %rdx
	movl	$.L.str.143.1294, %esi
	cmoveq	%rbx, %rsi
	movq	%r12, %rdi
	xorl	%eax, %eax
	callq	curlx_dyn_addf
	testl	%eax, %eax
	jne	.LBB112_510
# %bb.504:                              #   in Loop: Header=BB112_503 Depth=1
	movq	8(%rbp), %rbp
	testq	%rbp, %rbp
	je	.LBB112_511
# %bb.505:                              #   in Loop: Header=BB112_503 Depth=1
	movq	32(%r14), %rax
	jmp	.LBB112_503
.LBB112_506:
	xorl	%edi, %edi
	callq	homedir
	testq	%rax, %rax
	je	.LBB112_547
# %bb.507:
	movq	%rax, %rbp
	xorl	%r13d, %r13d
	movl	$.L.str.134.1285, %edi
	movq	%rax, %rsi
	xorl	%eax, %eax
	callq	curl_maprintf
	testq	%rax, %rax
	je	.LBB112_545
# %bb.508:
	movq	%rax, %r12
	movq	%rax, (%rsp)
	movl	$.L.str.135.1286, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10183, %r9d            # imm = 0x27C7
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %ebx
	movq	%r12, %rdi
	callq	curl_free
	movl	%ebx, %eax
	cmpl	$48, %ebx
	jne	.LBB112_545
# %bb.509:
	movq	%rbp, %rdi
	callq	myFree
	xorl	%r13d, %r13d
	jmp	.LBB112_488
.LBB112_510:
	movl	$27, %r13d
.LBB112_511:
	movl	$10022, %edi            # imm = 0x2726
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_513
# %bb.512:
	leaq	136(%rsp), %rdi
	callq	curlx_dyn_ptr
	movq	%rax, (%rsp)
	movl	$.L.str.144.1295, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10022, %r9d            # imm = 0x2726
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_513:
	leaq	136(%rsp), %rdi
	callq	curlx_dyn_free
.LBB112_514:
	movq	48(%r14), %rbp
	testq	%rbp, %rbp
	je	.LBB112_519
# %bb.515:                              # %.preheader
	movq	16(%rsp), %rbx          # 8-byte Reload
.LBB112_516:                            # =>This Inner Loop Header: Depth=1
	movl	$10031, %edi            # imm = 0x272F
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_518
# %bb.517:                              #   in Loop: Header=BB112_516 Depth=1
	movq	(%rbp), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.145.1296, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	%rbx, %rdx
	movq	%r14, %rcx
	movl	$10031, %r9d            # imm = 0x272F
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_518:                            #   in Loop: Header=BB112_516 Depth=1
	movq	8(%rbp), %rbp
	testq	%rbp, %rbp
	jne	.LBB112_516
.LBB112_519:
	cmpq	$0, 40(%r14)
	je	.LBB112_522
# %bb.520:
	movl	$10082, %edi            # imm = 0x2762
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_522
# %bb.521:
	movq	40(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.146.1297, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10082, %r9d            # imm = 0x2762
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_522:
	movl	$96, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_524
# %bb.523:
	movzbl	72(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.147.1298, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$96, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_524:
	movl	$33, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_526
# %bb.525:
	movl	880(%r14), %r9d
	movl	$.L.str.148.1299, %edx
	movl	$setopt_nv_CURL_TIMECOND, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$33, %ecx
	callq	tool_setopt_enum
	movl	%eax, %r13d
.LBB112_526:
	movl	$30270, %edi            # imm = 0x763E
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_528
# %bb.527:
	movq	888(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.149.1300, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$30270, %r9d            # imm = 0x763E
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_528:
	movl	$10036, %edi            # imm = 0x2734
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_530
# %bb.529:
	movq	744(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.150.1301, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10036, %r9d            # imm = 0x2734
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_530:
	movl	960(%r14), %esi
	movq	744(%r14), %rdx
	movq	%r14, %rdi
	callq	customrequest_helper
	movl	$10037, %edi            # imm = 0x2735
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_532
# %bb.531:
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	8(%rdx), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.151.1302, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	%r14, %rcx
	movl	$10037, %r9d            # imm = 0x2735
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_532:
	movl	$10062, %edi            # imm = 0x274E
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_534
# %bb.533:
	movq	224(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.152.1303, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10062, %r9d            # imm = 0x274E
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_534:
	movl	$10063, %edi            # imm = 0x274F
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_536
# %bb.535:
	movq	760(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.153.1304, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10063, %r9d            # imm = 0x274F
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_536:
	movq	32(%rsp), %rax          # 8-byte Reload
	leaq	112(%rax), %rdi
	movq	%r14, %rsi
	callq	progressbarinit
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpl	$1, 52(%rax)
	jne	.LBB112_539
# %bb.537:
	cmpb	$0, 5(%rax)
	jne	.LBB112_539
# %bb.538:
	cmpb	$0, 4(%rax)
	je	.LBB112_548
.LBB112_539:
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	712(%rax), %rdi
	testq	%rdi, %rdi
	je	.LBB112_553
# %bb.540:
	movl	$.L.str.23.1175, %esi
	callq	strcmp
	testl	%eax, %eax
	jne	.LBB112_553
# %bb.541:
	movl	$43, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_543
# %bb.542:
	movq	$0, (%rsp)
	movl	$.L.str.43.1195, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$43, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_543:
	movl	$20219, %edi            # imm = 0x4EFB
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_551
# %bb.544:
	movq	$tool_readbusy_cb, (%rsp)
	jmp	.LBB112_550
.LBB112_545:
	movq	%rbp, %rdi
	callq	myFree
	testl	%ebx, %ebx
	je	.LBB112_488
# %bb.546:
	movq	80(%rsp), %rax          # 8-byte Reload
	movl	%ebx, %edx
	jmp	.LBB112_77
.LBB112_547:
	movl	$.L.str.136.1287, %esi
	movq	16(%rsp), %rdi          # 8-byte Reload
	xorl	%eax, %eax
	callq	warnf
	jmp	.LBB112_487
.LBB112_548:
	movl	$20219, %edi            # imm = 0x4EFB
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_551
# %bb.549:
	movq	$tool_progress_cb, (%rsp)
.LBB112_550:
	movl	$.L.str.154.1305, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$20219, %r9d            # imm = 0x4EFB
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_551:
	movl	$10057, %edi            # imm = 0x2749
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_553
# %bb.552:
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	movl	$.L.str.155.1306, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10057, %r9d            # imm = 0x2749
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_553:
	cmpq	$0, 280(%r14)
	je	.LBB112_556
# %bb.554:
	movl	$10211, %edi            # imm = 0x27E3
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_556
# %bb.555:
	movq	280(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.156.1307, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10211, %r9d            # imm = 0x27E3
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_556:
	cmpq	$0, 288(%r14)
	je	.LBB112_559
# %bb.557:
	movl	$10221, %edi            # imm = 0x27ED
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_559
# %bb.558:
	movq	288(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.157.1308, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10221, %r9d            # imm = 0x27ED
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_559:
	cmpq	$0, 296(%r14)
	je	.LBB112_562
# %bb.560:
	movl	$10222, %edi            # imm = 0x27EE
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_562
# %bb.561:
	movq	296(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.158.1309, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10222, %r9d            # imm = 0x27EE
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_562:
	cmpq	$0, 304(%r14)
	je	.LBB112_565
# %bb.563:
	movl	$10223, %edi            # imm = 0x27EF
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_565
# %bb.564:
	movq	304(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.159.1310, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10223, %r9d            # imm = 0x27EF
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_565:
	movl	$10070, %edi            # imm = 0x2756
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_567
# %bb.566:
	movq	936(%r14), %r8
	movl	$.L.str.160.1311, %edx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$10070, %ecx            # imm = 0x2756
	callq	tool_setopt_slist
	movl	%eax, %r13d
.LBB112_567:
	movl	$10076, %edi            # imm = 0x275C
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_569
# %bb.568:
	movq	8(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.161.1312, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10076, %r9d            # imm = 0x275C
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_569:
	movl	$10077, %edi            # imm = 0x275D
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_571
# %bb.570:
	movq	16(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.162.1313, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10077, %r9d            # imm = 0x275D
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_571:
	movl	$156, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_573
# %bb.572:
	movsd	176(%r14), %xmm0        # xmm0 = mem[0],zero
	mulsd	.LCPI112_0(%rip), %xmm0
	cvttsd2si	%xmm0, %rax
	movq	%rax, (%rsp)
	movl	$.L.str.163.1314, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$156, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_573:
	cmpq	$0, 512(%r14)
	je	.LBB112_576
# %bb.574:
	movl	$10279, %edi            # imm = 0x2827
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_576
# %bb.575:
	movq	512(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.164.1315, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10279, %r9d            # imm = 0x2827
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_576:
	cmpq	$0, 520(%r14)
	je	.LBB112_579
# %bb.577:
	movl	$10083, %edi            # imm = 0x2763
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_579
# %bb.578:
	movq	520(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.165.1316, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10083, %r9d            # imm = 0x2763
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_579:
	cmpq	$0, 528(%r14)
	je	.LBB112_582
# %bb.580:
	movl	$10259, %edi            # imm = 0x2813
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_582
# %bb.581:
	movq	528(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.166.1317, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10259, %r9d            # imm = 0x2813
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_582:
	cmpq	$0, 536(%r14)
	je	.LBB112_585
# %bb.583:
	movl	$10276, %edi            # imm = 0x2824
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_585
# %bb.584:
	movq	536(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.167.1318, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10276, %r9d            # imm = 0x2824
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_585:
	cmpq	$0, 544(%r14)
	je	.LBB112_588
# %bb.586:
	movl	$10277, %edi            # imm = 0x2825
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_588
# %bb.587:
	movq	544(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.168.1319, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10277, %r9d            # imm = 0x2825
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_588:
	cmpb	$0, 90(%r14)
	je	.LBB112_591
# %bb.589:
	movl	$85, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_591
# %bb.590:
	movq	$0, (%rsp)
	movl	$.L.str.169.1320, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$85, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_591:
	cmpb	$0, 91(%r14)
	je	.LBB112_594
# %bb.592:
	movl	$106, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_594
# %bb.593:
	movq	$0, (%rsp)
	movl	$.L.str.170.1321, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$106, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_594:
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpl	$0, 44(%rax)
	je	.LBB112_601
# %bb.595:
	movl	$20094, %edi            # imm = 0x4E7E
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_597
# %bb.596:
	movq	$tool_debug_cb, (%rsp)
	movl	$.L.str.171.1322, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$20094, %r9d            # imm = 0x4E7E
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_597:
	movl	$10095, %edi            # imm = 0x276F
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_599
# %bb.598:
	movq	%r14, (%rsp)
	movl	$.L.str.172.1323, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10095, %r9d            # imm = 0x276F
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_599:
	movl	$41, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_601
# %bb.600:
	movq	$1, (%rsp)
	movl	$.L.str.173.1324, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$41, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_601:
	movq	712(%r14), %rax
	testq	%rax, %rax
	movq	16(%rsp), %rdx          # 8-byte Reload
	je	.LBB112_603
# %bb.602:
	movq	%rax, (%rsp)
	xorl	%r13d, %r13d
	movl	$.L.str.174.1325, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	%r14, %rcx
	movl	$10089, %r9d            # imm = 0x2769
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %edx
	testl	%eax, %eax
	jne	.LBB112_73
.LBB112_603:
	movl	$110, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_605
# %bb.604:
	movzbl	796(%r14), %eax
	addq	%rax, %rax
	movq	%rax, (%rsp)
	movl	$.L.str.175.1326, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$110, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_605:
	cmpq	$0, 192(%r14)
	je	.LBB112_608
# %bb.606:
	movl	$30117, %edi            # imm = 0x75A5
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_608
# %bb.607:
	movq	192(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.176.1327, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$30117, %r9d            # imm = 0x75A5
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_608:
	movl	$113, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_610
# %bb.609:
	movq	864(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.177.1328, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$113, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_610:
	cmpb	$0, 985(%r14)
	je	.LBB112_613
# %bb.611:
	movl	$119, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_620
# %bb.612:
	movl	$.L.str.178.1329, %edx
	movl	$setopt_nv_CURLUSESSL, %r8d
	movl	$3, %r9d
	jmp	.LBB112_619
.LBB112_613:
	cmpb	$0, 984(%r14)
	je	.LBB112_616
# %bb.614:
	movl	$119, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_620
# %bb.615:
	movl	$.L.str.178.1329, %edx
	movl	$setopt_nv_CURLUSESSL, %r8d
	movl	$1, %r9d
	jmp	.LBB112_619
.LBB112_616:
	cmpb	$0, 986(%r14)
	je	.LBB112_620
# %bb.617:
	movl	$119, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_620
# %bb.618:
	movl	$.L.str.178.1329, %edx
	movl	$setopt_nv_CURLUSESSL, %r8d
	movl	$2, %r9d
.LBB112_619:
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$119, %ecx
	callq	tool_setopt_enum
	movl	%eax, %r13d
.LBB112_620:
	cmpb	$0, 987(%r14)
	je	.LBB112_623
# %bb.621:
	movl	$154, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_623
# %bb.622:
	movslq	988(%r14), %r9
	movl	$.L.str.179.1330, %edx
	movl	$setopt_nv_CURLFTPSSL_CCC, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$154, %ecx
	callq	tool_setopt_enum
	movl	%eax, %r13d
.LBB112_623:
	cmpl	$0, 1000(%r14)
	je	.LBB112_626
# %bb.624:
	movl	$180, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_626
# %bb.625:
	movl	1000(%r14), %eax
	movl	%eax, (%rsp)
	movl	$.L.str.180.1331, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$180, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_626:
	cmpq	$0, 1008(%r14)
	je	.LBB112_629
# %bb.627:
	movl	$267, %edi              # imm = 0x10B
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_629
# %bb.628:
	movq	1008(%r14), %r9
	movl	$.L.str.181.1332, %edx
	movl	$setopt_nv_CURLAUTH, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$267, %ecx              # imm = 0x10B
	callq	tool_setopt_bitmask
	movl	%eax, %r13d
.LBB112_629:
	cmpq	$0, 1016(%r14)
	je	.LBB112_632
# %bb.630:
	movl	$10235, %edi            # imm = 0x27FB
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_632
# %bb.631:
	movq	1016(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.182.1333, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10235, %r9d            # imm = 0x27FB
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_632:
	cmpq	$0, 1024(%r14)
	je	.LBB112_635
# %bb.633:
	movl	$10236, %edi            # imm = 0x27FC
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_635
# %bb.634:
	movq	1024(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.183.1334, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10236, %r9d            # imm = 0x27FC
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_635:
	movl	$10134, %edi            # imm = 0x2796
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_637
# %bb.636:
	movq	1072(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.184.1335, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10134, %r9d            # imm = 0x2796
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_637:
	movl	$136, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_639
# %bb.638:
	movzbl	1105(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.185.1336, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$136, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_639:
	movl	$137, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_641
# %bb.640:
	movzbl	797(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.186.1337, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$137, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_641:
	movl	$138, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_643
# %bb.642:
	movslq	1088(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.187.1338, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$138, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_643:
	cmpq	$0, 232(%r14)
	je	.LBB112_648
# %bb.644:
	movl	$139, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_646
# %bb.645:
	movq	232(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.188.1339, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$139, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_646:
	movl	$140, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_648
# %bb.647:
	movq	240(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.189.1340, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$140, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_648:
	movl	$10147, %edi            # imm = 0x27A3
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_650
# %bb.649:
	movq	1080(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.190.1341, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10147, %r9d            # imm = 0x27A3
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_650:
	cmpb	$0, 1106(%r14)
	je	.LBB112_653
# %bb.651:
	movl	$150, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_653
# %bb.652:
	movq	$0, (%rsp)
	movl	$.L.str.191.1342, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$150, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_653:
	cmpb	$0, 1107(%r14)
	je	.LBB112_658
# %bb.654:
	movl	$158, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_656
# %bb.655:
	movq	$0, (%rsp)
	movl	$.L.str.192.1343, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$158, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_656:
	movl	$157, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_658
# %bb.657:
	movq	$0, (%rsp)
	movl	$.L.str.193.1344, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$157, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_658:
	movb	1111(%r14), %bpl
	movl	$213, %edi
	callq	tool_setopt_skip
	testb	%bpl, %bpl
	je	.LBB112_661
# %bb.659:
	testb	%al, %al
	jne	.LBB112_669
# %bb.660:
	movq	$0, (%rsp)
	movl	$.L.str.194.1345, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$213, %r9d
	jmp	.LBB112_668
.LBB112_661:
	testb	%al, %al
	jne	.LBB112_663
# %bb.662:
	movq	$1, (%rsp)
	movl	$.L.str.194.1345, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$213, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_663:
	cmpq	$0, 1112(%r14)
	je	.LBB112_669
# %bb.664:
	movl	$214, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_666
# %bb.665:
	movq	1112(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.195.1346, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$214, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_666:
	movl	$215, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_669
# %bb.667:
	movq	1112(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.196.1347, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$215, %r9d
.LBB112_668:
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_669:
	cmpq	$0, 1096(%r14)
	je	.LBB112_672
# %bb.670:
	movl	$178, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_672
# %bb.671:
	movq	1096(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.197.1348, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$178, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_672:
	cmpq	$0, 408(%r14)
	je	.LBB112_675
# %bb.673:
	movl	$10186, %edi            # imm = 0x27CA
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_675
# %bb.674:
	movq	408(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.198.1349, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10186, %r9d            # imm = 0x27CA
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_675:
	cmpq	$0, 416(%r14)
	je	.LBB112_678
# %bb.676:
	movl	$10187, %edi            # imm = 0x27CB
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_678
# %bb.677:
	movq	416(%r14), %r8
	movl	$.L.str.199.1350, %edx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$10187, %ecx            # imm = 0x27CB
	callq	tool_setopt_slist
	movl	%eax, %r13d
.LBB112_678:
	movl	$290, %edi              # imm = 0x122
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_680
# %bb.679:
	movzbl	432(%r14), %eax
	movq	%rax, (%rsp)
	movl	$.L.str.200.1351, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$290, %r9d              # imm = 0x122
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_680:
	cmpb	$0, 92(%r14)
	je	.LBB112_683
# %bb.681:
	movl	$188, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_683
# %bb.682:
	movq	$1, (%rsp)
	movl	$.L.str.201.1352, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$188, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_683:
	cmpq	$0, 872(%r14)
	je	.LBB112_686
# %bb.684:
	movl	$159, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_686
# %bb.685:
	movq	872(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.202.1353, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$159, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_686:
	cmpb	$0, 104(%r14)
	je	.LBB112_689
# %bb.687:
	movl	$181, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_689
# %bb.688:
	movq	96(%r14), %r9
	movl	$.L.str.203.1354, %edx
	movl	$setopt_nv_CURLPROTO, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$181, %ecx
	callq	tool_setopt_flags
	movl	%eax, %r13d
.LBB112_689:
	cmpb	$0, 120(%r14)
	je	.LBB112_692
# %bb.690:
	movl	$182, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_692
# %bb.691:
	movq	112(%r14), %r9
	movl	$.L.str.204.1355, %edx
	movl	$setopt_nv_CURLPROTO, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$182, %ecx
	callq	tool_setopt_flags
	movl	%eax, %r13d
.LBB112_692:
	movq	32(%rsp), %rcx          # 8-byte Reload
	leaq	224(%rcx), %rax
	leaq	184(%rcx), %rdx
	addq	$264, %rcx              # imm = 0x108
	cmpb	$0, 1120(%r14)
	je	.LBB112_694
# %bb.693:
	movb	$1, %sil
	testb	$4, 32(%r15)
	jne	.LBB112_695
.LBB112_694:
	xorl	%esi, %esi
.LBB112_695:
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%sil, 360(%rdi)
	movq	%rdx, 336(%rdi)
	movq	%rax, 344(%rdi)
	movq	%rcx, 352(%rdi)
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	%rax, 320(%rdi)
	movq	%r14, 328(%rdi)
	movl	$20079, %edi            # imm = 0x4E6F
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_697
# %bb.696:
	movq	$tool_header_cb, (%rsp)
	movl	$.L.str.205.1356, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$20079, %r9d            # imm = 0x4E6F
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_697:
	movl	$10029, %edi            # imm = 0x272D
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_699
# %bb.698:
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	movl	$.L.str.206.1357, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10029, %r9d            # imm = 0x272D
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_699:
	cmpq	$0, 944(%r14)
	je	.LBB112_702
# %bb.700:
	movl	$10203, %edi            # imm = 0x27DB
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_702
# %bb.701:
	movq	944(%r14), %r8
	movl	$.L.str.207.1358, %edx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$10203, %ecx            # imm = 0x27DB
	callq	tool_setopt_slist
	movl	%eax, %r13d
.LBB112_702:
	cmpq	$0, 952(%r14)
	je	.LBB112_705
# %bb.703:
	movl	$10243, %edi            # imm = 0x2803
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_705
# %bb.704:
	movq	952(%r14), %r8
	movl	$.L.str.208.1359, %edx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	$10243, %ecx            # imm = 0x2803
	callq	tool_setopt_slist
	movl	%eax, %r13d
.LBB112_705:
	movq	curlinfo(%rip), %rax
	testb	$64, 33(%rax)
	je	.LBB112_724
# %bb.706:
	cmpq	$0, 328(%r14)
	je	.LBB112_709
# %bb.707:
	movl	$10204, %edi            # imm = 0x27DC
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_709
# %bb.708:
	movq	328(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.209.1360, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10204, %r9d            # imm = 0x27DC
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_709:
	cmpq	$0, 336(%r14)
	je	.LBB112_712
# %bb.710:
	movl	$10205, %edi            # imm = 0x27DD
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_712
# %bb.711:
	movq	336(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.210.1361, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10205, %r9d            # imm = 0x27DD
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_712:
	cmpq	$0, 344(%r14)
	je	.LBB112_715
# %bb.713:
	movl	$10206, %edi            # imm = 0x27DE
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_715
# %bb.714:
	movq	344(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.211.1362, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10206, %r9d            # imm = 0x27DE
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_715:
	cmpq	$0, 352(%r14)
	je	.LBB112_718
# %bb.716:
	movl	$10251, %edi            # imm = 0x280B
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_718
# %bb.717:
	movq	352(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.212.1363, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10251, %r9d            # imm = 0x280B
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_718:
	cmpq	$0, 360(%r14)
	je	.LBB112_721
# %bb.719:
	movl	$10252, %edi            # imm = 0x280C
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_721
# %bb.720:
	movq	360(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.213.1364, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10252, %r9d            # imm = 0x280C
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_721:
	cmpq	$0, 368(%r14)
	je	.LBB112_724
# %bb.722:
	movl	$10253, %edi            # imm = 0x280D
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_724
# %bb.723:
	movq	368(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.214.1365, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10253, %r9d            # imm = 0x280D
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_724:
	cmpq	$0, 1136(%r14)
	je	.LBB112_727
# %bb.725:
	movl	$210, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_727
# %bb.726:
	movq	1136(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.215.1366, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$210, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_727:
	cmpq	$0, 424(%r14)
	je	.LBB112_730
# %bb.728:
	movl	$10217, %edi            # imm = 0x27E9
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_730
# %bb.729:
	movq	424(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.216.1367, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10217, %r9d            # imm = 0x27E9
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_730:
	cmpq	$0, 440(%r14)
	je	.LBB112_733
# %bb.731:
	movl	$10289, %edi            # imm = 0x2831
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_733
# %bb.732:
	movq	440(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.217.1368, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10289, %r9d            # imm = 0x2831
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_733:
	cmpb	$0, 448(%r14)
	je	.LBB112_736
# %bb.734:
	movl	$218, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_736
# %bb.735:
	movq	$1, (%rsp)
	movl	$.L.str.218.1369, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$218, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_736:
	cmpb	$0, 1160(%r14)
	je	.LBB112_739
# %bb.737:
	movl	$225, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_739
# %bb.738:
	movq	$0, (%rsp)
	movl	$.L.str.219.1370, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$225, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_739:
	cmpb	$0, 1161(%r14)
	je	.LBB112_742
# %bb.740:
	movl	$226, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_742
# %bb.741:
	movq	$0, (%rsp)
	movl	$.L.str.220.1371, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$226, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_742:
	cmpq	$0, 1168(%r14)
	je	.LBB112_749
# %bb.743:
	cmpb	$0, 1176(%r14)
	je	.LBB112_746
# %bb.744:
	movl	$10264, %edi            # imm = 0x2818
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_749
# %bb.745:
	movq	1168(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.221.1372, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10264, %r9d            # imm = 0x2818
	jmp	.LBB112_748
.LBB112_746:
	movl	$10231, %edi            # imm = 0x27F7
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_749
# %bb.747:
	movq	1168(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.222.1373, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10231, %r9d            # imm = 0x27F7
.LBB112_748:
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_749:
	cmpq	$0, 128(%r14)
	je	.LBB112_752
# %bb.750:
	movl	$10238, %edi            # imm = 0x27FE
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_752
# %bb.751:
	movq	128(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.223.1374, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10238, %r9d            # imm = 0x27FE
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_752:
	movsd	1184(%r14), %xmm0       # xmm0 = mem[0],zero
	pxor	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB112_755
# %bb.753:
	movl	$227, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_755
# %bb.754:
	movsd	1184(%r14), %xmm0       # xmm0 = mem[0],zero
	mulsd	.LCPI112_0(%rip), %xmm0
	cvttsd2si	%xmm0, %rax
	movq	%rax, (%rsp)
	movl	$.L.str.224.1375, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$227, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_755:
	cmpb	$0, 1104(%r14)
	je	.LBB112_758
# %bb.756:
	movl	$242, %edi
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_758
# %bb.757:
	movq	$1, (%rsp)
	movl	$.L.str.225.1376, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$242, %r9d
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_758:
	cmpq	$200, 1208(%r14)
	je	.LBB112_761
# %bb.759:
	movl	$271, %edi              # imm = 0x10F
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_761
# %bb.760:
	movq	1208(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.226.1377, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$271, %r9d              # imm = 0x10F
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_761:
	cmpb	$0, 1216(%r14)
	je	.LBB112_764
# %bb.762:
	movl	$274, %edi              # imm = 0x112
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_764
# %bb.763:
	movq	$1, (%rsp)
	movl	$.L.str.227.1378, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$274, %r9d              # imm = 0x112
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_764:
	cmpb	$0, 1217(%r14)
	je	.LBB112_767
# %bb.765:
	movl	$278, %edi              # imm = 0x116
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_767
# %bb.766:
	movq	$1, (%rsp)
	movl	$.L.str.228.1379, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$0, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$278, %r9d              # imm = 0x116
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_767:
	cmpq	$0, 56(%r14)
	je	.LBB112_770
# %bb.768:
	movl	$10287, %edi            # imm = 0x282F
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_770
# %bb.769:
	movq	56(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.229.1380, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10287, %r9d            # imm = 0x282F
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_770:
	cmpq	$0, 64(%r14)
	je	.LBB112_773
# %bb.771:
	movl	$10300, %edi            # imm = 0x283C
	callq	tool_setopt_skip
	testb	%al, %al
	jne	.LBB112_773
# %bb.772:
	movq	64(%r14), %rax
	movq	%rax, (%rsp)
	movl	$.L.str.230.1381, %r8d
	movq	24(%rsp), %rdi          # 8-byte Reload
	movl	$1, %esi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %rcx
	movl	$10300, %r9d            # imm = 0x283C
	xorl	%eax, %eax
	callq	tool_setopt
	movl	%eax, %r13d
.LBB112_773:
	movq	1056(%r14), %rax
	imulq	$1000, %rax, %rcx       # imm = 0x3E8
	testq	%rax, %rax
	movl	$1000, %eax             # imm = 0x3E8
	cmovneq	%rcx, %rax
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	%rax, 40(%rbx)
	movq	1040(%r14), %rcx
	movq	%rcx, 32(%rbx)
	movq	%rax, 48(%rbx)
	callq	tvnow
	movq	%rax, 56(%rbx)
	movq	%rdx, 64(%rbx)
	movq	1328(%r14), %rax
	incq	%rax
	movq	%rax, 1328(%r14)
	cmpq	64(%rsp), %rax          # 8-byte Folded Reload
	jb	.LBB112_775
# %bb.774:
	xorpd	%xmm0, %xmm0
	movq	88(%rsp), %rax          # 8-byte Reload
	movupd	%xmm0, (%rax)
	movq	1272(%r14), %rdi
	callq	glob_cleanup
	xorl	%ebp, %ebp
	movq	%rbp, 1272(%r14)
	incq	1312(%r14)
	movq	1296(%r14), %rdi
	callq	myFree
	movq	%rbp, 1296(%r14)
.LBB112_775:
	movl	%r13d, %edx
	jmp	.LBB112_73
.LBB112_776:
	movq	16(%rsp), %r13          # 8-byte Reload
	movq	24(%rsp), %rbp          # 8-byte Reload
	jmp	.LBB112_246
.Lfunc_end112:
	.size	single_transfer, .Lfunc_end112-single_transfer
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4               # -- Begin function glob_url
.LCPI113_0:
	.zero	16
	.text
	.globl	glob_url
	.type	glob_url,@function
glob_url:                               # @glob_url
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$616, %rsp              # imm = 0x268
	.cfi_def_cfa_offset 672
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rcx, %r12
	movq	%rdx, %r15
	movq	%rdi, 88(%rsp)          # 8-byte Spill
	movq	$0, (%rdi)
	movq	%rsi, 72(%rsp)          # 8-byte Spill
	movq	%rsi, %rdi
	callq	strlen
	movq	%rax, %rbx
	leaq	1(%rax), %rdi
	callq	myMalloc
	movl	$27, %r14d
	testq	%rax, %rax
	je	.LBB113_147
# %bb.1:
	movq	%rax, %rbp
	movb	$0, (%rax)
	movl	$1, %eax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	$1, %edi
	movl	$4848, %esi             # imm = 0x12F0
	callq	calloc
	testq	%rax, %rax
	je	.LBB113_143
# %bb.2:
	movq	%r12, 56(%rsp)          # 8-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%rbx, 4808(%rax)
	movq	%rbp, 4816(%rax)
	movq	72(%rsp), %r12          # 8-byte Reload
	movl	$1, %r15d
	xorl	%r14d, %r14d
	movl	$0, 36(%rsp)            # 4-byte Folded Spill
	movq	%rax, %rcx
	movq	%rax, (%rsp)            # 8-byte Spill
.LBB113_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_6 Depth 2
                                        #     Child Loop BB113_34 Depth 2
                                        #     Child Loop BB113_73 Depth 2
                                        #     Child Loop BB113_87 Depth 2
	testl	%r14d, %r14d
	jne	.LBB113_148
# %bb.4:                                #   in Loop: Header=BB113_3 Depth=1
	cmpb	$0, (%r12)
	je	.LBB113_148
# %bb.5:                                #   in Loop: Header=BB113_3 Depth=1
	movq	4816(%rcx), %rbx
	movq	%r15, 8(%rsp)           # 8-byte Spill
	xorl	%r14d, %r14d
.LBB113_6:                              #   Parent Loop BB113_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	(%r12), %al
	cmpb	$91, %al
	jne	.LBB113_14
# %bb.7:                                #   in Loop: Header=BB113_6 Depth=2
	movq	%r12, %rdi
	movl	$93, %esi
	callq	strchr
	testq	%rax, %rax
	je	.LBB113_11
# %bb.8:                                #   in Loop: Header=BB113_6 Depth=2
	movq	%rax, %rbp
	subq	%r12, %rbp
	incq	%rbp
	cmpq	$127, %rbp
	ja	.LBB113_11
# %bb.9:                                #   in Loop: Header=BB113_6 Depth=2
	callq	curl_url
	testq	%rax, %rax
	je	.LBB113_11
# %bb.10:                               #   in Loop: Header=BB113_6 Depth=2
	movq	%rax, %r13
	leaq	96(%rsp), %r15
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%rbp, %rdx
	callq	memcpy
	movb	$0, 96(%rsp,%rbp)
	movq	%r13, %rdi
	xorl	%esi, %esi
	movq	%r15, %rdx
	movl	$512, %ecx              # imm = 0x200
	callq	curl_url_set
	movl	%eax, %r15d
	movq	%r13, %rdi
	callq	curl_url_cleanup
	testl	%r15d, %r15d
	je	.LBB113_13
.LBB113_11:                             #   in Loop: Header=BB113_6 Depth=2
	movl	$2, %ebp
	cmpb	$93, 1(%r12)
	jne	.LBB113_26
.LBB113_12:                             #   in Loop: Header=BB113_6 Depth=2
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rbp, %rdx
	callq	memcpy
	addq	%rbp, %rbx
	addq	%rbp, %r12
	addq	%rbp, %r14
	jmp	.LBB113_6
.LBB113_13:                             #   in Loop: Header=BB113_6 Depth=2
	testq	%rbp, %rbp
	jne	.LBB113_12
	jmp	.LBB113_26
.LBB113_14:                             #   in Loop: Header=BB113_6 Depth=2
	cmpb	$92, %al
	jle	.LBB113_18
# %bb.15:                               #   in Loop: Header=BB113_6 Depth=2
	cmpb	$93, %al
	je	.LBB113_137
# %bb.16:                               #   in Loop: Header=BB113_6 Depth=2
	cmpb	$123, %al
	je	.LBB113_26
# %bb.17:                               #   in Loop: Header=BB113_6 Depth=2
	cmpb	$125, %al
	je	.LBB113_137
	jmp	.LBB113_24
.LBB113_18:                             #   in Loop: Header=BB113_6 Depth=2
	testb	%al, %al
	je	.LBB113_26
# %bb.19:                               #   in Loop: Header=BB113_6 Depth=2
	cmpb	$92, %al
	jne	.LBB113_24
# %bb.20:                               #   in Loop: Header=BB113_6 Depth=2
	movb	1(%r12), %al
	leal	-91(%rax), %ecx
	cmpb	$34, %cl
	ja	.LBB113_23
# %bb.21:                               #   in Loop: Header=BB113_6 Depth=2
	movzbl	%cl, %ecx
	movabsq	$21474836485, %rdx      # imm = 0x500000005
	btq	%rcx, %rdx
	jae	.LBB113_23
# %bb.22:                               #   in Loop: Header=BB113_6 Depth=2
	incq	%r12
	movq	8(%rsp), %rcx           # 8-byte Reload
	incq	%rcx
	jmp	.LBB113_25
.LBB113_23:                             #   in Loop: Header=BB113_6 Depth=2
	movb	$92, %al
.LBB113_24:                             #   in Loop: Header=BB113_6 Depth=2
	movq	8(%rsp), %rcx           # 8-byte Reload
.LBB113_25:                             #   in Loop: Header=BB113_6 Depth=2
	incq	%r12
	movb	%al, (%rbx)
	incq	%rbx
	incq	%rcx
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	incq	%r14
	jmp	.LBB113_6
.LBB113_26:                             #   in Loop: Header=BB113_3 Depth=1
	testq	%r14, %r14
	je	.LBB113_31
# %bb.27:                               #   in Loop: Header=BB113_3 Depth=1
	movb	$0, (%rbx)
	movq	(%rsp), %rbp            # 8-byte Reload
	movq	4800(%rbp), %rax
	movq	4816(%rbp), %r13
	leaq	(%rax,%rax,2), %rbx
	shlq	$4, %rbx
	movabsq	$-4294967295, %rax      # imm = 0xFFFFFFFF00000001
	movq	%rax, (%rbp,%rbx)
	movq	$1, 16(%rbp,%rbx)
	movl	$8, %edi
	callq	myMalloc
	movq	%rax, 8(%rbp,%rbx)
	testq	%rax, %rax
	je	.LBB113_58
# %bb.28:                               #   in Loop: Header=BB113_3 Depth=1
	movq	%rax, %r15
	leaq	1(%r14), %rdi
	callq	myMalloc
	movq	%rax, (%r15)
	testq	%rax, %rax
	je	.LBB113_59
# %bb.29:                               #   in Loop: Header=BB113_3 Depth=1
	movq	%rax, %rbx
	movq	%rax, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	callq	memcpy
	movb	$0, (%rbx,%r14)
	xorl	%r14d, %r14d
	movq	8(%rsp), %r15           # 8-byte Reload
.LBB113_30:                             #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	jmp	.LBB113_62
.LBB113_31:                             #   in Loop: Header=BB113_3 Depth=1
	movsbl	(%r12), %eax
	xorl	%r14d, %r14d
	cmpl	$91, %eax
	je	.LBB113_63
# %bb.32:                               #   in Loop: Header=BB113_3 Depth=1
	cmpl	$123, %eax
	movq	(%rsp), %rcx            # 8-byte Reload
	jne	.LBB113_61
# %bb.33:                               #   in Loop: Header=BB113_3 Depth=1
	incq	%r12
	movq	4800(%rcx), %rax
	movq	4816(%rcx), %rsi
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	$1, (%rcx,%rax)
	leaq	(%rcx,%rax), %rbx
	addq	$8, %rbx
	xorps	%xmm0, %xmm0
	movups	%xmm0, 8(%rcx,%rax)
	movl	36(%rsp), %edx          # 4-byte Reload
	movl	%edx, 4(%rcx,%rax)
	incl	%edx
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	%r12, %rbp
.LBB113_34:                             #   Parent Loop BB113_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	1(%rcx), %r15
	movb	(%rbp), %al
	movsbl	%al, %edx
	cmpl	$91, %edx
	jle	.LBB113_38
# %bb.35:                               #   in Loop: Header=BB113_34 Depth=2
	cmpl	$122, %edx
	jg	.LBB113_41
# %bb.36:                               #   in Loop: Header=BB113_34 Depth=2
	cmpl	$92, %edx
	jne	.LBB113_54
# %bb.37:                               #   in Loop: Header=BB113_34 Depth=2
	leaq	1(%rbp), %rdx
	movzbl	1(%rbp), %edi
	addq	$2, %rcx
	testb	%dil, %dil
	cmovneq	%rcx, %r15
	movzbl	%al, %eax
	cmovnel	%edi, %eax
	cmovneq	%rdx, %rbp
	jmp	.LBB113_56
.LBB113_38:                             #   in Loop: Header=BB113_34 Depth=2
	cmpl	$44, %edx
	je	.LBB113_47
# %bb.39:                               #   in Loop: Header=BB113_34 Depth=2
	testl	%edx, %edx
	je	.LBB113_83
# %bb.40:                               #   in Loop: Header=BB113_34 Depth=2
	cmpl	$91, %edx
	jne	.LBB113_56
	jmp	.LBB113_79
.LBB113_41:                             #   in Loop: Header=BB113_34 Depth=2
	cmpl	$125, %edx
	jne	.LBB113_55
# %bb.42:                               #   in Loop: Header=BB113_34 Depth=2
	cmpq	%rbp, %r12
	je	.LBB113_93
# %bb.43:                               #   in Loop: Header=BB113_34 Depth=2
	movslq	8(%rbx), %rcx
	incq	%rcx
	movq	%rcx, %rax
	mulq	24(%rsp)                # 8-byte Folded Reload
	seto	%dl
	testl	%ecx, %ecx
	je	.LBB113_45
# %bb.44:                               #   in Loop: Header=BB113_34 Depth=2
	testb	%dl, %dl
	je	.LBB113_46
	jmp	.LBB113_96
.LBB113_45:                             #   in Loop: Header=BB113_34 Depth=2
	xorl	%eax, %eax
.LBB113_46:                             #   in Loop: Header=BB113_34 Depth=2
	movq	%rax, 24(%rsp)          # 8-byte Spill
.LBB113_47:                             #   in Loop: Header=BB113_34 Depth=2
	movb	$0, (%rsi)
	movq	(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB113_50
# %bb.48:                               #   in Loop: Header=BB113_34 Depth=2
	movslq	8(%rbx), %rax
	leaq	8(,%rax,8), %rsi
	callq	realloc
	testq	%rax, %rax
	je	.LBB113_77
# %bb.49:                               #   in Loop: Header=BB113_34 Depth=2
	movq	%rax, (%rbx)
	jmp	.LBB113_51
.LBB113_50:                             #   in Loop: Header=BB113_34 Depth=2
	movl	$8, %edi
	callq	myMalloc
	movq	%rax, (%rbx)
	testq	%rax, %rax
	je	.LBB113_77
.LBB113_51:                             #   in Loop: Header=BB113_34 Depth=2
	movq	(%rsp), %rax            # 8-byte Reload
	movq	4816(%rax), %rdi
	callq	strdup
	movq	(%rbx), %rcx
	movslq	8(%rbx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	(%rbx), %rcx
	movslq	8(%rbx), %rax
	cmpq	$0, (%rcx,%rax,8)
	je	.LBB113_77
# %bb.52:                               #   in Loop: Header=BB113_34 Depth=2
	incl	%eax
	movl	%eax, 8(%rbx)
	cmpb	$125, (%rbp)
	je	.LBB113_80
# %bb.53:                               #   in Loop: Header=BB113_34 Depth=2
	movq	(%rsp), %rax            # 8-byte Reload
	movq	4816(%rax), %rsi
	jmp	.LBB113_57
.LBB113_54:                             #   in Loop: Header=BB113_34 Depth=2
	cmpl	$93, %edx
	jne	.LBB113_56
	jmp	.LBB113_84
.LBB113_55:                             #   in Loop: Header=BB113_34 Depth=2
	cmpl	$123, %edx
	je	.LBB113_79
.LBB113_56:                             #   in Loop: Header=BB113_34 Depth=2
	movb	%al, (%rsi)
	incq	%rsi
.LBB113_57:                             #   in Loop: Header=BB113_34 Depth=2
	incq	%rbp
	movq	%r15, %rcx
	jmp	.LBB113_34
.LBB113_58:                             #   in Loop: Header=BB113_3 Depth=1
	movq	%rbp, %rcx
	jmp	.LBB113_60
.LBB113_59:                             #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
.LBB113_60:                             #   in Loop: Header=BB113_3 Depth=1
	movq	$.L.str.9.1704, 4832(%rcx)
	movq	$0, 4840(%rcx)
	movl	$27, %r14d
.LBB113_61:                             #   in Loop: Header=BB113_3 Depth=1
	movq	8(%rsp), %r15           # 8-byte Reload
.LBB113_62:                             #   in Loop: Header=BB113_3 Depth=1
	movq	4800(%rcx), %rax
	incq	%rax
	movq	%rax, 4800(%rcx)
	cmpq	$99, %rax
	jbe	.LBB113_3
	jmp	.LBB113_150
.LBB113_63:                             #   in Loop: Header=BB113_3 Depth=1
	leaq	1(%r12), %r13
	incq	8(%rsp)                 # 8-byte Folded Spill
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	4800(%rcx), %rax
	leaq	(%rax,%rax,2), %rbx
	shlq	$4, %rbx
	leaq	(%rcx,%rbx), %rbp
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, 4(%rcx,%rbx)
	incl	%eax
	movl	%eax, 36(%rsp)          # 4-byte Spill
	movzbl	1(%r12), %edi
	callq	Curl_isalpha
	testl	%eax, %eax
	je	.LBB113_69
# %bb.64:                               #   in Loop: Header=BB113_3 Depth=1
	movl	$2, (%rbp)
	movl	$.L.str.15.1710, %esi
	movq	%r13, %rdi
	leaq	23(%rsp), %rdx
	leaq	22(%rsp), %rcx
	leaq	21(%rsp), %r8
	xorl	%eax, %eax
	callq	__isoc99_sscanf
	movl	$1, %ebp
	cmpl	$3, %eax
	jne	.LBB113_78
# %bb.65:                               #   in Loop: Header=BB113_3 Depth=1
	movb	21(%rsp), %cl
	cmpb	$93, %cl
	je	.LBB113_82
# %bb.66:                               #   in Loop: Header=BB113_3 Depth=1
	xorl	%eax, %eax
	movq	%r13, %rdi
	cmpb	$58, %cl
	jne	.LBB113_100
# %bb.67:                               #   in Loop: Header=BB113_3 Depth=1
	callq	__errno_location
	movq	%rax, %r15
	xorl	%eax, %eax
	movl	%eax, (%r15)
	addq	$5, %r12
	movq	%r12, %rdi
	leaq	96(%rsp), %rsi
	movl	$10, %edx
	callq	strtoul
	movq	%rax, %rbp
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	cmpl	%eax, (%r15)
	je	.LBB113_97
.LBB113_68:                             #   in Loop: Header=BB113_3 Depth=1
	movq	%r13, %rdi
	xorl	%ebp, %ebp
	jmp	.LBB113_99
.LBB113_69:                             #   in Loop: Header=BB113_3 Depth=1
	movzbl	(%r13), %edi
	callq	Curl_isdigit
	testl	%eax, %eax
	je	.LBB113_81
# %bb.70:                               #   in Loop: Header=BB113_3 Depth=1
	movl	$3, (%rbp)
	movq	(%rsp), %rax            # 8-byte Reload
	movl	$0, 24(%rax,%rbx)
	cmpb	$48, (%r13)
	jne	.LBB113_74
# %bb.71:                               #   in Loop: Header=BB113_3 Depth=1
	movl	$48, %edi
	callq	Curl_isdigit
	testl	%eax, %eax
	je	.LBB113_74
# %bb.72:                               # %.preheader1
                                        #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rax            # 8-byte Reload
	leaq	(%rax,%rbx), %rbp
	addq	$24, %rbp
	addq	$2, %r12
.LBB113_73:                             #   Parent Loop BB113_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incl	(%rbp)
	movzbl	(%r12), %edi
	callq	Curl_isdigit
	incq	%r12
	testl	%eax, %eax
	jne	.LBB113_73
.LBB113_74:                             #   in Loop: Header=BB113_3 Depth=1
	callq	__errno_location
	movq	%rax, %r15
	xorl	%ebp, %ebp
	movl	%ebp, (%rax)
	movq	%r13, %rdi
	leaq	96(%rsp), %r12
	movq	%r12, %rsi
	movl	$10, %edx
	callq	strtoul
	cmpl	%ebp, (%r15)
	je	.LBB113_85
.LBB113_75:                             #   in Loop: Header=BB113_3 Depth=1
	movq	$0, 96(%rsp)
	movq	%r13, %rbp
.LBB113_76:                             #   in Loop: Header=BB113_3 Depth=1
	movq	8(%rsp), %r15           # 8-byte Reload
	subq	%r13, %r15
	addq	%rbp, %r15
	jmp	.LBB113_111
.LBB113_77:                             #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	$.L.str.9.1704, 4832(%rcx)
	movq	$0, 4840(%rcx)
	movl	$27, %r14d
	jmp	.LBB113_62
.LBB113_78:                             #   in Loop: Header=BB113_3 Depth=1
	movq	%r13, %rdi
	jmp	.LBB113_100
.LBB113_79:                             #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	$.L.str.11.1706, 4832(%rcx)
	jmp	.LBB113_94
.LBB113_80:                             #   in Loop: Header=BB113_3 Depth=1
	incq	%rbp
	movq	%rbp, %r12
	jmp	.LBB113_30
.LBB113_81:                             #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	$.L.str.17.1712, 4832(%rcx)
	movq	8(%rsp), %r15           # 8-byte Reload
	jmp	.LBB113_113
.LBB113_82:                             #   in Loop: Header=BB113_3 Depth=1
	addq	$5, %r12
	movl	$3, %eax
	movq	%r12, %rdi
	jmp	.LBB113_100
.LBB113_83:                             #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	$.L.str.10.1705, 4832(%rcx)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, 4840(%rcx)
	jmp	.LBB113_95
.LBB113_84:                             #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	$.L.str.14.1709, 4832(%rcx)
	jmp	.LBB113_94
.LBB113_85:                             #   in Loop: Header=BB113_3 Depth=1
	movq	96(%rsp), %rbp
	cmpq	%r13, %rbp
	je	.LBB113_75
# %bb.86:                               #   in Loop: Header=BB113_3 Depth=1
	cmpb	$45, (%rbp)
	jne	.LBB113_75
.LBB113_87:                             # %.preheader
                                        #   Parent Loop BB113_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%rbp
	movzbl	(%rbp), %edi
	cmpl	$32, %edi
	je	.LBB113_87
# %bb.88:                               #   in Loop: Header=BB113_87 Depth=2
	cmpb	$9, %dil
	je	.LBB113_87
# %bb.89:                               #   in Loop: Header=BB113_3 Depth=1
	movq	%rax, 48(%rsp)          # 8-byte Spill
	callq	Curl_isdigit
	testl	%eax, %eax
	je	.LBB113_92
# %bb.90:                               #   in Loop: Header=BB113_3 Depth=1
	movq	%r13, 40(%rsp)          # 8-byte Spill
	xorl	%r13d, %r13d
	movl	%r13d, (%r15)
	movq	%rbp, %rdi
	movq	%r12, %rsi
	movl	$10, %edx
	callq	strtoul
	cmpl	%r13d, (%r15)
	je	.LBB113_117
# %bb.91:                               #   in Loop: Header=BB113_3 Depth=1
	movq	$0, 96(%rsp)
	movq	40(%rsp), %r13          # 8-byte Reload
.LBB113_92:                             #   in Loop: Header=BB113_3 Depth=1
	movq	$0, 96(%rsp)
	jmp	.LBB113_76
.LBB113_93:                             #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	$.L.str.12.1707, 4832(%rcx)
.LBB113_94:                             #   in Loop: Header=BB113_3 Depth=1
	movq	%r15, 4840(%rcx)
.LBB113_95:                             #   in Loop: Header=BB113_3 Depth=1
	movl	$3, %r14d
	jmp	.LBB113_62
.LBB113_96:                             #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	$.L.str.13.1708, 4832(%rcx)
	movq	$0, 4840(%rcx)
	jmp	.LBB113_95
.LBB113_97:                             #   in Loop: Header=BB113_3 Depth=1
	movq	96(%rsp), %rax
	cmpq	%rax, %r12
	je	.LBB113_68
# %bb.98:                               #   in Loop: Header=BB113_3 Depth=1
	cmpb	$93, (%rax)
	leaq	1(%rax), %rdi
	cmovneq	%r13, %rdi
	cmovneq	%rcx, %rbp
.LBB113_99:                             #   in Loop: Header=BB113_3 Depth=1
	movl	$3, %eax
.LBB113_100:                            #   in Loop: Header=BB113_3 Depth=1
	movq	%rdi, %r15
	subq	%r13, %r15
	addq	8(%rsp), %r15           # 8-byte Folded Reload
	cmpl	$3, %eax
	jne	.LBB113_111
# %bb.101:                              #   in Loop: Header=BB113_3 Depth=1
	leaq	-1(%rbp), %rax
	cmpq	$2147483646, %rax       # imm = 0x7FFFFFFE
	ja	.LBB113_111
# %bb.102:                              #   in Loop: Header=BB113_3 Depth=1
	movb	23(%rsp), %r9b
	movb	22(%rsp), %r8b
	cmpq	$1, %rbp
	je	.LBB113_104
# %bb.103:                              #   in Loop: Header=BB113_3 Depth=1
	cmpb	%r9b, %r8b
	je	.LBB113_111
.LBB113_104:                            #   in Loop: Header=BB113_3 Depth=1
	movsbl	%r9b, %edx
	movsbl	%r8b, %eax
	cmpb	%r9b, %r8b
	jne	.LBB113_108
# %bb.105:                              #   in Loop: Header=BB113_3 Depth=1
	subl	%edx, %eax
.LBB113_106:                            #   in Loop: Header=BB113_3 Depth=1
                                        # kill: def $eax killed $eax killed $rax
	cltd
	idivl	%ebp
	movl	%eax, %esi
	leal	1(%rsi), %eax
	cltq
	mulq	24(%rsp)                # 8-byte Folded Reload
	seto	%dl
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%ebp, 12(%rcx,%rbx)
	movb	%r9b, 8(%rcx,%rbx)
	movb	%r9b, 10(%rcx,%rbx)
	movb	%r8b, 9(%rcx,%rbx)
	incl	%esi
	jne	.LBB113_114
# %bb.107:                              #   in Loop: Header=BB113_3 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_116
.LBB113_108:                            #   in Loop: Header=BB113_3 Depth=1
	jl	.LBB113_111
# %bb.109:                              #   in Loop: Header=BB113_3 Depth=1
	subl	%edx, %eax
	cmpl	$25, %eax
	jg	.LBB113_111
# %bb.110:                              #   in Loop: Header=BB113_3 Depth=1
	cmpq	%rax, %rbp
	jbe	.LBB113_106
.LBB113_111:                            #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
.LBB113_112:                            #   in Loop: Header=BB113_3 Depth=1
	movq	$.L.str.16.1711, 4832(%rcx)
.LBB113_113:                            #   in Loop: Header=BB113_3 Depth=1
	movq	%r15, 4840(%rcx)
	movl	$3, %r14d
	movq	%r13, %r12
	jmp	.LBB113_62
.LBB113_114:                            #   in Loop: Header=BB113_3 Depth=1
	testb	%dl, %dl
	je	.LBB113_116
# %bb.115:                              #   in Loop: Header=BB113_3 Depth=1
	movq	$.L.str.13.1708, 4832(%rcx)
	jmp	.LBB113_113
.LBB113_116:                            #   in Loop: Header=BB113_3 Depth=1
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%rdi, %r12
	jmp	.LBB113_62
.LBB113_117:                            #   in Loop: Header=BB113_3 Depth=1
	movq	96(%rsp), %rdx
	movl	$1, %ecx
	cmpb	$58, (%rdx)
	jne	.LBB113_120
# %bb.118:                              #   in Loop: Header=BB113_3 Depth=1
	movq	%rax, 80(%rsp)          # 8-byte Spill
	incq	%rdx
	xorl	%r13d, %r13d
	movl	%r13d, (%r15)
	movq	%rdx, %rbp
	movq	%rdx, %rdi
	movq	%r12, %rsi
	movl	$10, %edx
	callq	strtoul
	cmpl	%r13d, (%r15)
	movq	40(%rsp), %r13          # 8-byte Reload
	je	.LBB113_121
# %bb.119:                              #   in Loop: Header=BB113_3 Depth=1
	movq	$0, 96(%rsp)
	jmp	.LBB113_92
.LBB113_120:                            #   in Loop: Header=BB113_3 Depth=1
	movq	%rdx, %r12
	movq	40(%rsp), %r13          # 8-byte Reload
	jmp	.LBB113_122
.LBB113_121:                            #   in Loop: Header=BB113_3 Depth=1
	movq	%rax, %rcx
	movq	96(%rsp), %r12
	movq	80(%rsp), %rax          # 8-byte Reload
.LBB113_122:                            #   in Loop: Header=BB113_3 Depth=1
	testq	%r12, %r12
	je	.LBB113_92
# %bb.123:                              #   in Loop: Header=BB113_3 Depth=1
	cmpb	$93, (%r12)
	jne	.LBB113_92
# %bb.124:                              #   in Loop: Header=BB113_3 Depth=1
	incq	%r12
	movq	%r12, %r15
	subq	%r13, %r15
	addq	8(%rsp), %r15           # 8-byte Folded Reload
	testq	%rcx, %rcx
	je	.LBB113_111
# %bb.125:                              #   in Loop: Header=BB113_3 Depth=1
	cmpq	48(%rsp), %rax          # 8-byte Folded Reload
	jne	.LBB113_127
# %bb.126:                              #   in Loop: Header=BB113_3 Depth=1
	cmpq	$1, %rcx
	jne	.LBB113_111
.LBB113_127:                            #   in Loop: Header=BB113_3 Depth=1
	movq	%rax, %r8
	subq	48(%rsp), %rax          # 8-byte Folded Reload
	jne	.LBB113_129
# %bb.128:                              #   in Loop: Header=BB113_3 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_131
.LBB113_129:                            #   in Loop: Header=BB113_3 Depth=1
	jb	.LBB113_136
# %bb.130:                              #   in Loop: Header=BB113_3 Depth=1
	cmpq	%rax, %rcx
	ja	.LBB113_136
.LBB113_131:                            #   in Loop: Header=BB113_3 Depth=1
	xorl	%edx, %edx
	divq	%rcx
	movq	%rax, %rsi
	incq	%rax
	mulq	24(%rsp)                # 8-byte Folded Reload
	seto	%dl
	movq	(%rsp), %rdi            # 8-byte Reload
	movq	48(%rsp), %rbp          # 8-byte Reload
	movq	%rbp, 8(%rdi,%rbx)
	movq	%rbp, 32(%rdi,%rbx)
	movq	%r8, 16(%rdi,%rbx)
	movq	%rcx, 40(%rdi,%rbx)
	incq	%rsi
	jne	.LBB113_133
# %bb.132:                              #   in Loop: Header=BB113_3 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_135
.LBB113_133:                            #   in Loop: Header=BB113_3 Depth=1
	testb	%dl, %dl
	je	.LBB113_135
# %bb.134:                              #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	$.L.str.13.1708, 4832(%rcx)
	movq	%r15, 4840(%rcx)
	movl	$3, %r14d
	movq	40(%rsp), %r12          # 8-byte Reload
	jmp	.LBB113_62
.LBB113_135:                            #   in Loop: Header=BB113_3 Depth=1
	movq	%rax, 24(%rsp)          # 8-byte Spill
	jmp	.LBB113_30
.LBB113_136:                            #   in Loop: Header=BB113_3 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	40(%rsp), %r13          # 8-byte Reload
	jmp	.LBB113_112
.LBB113_137:                            # %.loopexit
	movl	$.L.str.7.1713, %eax
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	8(%rsp), %r15           # 8-byte Reload
.LBB113_138:
	movq	%rax, 4832(%rcx)
	movq	%r15, 4840(%rcx)
	movl	$3, %r14d
	movq	64(%rsp), %r15          # 8-byte Reload
	movq	56(%rsp), %rbp          # 8-byte Reload
	leaq	96(%rsp), %rbx
.LBB113_139:
	testq	%rbp, %rbp
	je	.LBB113_146
# %bb.140:
	movq	(%rsp), %rax            # 8-byte Reload
	movq	4832(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB113_146
# %bb.141:
	movq	(%rsp), %rax            # 8-byte Reload
	movq	4840(%rax), %r8
	testq	%r8, %r8
	je	.LBB113_144
# %bb.142:
	leal	-1(%r8), %r10d
	movl	$512, %esi              # imm = 0x200
	movl	$.L.str.1715, %edx
	movq	%rbx, %rdi
	movq	72(%rsp), %r9           # 8-byte Reload
	movl	$0, %eax
	pushq	$.L.str.1.1716
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	callq	curl_msnprintf
	addq	$16, %rsp
	.cfi_adjust_cfa_offset -16
	jmp	.LBB113_145
.LBB113_143:
	movq	%rbp, %rdi
	callq	myFree
	jmp	.LBB113_147
.LBB113_144:
	movq	%rcx, %rbx
.LBB113_145:
	movl	$.L.str.2.1717, %esi
	movq	%rbp, %rdi
	movl	%r14d, %edx
	movq	%rbx, %rcx
	xorl	%eax, %eax
	callq	curl_mfprintf
.LBB113_146:
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	glob_cleanup
	movq	$1, (%r15)
.LBB113_147:
	movl	%r14d, %eax
	addq	$616, %rsp              # imm = 0x268
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB113_148:
	.cfi_def_cfa_offset 672
	testl	%r14d, %r14d
	movq	64(%rsp), %r15          # 8-byte Reload
	movq	56(%rsp), %rbp          # 8-byte Reload
	leaq	96(%rsp), %rbx
	jne	.LBB113_139
# %bb.149:
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%r15)
	movq	(%rsp), %rax            # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	xorl	%r14d, %r14d
	jmp	.LBB113_147
.LBB113_150:
	movl	$.L.str.8.1714, %eax
	jmp	.LBB113_138
.Lfunc_end113:
	.size	glob_url, .Lfunc_end113-glob_url
	.cfi_endproc
                                        # -- End function
	.globl	glob_next_url           # -- Begin function glob_next_url
	.type	glob_next_url,@function
glob_next_url:                          # @glob_next_url
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r13
	movq	%rdi, %r14
	movq	4808(%rsi), %r12
	movq	4816(%rsi), %r15
	movq	$0, (%rdi)
	cmpb	$0, 4824(%rsi)
	je	.LBB114_14
# %bb.1:
	movq	4800(%r13), %rsi
	testq	%rsi, %rsi
	je	.LBB114_2
# %bb.3:                                # %.preheader1
	movq	$-1, %rax
	xorl	%ecx, %ecx
	xorl	%edx, %edx
.LBB114_4:                              # =>This Inner Loop Header: Depth=1
	addq	%rax, %rsi
	leaq	(%rsi,%rsi,2), %rdi
	shlq	$4, %rdi
	movl	(%r13,%rdi), %esi
	cmpl	$3, %esi
	je	.LBB114_11
# %bb.5:                                #   in Loop: Header=BB114_4 Depth=1
	cmpl	$2, %esi
	je	.LBB114_9
# %bb.6:                                #   in Loop: Header=BB114_4 Depth=1
	cmpl	$1, %esi
	jne	.LBB114_26
# %bb.7:                                #   in Loop: Header=BB114_4 Depth=1
	cmpq	$0, 8(%r13,%rdi)
	je	.LBB114_15
# %bb.8:                                #   in Loop: Header=BB114_4 Depth=1
	leaq	(%rdi,%r13), %rsi
	addq	$8, %rsi
	movl	12(%rsi), %edi
	incl	%edi
	cmpl	8(%rsi), %edi
	cmovel	%ecx, %edi
	movl	%edi, 12(%rsi)
	je	.LBB114_13
	jmp	.LBB114_15
.LBB114_11:                             #   in Loop: Header=BB114_4 Depth=1
	movq	32(%r13,%rdi), %rsi
	addq	40(%r13,%rdi), %rsi
	movq	%rsi, 32(%r13,%rdi)
	cmpq	16(%r13,%rdi), %rsi
	jbe	.LBB114_15
# %bb.12:                               #   in Loop: Header=BB114_4 Depth=1
	leaq	(%rdi,%r13), %rsi
	addq	$32, %rsi
	movq	-24(%rsi), %rdi
	movq	%rdi, (%rsi)
	jmp	.LBB114_13
.LBB114_9:                              #   in Loop: Header=BB114_4 Depth=1
	movb	10(%r13,%rdi), %bl
	addb	12(%r13,%rdi), %bl
	movb	%bl, 10(%r13,%rdi)
	cmpb	9(%r13,%rdi), %bl
	jle	.LBB114_15
# %bb.10:                               #   in Loop: Header=BB114_4 Depth=1
	leaq	(%rdi,%r13), %rsi
	addq	$8, %rsi
	movb	(%rsi), %bl
	movb	%bl, 2(%rsi)
.LBB114_13:                             #   in Loop: Header=BB114_4 Depth=1
	incq	%rdx
	movq	4800(%r13), %rsi
	decq	%rax
	cmpq	%rsi, %rdx
	jb	.LBB114_4
.LBB114_2:
	xorl	%eax, %eax
	jmp	.LBB114_30
.LBB114_14:
	movb	$1, 4824(%r13)
.LBB114_15:
	cmpq	$0, 4800(%r13)
	je	.LBB114_29
# %bb.16:                               # %.preheader
	incq	%r12
	leaq	32(%r13), %rbx
	xorl	%ebp, %ebp
.LBB114_17:                             # =>This Inner Loop Header: Depth=1
	movl	-32(%rbx), %esi
	cmpl	$3, %esi
	je	.LBB114_25
# %bb.18:                               #   in Loop: Header=BB114_17 Depth=1
	cmpl	$2, %esi
	je	.LBB114_23
# %bb.19:                               #   in Loop: Header=BB114_17 Depth=1
	cmpl	$1, %esi
	jne	.LBB114_26
# %bb.20:                               #   in Loop: Header=BB114_17 Depth=1
	movq	-24(%rbx), %rax
	testq	%rax, %rax
	je	.LBB114_28
# %bb.21:                               #   in Loop: Header=BB114_17 Depth=1
	movslq	-12(%rbx), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	$.L.str.4.1723, %edx
	movq	%r15, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	callq	curl_msnprintf
	jmp	.LBB114_22
.LBB114_25:                             #   in Loop: Header=BB114_17 Depth=1
	movl	-8(%rbx), %ecx
	movq	(%rbx), %r8
	movl	$.L.str.5.1724, %edx
	movq	%r15, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	callq	curl_msnprintf
.LBB114_22:                             #   in Loop: Header=BB114_17 Depth=1
	movq	%r15, %rdi
	callq	strlen
	addq	%rax, %r15
	subq	%rax, %r12
	jmp	.LBB114_28
.LBB114_23:                             #   in Loop: Header=BB114_17 Depth=1
	testq	%r12, %r12
	je	.LBB114_24
# %bb.27:                               #   in Loop: Header=BB114_17 Depth=1
	movb	-22(%rbx), %al
	movb	%al, (%r15)
	movb	$0, 1(%r15)
	incq	%r15
	decq	%r12
	jmp	.LBB114_28
.LBB114_24:                             #   in Loop: Header=BB114_17 Depth=1
	xorl	%r12d, %r12d
.LBB114_28:                             #   in Loop: Header=BB114_17 Depth=1
	incq	%rbp
	addq	$48, %rbx
	cmpq	4800(%r13), %rbp
	jb	.LBB114_17
.LBB114_29:
	movq	4816(%r13), %rdi
	callq	strdup
	movq	%rax, (%r14)
	xorl	%ecx, %ecx
	testq	%rax, %rax
	movl	$27, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB114_30
.LBB114_26:
	movl	$.L.str.3.1722, %edi
	xorl	%eax, %eax
	callq	curl_mprintf
	movl	$2, %eax
.LBB114_30:
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end114:
	.size	glob_next_url, .Lfunc_end114-glob_next_url
	.cfi_endproc
                                        # -- End function
	.globl	get_url_file_name       # -- Begin function get_url_file_name
	.type	get_url_file_name,@function
get_url_file_name:                      # @get_url_file_name
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, %r14
	movq	$0, (%rdi)
	movl	$.L.str.4.1410, %esi
	movq	%r15, %rdi
	callq	strstr
	testq	%rax, %rax
	leaq	3(%rax), %rbx
	cmoveq	%r15, %rbx
	movq	%rbx, %rdi
	movl	$92, %esi
	callq	strrchr
	movq	%rax, %r15
	movq	%rbx, %rdi
	movl	$47, %esi
	callq	strrchr
	cmpq	%r15, %rax
	movq	%rax, %rcx
	cmovbq	%r15, %rcx
	testq	%rax, %rax
	cmoveq	%r15, %rcx
	testq	%r15, %r15
	cmoveq	%rax, %rcx
	testq	%rcx, %rcx
	leaq	1(%rcx), %rdi
	movl	$.L.str.7.1415, %eax
	cmoveq	%rax, %rdi
	callq	strdup
	movq	%rax, (%r14)
	xorl	%ecx, %ecx
	testq	%rax, %rax
	movl	$27, %eax
	cmovnel	%ecx, %eax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end115:
	.size	get_url_file_name, .Lfunc_end115-get_url_file_name
	.cfi_endproc
                                        # -- End function
	.globl	glob_match_url          # -- Begin function glob_match_url
	.type	glob_match_url,@function
glob_match_url:                         # @glob_match_url
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$72, %rsp
	.cfi_def_cfa_offset 128
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r12
	movq	%rsi, %rbp
	movq	%rsp, %rax
	movq	%rsi, (%rax)
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	$0, (%rdi)
	leaq	40(%rsp), %rbx
	movl	$10240, %esi            # imm = 0x2800
	movq	%rbx, %rdi
	callq	curlx_dyn_init
	movl	$.L.str.6.1727, %r14d
	xorl	%r13d, %r13d
.LBB116_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_9 Depth 2
	movb	(%rbp), %al
	cmpb	$35, %al
	je	.LBB116_5
# %bb.2:                                #   in Loop: Header=BB116_1 Depth=1
	testb	%al, %al
	jne	.LBB116_3
	jmp	.LBB116_24
.LBB116_5:                              #   in Loop: Header=BB116_1 Depth=1
	movzbl	1(%rbp), %edi
	callq	Curl_isdigit
	testl	%eax, %eax
	je	.LBB116_3
# %bb.6:                                #   in Loop: Header=BB116_1 Depth=1
	leaq	1(%rbp), %r15
	movq	%r15, %rdi
	movq	%rsp, %rsi
	movl	$10, %edx
	callq	strtoul
	testq	%rax, %rax
	je	.LBB116_11
# %bb.7:                                #   in Loop: Header=BB116_1 Depth=1
	movq	4800(%r12), %rcx
	cmpq	%rcx, %rax
	jae	.LBB116_11
# %bb.8:                                #   in Loop: Header=BB116_1 Depth=1
	decl	%eax
	movq	%r12, %rsi
.LBB116_9:                              #   Parent Loop BB116_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	%eax, 4(%rsi)
	je	.LBB116_12
# %bb.10:                               #   in Loop: Header=BB116_9 Depth=2
	addq	$48, %rsi
	decq	%rcx
	jne	.LBB116_9
.LBB116_11:                             #   in Loop: Header=BB116_1 Depth=1
	movq	%r15, (%rsp)
	jmp	.LBB116_4
.LBB116_3:                              #   in Loop: Header=BB116_1 Depth=1
	leaq	1(%rbp), %rax
	movq	%rax, (%rsp)
.LBB116_4:                              #   in Loop: Header=BB116_1 Depth=1
	movl	$1, %r13d
	movq	%rbp, %r14
.LBB116_19:                             #   in Loop: Header=BB116_1 Depth=1
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	callq	curlx_dyn_addn
	testl	%eax, %eax
	jne	.LBB116_20
# %bb.23:                               #   in Loop: Header=BB116_1 Depth=1
	movq	(%rsp), %rbp
	jmp	.LBB116_1
.LBB116_12:                             #   in Loop: Header=BB116_1 Depth=1
	movl	(%rsi), %edx
	cmpl	$3, %edx
	je	.LBB116_21
# %bb.13:                               #   in Loop: Header=BB116_1 Depth=1
	cmpl	$2, %edx
	je	.LBB116_18
# %bb.14:                               #   in Loop: Header=BB116_1 Depth=1
	cmpl	$1, %edx
	jne	.LBB116_22
# %bb.15:                               #   in Loop: Header=BB116_1 Depth=1
	movq	8(%rsi), %rax
	testq	%rax, %rax
	je	.LBB116_19
# %bb.16:                               #   in Loop: Header=BB116_1 Depth=1
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %r14
	jmp	.LBB116_17
.LBB116_21:                             #   in Loop: Header=BB116_1 Depth=1
	movl	24(%rsi), %ecx
	movq	32(%rsi), %r8
	movl	$18, %esi
	movl	$.L.str.5.1724, %edx
	leaq	16(%rsp), %r14
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	curl_msnprintf
.LBB116_17:                             #   in Loop: Header=BB116_1 Depth=1
	movq	%r14, %rdi
	callq	strlen
	movq	%rax, %r13
	jmp	.LBB116_19
.LBB116_18:                             #   in Loop: Header=BB116_1 Depth=1
	movb	10(%rsi), %al
	movb	%al, 16(%rsp)
	movb	$0, 17(%rsp)
	movl	$1, %r13d
	leaq	16(%rsp), %r14
	jmp	.LBB116_19
.LBB116_24:
	leaq	40(%rsp), %rdi
	callq	curlx_dyn_ptr
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	%rax, (%rcx)
	xorl	%eax, %eax
	jmp	.LBB116_25
.LBB116_20:
	movl	$27, %eax
.LBB116_25:
	addq	$72, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB116_22:
	.cfi_def_cfa_offset 128
	movq	stderr(%rip), %rdi
	movl	$.L.str.3.1722, %esi
	xorl	%eax, %eax
	callq	curl_mfprintf
	leaq	40(%rsp), %rdi
	callq	curlx_dyn_free
	movl	$2, %eax
	jmp	.LBB116_25
.Lfunc_end116:
	.size	glob_match_url, .Lfunc_end116-glob_match_url
	.cfi_endproc
                                        # -- End function
	.globl	add_file_name_to_url    # -- Begin function add_file_name_to_url
	.type	add_file_name_to_url,@function
add_file_name_to_url:                   # @add_file_name_to_url
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, %r12
	movl	$.L.str.4.1410, %esi
	callq	strstr
	movq	%rax, %rbx
	callq	curl_easy_init
	testq	%rax, %rax
	je	.LBB117_1
# %bb.2:
	movq	%rax, %r14
	testq	%rbx, %rbx
	leaq	3(%rbx), %rdi
	cmoveq	%r12, %rdi
	movl	$47, %esi
	callq	strrchr
	testq	%rax, %rax
	je	.LBB117_3
# %bb.4:
	movq	%rax, %r13
	cmpb	$0, 1(%rax)
	jne	.LBB117_10
# %bb.5:
	incq	%r13
	jmp	.LBB117_6
.LBB117_1:
	xorl	%r12d, %r12d
	jmp	.LBB117_11
.LBB117_3:
	xorl	%r13d, %r13d
.LBB117_6:
	movq	%r15, %rdi
	movl	$47, %esi
	callq	strrchr
	testq	%rax, %rax
	movq	%r15, %rdi
	cmovneq	%rax, %rdi
	leaq	1(%rax), %rbx
	cmoveq	%r15, %rbx
	movl	$92, %esi
	callq	strrchr
	testq	%rax, %rax
	leaq	1(%rax), %rsi
	cmoveq	%rbx, %rsi
	movq	%r14, %rdi
	xorl	%edx, %edx
	callq	curl_easy_escape
	testq	%rax, %rax
	je	.LBB117_10
# %bb.7:
	movq	%rax, %r15
	testq	%r13, %r13
	movl	$.L.str.6.1411, %eax
	movl	$.L.str.5.1412, %edi
	cmoveq	%rax, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	xorl	%eax, %eax
	callq	curl_maprintf
	movq	%rax, %rbx
	movq	%r15, %rdi
	callq	curl_free
	testq	%rbx, %rbx
	je	.LBB117_8
# %bb.9:
	movq	%r12, %rdi
	callq	myFree
	movq	%rbx, %r12
	jmp	.LBB117_10
.LBB117_8:
	xorl	%r12d, %r12d
.LBB117_10:
	movq	%r14, %rdi
	callq	curl_easy_cleanup
.LBB117_11:
	movq	%r12, %rax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end117:
	.size	add_file_name_to_url, .Lfunc_end117-add_file_name_to_url
	.cfi_endproc
                                        # -- End function
	.globl	curlx_nonblock          # -- Begin function curlx_nonblock
	.type	curlx_nonblock,@function
curlx_nonblock:                         # @curlx_nonblock
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %rbp, -16
	movl	%esi, %ebx
	movl	%edi, %ebp
	movl	$3, %esi
	xorl	%edx, %edx
	xorl	%eax, %eax
	callq	fcntl
	movl	%eax, %ecx
	andl	$-2049, %ecx            # imm = 0xF7FF
	orl	$2048, %eax             # imm = 0x800
	testl	%ebx, %ebx
	cmovel	%ecx, %eax
	movl	%ebp, %edi
	movl	$4, %esi
	movl	%eax, %edx
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	fcntl                   # TAILCALL
.Lfunc_end118:
	.size	curlx_nonblock, .Lfunc_end118-curlx_nonblock
	.cfi_endproc
                                        # -- End function
	.globl	output_expected         # -- Begin function output_expected
	.type	output_expected,@function
output_expected:                        # @output_expected
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	testq	%rsi, %rsi
	je	.LBB119_2
# %bb.1:
	movq	%rdi, %rbx
	movl	$.L.str.1402, %edi
	movl	$7, %edx
	movq	%rbx, %rsi
	callq	curl_strnequal
	testl	%eax, %eax
	je	.LBB119_4
.LBB119_2:
	movb	$1, %al
	jmp	.LBB119_3
.LBB119_4:
	movl	$.L.str.1.1403, %edi
	movl	$8, %edx
	movq	%rbx, %rsi
	callq	curl_strnequal
	testl	%eax, %eax
	setne	%al
.LBB119_3:
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end119:
	.size	output_expected, .Lfunc_end119-output_expected
	.cfi_endproc
                                        # -- End function
	.globl	tool_setopt_enum        # -- Begin function tool_setopt_enum
	.type	tool_setopt_enum,@function
tool_setopt_enum:                       # @tool_setopt_enum
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%r9, %r15
	movq	%r8, %rbx
	movq	%rdx, %r14
	movq	%rsi, %r12
	movl	%ecx, %esi
	movq	%r9, %rdx
	xorl	%eax, %eax
	callq	curl_easy_setopt
	cmpq	$0, 56(%r12)
	je	.LBB120_11
# %bb.1:
	testq	%r15, %r15
	je	.LBB120_11
# %bb.2:
	testl	%eax, %eax
	jne	.LBB120_11
# %bb.3:
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB120_12
# %bb.4:
	cmpq	%r15, 8(%rbx)
	je	.LBB120_8
# %bb.5:                                # %.preheader
	addq	$24, %rbx
.LBB120_6:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB120_12
# %bb.7:                                #   in Loop: Header=BB120_6 Depth=1
	cmpq	%r15, (%rbx)
	leaq	16(%rbx), %rbx
	jne	.LBB120_6
.LBB120_8:
	movl	$easysrc_code, %edi
	movl	$.L.str.76.1633, %esi
	movq	%r14, %rdx
	jmp	.LBB120_9
.LBB120_12:
	movl	$easysrc_code, %edi
	movl	$.L.str.75.1632, %esi
	movq	%r14, %rdx
	movq	%r15, %rcx
.LBB120_9:
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB120_11
# %bb.10:
	xorl	%eax, %eax
.LBB120_11:
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end120:
	.size	tool_setopt_enum, .Lfunc_end120-tool_setopt_enum
	.cfi_endproc
                                        # -- End function
	.globl	tool_setopt_bitmask     # -- Begin function tool_setopt_bitmask
	.type	tool_setopt_bitmask,@function
tool_setopt_bitmask:                    # @tool_setopt_bitmask
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$88, %rsp
	.cfi_def_cfa_offset 128
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%r9, %r14
	movq	%r8, %rbx
	movq	%rdx, %r15
	movq	%rsi, %r12
	movl	%ecx, %esi
	movq	%r9, %rdx
	xorl	%eax, %eax
	callq	curl_easy_setopt
	cmpq	$0, 56(%r12)
	je	.LBB121_13
# %bb.1:
	testq	%r14, %r14
	je	.LBB121_13
# %bb.2:
	testl	%eax, %eax
	jne	.LBB121_13
# %bb.3:
	movq	%rsp, %rdi
	movl	$80, %esi
	movl	$.L.str.77.1636, %edx
	movq	%r15, %rcx
	xorl	%eax, %eax
	callq	curl_msnprintf
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB121_11
# %bb.4:                                # %.preheader
	addq	$16, %rbx
	movl	$.L.str.79.1637, %r12d
	movq	%rsp, %r15
.LBB121_5:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbx), %rax
	movq	%r14, %rdx
	notq	%rdx
	testq	%rdx, %rax
	jne	.LBB121_9
# %bb.6:                                #   in Loop: Header=BB121_5 Depth=1
	notq	%rax
	andq	%rax, %r14
	movl	$.L.str.80.1638, %r8d
	cmovneq	%r12, %r8
	movl	$easysrc_code, %edi
	movl	$.L.str.78.1639, %esi
	movq	%r15, %rdx
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB121_13
# %bb.7:                                #   in Loop: Header=BB121_5 Depth=1
	testq	%r14, %r14
	je	.LBB121_12
# %bb.8:                                #   in Loop: Header=BB121_5 Depth=1
	movq	%r15, %rdi
	callq	strlen
	movl	$80, %esi
	movl	$.L.str.81.1640, %edx
	movl	$.L.str.82.1641, %r8d
	movq	%r15, %rdi
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	curl_msnprintf
.LBB121_9:                              #   in Loop: Header=BB121_5 Depth=1
	movq	(%rbx), %rcx
	addq	$16, %rbx
	testq	%rcx, %rcx
	jne	.LBB121_5
# %bb.10:
	testq	%r14, %r14
	je	.LBB121_12
.LBB121_11:
	movq	%rsp, %rdx
	movl	$easysrc_code, %edi
	movl	$.L.str.84.1645, %esi
	movq	%r14, %rcx
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB121_13
.LBB121_12:
	xorl	%eax, %eax
.LBB121_13:
	addq	$88, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end121:
	.size	tool_setopt_bitmask, .Lfunc_end121-tool_setopt_bitmask
	.cfi_endproc
                                        # -- End function
	.globl	tool_setopt_mimepost    # -- Begin function tool_setopt_mimepost
	.type	tool_setopt_mimepost,@function
tool_setopt_mimepost:                   # @tool_setopt_mimepost
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movq	%rsi, %rbx
	xorl	%ebp, %ebp
	movl	%ecx, %esi
	movq	%r8, %rdx
	xorl	%eax, %eax
	callq	curl_easy_setopt
	movl	%ebp, 12(%rsp)
	testl	%eax, %eax
	je	.LBB122_1
.LBB122_4:
	addq	$16, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB122_1:
	.cfi_def_cfa_offset 48
	cmpq	$0, 56(%rbx)
	movl	$0, %eax
	je	.LBB122_4
# %bb.2:
	movq	104(%rbx), %rax
	movq	912(%rax), %rdi
	leaq	12(%rsp), %rsi
	callq	libcurl_generate_mime
	testl	%eax, %eax
	jne	.LBB122_4
# %bb.3:
	movl	12(%rsp), %ecx
	movl	$easysrc_code, %edi
	movl	$.L.str.85.1648, %esi
	movq	%r14, %rdx
	xorl	%eax, %eax
	callq	easysrc_addf
	jmp	.LBB122_4
.Lfunc_end122:
	.size	tool_setopt_mimepost, .Lfunc_end122-tool_setopt_mimepost
	.cfi_endproc
                                        # -- End function
	.globl	tool_setopt_slist       # -- Begin function tool_setopt_slist
	.type	tool_setopt_slist,@function
tool_setopt_slist:                      # @tool_setopt_slist
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%r8, %rbx
	movq	%rdx, %r14
	movq	%rsi, %r15
	movl	%ecx, %esi
	movq	%r8, %rdx
	xorl	%eax, %eax
	callq	curl_easy_setopt
	testl	%eax, %eax
	jne	.LBB123_6
# %bb.1:
	testq	%rbx, %rbx
	je	.LBB123_6
# %bb.2:
	cmpq	$0, 56(%r15)
	je	.LBB123_6
# %bb.3:
	leaq	12(%rsp), %rsi
	movq	%rbx, %rdi
	callq	libcurl_generate_slist
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB123_5
# %bb.4:
	movl	12(%rsp), %ecx
	movl	$easysrc_code, %edi
	movl	$.L.str.86.1679, %esi
	movq	%r14, %rdx
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB123_6
.LBB123_5:
	movl	%ebx, %eax
.LBB123_6:
	addq	$16, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end123:
	.size	tool_setopt_slist, .Lfunc_end123-tool_setopt_slist
	.cfi_endproc
                                        # -- End function
	.globl	curlx_dyn_addf          # -- Begin function curlx_dyn_addf
	.type	curlx_dyn_addf,@function
curlx_dyn_addf:                         # @curlx_dyn_addf
	.cfi_startproc
# %bb.0:
	subq	$200, %rsp
	.cfi_def_cfa_offset 208
	testb	%al, %al
	je	.LBB124_2
# %bb.1:
	movaps	%xmm0, 48(%rsp)
	movaps	%xmm1, 64(%rsp)
	movaps	%xmm2, 80(%rsp)
	movaps	%xmm3, 96(%rsp)
	movaps	%xmm4, 112(%rsp)
	movaps	%xmm5, 128(%rsp)
	movaps	%xmm6, 144(%rsp)
	movaps	%xmm7, 160(%rsp)
.LBB124_2:
	movq	%rsp, %rax
	movq	%rdx, 16(%rax)
	movq	%rcx, 24(%rax)
	movq	%r8, 32(%rax)
	movq	%r9, 40(%rax)
	leaq	176(%rsp), %rdx
	movq	%rax, 16(%rdx)
	leaq	208(%rsp), %rax
	movq	%rax, 8(%rdx)
	movabsq	$206158430224, %rax     # imm = 0x3000000010
	movq	%rax, (%rdx)
	callq	curlx_dyn_vaddf
	addq	$200, %rsp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end124:
	.size	curlx_dyn_addf, .Lfunc_end124-curlx_dyn_addf
	.cfi_endproc
                                        # -- End function
	.globl	tool_setopt_flags       # -- Begin function tool_setopt_flags
	.type	tool_setopt_flags,@function
tool_setopt_flags:                      # @tool_setopt_flags
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$88, %rsp
	.cfi_def_cfa_offset 128
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%r9, %r14
	movq	%r8, %rbx
	movq	%rdx, %r15
	movq	%rsi, %r12
	movl	%ecx, %esi
	movq	%r9, %rdx
	xorl	%eax, %eax
	callq	curl_easy_setopt
	cmpq	$0, 56(%r12)
	je	.LBB125_13
# %bb.1:
	testq	%r14, %r14
	je	.LBB125_13
# %bb.2:
	testl	%eax, %eax
	jne	.LBB125_13
# %bb.3:
	movq	%rsp, %rdi
	movl	$80, %esi
	movl	$.L.str.77.1636, %edx
	movq	%r15, %rcx
	xorl	%eax, %eax
	callq	curl_msnprintf
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB125_11
# %bb.4:                                # %.preheader
	addq	$16, %rbx
	movl	$.L.str.79.1637, %r12d
	movq	%rsp, %r15
.LBB125_5:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbx), %rax
	movq	%r14, %rdx
	notq	%rdx
	testq	%rdx, %rax
	jne	.LBB125_9
# %bb.6:                                #   in Loop: Header=BB125_5 Depth=1
	notq	%rax
	andq	%rax, %r14
	movl	$.L.str.80.1638, %r8d
	cmovneq	%r12, %r8
	movl	$easysrc_code, %edi
	movl	$.L.str.78.1639, %esi
	movq	%r15, %rdx
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB125_13
# %bb.7:                                #   in Loop: Header=BB125_5 Depth=1
	testq	%r14, %r14
	je	.LBB125_12
# %bb.8:                                #   in Loop: Header=BB125_5 Depth=1
	movq	%r15, %rdi
	callq	strlen
	movl	$80, %esi
	movl	$.L.str.81.1640, %edx
	movl	$.L.str.82.1641, %r8d
	movq	%r15, %rdi
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	curl_msnprintf
.LBB125_9:                              #   in Loop: Header=BB125_5 Depth=1
	movq	(%rbx), %rcx
	addq	$16, %rbx
	testq	%rcx, %rcx
	jne	.LBB125_5
# %bb.10:
	testq	%r14, %r14
	je	.LBB125_12
.LBB125_11:
	movq	%rsp, %rdx
	movl	$easysrc_code, %edi
	movl	$.L.str.83.1642, %esi
	movq	%r14, %rcx
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB125_13
.LBB125_12:
	xorl	%eax, %eax
.LBB125_13:
	addq	$88, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end125:
	.size	tool_setopt_flags, .Lfunc_end125-tool_setopt_flags
	.cfi_endproc
                                        # -- End function
	.globl	curlx_dyn_vaddf         # -- Begin function curlx_dyn_vaddf
	.type	curlx_dyn_vaddf,@function
curlx_dyn_vaddf:                        # @curlx_dyn_vaddf
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	movq	%rsi, %rdi
	movq	%rdx, %rsi
	callq	curl_mvaprintf
	testq	%rax, %rax
	je	.LBB126_2
# %bb.1:
	movq	%rax, %rbx
	movq	%rax, %rdi
	callq	strlen
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	dyn_nappend
	movl	%eax, %ebp
	movq	%rbx, %rdi
	callq	myFree
	movl	%ebp, %eax
	jmp	.LBB126_3
.LBB126_2:
	movq	(%r14), %rdi
	callq	myFree
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%r14)
	movq	$0, 16(%r14)
	movl	$27, %eax
.LBB126_3:
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end126:
	.size	curlx_dyn_vaddf, .Lfunc_end126-curlx_dyn_vaddf
	.cfi_endproc
                                        # -- End function
	.type	libcurl_generate_slist,@function # -- Begin function libcurl_generate_slist
libcurl_generate_slist:                 # @libcurl_generate_slist
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	easysrc_slist_count(%rip), %edx
	incl	%edx
	movl	%edx, easysrc_slist_count(%rip)
	movl	%edx, (%rsi)
	xorl	%ebx, %ebx
	movl	$easysrc_decl, %edi
	movl	$.L.str.114.1668, %esi
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB127_1
# %bb.2:
	movl	(%r15), %edx
	xorl	%ebx, %ebx
	movl	$easysrc_data, %edi
	movl	$.L.str.113.1667, %esi
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB127_1
# %bb.3:
	movl	(%r15), %edx
	xorl	%ebx, %ebx
	movl	$easysrc_clean, %edi
	movl	$.L.str.115.1669, %esi
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB127_1
# %bb.4:
	movl	(%r15), %edx
	xorl	%ebx, %ebx
	movl	$easysrc_clean, %edi
	movl	$.L.str.113.1667, %esi
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	je	.LBB127_5
.LBB127_1:
	movl	%eax, %ebp
.LBB127_12:
	movq	%rbx, %rdi
	callq	myFree
.LBB127_13:
	movl	%ebp, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB127_5:
	.cfi_def_cfa_offset 48
	testq	%r14, %r14
	je	.LBB127_6
# %bb.7:                                # %.preheader
	xorl	%ebx, %ebx
.LBB127_8:                              # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rdi
	callq	myFree
	movq	(%r14), %rdi
	movq	$-1, %rsi
	callq	c_escape
	testq	%rax, %rax
	je	.LBB127_9
# %bb.10:                               #   in Loop: Header=BB127_8 Depth=1
	movq	%rax, %rbx
	movl	(%r15), %ecx
	movl	$easysrc_data, %edi
	movl	$.L.str.116.1670, %esi
	movl	%ecx, %edx
	movq	%rax, %r8
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB127_1
# %bb.11:                               #   in Loop: Header=BB127_8 Depth=1
	movq	8(%r14), %r14
	xorl	%ebp, %ebp
	testq	%r14, %r14
	jne	.LBB127_8
	jmp	.LBB127_12
.LBB127_6:
	xorl	%ebp, %ebp
	jmp	.LBB127_12
.LBB127_9:
	movl	$27, %ebp
	jmp	.LBB127_13
.Lfunc_end127:
	.size	libcurl_generate_slist, .Lfunc_end127-libcurl_generate_slist
	.cfi_endproc
                                        # -- End function
	.type	libcurl_generate_mime,@function # -- Begin function libcurl_generate_mime
libcurl_generate_mime:                  # @libcurl_generate_mime
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	pushq	%rax
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movl	easysrc_mime_count(%rip), %edx
	incl	%edx
	movl	%edx, easysrc_mime_count(%rip)
	movl	%edx, (%rsi)
	movl	$easysrc_decl, %edi
	movl	$.L.str.95.1649, %esi
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB128_7
# %bb.1:
	movl	(%rbx), %edx
	movl	$easysrc_data, %edi
	movl	$.L.str.96.1650, %esi
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB128_7
# %bb.2:
	movl	(%rbx), %edx
	movl	$easysrc_code, %edi
	movl	$.L.str.97.1651, %esi
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB128_7
# %bb.3:
	movl	(%rbx), %edx
	movl	$easysrc_clean, %edi
	movl	$.L.str.98.1652, %esi
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB128_7
# %bb.4:
	movl	(%rbx), %edx
	movl	$easysrc_clean, %edi
	movl	$.L.str.96.1650, %esi
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	je	.LBB128_5
.LBB128_7:
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.LBB128_5:
	.cfi_def_cfa_offset 32
	cmpq	$0, 72(%r14)
	movl	$0, %eax
	je	.LBB128_7
# %bb.6:
	movl	(%rbx), %edx
	movl	$easysrc_decl, %edi
	movl	$.L.str.99.1653, %esi
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB128_7
# %bb.8:
	movq	72(%r14), %rdi
	movl	(%rbx), %esi
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	jmp	libcurl_generate_mime_part # TAILCALL
.Lfunc_end128:
	.size	libcurl_generate_mime, .Lfunc_end128-libcurl_generate_mime
	.cfi_endproc
                                        # -- End function
	.type	libcurl_generate_mime_part,@function # -- Begin function libcurl_generate_mime_part
libcurl_generate_mime_part:             # @libcurl_generate_mime_part
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	%esi, %r12d
	movq	%rdi, %rbx
	movl	$0, (%rsp)
	movq	16(%rdi), %rdi
	movq	40(%rbx), %r15
	testq	%rdi, %rdi
	je	.LBB129_2
# %bb.1:
	movl	%r12d, %esi
	callq	libcurl_generate_mime_part
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB129_5
.LBB129_2:
	xorl	%r14d, %r14d
	movl	$easysrc_code, %edi
	movl	$.L.str.100.1654, %esi
	movl	%r12d, %edx
	movl	%r12d, %ecx
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	je	.LBB129_6
.LBB129_3:
	movl	%eax, %ebp
.LBB129_4:
	movq	%r14, %rdi
	callq	myFree
.LBB129_5:
	movl	%ebp, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB129_6:
	.cfi_def_cfa_offset 64
	movl	(%rbx), %eax
	decl	%eax
	cmpl	$5, %eax
	ja	.LBB129_13
# %bb.7:
	jmpq	*.LJTI129_0(,%rax,8)
.LBB129_8:
	movq	24(%rbx), %rdi
	movq	$-1, %rsi
	callq	c_escape
	testq	%rax, %rax
	je	.LBB129_39
# %bb.9:
	movq	%rax, %r14
	movl	$easysrc_code, %edi
	movl	$.L.str.103.1657, %esi
	movl	%r12d, %edx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB129_3
# %bb.10:
	testq	%r15, %r15
	jne	.LBB129_24
# %bb.11:
	cmpl	$4, (%rbx)
	jne	.LBB129_24
# %bb.12:
	xorl	%r15d, %r15d
	movl	$easysrc_code, %edi
	movl	$.L.str.104.1658, %esi
	movl	%r12d, %edx
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB129_3
	jmp	.LBB129_24
.LBB129_13:
	xorl	%r14d, %r14d
	jmp	.LBB129_24
.LBB129_14:
	movq	%rsp, %rsi
	movq	%rbx, %rdi
	callq	libcurl_generate_mime
	testl	%eax, %eax
	je	.LBB129_40
# %bb.15:
	movl	%eax, %ebp
	jmp	.LBB129_16
.LBB129_17:
	movq	24(%rbx), %rdi
	movq	$-1, %rsi
	callq	c_escape
	testq	%rax, %rax
	je	.LBB129_39
# %bb.18:
	movq	%rax, %r14
	movl	$easysrc_code, %edi
	movl	$.L.str.102.1656, %esi
	movl	%r12d, %edx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	easysrc_addf
.LBB129_19:
	movl	%eax, %ebp
	jmp	.LBB129_23
.LBB129_20:
	testq	%r15, %r15
	movl	$.L.str.105.1659, %eax
	cmoveq	%rax, %r15
.LBB129_21:
	xorl	%r14d, %r14d
	movl	$easysrc_code, %edi
	movl	$.L.str.106.1660, %esi
	movl	%r12d, %edx
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB129_3
# %bb.22:
	movl	$easysrc_code, %edi
	movl	$.L.str.107.1661, %esi
	callq	easysrc_add
	movl	%eax, %ebp
	xorl	%r14d, %r14d
.LBB129_23:
	testl	%eax, %eax
	jne	.LBB129_4
.LBB129_24:
	cmpq	$0, 56(%rbx)
	je	.LBB129_27
# %bb.25:
	movq	%r14, %rdi
	callq	myFree
	movq	56(%rbx), %rdi
	movq	$-1, %rsi
	callq	c_escape
	testq	%rax, %rax
	je	.LBB129_39
# %bb.26:
	movq	%rax, %r14
	movl	$easysrc_code, %edi
	movl	$.L.str.108.1662, %esi
	movl	%r12d, %edx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	easysrc_addf
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB129_4
.LBB129_27:
	testq	%r15, %r15
	je	.LBB129_30
# %bb.28:
	movq	%r14, %rdi
	callq	myFree
	movq	%r15, %rdi
	movq	$-1, %rsi
	callq	c_escape
	testq	%rax, %rax
	je	.LBB129_39
# %bb.29:
	movq	%rax, %r14
	movl	$easysrc_code, %edi
	movl	$.L.str.109.1663, %esi
	movl	%r12d, %edx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	easysrc_addf
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB129_4
.LBB129_30:
	cmpq	$0, 32(%rbx)
	je	.LBB129_33
# %bb.31:
	movq	%r14, %rdi
	callq	myFree
	movq	32(%rbx), %rdi
	movq	$-1, %rsi
	callq	c_escape
	testq	%rax, %rax
	je	.LBB129_39
# %bb.32:
	movq	%rax, %r14
	movl	$easysrc_code, %edi
	movl	$.L.str.110.1664, %esi
	movl	%r12d, %edx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	easysrc_addf
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB129_4
.LBB129_33:
	cmpq	$0, 48(%rbx)
	je	.LBB129_36
# %bb.34:
	movq	%r14, %rdi
	callq	myFree
	movq	48(%rbx), %rdi
	movq	$-1, %rsi
	callq	c_escape
	testq	%rax, %rax
	je	.LBB129_39
# %bb.35:
	movq	%rax, %r14
	movl	$easysrc_code, %edi
	movl	$.L.str.111.1665, %esi
	movl	%r12d, %edx
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	easysrc_addf
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB129_4
.LBB129_36:
	movq	64(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB129_42
# %bb.37:
	leaq	4(%rsp), %rsi
	callq	libcurl_generate_slist
	movl	%eax, %ebx
	testl	%eax, %eax
	je	.LBB129_43
.LBB129_38:
	movl	%ebx, %ebp
	jmp	.LBB129_4
.LBB129_39:
	movl	$27, %ebp
.LBB129_16:
	xorl	%r14d, %r14d
	jmp	.LBB129_4
.LBB129_40:
	movl	(%rsp), %r13d
	xorl	%r14d, %r14d
	movl	$easysrc_code, %edi
	movl	$.L.str.101.1655, %esi
	movl	%r12d, %edx
	movl	%r13d, %ecx
	xorl	%eax, %eax
	callq	easysrc_addf
	testl	%eax, %eax
	jne	.LBB129_3
# %bb.41:
	xorl	%r14d, %r14d
	movl	$easysrc_code, %edi
	movl	$.L.str.96.1650, %esi
	movl	%r13d, %edx
	xorl	%eax, %eax
	callq	easysrc_addf
	jmp	.LBB129_19
.LBB129_42:
	xorl	%ebp, %ebp
	jmp	.LBB129_4
.LBB129_43:
	movl	4(%rsp), %r15d
	movl	$easysrc_code, %edi
	movl	$.L.str.112.1666, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	xorl	%eax, %eax
	callq	easysrc_addf
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB129_4
# %bb.44:
	movl	$easysrc_code, %edi
	movl	$.L.str.113.1667, %esi
	movl	%r15d, %edx
	xorl	%eax, %eax
	callq	easysrc_addf
	movl	%eax, %ebp
	testl	%eax, %eax
	jne	.LBB129_4
	jmp	.LBB129_38
.Lfunc_end129:
	.size	libcurl_generate_mime_part, .Lfunc_end129-libcurl_generate_mime_part
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI129_0:
	.quad	.LBB129_14
	.quad	.LBB129_17
	.quad	.LBB129_8
	.quad	.LBB129_8
	.quad	.LBB129_20
	.quad	.LBB129_21
                                        # -- End function
	.text
	.globl	fwrite_xattr            # -- Begin function fwrite_xattr
	.type	fwrite_xattr,@function
fwrite_xattr:                           # @fwrite_xattr
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	%esi, 12(%rsp)          # 4-byte Spill
	movq	%rdi, %r13
	movq	$-16, %r15
	movq	%rsp, %r12
.LBB130_1:                              # =>This Inner Loop Header: Depth=1
	cmpq	$32, %r15
	je	.LBB130_2
# %bb.3:                                #   in Loop: Header=BB130_1 Depth=1
	movq	$0, (%rsp)
	movl	mappings+24(%r15), %esi
	xorl	%ebp, %ebp
	movq	%r13, %rdi
	movq	%r12, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	testl	%eax, %eax
	jne	.LBB130_18
# %bb.4:                                #   in Loop: Header=BB130_1 Depth=1
	movq	(%rsp), %rbx
	testq	%rbx, %rbx
	je	.LBB130_18
# %bb.5:                                #   in Loop: Header=BB130_1 Depth=1
	testq	%r15, %r15
	je	.LBB130_9
# %bb.6:                                #   in Loop: Header=BB130_1 Depth=1
	xorl	%r14d, %r14d
	jmp	.LBB130_7
.LBB130_9:                              #   in Loop: Header=BB130_1 Depth=1
	callq	curl_url
	movq	%rax, %rbp
	testq	%rax, %rax
	je	.LBB130_15
# %bb.10:                               #   in Loop: Header=BB130_1 Depth=1
	movq	(%rsp), %rdx
	movq	%rbp, %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	curl_url_set
	testl	%eax, %eax
	jne	.LBB130_15
# %bb.11:                               #   in Loop: Header=BB130_1 Depth=1
	movq	%rbp, %rdi
	movl	$2, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	curl_url_set
	testl	%eax, %eax
	jne	.LBB130_15
# %bb.12:                               #   in Loop: Header=BB130_1 Depth=1
	movq	%rbp, %rdi
	movl	$3, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	curl_url_set
	testl	%eax, %eax
	jne	.LBB130_15
# %bb.13:                               #   in Loop: Header=BB130_1 Depth=1
	movq	%rbp, %rdi
	xorl	%esi, %esi
	leaq	16(%rsp), %rdx
	xorl	%ecx, %ecx
	callq	curl_url_get
	testl	%eax, %eax
	je	.LBB130_14
.LBB130_15:                             #   in Loop: Header=BB130_1 Depth=1
	movq	%rbp, %rdi
	callq	curl_url_cleanup
	xorl	%r14d, %r14d
	movq	(%rsp), %rbx
.LBB130_16:                             #   in Loop: Header=BB130_1 Depth=1
	testq	%rbx, %rbx
	je	.LBB130_17
.LBB130_7:                              #   in Loop: Header=BB130_1 Depth=1
	movq	mappings+16(%r15), %rbp
	movq	%rbx, %rdi
	callq	strlen
	movl	12(%rsp), %edi          # 4-byte Reload
	movq	%rbp, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	xorl	%r8d, %r8d
	callq	fsetxattr
	movl	%eax, %ebp
	testb	%r14b, %r14b
	je	.LBB130_18
# %bb.8:                                #   in Loop: Header=BB130_1 Depth=1
	movq	(%rsp), %rdi
	callq	curl_free
	jmp	.LBB130_18
.LBB130_17:                             #   in Loop: Header=BB130_1 Depth=1
	xorl	%ebp, %ebp
.LBB130_18:                             #   in Loop: Header=BB130_1 Depth=1
	addq	$16, %r15
	testl	%ebp, %ebp
	je	.LBB130_1
	jmp	.LBB130_19
.LBB130_14:                             #   in Loop: Header=BB130_1 Depth=1
	movq	%rbp, %rdi
	callq	curl_url_cleanup
	movq	16(%rsp), %rbx
	movq	%rbx, (%rsp)
	movb	$1, %r14b
	jmp	.LBB130_16
.LBB130_2:
	xorl	%ebp, %ebp
.LBB130_19:
	movl	%ebp, %eax
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end130:
	.size	fwrite_xattr, .Lfunc_end130-fwrite_xattr
	.cfi_endproc
                                        # -- End function
	.globl	ourWriteOut             # -- Begin function ourWriteOut
	.type	ourWriteOut,@function
ourWriteOut:                            # @ourWriteOut
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	testq	%rdi, %rdi
	je	.LBB131_42
# %bb.1:
	movq	%rdi, %rbp
	movb	(%rdi), %al
	testb	%al, %al
	je	.LBB131_42
# %bb.2:
	movl	%edx, %r13d
	movq	%rsi, %r14
	movb	$1, %r15b
	movq	stdout(%rip), %r12
	movl	$0, 12(%rsp)            # 4-byte Folded Spill
.LBB131_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_4 Depth 2
                                        #     Child Loop BB131_15 Depth 2
	incq	%rbp
.LBB131_4:                              #   Parent Loop BB131_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpb	$37, %al
	jne	.LBB131_5
# %bb.10:                               #   in Loop: Header=BB131_4 Depth=2
	movb	(%rbp), %cl
	cmpb	$123, %cl
	jne	.LBB131_11
# %bb.13:                               #   in Loop: Header=BB131_4 Depth=2
	leaq	-1(%rbp), %rdi
	movl	$125, %esi
	callq	strchr
	testq	%rax, %rax
	jne	.LBB131_14
# %bb.32:                               #   in Loop: Header=BB131_4 Depth=2
	movl	$.L.str.1736, %edi
	movq	%r12, %rsi
	callq	fputs
	movb	1(%rbp), %al
	testb	%al, %al
	setne	%cl
	addq	$2, %rbp
	testb	%cl, %r15b
	jne	.LBB131_4
	jmp	.LBB131_42
.LBB131_5:                              #   in Loop: Header=BB131_3 Depth=1
	cmpb	$92, %al
	jne	.LBB131_39
# %bb.6:                                #   in Loop: Header=BB131_3 Depth=1
	movsbl	(%rbp), %ecx
	testl	%ecx, %ecx
	je	.LBB131_39
# %bb.7:                                #   in Loop: Header=BB131_3 Depth=1
	cmpl	$116, %ecx
	je	.LBB131_35
# %bb.8:                                #   in Loop: Header=BB131_3 Depth=1
	cmpl	$114, %ecx
	je	.LBB131_9
# %bb.33:                               #   in Loop: Header=BB131_3 Depth=1
	cmpl	$110, %ecx
	jne	.LBB131_36
# %bb.34:                               #   in Loop: Header=BB131_3 Depth=1
	movl	$10, %edi
	jmp	.LBB131_38
.LBB131_11:                             #   in Loop: Header=BB131_3 Depth=1
	testb	%cl, %cl
	je	.LBB131_39
# %bb.12:                               #   in Loop: Header=BB131_3 Depth=1
	movl	$37, %edi
	cmpb	$37, %cl
	jne	.LBB131_37
	jmp	.LBB131_38
.LBB131_39:                             #   in Loop: Header=BB131_3 Depth=1
	movsbl	%al, %edi
	movq	%r12, %rsi
	callq	fputc
	jmp	.LBB131_40
.LBB131_14:                             #   in Loop: Header=BB131_3 Depth=1
	movq	%rax, %rbx
	movq	%r14, 16(%rsp)          # 8-byte Spill
	movl	%r13d, %r14d
	movb	(%rax), %al
	movb	%al, 11(%rsp)           # 1-byte Spill
	movb	$0, (%rbx)
	incq	%rbp
	movl	$.L.str.2.1734, %esi
	movq	%rbp, %rdi
	callq	curl_strequal
	movl	$variables, %r13d
	xorl	%r15d, %r15d
.LBB131_15:                             #   Parent Loop BB131_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testl	%eax, %eax
	jne	.LBB131_18
# %bb.16:                               #   in Loop: Header=BB131_15 Depth=2
	cmpq	$41, %r15
	je	.LBB131_28
# %bb.17:                               #   in Loop: Header=BB131_15 Depth=2
	movq	24(%r13), %rsi
	addq	$24, %r13
	movq	%rbp, %rdi
	callq	curl_strequal
	incq	%r15
	jmp	.LBB131_15
.LBB131_18:                             #   in Loop: Header=BB131_3 Depth=1
	leaq	(%r15,%r15,2), %rbp
	movl	variables+8(,%rbp,8), %eax
	cmpl	$37, %eax
	jg	.LBB131_22
# %bb.19:                               #   in Loop: Header=BB131_3 Depth=1
	cmpl	$15, %eax
	je	.LBB131_26
# %bb.20:                               #   in Loop: Header=BB131_3 Depth=1
	cmpl	$21, %eax
	jne	.LBB131_27
# %bb.21:                               #   in Loop: Header=BB131_3 Depth=1
	movl	%r14d, %r13d
	testl	%r14d, %r14d
	movl	12(%rsp), %ecx          # 4-byte Reload
	movzbl	%cl, %ecx
	movl	$1, %eax
	cmovel	%eax, %ecx
	movl	%ecx, 12(%rsp)          # 4-byte Spill
	jmp	.LBB131_30
.LBB131_22:                             #   in Loop: Header=BB131_3 Depth=1
	cmpl	$38, %eax
	je	.LBB131_25
# %bb.23:                               #   in Loop: Header=BB131_3 Depth=1
	cmpl	$39, %eax
	jne	.LBB131_27
# %bb.24:                               #   in Loop: Header=BB131_3 Depth=1
	movq	stdout(%rip), %r12
	jmp	.LBB131_29
.LBB131_28:                             #   in Loop: Header=BB131_3 Depth=1
	movq	stderr(%rip), %rdi
	movl	$.L.str.1.1735, %esi
	movq	%rbp, %rdx
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB131_29
.LBB131_26:                             #   in Loop: Header=BB131_3 Depth=1
	movl	$variables, %esi
	movq	%r12, %rdi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	%r14d, %r13d
	movq	%rdx, %r14
	movl	%r13d, %ecx
	callq	ourWriteOutJSON
	jmp	.LBB131_31
.LBB131_25:                             #   in Loop: Header=BB131_3 Depth=1
	movq	stderr(%rip), %r12
.LBB131_29:                             #   in Loop: Header=BB131_3 Depth=1
	movl	%r14d, %r13d
.LBB131_30:                             #   in Loop: Header=BB131_3 Depth=1
	movq	16(%rsp), %r14          # 8-byte Reload
.LBB131_31:                             #   in Loop: Header=BB131_3 Depth=1
	movb	11(%rsp), %al           # 1-byte Reload
	movq	%rbx, %rbp
	incq	%rbp
	movb	%al, (%rbx)
	jmp	.LBB131_40
.LBB131_27:                             #   in Loop: Header=BB131_3 Depth=1
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	%r14d, %r13d
	movq	%rdx, %r14
	movl	%r13d, %ecx
	xorl	%r8d, %r8d
	callq	*variables+16(,%rbp,8)
	jmp	.LBB131_31
.LBB131_35:                             #   in Loop: Header=BB131_3 Depth=1
	movl	$9, %edi
	jmp	.LBB131_38
.LBB131_9:                              #   in Loop: Header=BB131_3 Depth=1
	movl	$13, %edi
	jmp	.LBB131_38
.LBB131_36:                             #   in Loop: Header=BB131_3 Depth=1
	movl	$92, %edi
.LBB131_37:                             #   in Loop: Header=BB131_3 Depth=1
	movq	%r12, %rsi
	callq	fputc
	movsbl	(%rbp), %edi
.LBB131_38:                             #   in Loop: Header=BB131_3 Depth=1
	movq	%r12, %rsi
	callq	fputc
	incq	%rbp
.LBB131_40:                             #   in Loop: Header=BB131_3 Depth=1
	testb	$1, 12(%rsp)            # 1-byte Folded Reload
	sete	%r15b
	jne	.LBB131_42
# %bb.41:                               #   in Loop: Header=BB131_3 Depth=1
	movb	(%rbp), %al
	testb	%al, %al
	jne	.LBB131_3
.LBB131_42:
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end131:
	.size	ourWriteOut, .Lfunc_end131-ourWriteOut
	.cfi_endproc
                                        # -- End function
	.globl	ourWriteOutJSON         # -- Begin function ourWriteOutJSON
	.type	ourWriteOutJSON,@function
ourWriteOutJSON:                        # @ourWriteOutJSON
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movq	%rsi, %rbp
	movq	%rdi, %rbx
	movl	$.L.str.8.1803, %edi
	movq	%rbx, %rsi
	callq	fputs
	cmpq	$0, (%rbp)
	je	.LBB132_5
.LBB132_1:                              # =>This Inner Loop Header: Depth=1
	movq	16(%rbp), %rax
	testq	%rax, %rax
	je	.LBB132_4
# %bb.2:                                #   in Loop: Header=BB132_1 Depth=1
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	movl	$1, %r8d
	callq	*%rax
	testl	%eax, %eax
	je	.LBB132_4
# %bb.3:                                #   in Loop: Header=BB132_1 Depth=1
	movl	$.L.str.9.1804, %edi
	movq	%rbx, %rsi
	callq	fputs
.LBB132_4:                              #   in Loop: Header=BB132_1 Depth=1
	cmpq	$0, 24(%rbp)
	leaq	24(%rbp), %rbp
	jne	.LBB132_1
.LBB132_5:
	movl	$.L.str.10.1805, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	callq	curl_version
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	jsonWriteString
	movl	$.L.str.11.1806, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	curl_mfprintf           # TAILCALL
.Lfunc_end132:
	.size	ourWriteOutJSON, .Lfunc_end132-ourWriteOutJSON
	.cfi_endproc
                                        # -- End function
	.globl	jsonWriteString         # -- Begin function jsonWriteString
	.type	jsonWriteString,@function
jsonWriteString:                        # @jsonWriteString
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	%rsi, %rdi
	callq	strlen
	testq	%rax, %rax
	jle	.LBB133_17
# %bb.1:                                # %.preheader
	movq	%rax, %r15
	addq	%rbx, %r15
.LBB133_2:                              # =>This Inner Loop Header: Depth=1
	movsbl	(%rbx), %edx
	leal	-8(%rdx), %eax
	cmpl	$5, %eax
	ja	.LBB133_3
# %bb.18:                               #   in Loop: Header=BB133_2 Depth=1
	jmpq	*.LJTI133_0(,%rax,8)
.LBB133_8:                              #   in Loop: Header=BB133_2 Depth=1
	movl	$.L.str.2.1795, %edi
	jmp	.LBB133_6
.LBB133_3:                              #   in Loop: Header=BB133_2 Depth=1
	cmpl	$34, %edx
	je	.LBB133_7
# %bb.4:                                #   in Loop: Header=BB133_2 Depth=1
	cmpl	$92, %edx
	jne	.LBB133_13
# %bb.5:                                #   in Loop: Header=BB133_2 Depth=1
	movl	$.L.str.1793, %edi
	jmp	.LBB133_6
.LBB133_13:                             #   in Loop: Header=BB133_2 Depth=1
	cmpb	$31, %dl
	jg	.LBB133_15
# %bb.14:                               #   in Loop: Header=BB133_2 Depth=1
	movl	$.L.str.7.1800, %esi
	movq	%r14, %rdi
                                        # kill: def $edx killed $edx killed $rdx
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB133_16
.LBB133_12:                             #   in Loop: Header=BB133_2 Depth=1
	movl	$.L.str.6.1799, %edi
	jmp	.LBB133_6
.LBB133_10:                             #   in Loop: Header=BB133_2 Depth=1
	movl	$.L.str.4.1797, %edi
	jmp	.LBB133_6
.LBB133_9:                              #   in Loop: Header=BB133_2 Depth=1
	movl	$.L.str.3.1796, %edi
	jmp	.LBB133_6
.LBB133_11:                             #   in Loop: Header=BB133_2 Depth=1
	movl	$.L.str.5.1798, %edi
	jmp	.LBB133_6
.LBB133_7:                              #   in Loop: Header=BB133_2 Depth=1
	movl	$.L.str.1.1794, %edi
.LBB133_6:                              #   in Loop: Header=BB133_2 Depth=1
	movq	%r14, %rsi
	callq	fputs
.LBB133_16:                             #   in Loop: Header=BB133_2 Depth=1
	incq	%rbx
	cmpq	%r15, %rbx
	jb	.LBB133_2
	jmp	.LBB133_17
.LBB133_15:                             #   in Loop: Header=BB133_2 Depth=1
	movl	%edx, %edi
	movq	%r14, %rsi
	callq	fputc
	jmp	.LBB133_16
.LBB133_17:
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end133:
	.size	jsonWriteString, .Lfunc_end133-jsonWriteString
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI133_0:
	.quad	.LBB133_8
	.quad	.LBB133_12
	.quad	.LBB133_10
	.quad	.LBB133_13
	.quad	.LBB133_9
	.quad	.LBB133_11
                                        # -- End function
	.text
	.type	writeString,@function   # -- Begin function writeString
writeString:                            # @writeString
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movl	%r8d, %ebp
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	$0, (%rsp)
	movl	12(%rsi), %esi
	testl	%esi, %esi
	je	.LBB134_5
# %bb.1:
	cmpl	$2097198, %esi          # imm = 0x20002E
	jne	.LBB134_17
# %bb.2:
	leaq	8(%rsp), %rax
	movq	$0, (%rax)
	movq	24(%rdx), %rdi
	movl	$2097198, %esi          # imm = 0x20002E
	movq	%rax, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	testl	%eax, %eax
	jne	.LBB134_15
# %bb.3:
	movq	8(%rsp), %rax
	cmpq	$4, %rax
	ja	.LBB134_15
# %bb.4:
	movq	http_version(,%rax,8), %rdx
	jmp	.LBB134_12
.LBB134_5:
	movl	8(%rbx), %eax
	cmpl	$4, %eax
	je	.LBB134_13
# %bb.6:
	cmpl	$14, %eax
	je	.LBB134_24
# %bb.7:
	cmpl	$7, %eax
	jne	.LBB134_15
# %bb.8:
	testl	%ecx, %ecx
	je	.LBB134_15
# %bb.9:
	cmpb	$0, 377(%rdx)
	je	.LBB134_11
# %bb.10:
	addq	$377, %rdx              # imm = 0x179
	jmp	.LBB134_12
.LBB134_17:
	movq	24(%rdx), %rdi
	movq	%rsp, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	testl	%eax, %eax
	jne	.LBB134_15
# %bb.18:
	movq	(%rsp), %rdx
	testq	%rdx, %rdx
	jne	.LBB134_19
	jmp	.LBB134_15
.LBB134_13:
	movq	184(%rdx), %rdx
	jmp	.LBB134_14
.LBB134_24:
	movq	72(%rdx), %rdx
.LBB134_14:
	testq	%rdx, %rdx
	je	.LBB134_15
.LBB134_12:
	movq	%rdx, (%rsp)
.LBB134_19:
	testb	%bpl, %bpl
	je	.LBB134_21
# %bb.20:
	movq	(%rbx), %rdx
	movl	$.L.str.44.1784, %esi
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	(%rsp), %rsi
	movq	%r14, %rdi
	callq	jsonWriteString
	movl	$.L.str.45.1785, %edi
	jmp	.LBB134_22
.LBB134_15:
	testb	%bpl, %bpl
	je	.LBB134_23
# %bb.16:
	movq	(%rbx), %rdx
	movl	$.L.str.46.1780, %esi
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB134_23
.LBB134_21:
	movq	%rdx, %rdi
.LBB134_22:
	movq	%r14, %rsi
	callq	fputs
.LBB134_23:
	movl	$1, %eax
	addq	$16, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB134_11:
	.cfi_def_cfa_offset 48
	movl	%ecx, %edi
	callq	curl_easy_strerror
	movq	%rax, %rdx
	jmp	.LBB134_12
.Lfunc_end134:
	.size	writeString, .Lfunc_end134-writeString
	.cfi_endproc
                                        # -- End function
	.type	writeLong,@function     # -- Begin function writeLong
writeLong:                              # @writeLong
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movl	%r8d, %ebp
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	$0, 8(%rsp)
	movl	12(%rsi), %esi
	testl	%esi, %esi
	je	.LBB135_4
# %bb.1:
	movq	24(%rdx), %rdi
	leaq	8(%rsp), %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	testl	%eax, %eax
	je	.LBB135_11
.LBB135_2:
	testb	%bpl, %bpl
	je	.LBB135_17
# %bb.3:
	movq	(%rbx), %rdx
	movl	$.L.str.46.1780, %esi
	jmp	.LBB135_16
.LBB135_4:
	movl	8(%rbx), %eax
	cmpl	$8, %eax
	je	.LBB135_8
# %bb.5:
	cmpl	$41, %eax
	je	.LBB135_9
# %bb.6:
	cmpl	$20, %eax
	jne	.LBB135_2
# %bb.7:
	movq	368(%rdx), %rax
	jmp	.LBB135_10
.LBB135_8:
	movl	%ecx, %eax
	jmp	.LBB135_10
.LBB135_9:
	movl	80(%rdx), %eax
	testl	%eax, %eax
	js	.LBB135_2
.LBB135_10:
	movq	%rax, 8(%rsp)
.LBB135_11:
	testb	%bpl, %bpl
	je	.LBB135_13
# %bb.12:
	movq	(%rbx), %rdx
	movq	8(%rsp), %rcx
	movl	$.L.str.52.1782, %esi
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB135_17
.LBB135_13:
	movl	8(%rbx), %eax
	addl	$-11, %eax
	movq	8(%rsp), %rdx
	cmpl	$1, %eax
	ja	.LBB135_15
# %bb.14:
	movl	$.L.str.53.1783, %esi
	jmp	.LBB135_16
.LBB135_15:
	movl	$.L.str.54.1781, %esi
.LBB135_16:
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
.LBB135_17:
	movl	$1, %eax
	addq	$16, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end135:
	.size	writeLong, .Lfunc_end135-writeLong
	.cfi_endproc
                                        # -- End function
	.type	writeOffset,@function   # -- Begin function writeOffset
writeOffset:                            # @writeOffset
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %rbp, -16
	movl	%r8d, %ebp
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	$0, 8(%rsp)
	movl	12(%rsi), %esi
	testl	%esi, %esi
	je	.LBB136_5
# %bb.1:
	movq	24(%rdx), %rdi
	leaq	8(%rsp), %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	testl	%eax, %eax
	je	.LBB136_2
.LBB136_5:
	testb	%bpl, %bpl
	je	.LBB136_8
# %bb.6:
	movq	(%rbx), %rdx
	movl	$.L.str.46.1780, %esi
	jmp	.LBB136_7
.LBB136_2:
	testb	%bpl, %bpl
	je	.LBB136_4
# %bb.3:
	movq	(%rbx), %rdx
	movl	$.L.str.55.1778, %esi
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
.LBB136_4:
	movq	8(%rsp), %rdx
	movl	$.L.str.54.1781, %esi
.LBB136_7:
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
.LBB136_8:
	movl	$1, %eax
	addq	$16, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end136:
	.size	writeOffset, .Lfunc_end136-writeOffset
	.cfi_endproc
                                        # -- End function
	.type	writeTime,@function     # -- Begin function writeTime
writeTime:                              # @writeTime
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	pushq	%rax
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	%r8d, %r15d
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	$0, (%rsp)
	movl	12(%rsi), %esi
	testl	%esi, %esi
	je	.LBB137_5
# %bb.1:
	movq	24(%rdx), %rdi
	movq	%rsp, %rdx
	xorl	%eax, %eax
	callq	curl_easy_getinfo
	testl	%eax, %eax
	je	.LBB137_2
.LBB137_5:
	testb	%r15b, %r15b
	je	.LBB137_7
# %bb.6:
	movq	(%rbx), %rdx
	movl	$.L.str.46.1780, %esi
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	jmp	.LBB137_7
.LBB137_2:
	movq	(%rsp), %rcx
	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
	movq	%rcx, %rax
	imulq	%rdx
	movq	%rdx, %rbp
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$18, %rbp
	addq	%rax, %rbp
	imulq	$1000000, %rbp, %rax    # imm = 0xF4240
	subq	%rax, %rcx
	movq	%rcx, (%rsp)
	testb	%r15b, %r15b
	je	.LBB137_4
# %bb.3:
	movq	(%rbx), %rdx
	movl	$.L.str.55.1778, %esi
	movq	%r14, %rdi
	xorl	%eax, %eax
	callq	curl_mfprintf
	movq	(%rsp), %rcx
.LBB137_4:
	movl	$.L.str.56.1779, %esi
	movq	%r14, %rdi
	movq	%rbp, %rdx
	xorl	%eax, %eax
	callq	curl_mfprintf
.LBB137_7:
	movl	$1, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end137:
	.size	writeTime, .Lfunc_end137-writeTime
	.cfi_endproc
                                        # -- End function
	.type	time2str,@function      # -- Begin function time2str
time2str:                               # @time2str
	.cfi_startproc
# %bb.0:
	testq	%rsi, %rsi
	jle	.LBB138_4
# %bb.1:
	movq	%rsi, %rax
	shrq	$4, %rax
	movabsq	$655884233731895169, %rcx # imm = 0x91A2B3C4D5E6F81
	mulq	%rcx
	cmpq	$359999, %rsi           # imm = 0x57E3F
	jg	.LBB138_2
# %bb.5:
	movq	%rdx, %r8
	shrq	$3, %r8
	imulq	$-3600, %r8, %rcx       # imm = 0xF1F0
	addq	%rsi, %rcx
	movabsq	$-8608480567731124087, %rdx # imm = 0x8888888888888889
	movq	%rcx, %rax
	imulq	%rdx
	movq	%rdx, %rax
	addq	%rcx, %rax
	movq	%rax, %rdx
	shrq	$63, %rdx
	sarq	$5, %rax
	addq	%rdx, %rax
	imulq	$-60, %rax, %r9
	addq	%rcx, %r9
	movl	$9, %esi
	movl	$.L.str.6.1530, %edx
	movq	%r8, %rcx
	movq	%rax, %r8
	xorl	%eax, %eax
	jmp	curl_msnprintf          # TAILCALL
.LBB138_4:
	movabsq	$3255322071365463341, %rax # imm = 0x2D2D3A2D2D3A2D2D
	movq	%rax, (%rdi)
	movb	$0, 8(%rdi)
	retq
.LBB138_2:
	movabsq	$-4454547087429121353, %rcx # imm = 0xC22E450672894AB7
	movq	%rsi, %rax
	mulq	%rcx
	movq	%rdx, %rcx
	shrq	$16, %rcx
	cmpq	$86399999, %rsi         # imm = 0x5265BFF
	jg	.LBB138_3
# %bb.6:
	imulq	$-86400, %rcx, %rax     # imm = 0xFFFEAE80
	addq	%rsi, %rax
	movabsq	$5247073869855161349, %rdx # imm = 0x48D159E26AF37C05
	imulq	%rdx
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$10, %rdx
	leaq	(%rdx,%rax), %r8
	movl	$9, %esi
	movl	$.L.str.7.1531, %edx
	xorl	%eax, %eax
	jmp	curl_msnprintf          # TAILCALL
.LBB138_3:
	movl	$9, %esi
	movl	$.L.str.8.1532, %edx
	xorl	%eax, %eax
	jmp	curl_msnprintf          # TAILCALL
.Lfunc_end138:
	.size	time2str, .Lfunc_end138-time2str
	.cfi_endproc
                                        # -- End function
	.type	max5data,@function      # -- Begin function max5data
max5data:                               # @max5data
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rsi, %rbx
	movq	%rdi, %rax
	cmpq	$99999, %rdi            # imm = 0x1869F
	jg	.LBB139_2
# %bb.1:
	movl	$6, %esi
	movl	$.L.str.9.1522, %edx
	jmp	.LBB139_16
.LBB139_2:
	cmpq	$10239999, %rax         # imm = 0x9C3FFF
	jg	.LBB139_4
# %bb.3:
	shrq	$10, %rax
	movl	$6, %esi
	movl	$.L.str.10.1523, %edx
	jmp	.LBB139_16
.LBB139_4:
	cmpq	$104857599, %rax        # imm = 0x63FFFFF
	jg	.LBB139_6
# %bb.5:
	movq	%rax, %rcx
	shrq	$20, %rcx
	andl	$1048575, %eax          # imm = 0xFFFFF
	imulq	$1073772545, %rax, %rdx # imm = 0x40007801
	shrq	$32, %rdx
	subl	%edx, %eax
	shrl	%eax
	addl	%edx, %eax
	shrl	$16, %eax
	movl	$6, %esi
	movl	$.L.str.11.1524, %edx
	movq	%rbx, %rdi
	movq	%rax, %r8
	jmp	.LBB139_10
.LBB139_6:
	movabsq	$10485759999, %rcx      # imm = 0x270FFFFFF
	cmpq	%rcx, %rax
	jg	.LBB139_8
# %bb.7:
	shrq	$20, %rax
	movl	$6, %esi
	movl	$.L.str.12.1525, %edx
	jmp	.LBB139_16
.LBB139_8:
	movabsq	$107374182399, %rcx     # imm = 0x18FFFFFFFF
	cmpq	%rcx, %rax
	jg	.LBB139_11
# %bb.9:
	movq	%rax, %rcx
	shrq	$30, %rcx
	andl	$1073741822, %eax       # imm = 0x3FFFFFFE
	shrl	%eax
	movl	$2684354571, %r8d       # imm = 0xA000000B
	imulq	%rax, %r8
	shrq	$57, %r8
	movl	$6, %esi
	movl	$.L.str.13.1526, %edx
	movq	%rbx, %rdi
.LBB139_10:
	xorl	%eax, %eax
	callq	curl_msnprintf
	jmp	.LBB139_17
.LBB139_11:
	movabsq	$10737418239999, %rcx   # imm = 0x9C3FFFFFFFF
	cmpq	%rcx, %rax
	jg	.LBB139_13
# %bb.12:
	shrq	$30, %rax
	movl	$6, %esi
	movl	$.L.str.14.1527, %edx
	jmp	.LBB139_16
.LBB139_13:
	movabsq	$10995116277759999, %rcx # imm = 0x270FFFFFFFFFFF
	cmpq	%rcx, %rax
	jg	.LBB139_15
# %bb.14:
	shrq	$40, %rax
	movl	$6, %esi
	movl	$.L.str.15.1528, %edx
	jmp	.LBB139_16
.LBB139_15:
	shrq	$50, %rax
	movl	$6, %esi
	movl	$.L.str.16.1529, %edx
.LBB139_16:
	movq	%rbx, %rdi
	movq	%rax, %rcx
	xorl	%eax, %eax
	callq	curl_msnprintf
.LBB139_17:
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end139:
	.size	max5data, .Lfunc_end139-max5data
	.cfi_endproc
                                        # -- End function
	.globl	xferinfo_cb             # -- Begin function xferinfo_cb
	.type	xferinfo_cb,@function
xferinfo_cb:                            # @xferinfo_cb
	.cfi_startproc
# %bb.0:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	16(%rdi), %rax
	movq	%rsi, 656(%rdi)
	movq	%rdx, 664(%rdi)
	movq	%rcx, 672(%rdi)
	movq	%r8, 680(%rdi)
	movl	$1, %ebx
	cmpb	$0, 648(%rdi)
	jne	.LBB140_4
# %bb.1:
	cmpb	$0, 786(%rax)
	je	.LBB140_2
# %bb.3:
	movb	$0, 786(%rax)
	movq	24(%rdi), %rdi
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	callq	curl_easy_pause
	jmp	.LBB140_4
.LBB140_2:
	xorl	%ebx, %ebx
.LBB140_4:
	movl	%ebx, %eax
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end140:
	.size	xferinfo_cb, .Lfunc_end140-xferinfo_cb
	.cfi_endproc
                                        # -- End function
	.type	checkpasswd,@function   # -- Begin function checkpasswd
checkpasswd:                            # @checkpasswd
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$2360, %rsp             # imm = 0x938
	.cfi_def_cfa_offset 2416
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	(%rcx), %r14
	xorl	%ebp, %ebp
	testq	%r14, %r14
	je	.LBB141_14
# %bb.1:
	movq	%rcx, %rbx
	movl	%edx, %r13d
	movq	%rsi, %r12
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	%r14, %rdi
	movl	$58, %esi
	callq	strchr
	movq	%rax, %r15
	movq	%r14, %rdi
	movl	$59, %esi
	callq	strchr
	testq	%r15, %r15
	jne	.LBB141_14
# %bb.2:
	cmpb	$59, (%r14)
	je	.LBB141_14
# %bb.3:
	leaq	304(%rsp), %rdi
	movl	$2048, %edx             # imm = 0x800
	xorl	%esi, %esi
	movq	%rax, %rbp
	callq	memset
	leaq	16(%rsp), %rdi
	movl	$102400, %esi           # imm = 0x19000
	callq	curlx_dyn_init
	testq	%rbp, %rbp
	je	.LBB141_5
# %bb.4:
	movq	%rbp, %rax
	movb	$0, (%rbp)
.LBB141_5:
	movq	(%rbx), %r8
	testq	%r12, %r12
	jne	.LBB141_8
# %bb.6:
	testb	%r13b, %r13b
	je	.LBB141_8
# %bb.7:
	leaq	48(%rsp), %rdi
	movl	$256, %esi              # imm = 0x100
	movl	$.L.str.44.1490, %edx
	movq	8(%rsp), %rcx           # 8-byte Reload
	xorl	%eax, %eax
	callq	curl_msnprintf
	jmp	.LBB141_9
.LBB141_8:
	incq	%r12
	leaq	48(%rsp), %rdi
	movl	$256, %esi              # imm = 0x100
	movl	$.L.str.45.1491, %edx
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	%r12, %r9
	xorl	%eax, %eax
	callq	curl_msnprintf
.LBB141_9:
	leaq	48(%rsp), %rdi
	leaq	304(%rsp), %rsi
	movl	$2048, %edx             # imm = 0x800
	callq	getpass_r
	testq	%rbp, %rbp
	je	.LBB141_11
# %bb.10:
	movb	$59, (%rbp)
.LBB141_11:
	movq	(%rbx), %rdx
	xorl	%ebp, %ebp
	leaq	16(%rsp), %rdi
	leaq	304(%rsp), %rcx
	movl	$.L.str.46.1492, %esi
	xorl	%eax, %eax
	callq	curlx_dyn_addf
	testl	%eax, %eax
	je	.LBB141_12
# %bb.13:
	movl	$27, %ebp
	jmp	.LBB141_14
.LBB141_12:
	movq	(%rbx), %rdi
	callq	myFree
	leaq	16(%rsp), %rdi
	callq	curlx_dyn_ptr
	movq	%rax, (%rbx)
.LBB141_14:
	movl	%ebp, %eax
	addq	$2360, %rsp             # imm = 0x938
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end141:
	.size	checkpasswd, .Lfunc_end141-checkpasswd
	.cfi_endproc
                                        # -- End function
	.globl	curlx_ultous            # -- Begin function curlx_ultous
	.type	curlx_ultous,@function
curlx_ultous:                           # @curlx_ultous
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
                                        # kill: def $ax killed $ax killed $rax
	retq
.Lfunc_end142:
	.size	curlx_ultous, .Lfunc_end142-curlx_ultous
	.cfi_endproc
                                        # -- End function
	.globl	curlx_ultouc            # -- Begin function curlx_ultouc
	.type	curlx_ultouc,@function
curlx_ultouc:                           # @curlx_ultouc
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
                                        # kill: def $al killed $al killed $rax
	retq
.Lfunc_end143:
	.size	curlx_ultouc, .Lfunc_end143-curlx_ultouc
	.cfi_endproc
                                        # -- End function
	.globl	curlx_uztosi            # -- Begin function curlx_uztosi
	.type	curlx_uztosi,@function
curlx_uztosi:                           # @curlx_uztosi
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	andl	$2147483647, %eax       # imm = 0x7FFFFFFF
                                        # kill: def $eax killed $eax killed $rax
	retq
.Lfunc_end144:
	.size	curlx_uztosi, .Lfunc_end144-curlx_uztosi
	.cfi_endproc
                                        # -- End function
	.globl	curlx_uztoul            # -- Begin function curlx_uztoul
	.type	curlx_uztoul,@function
curlx_uztoul:                           # @curlx_uztoul
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	retq
.Lfunc_end145:
	.size	curlx_uztoul, .Lfunc_end145-curlx_uztoul
	.cfi_endproc
                                        # -- End function
	.globl	curlx_uztoui            # -- Begin function curlx_uztoui
	.type	curlx_uztoui,@function
curlx_uztoui:                           # @curlx_uztoui
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
                                        # kill: def $eax killed $eax killed $rax
	retq
.Lfunc_end146:
	.size	curlx_uztoui, .Lfunc_end146-curlx_uztoui
	.cfi_endproc
                                        # -- End function
	.globl	curlx_sltosi            # -- Begin function curlx_sltosi
	.type	curlx_sltosi,@function
curlx_sltosi:                           # @curlx_sltosi
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	andl	$2147483647, %eax       # imm = 0x7FFFFFFF
                                        # kill: def $eax killed $eax killed $rax
	retq
.Lfunc_end147:
	.size	curlx_sltosi, .Lfunc_end147-curlx_sltosi
	.cfi_endproc
                                        # -- End function
	.globl	curlx_sltoui            # -- Begin function curlx_sltoui
	.type	curlx_sltoui,@function
curlx_sltoui:                           # @curlx_sltoui
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
                                        # kill: def $eax killed $eax killed $rax
	retq
.Lfunc_end148:
	.size	curlx_sltoui, .Lfunc_end148-curlx_sltoui
	.cfi_endproc
                                        # -- End function
	.globl	curlx_sltous            # -- Begin function curlx_sltous
	.type	curlx_sltous,@function
curlx_sltous:                           # @curlx_sltous
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
                                        # kill: def $ax killed $ax killed $rax
	retq
.Lfunc_end149:
	.size	curlx_sltous, .Lfunc_end149-curlx_sltous
	.cfi_endproc
                                        # -- End function
	.globl	curlx_uztosz            # -- Begin function curlx_uztosz
	.type	curlx_uztosz,@function
curlx_uztosz:                           # @curlx_uztosz
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	btrq	$63, %rax
	retq
.Lfunc_end150:
	.size	curlx_uztosz, .Lfunc_end150-curlx_uztosz
	.cfi_endproc
                                        # -- End function
	.globl	curlx_sztosi            # -- Begin function curlx_sztosi
	.type	curlx_sztosi,@function
curlx_sztosi:                           # @curlx_sztosi
	.cfi_startproc
# %bb.0:
	movq	%rdi, %rax
	andl	$2147483647, %eax       # imm = 0x7FFFFFFF
                                        # kill: def $eax killed $eax killed $rax
	retq
.Lfunc_end151:
	.size	curlx_sztosi, .Lfunc_end151-curlx_sztosi
	.cfi_endproc
                                        # -- End function
	.globl	curlx_uitous            # -- Begin function curlx_uitous
	.type	curlx_uitous,@function
curlx_uitous:                           # @curlx_uitous
	.cfi_startproc
# %bb.0:
	movl	%edi, %eax
                                        # kill: def $ax killed $ax killed $eax
	retq
.Lfunc_end152:
	.size	curlx_uitous, .Lfunc_end152-curlx_uitous
	.cfi_endproc
                                        # -- End function
	.globl	curlx_sitouz            # -- Begin function curlx_sitouz
	.type	curlx_sitouz,@function
curlx_sitouz:                           # @curlx_sitouz
	.cfi_startproc
# %bb.0:
	movslq	%edi, %rax
	retq
.Lfunc_end153:
	.size	curlx_sitouz, .Lfunc_end153-curlx_sitouz
	.cfi_endproc
                                        # -- End function
	.globl	Curl_isxdigit           # -- Begin function Curl_isxdigit
	.type	Curl_isxdigit,@function
Curl_isxdigit:                          # @Curl_isxdigit
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$127, %edi
	ja	.LBB154_2
# %bb.1:
	movl	%edi, %eax
	movzbl	ascii(%rax), %eax
	andl	$68, %eax
.LBB154_2:
	retq
.Lfunc_end154:
	.size	Curl_isxdigit, .Lfunc_end154-Curl_isxdigit
	.cfi_endproc
                                        # -- End function
	.globl	Curl_isgraph            # -- Begin function Curl_isgraph
	.type	Curl_isgraph,@function
Curl_isgraph:                           # @Curl_isgraph
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$127, %edi
	ja	.LBB155_3
# %bb.1:
	cmpl	$32, %edi
	je	.LBB155_3
# %bb.2:
	movl	%edi, %eax
	movzbl	ascii(%rax), %eax
	andl	$95, %eax
.LBB155_3:
	retq
.Lfunc_end155:
	.size	Curl_isgraph, .Lfunc_end155-Curl_isgraph
	.cfi_endproc
                                        # -- End function
	.globl	Curl_isprint            # -- Begin function Curl_isprint
	.type	Curl_isprint,@function
Curl_isprint:                           # @Curl_isprint
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$127, %edi
	ja	.LBB156_2
# %bb.1:
	movl	%edi, %eax
	movzbl	ascii(%rax), %eax
	andl	$95, %eax
.LBB156_2:
	retq
.Lfunc_end156:
	.size	Curl_isprint, .Lfunc_end156-Curl_isprint
	.cfi_endproc
                                        # -- End function
	.globl	Curl_isupper            # -- Begin function Curl_isupper
	.type	Curl_isupper,@function
Curl_isupper:                           # @Curl_isupper
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$127, %edi
	ja	.LBB157_2
# %bb.1:
	movl	%edi, %eax
	movzbl	ascii(%rax), %eax
	andl	$1, %eax
.LBB157_2:
	retq
.Lfunc_end157:
	.size	Curl_isupper, .Lfunc_end157-Curl_isupper
	.cfi_endproc
                                        # -- End function
	.globl	Curl_islower            # -- Begin function Curl_islower
	.type	Curl_islower,@function
Curl_islower:                           # @Curl_islower
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$127, %edi
	ja	.LBB158_2
# %bb.1:
	movl	%edi, %eax
	movzbl	ascii(%rax), %eax
	andl	$2, %eax
.LBB158_2:
	retq
.Lfunc_end158:
	.size	Curl_islower, .Lfunc_end158-Curl_islower
	.cfi_endproc
                                        # -- End function
	.globl	Curl_iscntrl            # -- Begin function Curl_iscntrl
	.type	Curl_iscntrl,@function
Curl_iscntrl:                           # @Curl_iscntrl
	.cfi_startproc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$127, %edi
	ja	.LBB159_2
# %bb.1:
	movl	%edi, %eax
	movzbl	ascii(%rax), %eax
	andl	$32, %eax
.LBB159_2:
	retq
.Lfunc_end159:
	.size	Curl_iscntrl, .Lfunc_end159-Curl_iscntrl
	.cfi_endproc
                                        # -- End function
	.globl	curlx_dyn_uptr          # -- Begin function curlx_dyn_uptr
	.type	curlx_dyn_uptr,@function
curlx_dyn_uptr:                         # @curlx_dyn_uptr
	.cfi_startproc
# %bb.0:
	movq	(%rdi), %rax
	retq
.Lfunc_end160:
	.size	curlx_dyn_uptr, .Lfunc_end160-curlx_dyn_uptr
	.cfi_endproc
                                        # -- End function
	.globl	add_ptr                 # -- Begin function add_ptr
	.p2align	4, 0x90
	.type	add_ptr,@function
add_ptr:                                # @add_ptr
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -96(%rbp)
	movl	$72, %edi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-96(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 8(%rcx)
# %bb.1:
	jmp	.LBB161_2
.LBB161_2:
	jmp	.LBB161_3
.LBB161_3:
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
	movl	$-17973521, -12(%rbp)   # imm = 0xFEEDBEEF
	movl	$-1640531527, -16(%rbp) # imm = 0x9E3779B9
	movl	$-1640531527, -20(%rbp) # imm = 0x9E3779B9
	movl	$4, -48(%rbp)
.LBB161_4:                              # =>This Inner Loop Header: Depth=1
	cmpl	$12, -48(%rbp)
	jb	.LBB161_8
# %bb.5:                                #   in Loop: Header=BB161_4 Depth=1
	movq	-40(%rbp), %rax
	movzbl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movzbl	1(%rcx), %ecx
	shll	$8, %ecx
	addl	%ecx, %eax
	movq	-40(%rbp), %rcx
	movzbl	2(%rcx), %ecx
	shll	$16, %ecx
	addl	%ecx, %eax
	movq	-40(%rbp), %rcx
	movzbl	3(%rcx), %ecx
	shll	$24, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movzbl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movzbl	5(%rcx), %ecx
	shll	$8, %ecx
	addl	%ecx, %eax
	movq	-40(%rbp), %rcx
	movzbl	6(%rcx), %ecx
	shll	$16, %ecx
	addl	%ecx, %eax
	movq	-40(%rbp), %rcx
	movzbl	7(%rcx), %ecx
	shll	$24, %ecx
	addl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	movzbl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movzbl	9(%rcx), %ecx
	shll	$8, %ecx
	addl	%ecx, %eax
	movq	-40(%rbp), %rcx
	movzbl	10(%rcx), %ecx
	shll	$16, %ecx
	addl	%ecx, %eax
	movq	-40(%rbp), %rcx
	movzbl	11(%rcx), %ecx
	shll	$24, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.6:                                #   in Loop: Header=BB161_4 Depth=1
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	shrl	$13, %eax
	xorl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$8, %eax
	xorl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	shrl	$13, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	shrl	$12, %eax
	xorl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$16, %eax
	xorl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	shrl	$5, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	shrl	$3, %eax
	xorl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$10, %eax
	xorl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	shrl	$15, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.7:                                #   in Loop: Header=BB161_4 Depth=1
	movq	-40(%rbp), %rax
	addq	$12, %rax
	movq	%rax, -40(%rbp)
	movl	-48(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB161_4
.LBB161_8:
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB161_21
# %bb.9:
	movq	.LJTI161_0(,%rax,8), %rax
	jmpq	*%rax
.LBB161_10:
	movq	-40(%rbp), %rax
	movzbl	10(%rax), %eax
	shll	$24, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB161_11:
	movq	-40(%rbp), %rax
	movzbl	9(%rax), %eax
	shll	$16, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB161_12:
	movq	-40(%rbp), %rax
	movzbl	8(%rax), %eax
	shll	$8, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB161_13:
	movq	-40(%rbp), %rax
	movzbl	7(%rax), %eax
	shll	$24, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB161_14:
	movq	-40(%rbp), %rax
	movzbl	6(%rax), %eax
	shll	$16, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB161_15:
	movq	-40(%rbp), %rax
	movzbl	5(%rax), %eax
	shll	$8, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB161_16:
	movq	-40(%rbp), %rax
	movzbl	4(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB161_17:
	movq	-40(%rbp), %rax
	movzbl	3(%rax), %eax
	shll	$24, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB161_18:
	movq	-40(%rbp), %rax
	movzbl	2(%rax), %eax
	shll	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB161_19:
	movq	-40(%rbp), %rax
	movzbl	1(%rax), %eax
	shll	$8, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB161_20:
	movq	-40(%rbp), %rax
	movzbl	(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB161_21:
	jmp	.LBB161_22
.LBB161_22:
	jmp	.LBB161_23
.LBB161_23:
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	shrl	$13, %eax
	xorl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$8, %eax
	xorl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	shrl	$13, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	shrl	$12, %eax
	xorl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$16, %eax
	xorl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	shrl	$5, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-12(%rbp), %eax
	shrl	$3, %eax
	xorl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$10, %eax
	xorl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-16(%rbp), %eax
	shrl	$15, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.24:
	jmp	.LBB161_25
.LBB161_25:
	jmp	.LBB161_26
.LBB161_26:
	jmp	.LBB161_27
.LBB161_27:
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 68(%rcx)
	movq	-32(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, 64(%rax)
	cmpq	$0, ptr_map
	jne	.LBB161_37
# %bb.28:
	movq	-32(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 24(%rax)
# %bb.29:
	movl	$64, %edi
	callq	malloc
	movq	-32(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-32(%rbp), %rax
	cmpq	$0, 16(%rax)
	jne	.LBB161_31
# %bb.30:
	movabsq	$_buf, %rdi
	movl	$1, %esi
	callq	longjmp
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB161_31:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rdi
	xorl	%esi, %esi
	movl	$64, %edx
	callq	memset
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	$32, 8(%rax)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	$5, 12(%rax)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	-32(%rbp), %rcx
	subq	%rcx, %rax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rax, 32(%rcx)
	movl	$512, %edi              # imm = 0x200
	callq	malloc
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	$-1609490463, 56(%rax)  # imm = 0xA0111FE1
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	cmpq	$0, (%rax)
	jne	.LBB161_33
# %bb.32:
	movabsq	$_buf, %rdi
	movl	$1, %esi
	callq	longjmp
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB161_33:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rdi
	xorl	%esi, %esi
	movl	$512, %edx              # imm = 0x200
	callq	memset
# %bb.34:
	jmp	.LBB161_35
.LBB161_35:
	jmp	.LBB161_36
.LBB161_36:
	movq	-32(%rbp), %rax
	movq	%rax, ptr_map
	jmp	.LBB161_40
.LBB161_37:
	movq	ptr_map, %rax
	movq	16(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 16(%rcx)
# %bb.38:
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movq	$0, 32(%rcx)
	movq	ptr_map, %rcx
	movq	16(%rcx), %rcx
	movq	24(%rcx), %rcx
	movq	ptr_map, %rdx
	movq	16(%rdx), %rdx
	subq	32(%rdx), %rax
	addq	%rax, %rcx
	movq	-32(%rbp), %rax
	movq	%rcx, 24(%rax)
	movq	-32(%rbp), %rax
	movq	ptr_map, %rcx
	movq	16(%rcx), %rcx
	movq	24(%rcx), %rcx
	movq	%rax, 16(%rcx)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	ptr_map, %rcx
	movq	16(%rcx), %rcx
	movq	%rax, 24(%rcx)
# %bb.39:
	jmp	.LBB161_40
.LBB161_40:
	jmp	.LBB161_41
.LBB161_41:
	movq	ptr_map, %rax
	movq	16(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
# %bb.42:
	movl	-12(%rbp), %eax
	movq	ptr_map, %rcx
	movq	16(%rcx), %rcx
	movl	8(%rcx), %ecx
	subl	$1, %ecx
	andl	%ecx, %eax
	movl	%eax, -88(%rbp)
# %bb.43:
	jmp	.LBB161_44
.LBB161_44:
	movq	ptr_map, %rax
	movq	16(%rax), %rax
	movq	(%rax), %rax
	movl	-88(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-32(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-72(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB161_46
# %bb.45:
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
.LBB161_46:
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-72(%rbp), %rax
	movl	8(%rax), %eax
	movq	-72(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	$1, %ecx
	imull	$10, %ecx, %ecx
	cmpl	%ecx, %eax
	jb	.LBB161_74
# %bb.47:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	cmpl	$0, 52(%rax)
	jne	.LBB161_74
# %bb.48:
	jmp	.LBB161_49
.LBB161_49:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	8(%rax), %edi
	shlq	$4, %rdi
	shlq	$1, %rdi
	callq	malloc
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	jne	.LBB161_51
# %bb.50:
	movabsq	$_buf, %rdi
	movl	$1, %esi
	callq	longjmp
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB161_51:
	xorl	%ebx, %ebx
	movq	-80(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	8(%rax), %edx
	shlq	$4, %rdx
	shlq	$1, %rdx
	xorl	%esi, %esi
	callq	memset
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	12(%rcx), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	16(%rcx), %ecx
	movq	-32(%rbp), %rdx
	movq	16(%rdx), %rdx
	movl	8(%rdx), %edx
	shll	$1, %edx
	subl	$1, %edx
	andl	%edx, %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %ebx
	addl	%ebx, %eax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	$0, 44(%rax)
	movl	$0, -44(%rbp)
.LBB161_52:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_54 Depth 2
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	cmpl	8(%rcx), %eax
	jae	.LBB161_66
# %bb.53:                               #   in Loop: Header=BB161_52 Depth=1
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rax
	movl	-44(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB161_54:                             #   Parent Loop BB161_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB161_64
# %bb.55:                               #   in Loop: Header=BB161_54 Depth=2
	movq	-64(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -104(%rbp)
# %bb.56:                               #   in Loop: Header=BB161_54 Depth=2
	movq	-64(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	8(%rcx), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	andl	%ecx, %eax
	movl	%eax, -84(%rbp)
# %bb.57:                               #   in Loop: Header=BB161_54 Depth=2
	movq	-80(%rbp), %rax
	movl	-84(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	cmpl	40(%rax), %ecx
	jbe	.LBB161_61
# %bb.58:                               #   in Loop: Header=BB161_54 Depth=2
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	44(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 44(%rax)
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-32(%rbp), %rdx
	movq	16(%rdx), %rdx
	imull	40(%rdx), %ecx
	cmpl	%ecx, %eax
	jbe	.LBB161_60
# %bb.59:                               #   in Loop: Header=BB161_54 Depth=2
	movq	-56(%rbp), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
.LBB161_60:                             #   in Loop: Header=BB161_54 Depth=2
	jmp	.LBB161_61
.LBB161_61:                             #   in Loop: Header=BB161_54 Depth=2
	movq	-64(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-56(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB161_63
# %bb.62:                               #   in Loop: Header=BB161_54 Depth=2
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
.LBB161_63:                             #   in Loop: Header=BB161_54 Depth=2
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-104(%rbp), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB161_54
.LBB161_64:                             #   in Loop: Header=BB161_52 Depth=1
	jmp	.LBB161_65
.LBB161_65:                             #   in Loop: Header=BB161_52 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB161_52
.LBB161_66:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	8(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-80(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	16(%rcx), %ecx
	shrl	$1, %ecx
	cmpl	%ecx, %eax
	jbe	.LBB161_68
# %bb.67:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	48(%rax), %eax
	addl	$1, %eax
	jmp	.LBB161_69
.LBB161_68:
	xorl	%eax, %eax
	jmp	.LBB161_69
.LBB161_69:
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	cmpl	$1, 48(%rax)
	jbe	.LBB161_71
# %bb.70:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	$1, 52(%rax)
.LBB161_71:
	jmp	.LBB161_72
.LBB161_72:
	jmp	.LBB161_73
.LBB161_73:
	jmp	.LBB161_74
.LBB161_74:
	jmp	.LBB161_75
.LBB161_75:
	jmp	.LBB161_76
.LBB161_76:
	jmp	.LBB161_77
.LBB161_77:
	jmp	.LBB161_78
.LBB161_78:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end161:
	.size	add_ptr, .Lfunc_end161-add_ptr
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI161_0:
	.quad	.LBB161_20
	.quad	.LBB161_19
	.quad	.LBB161_18
	.quad	.LBB161_17
	.quad	.LBB161_16
	.quad	.LBB161_15
	.quad	.LBB161_14
	.quad	.LBB161_13
	.quad	.LBB161_12
	.quad	.LBB161_11
	.quad	.LBB161_10
                                        # -- End function
	.text
	.globl	find_ptr                # -- Begin function find_ptr
	.p2align	4, 0x90
	.type	find_ptr,@function
find_ptr:                               # @find_ptr
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -44(%rbp)
# %bb.1:
	movq	$0, -32(%rbp)
	cmpq	$0, ptr_map
	je	.LBB162_55
# %bb.2:
	jmp	.LBB162_3
.LBB162_3:
	jmp	.LBB162_4
.LBB162_4:
	leaq	-44(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$-17973521, -4(%rbp)    # imm = 0xFEEDBEEF
	movl	$-1640531527, -8(%rbp)  # imm = 0x9E3779B9
	movl	$-1640531527, -12(%rbp) # imm = 0x9E3779B9
	movl	$4, -36(%rbp)
.LBB162_5:                              # =>This Inner Loop Header: Depth=1
	cmpl	$12, -36(%rbp)
	jb	.LBB162_9
# %bb.6:                                #   in Loop: Header=BB162_5 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	movq	-24(%rbp), %rcx
	movzbl	1(%rcx), %ecx
	shll	$8, %ecx
	addl	%ecx, %eax
	movq	-24(%rbp), %rcx
	movzbl	2(%rcx), %ecx
	shll	$16, %ecx
	addl	%ecx, %eax
	movq	-24(%rbp), %rcx
	movzbl	3(%rcx), %ecx
	shll	$24, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	movzbl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movzbl	5(%rcx), %ecx
	shll	$8, %ecx
	addl	%ecx, %eax
	movq	-24(%rbp), %rcx
	movzbl	6(%rcx), %ecx
	shll	$16, %ecx
	addl	%ecx, %eax
	movq	-24(%rbp), %rcx
	movzbl	7(%rcx), %ecx
	shll	$24, %ecx
	addl	%ecx, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	movzbl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movzbl	9(%rcx), %ecx
	shll	$8, %ecx
	addl	%ecx, %eax
	movq	-24(%rbp), %rcx
	movzbl	10(%rcx), %ecx
	shll	$16, %ecx
	addl	%ecx, %eax
	movq	-24(%rbp), %rcx
	movzbl	11(%rcx), %ecx
	shll	$24, %ecx
	addl	%ecx, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
# %bb.7:                                #   in Loop: Header=BB162_5 Depth=1
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	shrl	$13, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	shll	$8, %eax
	xorl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	shrl	$13, %eax
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	shrl	$12, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	shll	$16, %eax
	xorl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	shrl	$5, %eax
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	shrl	$3, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	shll	$10, %eax
	xorl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	shrl	$15, %eax
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
# %bb.8:                                #   in Loop: Header=BB162_5 Depth=1
	movq	-24(%rbp), %rax
	addq	$12, %rax
	movq	%rax, -24(%rbp)
	movl	-36(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB162_5
.LBB162_9:
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	movl	-36(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB162_22
# %bb.10:
	movq	.LJTI162_0(,%rax,8), %rax
	jmpq	*%rax
.LBB162_11:
	movq	-24(%rbp), %rax
	movzbl	10(%rax), %eax
	shll	$24, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB162_12:
	movq	-24(%rbp), %rax
	movzbl	9(%rax), %eax
	shll	$16, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB162_13:
	movq	-24(%rbp), %rax
	movzbl	8(%rax), %eax
	shll	$8, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB162_14:
	movq	-24(%rbp), %rax
	movzbl	7(%rax), %eax
	shll	$24, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB162_15:
	movq	-24(%rbp), %rax
	movzbl	6(%rax), %eax
	shll	$16, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB162_16:
	movq	-24(%rbp), %rax
	movzbl	5(%rax), %eax
	shll	$8, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB162_17:
	movq	-24(%rbp), %rax
	movzbl	4(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB162_18:
	movq	-24(%rbp), %rax
	movzbl	3(%rax), %eax
	shll	$24, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB162_19:
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	shll	$16, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB162_20:
	movq	-24(%rbp), %rax
	movzbl	1(%rax), %eax
	shll	$8, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB162_21:
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB162_22:
	jmp	.LBB162_23
.LBB162_23:
	jmp	.LBB162_24
.LBB162_24:
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	shrl	$13, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	shll	$8, %eax
	xorl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	shrl	$13, %eax
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	shrl	$12, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	shll	$16, %eax
	xorl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	shrl	$5, %eax
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-4(%rbp), %eax
	shrl	$3, %eax
	xorl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-12(%rbp), %eax
	shll	$10, %eax
	xorl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %eax
	shrl	$15, %eax
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
# %bb.25:
	jmp	.LBB162_26
.LBB162_26:
	jmp	.LBB162_27
.LBB162_27:
	jmp	.LBB162_28
.LBB162_28:
	movq	$0, -32(%rbp)
	cmpq	$0, ptr_map
	je	.LBB162_53
# %bb.29:
	jmp	.LBB162_30
.LBB162_30:
	movl	-4(%rbp), %eax
	movq	ptr_map, %rcx
	movq	16(%rcx), %rcx
	movl	8(%rcx), %ecx
	subl	$1, %ecx
	andl	%ecx, %eax
	movl	%eax, -40(%rbp)
# %bb.31:
	jmp	.LBB162_32
.LBB162_32:
	movq	ptr_map, %rax
	movq	16(%rax), %rax
	movq	(%rax), %rax
	movl	-40(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	cmpq	$0, (%rax)
	je	.LBB162_36
# %bb.33:
	jmp	.LBB162_34
.LBB162_34:
	xorl	%eax, %eax
	movq	ptr_map, %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-40(%rbp), %edx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	(%rcx), %rcx
	movq	ptr_map, %rdx
	movq	16(%rdx), %rdx
	subq	32(%rdx), %rax
	addq	%rax, %rcx
	movq	%rcx, -32(%rbp)
# %bb.35:
	jmp	.LBB162_37
.LBB162_36:
	movq	$0, -32(%rbp)
.LBB162_37:
	jmp	.LBB162_38
.LBB162_38:                             # =>This Inner Loop Header: Depth=1
	cmpq	$0, -32(%rbp)
	je	.LBB162_50
# %bb.39:                               #   in Loop: Header=BB162_38 Depth=1
	movq	-32(%rbp), %rax
	movl	68(%rax), %eax
	cmpl	-4(%rbp), %eax
	jne	.LBB162_44
# %bb.40:                               #   in Loop: Header=BB162_38 Depth=1
	movq	-32(%rbp), %rax
	movl	64(%rax), %eax
	cmpq	$4, %rax
	jne	.LBB162_44
# %bb.41:                               #   in Loop: Header=BB162_38 Depth=1
	movq	-32(%rbp), %rax
	movq	56(%rax), %rax
	leaq	-44(%rbp), %rcx
	movl	(%rcx), %ecx
	movl	(%rax), %eax
	xorl	%edx, %edx
	subl	%ecx, %eax
	setne	%dl
	cmpl	$0, %edx
	jne	.LBB162_43
# %bb.42:
	jmp	.LBB162_51
.LBB162_43:                             #   in Loop: Header=BB162_38 Depth=1
	jmp	.LBB162_44
.LBB162_44:                             #   in Loop: Header=BB162_38 Depth=1
	movq	-32(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB162_48
# %bb.45:                               #   in Loop: Header=BB162_38 Depth=1
	jmp	.LBB162_46
.LBB162_46:                             #   in Loop: Header=BB162_38 Depth=1
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	ptr_map, %rdx
	movq	16(%rdx), %rdx
	subq	32(%rdx), %rax
	addq	%rax, %rcx
	movq	%rcx, -32(%rbp)
# %bb.47:                               #   in Loop: Header=BB162_38 Depth=1
	jmp	.LBB162_49
.LBB162_48:                             #   in Loop: Header=BB162_38 Depth=1
	movq	$0, -32(%rbp)
.LBB162_49:                             #   in Loop: Header=BB162_38 Depth=1
	jmp	.LBB162_38
.LBB162_50:                             # %.loopexit
	jmp	.LBB162_51
.LBB162_51:
	jmp	.LBB162_52
.LBB162_52:
	jmp	.LBB162_53
.LBB162_53:
	jmp	.LBB162_54
.LBB162_54:
	jmp	.LBB162_55
.LBB162_55:
	jmp	.LBB162_56
.LBB162_56:
	movq	-32(%rbp), %rax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end162:
	.size	find_ptr, .Lfunc_end162-find_ptr
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI162_0:
	.quad	.LBB162_21
	.quad	.LBB162_20
	.quad	.LBB162_19
	.quad	.LBB162_18
	.quad	.LBB162_17
	.quad	.LBB162_16
	.quad	.LBB162_15
	.quad	.LBB162_14
	.quad	.LBB162_13
	.quad	.LBB162_12
	.quad	.LBB162_11
                                        # -- End function
	.text
	.globl	delete_ptr              # -- Begin function delete_ptr
	.p2align	4, 0x90
	.type	delete_ptr,@function
delete_ptr:                             # @delete_ptr
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
# %bb.1:
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	jne	.LBB163_4
# %bb.2:
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	jne	.LBB163_4
# %bb.3:
	movq	ptr_map, %rax
	movq	16(%rax), %rax
	movq	(%rax), %rdi
	callq	free
	movq	ptr_map, %rax
	movq	16(%rax), %rdi
	callq	free
	movq	$0, ptr_map
	jmp	.LBB163_24
.LBB163_4:
	movq	-8(%rbp), %rax
	movq	ptr_map, %rcx
	movq	16(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jne	.LBB163_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	ptr_map, %rcx
	movq	16(%rcx), %rcx
	addq	32(%rcx), %rax
	movq	ptr_map, %rcx
	movq	16(%rcx), %rcx
	movq	%rax, 24(%rcx)
.LBB163_6:
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB163_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	ptr_map, %rdx
	movq	16(%rdx), %rdx
	movq	32(%rdx), %rdx
	movq	%rax, 16(%rcx,%rdx)
	jmp	.LBB163_11
.LBB163_8:
	jmp	.LBB163_9
.LBB163_9:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, ptr_map
# %bb.10:
	jmp	.LBB163_11
.LBB163_11:
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.LBB163_13
# %bb.12:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	ptr_map, %rdx
	movq	16(%rdx), %rdx
	movq	32(%rdx), %rdx
	movq	%rax, 8(%rcx,%rdx)
.LBB163_13:
	jmp	.LBB163_14
.LBB163_14:
	movq	-8(%rbp), %rax
	movl	52(%rax), %eax
	movq	ptr_map, %rcx
	movq	16(%rcx), %rcx
	movl	8(%rcx), %ecx
	subl	$1, %ecx
	andl	%ecx, %eax
	movl	%eax, -20(%rbp)
# %bb.15:
	jmp	.LBB163_16
.LBB163_16:
	movq	ptr_map, %rax
	movq	16(%rax), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-8(%rbp), %rax
	jne	.LBB163_18
# %bb.17:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB163_18:
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB163_20
# %bb.19:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rcx
	movq	%rax, 32(%rcx)
.LBB163_20:
	movq	-8(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB163_22
# %bb.21:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	%rax, 24(%rcx)
.LBB163_22:
	jmp	.LBB163_23
.LBB163_23:
	movq	ptr_map, %rax
	movq	16(%rax), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
.LBB163_24:
	jmp	.LBB163_25
.LBB163_25:
	movq	-32(%rbp), %rdi
	callq	free
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end163:
	.size	delete_ptr, .Lfunc_end163-delete_ptr
	.cfi_endproc
                                        # -- End function
	.globl	myMalloc                # -- Begin function myMalloc
	.p2align	4, 0x90
	.type	myMalloc,@function
myMalloc:                               # @myMalloc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	malloc
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rsi
	movabsq	$.L.str.575, %rdi
	movb	$0, %al
	callq	printf
	movq	-8(%rbp), %rdi
	callq	add_ptr
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end164:
	.size	myMalloc, .Lfunc_end164-myMalloc
	.cfi_endproc
                                        # -- End function
	.globl	myFree                  # -- Begin function myFree
	.p2align	4, 0x90
	.type	myFree,@function
myFree:                                 # @myFree
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movabsq	$.L.str.1.576, %rdi
	movb	$0, %al
	callq	printf
	movq	-8(%rbp), %rdi
                                        # kill: def $edi killed $edi killed $rdi
	callq	find_ptr
	movq	%rax, %rdi
	callq	delete_ptr
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end165:
	.size	myFree, .Lfunc_end165-myFree
	.cfi_endproc
                                        # -- End function
	.globl	free_ptrs               # -- Begin function free_ptrs
	.p2align	4, 0x90
	.type	free_ptrs,@function
free_ptrs:                              # @free_ptrs
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	ptr_map, %rax
	movq	%rax, -8(%rbp)
.LBB166_1:                              # =>This Inner Loop Header: Depth=1
	cmpq	$0, -8(%rbp)
	je	.LBB166_4
# %bb.2:                                #   in Loop: Header=BB166_1 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	myFree
# %bb.3:                                #   in Loop: Header=BB166_1 Depth=1
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB166_1
.LBB166_4:
	jmp	.LBB166_5
.LBB166_5:
	cmpq	$0, ptr_map
	je	.LBB166_7
# %bb.6:
	movq	ptr_map, %rax
	movq	16(%rax), %rax
	movq	(%rax), %rdi
	callq	free
	movq	ptr_map, %rax
	movq	16(%rax), %rdi
	callq	free
	movq	$0, ptr_map
.LBB166_7:
	jmp	.LBB166_8
.LBB166_8:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end166:
	.size	free_ptrs, .Lfunc_end166-free_ptrs
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function main
.LCPI167_0:
	.quad	4696837146684686336     # double 1.0E+6
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1000, %rsp             # imm = 0x3E8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$0, -1024(%rbp)
	movl	%edi, -60(%rbp)         # 4-byte Spill
	movl	%edi, -1020(%rbp)
	movq	%rsi, -976(%rbp)        # 8-byte Spill
	movq	%rsi, -1032(%rbp)
	movabsq	$.L.str.2.577, %rdi
	movabsq	$.L.str.3.578, %rsi
	callq	fopen
	movq	%rax, -1016(%rbp)
	callq	clock
	movq	%rax, -1000(%rbp)
	movl	$0, -44(%rbp)
.LBB167_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$10000, -44(%rbp)       # imm = 0x2710
	jge	.LBB167_7
# %bb.2:                                #   in Loop: Header=BB167_1 Depth=1
	callq	clock
	movq	%rax, -1008(%rbp)
	movabsq	$_buf, %rdi
	callq	_setjmp
	cmpl	$0, %eax
	je	.LBB167_4
# %bb.3:                                #   in Loop: Header=BB167_1 Depth=1
	movabsq	$.L.str.4.579, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB167_5
.LBB167_4:                              #   in Loop: Header=BB167_1 Depth=1
	movq	PTRTRACKER_copy(%rip), %rax
	movq	%rax, -968(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+8(%rip), %rax
	movq	%rax, -960(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+16(%rip), %rax
	movq	%rax, -952(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+24(%rip), %rax
	movq	%rax, -944(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+32(%rip), %rax
	movq	%rax, -936(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+40(%rip), %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+48(%rip), %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+56(%rip), %rax
	movq	%rax, -912(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+64(%rip), %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+72(%rip), %rax
	movq	%rax, -896(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+80(%rip), %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+88(%rip), %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+96(%rip), %rax
	movq	%rax, -872(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+104(%rip), %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+112(%rip), %rax
	movq	%rax, -856(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+120(%rip), %rax
	movq	%rax, -840(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+128(%rip), %rax
	movq	%rax, -832(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+136(%rip), %rax
	movq	%rax, -808(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+144(%rip), %rax
	movq	%rax, -800(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+152(%rip), %rax
	movq	%rax, -792(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+160(%rip), %rax
	movq	%rax, -768(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+168(%rip), %rax
	movq	%rax, -760(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+176(%rip), %rax
	movq	%rax, -736(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+184(%rip), %rax
	movq	%rax, -728(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+192(%rip), %rax
	movq	%rax, -704(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+200(%rip), %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+208(%rip), %rax
	movq	%rax, -672(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+216(%rip), %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+224(%rip), %rax
	movq	%rax, -640(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+232(%rip), %rax
	movq	%rax, -632(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+240(%rip), %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+248(%rip), %rax
	movq	%rax, -600(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+256(%rip), %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+264(%rip), %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+272(%rip), %rax
	movq	%rax, -544(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+280(%rip), %rax
	movq	%rax, -536(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+288(%rip), %rax
	movq	%rax, -512(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+296(%rip), %rax
	movq	%rax, -504(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+304(%rip), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+312(%rip), %rax
	movq	%rax, -472(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+320(%rip), %rax
	movq	%rax, -448(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+328(%rip), %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+336(%rip), %rax
	movq	%rax, -416(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+344(%rip), %rax
	movq	%rax, -400(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+352(%rip), %rax
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+360(%rip), %rax
	movq	%rax, -352(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+368(%rip), %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+376(%rip), %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+384(%rip), %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+392(%rip), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+400(%rip), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+408(%rip), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+416(%rip), %r12
	movq	PTRTRACKER_copy+424(%rip), %r15
	movq	PTRTRACKER_copy+432(%rip), %r14
	movq	PTRTRACKER_copy+440(%rip), %r11
	movq	PTRTRACKER_copy+448(%rip), %r10
	movq	PTRTRACKER_copy+456(%rip), %r9
	movq	PTRTRACKER_copy+464(%rip), %r8
	movq	PTRTRACKER_copy+472(%rip), %rdi
	movq	PTRTRACKER_copy+480(%rip), %rsi
	movq	PTRTRACKER_copy+488(%rip), %rdx
	movq	PTRTRACKER_copy+496(%rip), %rcx
	movq	PTRTRACKER_copy+504(%rip), %rax
	movq	PTRTRACKER_copy+512(%rip), %r13
	movq	%r13, -848(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+520(%rip), %rbx
	movq	%rbx, -816(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+528(%rip), %r13
	movq	%r13, -824(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+536(%rip), %rbx
	movq	%rbx, -776(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+544(%rip), %rbx
	movq	%rbx, -744(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+552(%rip), %r13
	movq	%r13, -784(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+560(%rip), %rbx
	movq	%rbx, -712(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+568(%rip), %rbx
	movq	%rbx, -752(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+576(%rip), %rbx
	movq	%rbx, -680(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+584(%rip), %r13
	movq	%r13, -720(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+592(%rip), %rbx
	movq	%rbx, -648(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+600(%rip), %rbx
	movq	%rbx, -688(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+608(%rip), %rbx
	movq	%rbx, -616(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+616(%rip), %r13
	movq	%r13, -656(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+624(%rip), %rbx
	movq	%rbx, -584(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+632(%rip), %rbx
	movq	%rbx, -624(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+640(%rip), %rbx
	movq	%rbx, -552(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+648(%rip), %r13
	movq	%r13, -592(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+656(%rip), %rbx
	movq	%rbx, -520(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+664(%rip), %rbx
	movq	%rbx, -560(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+672(%rip), %rbx
	movq	%rbx, -488(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+680(%rip), %r13
	movq	%r13, -528(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+688(%rip), %rbx
	movq	%rbx, -456(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+696(%rip), %rbx
	movq	%rbx, -496(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+704(%rip), %rbx
	movq	%rbx, -424(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+712(%rip), %r13
	movq	%r13, -464(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+720(%rip), %rbx
	movq	%rbx, -384(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+728(%rip), %rbx
	movq	%rbx, -432(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+736(%rip), %rbx
	movq	%rbx, -336(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+744(%rip), %r13
	movq	%r13, -392(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+752(%rip), %rbx
	movq	%rbx, -288(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+760(%rip), %rbx
	movq	%rbx, -344(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+768(%rip), %rbx
	movq	%rbx, -240(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+776(%rip), %r13
	movq	%r13, -296(%rbp)        # 8-byte Spill
	movq	PTRTRACKER_copy+784(%rip), %r13
	movq	PTRTRACKER_copy+792(%rip), %rbx
	movq	%rbx, -248(%rbp)        # 8-byte Spill
	movq	%rax, PTRTRACKER+504(%rip)
	movq	%rcx, PTRTRACKER+496(%rip)
	movq	%rdx, PTRTRACKER+488(%rip)
	movq	%rsi, PTRTRACKER+480(%rip)
	movq	%rdi, PTRTRACKER+472(%rip)
	movq	%r8, PTRTRACKER+464(%rip)
	movq	%r9, PTRTRACKER+456(%rip)
	movq	%r10, PTRTRACKER+448(%rip)
	movq	%r11, PTRTRACKER+440(%rip)
	movq	%r14, PTRTRACKER+432(%rip)
	movq	%r15, PTRTRACKER+424(%rip)
	movq	%r12, PTRTRACKER+416(%rip)
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+408(%rip)
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+400(%rip)
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+392(%rip)
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+384(%rip)
	movq	-304(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+376(%rip)
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+368(%rip)
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+360(%rip)
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+352(%rip)
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+344(%rip)
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+336(%rip)
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+328(%rip)
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+320(%rip)
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+312(%rip)
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+304(%rip)
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+296(%rip)
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+288(%rip)
	movq	-536(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+280(%rip)
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+272(%rip)
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+264(%rip)
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+256(%rip)
	movq	-600(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+248(%rip)
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+240(%rip)
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+232(%rip)
	movq	-640(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+224(%rip)
	movq	-664(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+216(%rip)
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+208(%rip)
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+200(%rip)
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+192(%rip)
	movq	-728(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+184(%rip)
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+176(%rip)
	movq	-760(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+168(%rip)
	movq	-768(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+160(%rip)
	movq	-792(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+152(%rip)
	movq	-800(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+144(%rip)
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+136(%rip)
	movq	-832(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+128(%rip)
	movq	-840(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+120(%rip)
	movq	-856(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+112(%rip)
	movq	-864(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+104(%rip)
	movq	-872(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+96(%rip)
	movq	-880(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+88(%rip)
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+80(%rip)
	movq	-896(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+72(%rip)
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+64(%rip)
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+56(%rip)
	movq	-920(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+48(%rip)
	movq	-928(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+40(%rip)
	movq	-936(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+32(%rip)
	movq	-944(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+24(%rip)
	movq	-952(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+16(%rip)
	movq	-960(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+8(%rip)
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER(%rip)
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+792(%rip)
	movq	%r13, PTRTRACKER+784(%rip)
	movq	-296(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+776(%rip)
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+768(%rip)
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+760(%rip)
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+752(%rip)
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+744(%rip)
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+736(%rip)
	movq	-432(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+728(%rip)
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+720(%rip)
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+712(%rip)
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+704(%rip)
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+696(%rip)
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+688(%rip)
	movq	-528(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+680(%rip)
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+672(%rip)
	movq	-560(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+664(%rip)
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+656(%rip)
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+648(%rip)
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+640(%rip)
	movq	-624(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+632(%rip)
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+624(%rip)
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+616(%rip)
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+608(%rip)
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+600(%rip)
	movq	-648(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+592(%rip)
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+584(%rip)
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+576(%rip)
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+568(%rip)
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+560(%rip)
	movq	-784(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+552(%rip)
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+544(%rip)
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+536(%rip)
	movq	-824(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+528(%rip)
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+520(%rip)
	movq	-848(%rbp), %rax        # 8-byte Reload
	movq	%rax, PTRTRACKER+512(%rip)
	movq	ptr_map_copy(%rip), %rax
	movq	%rax, ptr_map(%rip)
	movl	_ctr_copy(%rip), %eax
	movl	%eax, _ctr(%rip)
	movb	indexwrapped_copy(%rip), %al
	movb	%al, indexwrapped(%rip)
	movq	speedstore_copy(%rip), %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	movq	speedstore_copy+8(%rip), %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	movq	speedstore_copy+16(%rip), %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	movq	speedstore_copy+24(%rip), %rax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	movq	speedstore_copy+32(%rip), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	movq	speedstore_copy+40(%rip), %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	speedstore_copy+48(%rip), %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	movq	speedstore_copy+56(%rip), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	movq	speedstore_copy+64(%rip), %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	speedstore_copy+72(%rip), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	speedstore_copy+80(%rip), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movq	speedstore_copy+88(%rip), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movq	speedstore_copy+96(%rip), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	speedstore_copy+104(%rip), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	speedstore_copy+112(%rip), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	speedstore_copy+120(%rip), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movq	speedstore_copy+128(%rip), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movq	speedstore_copy+136(%rip), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	speedstore_copy+144(%rip), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	speedstore_copy+152(%rip), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	speedstore_copy+160(%rip), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	speedstore_copy+168(%rip), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	speedstore_copy+176(%rip), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	speedstore_copy+184(%rip), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	speedstore_copy+192(%rip), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	speedstore_copy+200(%rip), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	speedstore_copy+208(%rip), %r12
	movq	speedstore_copy+216(%rip), %r15
	movq	speedstore_copy+224(%rip), %r14
	movq	speedstore_copy+232(%rip), %rbx
	movq	speedstore_copy+240(%rip), %r11
	movq	speedstore_copy+248(%rip), %r10
	movq	speedstore_copy+256(%rip), %r9
	movq	speedstore_copy+264(%rip), %r8
	movq	speedstore_copy+272(%rip), %rdi
	movq	speedstore_copy+280(%rip), %rsi
	movq	speedstore_copy+288(%rip), %rdx
	movq	speedstore_copy+296(%rip), %rcx
	movq	speedstore_copy+304(%rip), %rax
	movq	speedstore_copy+312(%rip), %r13
	movq	%r13, speedstore+312(%rip)
	movq	%rax, speedstore+304(%rip)
	movq	%rcx, speedstore+296(%rip)
	movq	%rdx, speedstore+288(%rip)
	movq	%rsi, speedstore+280(%rip)
	movq	%rdi, speedstore+272(%rip)
	movq	%r8, speedstore+264(%rip)
	movq	%r9, speedstore+256(%rip)
	movq	%r10, speedstore+248(%rip)
	movq	%r11, speedstore+240(%rip)
	movq	%rbx, speedstore+232(%rip)
	movq	%r14, speedstore+224(%rip)
	movq	%r15, speedstore+216(%rip)
	movq	%r12, speedstore+208(%rip)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, speedstore+200(%rip)
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, speedstore+192(%rip)
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, speedstore+184(%rip)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, speedstore+176(%rip)
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+168(%rip)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+160(%rip)
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+152(%rip)
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+144(%rip)
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+136(%rip)
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+128(%rip)
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+120(%rip)
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+112(%rip)
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+104(%rip)
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+96(%rip)
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+88(%rip)
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+80(%rip)
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+72(%rip)
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+64(%rip)
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+56(%rip)
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+48(%rip)
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+40(%rip)
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+32(%rip)
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+24(%rip)
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+16(%rip)
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore+8(%rip)
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, speedstore(%rip)
	movl	speedindex_copy(%rip), %eax
	movl	%eax, speedindex(%rip)
	movq	mappings_copy(%rip), %r8
	movl	mappings_copy+8(%rip), %r9d
	movq	mappings_copy+16(%rip), %rdx
	movl	mappings_copy+24(%rip), %esi
	movq	mappings_copy+32(%rip), %rdi
	movl	mappings_copy+40(%rip), %ebx
	movq	mappings_copy+48(%rip), %rax
	movl	mappings_copy+56(%rip), %ecx
	movl	%ecx, mappings+56(%rip)
	movq	%rax, mappings+48(%rip)
	movl	%ebx, mappings+40(%rip)
	movq	%rdi, mappings+32(%rip)
	movl	%esi, mappings+24(%rip)
	movq	%rdx, mappings+16(%rip)
	movl	%r9d, mappings+8(%rip)
	movq	%r8, mappings(%rip)
	movl	variables_copy+344(%rip), %r12d
	movl	variables_copy+348(%rip), %r14d
	movq	variables_copy+352(%rip), %r11
	movq	variables_copy+360(%rip), %r9
	movl	variables_copy+368(%rip), %edi
	movl	variables_copy+372(%rip), %edx
	movq	variables_copy+376(%rip), %rax
	movl	variables_copy+728(%rip), %r13d
	movl	variables_copy+732(%rip), %r15d
	movq	variables_copy+736(%rip), %rbx
	movq	variables_copy+744(%rip), %r10
	movl	variables_copy+752(%rip), %r8d
	movl	variables_copy+756(%rip), %esi
	movq	variables_copy+760(%rip), %rcx
	movq	%rax, variables+376(%rip)
	movl	%edx, variables+372(%rip)
	movl	%edi, variables+368(%rip)
	movq	%r9, variables+360(%rip)
	movq	%r11, variables+352(%rip)
	movl	%r14d, variables+348(%rip)
	movl	%r12d, variables+344(%rip)
	movq	variables_copy+336(%rip), %rax
	movq	%rax, variables+336(%rip)
	movq	variables_copy+328(%rip), %rax
	movq	%rax, variables+328(%rip)
	movl	variables_copy+324(%rip), %eax
	movl	%eax, variables+324(%rip)
	movl	variables_copy+320(%rip), %eax
	movl	%eax, variables+320(%rip)
	movq	variables_copy+312(%rip), %rax
	movq	%rax, variables+312(%rip)
	movq	variables_copy+304(%rip), %rax
	movq	%rax, variables+304(%rip)
	movl	variables_copy+300(%rip), %eax
	movl	%eax, variables+300(%rip)
	movl	variables_copy+296(%rip), %eax
	movl	%eax, variables+296(%rip)
	movq	variables_copy+288(%rip), %rax
	movq	%rax, variables+288(%rip)
	movq	variables_copy+280(%rip), %rax
	movq	%rax, variables+280(%rip)
	movl	variables_copy+276(%rip), %eax
	movl	%eax, variables+276(%rip)
	movl	variables_copy+272(%rip), %eax
	movl	%eax, variables+272(%rip)
	movq	variables_copy+264(%rip), %rax
	movq	%rax, variables+264(%rip)
	movq	variables_copy+256(%rip), %rax
	movq	%rax, variables+256(%rip)
	movl	variables_copy+252(%rip), %eax
	movl	%eax, variables+252(%rip)
	movl	variables_copy+248(%rip), %eax
	movl	%eax, variables+248(%rip)
	movq	variables_copy+240(%rip), %rax
	movq	%rax, variables+240(%rip)
	movq	variables_copy+232(%rip), %rax
	movq	%rax, variables+232(%rip)
	movl	variables_copy+228(%rip), %eax
	movl	%eax, variables+228(%rip)
	movl	variables_copy+224(%rip), %eax
	movl	%eax, variables+224(%rip)
	movq	variables_copy+216(%rip), %rax
	movq	%rax, variables+216(%rip)
	movq	variables_copy+208(%rip), %rax
	movq	%rax, variables+208(%rip)
	movl	variables_copy+204(%rip), %eax
	movl	%eax, variables+204(%rip)
	movl	variables_copy+200(%rip), %eax
	movl	%eax, variables+200(%rip)
	movq	variables_copy+192(%rip), %rax
	movq	%rax, variables+192(%rip)
	movq	variables_copy+184(%rip), %rax
	movq	%rax, variables+184(%rip)
	movl	variables_copy+180(%rip), %eax
	movl	%eax, variables+180(%rip)
	movl	variables_copy+176(%rip), %eax
	movl	%eax, variables+176(%rip)
	movq	variables_copy+168(%rip), %rax
	movq	%rax, variables+168(%rip)
	movq	variables_copy+160(%rip), %rax
	movq	%rax, variables+160(%rip)
	movl	variables_copy+156(%rip), %eax
	movl	%eax, variables+156(%rip)
	movl	variables_copy+152(%rip), %eax
	movl	%eax, variables+152(%rip)
	movq	variables_copy+144(%rip), %rax
	movq	%rax, variables+144(%rip)
	movq	variables_copy+136(%rip), %rax
	movq	%rax, variables+136(%rip)
	movl	variables_copy+132(%rip), %eax
	movl	%eax, variables+132(%rip)
	movl	variables_copy+128(%rip), %eax
	movl	%eax, variables+128(%rip)
	movq	variables_copy+120(%rip), %rax
	movq	%rax, variables+120(%rip)
	movq	variables_copy+112(%rip), %rax
	movq	%rax, variables+112(%rip)
	movl	variables_copy+108(%rip), %eax
	movl	%eax, variables+108(%rip)
	movl	variables_copy+104(%rip), %eax
	movl	%eax, variables+104(%rip)
	movq	variables_copy+96(%rip), %rax
	movq	%rax, variables+96(%rip)
	movq	variables_copy+88(%rip), %rax
	movq	%rax, variables+88(%rip)
	movl	variables_copy+84(%rip), %eax
	movl	%eax, variables+84(%rip)
	movl	variables_copy+80(%rip), %eax
	movl	%eax, variables+80(%rip)
	movq	variables_copy+72(%rip), %rax
	movq	%rax, variables+72(%rip)
	movq	variables_copy+64(%rip), %rax
	movq	%rax, variables+64(%rip)
	movl	variables_copy+60(%rip), %eax
	movl	%eax, variables+60(%rip)
	movl	variables_copy+56(%rip), %eax
	movl	%eax, variables+56(%rip)
	movq	variables_copy+48(%rip), %rax
	movq	%rax, variables+48(%rip)
	movq	variables_copy+40(%rip), %rax
	movq	%rax, variables+40(%rip)
	movl	variables_copy+36(%rip), %eax
	movl	%eax, variables+36(%rip)
	movl	variables_copy+32(%rip), %eax
	movl	%eax, variables+32(%rip)
	movq	variables_copy+24(%rip), %rax
	movq	%rax, variables+24(%rip)
	movq	variables_copy+16(%rip), %rax
	movq	%rax, variables+16(%rip)
	movl	variables_copy+12(%rip), %eax
	movl	%eax, variables+12(%rip)
	movl	variables_copy+8(%rip), %eax
	movl	%eax, variables+8(%rip)
	movq	variables_copy(%rip), %rax
	movq	%rax, variables(%rip)
	movq	%rcx, variables+760(%rip)
	movl	%esi, variables+756(%rip)
	movl	%r8d, variables+752(%rip)
	movq	%r10, variables+744(%rip)
	movq	%rbx, variables+736(%rip)
	movl	%r15d, variables+732(%rip)
	movl	%r13d, variables+728(%rip)
	movq	variables_copy+720(%rip), %rax
	movq	%rax, variables+720(%rip)
	movq	variables_copy+712(%rip), %rax
	movq	%rax, variables+712(%rip)
	movl	variables_copy+708(%rip), %eax
	movl	%eax, variables+708(%rip)
	movl	variables_copy+704(%rip), %eax
	movl	%eax, variables+704(%rip)
	movq	variables_copy+696(%rip), %rax
	movq	%rax, variables+696(%rip)
	movq	variables_copy+688(%rip), %rax
	movq	%rax, variables+688(%rip)
	movl	variables_copy+684(%rip), %eax
	movl	%eax, variables+684(%rip)
	movl	variables_copy+680(%rip), %eax
	movl	%eax, variables+680(%rip)
	movq	variables_copy+672(%rip), %rax
	movq	%rax, variables+672(%rip)
	movq	variables_copy+664(%rip), %rax
	movq	%rax, variables+664(%rip)
	movl	variables_copy+660(%rip), %eax
	movl	%eax, variables+660(%rip)
	movl	variables_copy+656(%rip), %eax
	movl	%eax, variables+656(%rip)
	movq	variables_copy+648(%rip), %rax
	movq	%rax, variables+648(%rip)
	movq	variables_copy+640(%rip), %rax
	movq	%rax, variables+640(%rip)
	movl	variables_copy+636(%rip), %eax
	movl	%eax, variables+636(%rip)
	movl	variables_copy+632(%rip), %eax
	movl	%eax, variables+632(%rip)
	movq	variables_copy+624(%rip), %rax
	movq	%rax, variables+624(%rip)
	movq	variables_copy+616(%rip), %rax
	movq	%rax, variables+616(%rip)
	movl	variables_copy+612(%rip), %eax
	movl	%eax, variables+612(%rip)
	movl	variables_copy+608(%rip), %eax
	movl	%eax, variables+608(%rip)
	movq	variables_copy+600(%rip), %rax
	movq	%rax, variables+600(%rip)
	movq	variables_copy+592(%rip), %rax
	movq	%rax, variables+592(%rip)
	movl	variables_copy+588(%rip), %eax
	movl	%eax, variables+588(%rip)
	movl	variables_copy+584(%rip), %eax
	movl	%eax, variables+584(%rip)
	movq	variables_copy+576(%rip), %rax
	movq	%rax, variables+576(%rip)
	movq	variables_copy+568(%rip), %rax
	movq	%rax, variables+568(%rip)
	movl	variables_copy+564(%rip), %eax
	movl	%eax, variables+564(%rip)
	movl	variables_copy+560(%rip), %eax
	movl	%eax, variables+560(%rip)
	movq	variables_copy+552(%rip), %rax
	movq	%rax, variables+552(%rip)
	movq	variables_copy+544(%rip), %rax
	movq	%rax, variables+544(%rip)
	movl	variables_copy+540(%rip), %eax
	movl	%eax, variables+540(%rip)
	movl	variables_copy+536(%rip), %eax
	movl	%eax, variables+536(%rip)
	movq	variables_copy+528(%rip), %rax
	movq	%rax, variables+528(%rip)
	movq	variables_copy+520(%rip), %rax
	movq	%rax, variables+520(%rip)
	movl	variables_copy+516(%rip), %eax
	movl	%eax, variables+516(%rip)
	movl	variables_copy+512(%rip), %eax
	movl	%eax, variables+512(%rip)
	movq	variables_copy+504(%rip), %rax
	movq	%rax, variables+504(%rip)
	movq	variables_copy+496(%rip), %rax
	movq	%rax, variables+496(%rip)
	movl	variables_copy+492(%rip), %eax
	movl	%eax, variables+492(%rip)
	movl	variables_copy+488(%rip), %eax
	movl	%eax, variables+488(%rip)
	movq	variables_copy+480(%rip), %rax
	movq	%rax, variables+480(%rip)
	movq	variables_copy+472(%rip), %rax
	movq	%rax, variables+472(%rip)
	movl	variables_copy+468(%rip), %eax
	movl	%eax, variables+468(%rip)
	movl	variables_copy+464(%rip), %eax
	movl	%eax, variables+464(%rip)
	movq	variables_copy+456(%rip), %rax
	movq	%rax, variables+456(%rip)
	movq	variables_copy+448(%rip), %rax
	movq	%rax, variables+448(%rip)
	movl	variables_copy+444(%rip), %eax
	movl	%eax, variables+444(%rip)
	movl	variables_copy+440(%rip), %eax
	movl	%eax, variables+440(%rip)
	movq	variables_copy+432(%rip), %rax
	movq	%rax, variables+432(%rip)
	movq	variables_copy+424(%rip), %rax
	movq	%rax, variables+424(%rip)
	movl	variables_copy+420(%rip), %eax
	movl	%eax, variables+420(%rip)
	movl	variables_copy+416(%rip), %eax
	movl	%eax, variables+416(%rip)
	movq	variables_copy+408(%rip), %rax
	movq	%rax, variables+408(%rip)
	movq	variables_copy+400(%rip), %rax
	movq	%rax, variables+400(%rip)
	movl	variables_copy+396(%rip), %eax
	movl	%eax, variables+396(%rip)
	movl	variables_copy+392(%rip), %eax
	movl	%eax, variables+392(%rip)
	movq	variables_copy+384(%rip), %rax
	movq	%rax, variables+384(%rip)
	movq	variables_copy+1024(%rip), %rax
	movq	%rax, variables+1024(%rip)
	movl	variables_copy+1020(%rip), %eax
	movl	%eax, variables+1020(%rip)
	movl	variables_copy+1016(%rip), %eax
	movl	%eax, variables+1016(%rip)
	movq	variables_copy+1008(%rip), %rax
	movq	%rax, variables+1008(%rip)
	movq	variables_copy+1000(%rip), %rax
	movq	%rax, variables+1000(%rip)
	movl	variables_copy+996(%rip), %eax
	movl	%eax, variables+996(%rip)
	movl	variables_copy+992(%rip), %eax
	movl	%eax, variables+992(%rip)
	movq	variables_copy+984(%rip), %rax
	movq	%rax, variables+984(%rip)
	movq	variables_copy+976(%rip), %rax
	movq	%rax, variables+976(%rip)
	movl	variables_copy+972(%rip), %eax
	movl	%eax, variables+972(%rip)
	movl	variables_copy+968(%rip), %eax
	movl	%eax, variables+968(%rip)
	movq	variables_copy+960(%rip), %rax
	movq	%rax, variables+960(%rip)
	movq	variables_copy+952(%rip), %rax
	movq	%rax, variables+952(%rip)
	movl	variables_copy+948(%rip), %eax
	movl	%eax, variables+948(%rip)
	movl	variables_copy+944(%rip), %eax
	movl	%eax, variables+944(%rip)
	movq	variables_copy+936(%rip), %rax
	movq	%rax, variables+936(%rip)
	movq	variables_copy+928(%rip), %rax
	movq	%rax, variables+928(%rip)
	movl	variables_copy+924(%rip), %eax
	movl	%eax, variables+924(%rip)
	movl	variables_copy+920(%rip), %eax
	movl	%eax, variables+920(%rip)
	movq	variables_copy+912(%rip), %rax
	movq	%rax, variables+912(%rip)
	movq	variables_copy+904(%rip), %rax
	movq	%rax, variables+904(%rip)
	movl	variables_copy+900(%rip), %eax
	movl	%eax, variables+900(%rip)
	movl	variables_copy+896(%rip), %eax
	movl	%eax, variables+896(%rip)
	movq	variables_copy+888(%rip), %rax
	movq	%rax, variables+888(%rip)
	movq	variables_copy+880(%rip), %rax
	movq	%rax, variables+880(%rip)
	movl	variables_copy+876(%rip), %eax
	movl	%eax, variables+876(%rip)
	movl	variables_copy+872(%rip), %eax
	movl	%eax, variables+872(%rip)
	movq	variables_copy+864(%rip), %rax
	movq	%rax, variables+864(%rip)
	movq	variables_copy+856(%rip), %rax
	movq	%rax, variables+856(%rip)
	movl	variables_copy+852(%rip), %eax
	movl	%eax, variables+852(%rip)
	movl	variables_copy+848(%rip), %eax
	movl	%eax, variables+848(%rip)
	movq	variables_copy+840(%rip), %rax
	movq	%rax, variables+840(%rip)
	movq	variables_copy+832(%rip), %rax
	movq	%rax, variables+832(%rip)
	movl	variables_copy+828(%rip), %eax
	movl	%eax, variables+828(%rip)
	movl	variables_copy+824(%rip), %eax
	movl	%eax, variables+824(%rip)
	movq	variables_copy+816(%rip), %rax
	movq	%rax, variables+816(%rip)
	movq	variables_copy+808(%rip), %rax
	movq	%rax, variables+808(%rip)
	movl	variables_copy+804(%rip), %eax
	movl	%eax, variables+804(%rip)
	movl	variables_copy+800(%rip), %eax
	movl	%eax, variables+800(%rip)
	movq	variables_copy+792(%rip), %rax
	movq	%rax, variables+792(%rip)
	movq	variables_copy+784(%rip), %rax
	movq	%rax, variables+784(%rip)
	movl	variables_copy+780(%rip), %eax
	movl	%eax, variables+780(%rip)
	movl	variables_copy+776(%rip), %eax
	movl	%eax, variables+776(%rip)
	movq	variables_copy+768(%rip), %rax
	movq	%rax, variables+768(%rip)
	movq	all_ultotal_copy(%rip), %rax
	movq	%rax, all_ultotal(%rip)
	movq	all_dltotal_copy(%rip), %rax
	movq	%rax, all_dltotal(%rip)
	movq	all_ulalready_copy(%rip), %rax
	movq	%rax, all_ulalready(%rip)
	movq	all_dlalready_copy(%rip), %rax
	movq	%rax, all_dlalready(%rip)
	movq	transfersl_copy(%rip), %rax
	movq	%rax, transfersl(%rip)
	movq	all_added_copy(%rip), %rax
	movq	%rax, all_added(%rip)
	movq	feats_copy+336(%rip), %r12
	movl	feats_copy+344(%rip), %r15d
	movq	feats_copy+352(%rip), %r14
	movl	feats_copy+360(%rip), %ebx
	movq	feats_copy+368(%rip), %r11
	movl	feats_copy+376(%rip), %r10d
	movq	feats_copy+384(%rip), %r9
	movl	feats_copy+392(%rip), %r8d
	movq	feats_copy+400(%rip), %rdi
	movl	feats_copy+408(%rip), %esi
	movq	feats_copy+416(%rip), %rdx
	movl	feats_copy+424(%rip), %ecx
	movq	feats_copy+432(%rip), %rax
	movl	feats_copy+440(%rip), %r13d
	movl	%r13d, feats+440(%rip)
	movq	%rax, feats+432(%rip)
	movl	%ecx, feats+424(%rip)
	movq	%rdx, feats+416(%rip)
	movl	%esi, feats+408(%rip)
	movq	%rdi, feats+400(%rip)
	movl	%r8d, feats+392(%rip)
	movq	%r9, feats+384(%rip)
	movl	%r10d, feats+376(%rip)
	movq	%r11, feats+368(%rip)
	movl	%ebx, feats+360(%rip)
	movq	%r14, feats+352(%rip)
	movl	%r15d, feats+344(%rip)
	movq	%r12, feats+336(%rip)
	movl	feats_copy+328(%rip), %eax
	movl	%eax, feats+328(%rip)
	movq	feats_copy+320(%rip), %rax
	movq	%rax, feats+320(%rip)
	movl	feats_copy+312(%rip), %eax
	movl	%eax, feats+312(%rip)
	movq	feats_copy+304(%rip), %rax
	movq	%rax, feats+304(%rip)
	movl	feats_copy+296(%rip), %eax
	movl	%eax, feats+296(%rip)
	movq	feats_copy+288(%rip), %rax
	movq	%rax, feats+288(%rip)
	movl	feats_copy+280(%rip), %eax
	movl	%eax, feats+280(%rip)
	movq	feats_copy+272(%rip), %rax
	movq	%rax, feats+272(%rip)
	movl	feats_copy+264(%rip), %eax
	movl	%eax, feats+264(%rip)
	movq	feats_copy+256(%rip), %rax
	movq	%rax, feats+256(%rip)
	movl	feats_copy+248(%rip), %eax
	movl	%eax, feats+248(%rip)
	movq	feats_copy+240(%rip), %rax
	movq	%rax, feats+240(%rip)
	movl	feats_copy+232(%rip), %eax
	movl	%eax, feats+232(%rip)
	movq	feats_copy+224(%rip), %rax
	movq	%rax, feats+224(%rip)
	movl	feats_copy+216(%rip), %eax
	movl	%eax, feats+216(%rip)
	movq	feats_copy+208(%rip), %rax
	movq	%rax, feats+208(%rip)
	movl	feats_copy+200(%rip), %eax
	movl	%eax, feats+200(%rip)
	movq	feats_copy+192(%rip), %rax
	movq	%rax, feats+192(%rip)
	movl	feats_copy+184(%rip), %eax
	movl	%eax, feats+184(%rip)
	movq	feats_copy+176(%rip), %rax
	movq	%rax, feats+176(%rip)
	movl	feats_copy+168(%rip), %eax
	movl	%eax, feats+168(%rip)
	movq	feats_copy+160(%rip), %rax
	movq	%rax, feats+160(%rip)
	movl	feats_copy+152(%rip), %eax
	movl	%eax, feats+152(%rip)
	movq	feats_copy+144(%rip), %rax
	movq	%rax, feats+144(%rip)
	movl	feats_copy+136(%rip), %eax
	movl	%eax, feats+136(%rip)
	movq	feats_copy+128(%rip), %rax
	movq	%rax, feats+128(%rip)
	movl	feats_copy+120(%rip), %eax
	movl	%eax, feats+120(%rip)
	movq	feats_copy+112(%rip), %rax
	movq	%rax, feats+112(%rip)
	movl	feats_copy+104(%rip), %eax
	movl	%eax, feats+104(%rip)
	movq	feats_copy+96(%rip), %rax
	movq	%rax, feats+96(%rip)
	movl	feats_copy+88(%rip), %eax
	movl	%eax, feats+88(%rip)
	movq	feats_copy+80(%rip), %rax
	movq	%rax, feats+80(%rip)
	movl	feats_copy+72(%rip), %eax
	movl	%eax, feats+72(%rip)
	movq	feats_copy+64(%rip), %rax
	movq	%rax, feats+64(%rip)
	movl	feats_copy+56(%rip), %eax
	movl	%eax, feats+56(%rip)
	movq	feats_copy+48(%rip), %rax
	movq	%rax, feats+48(%rip)
	movl	feats_copy+40(%rip), %eax
	movl	%eax, feats+40(%rip)
	movq	feats_copy+32(%rip), %rax
	movq	%rax, feats+32(%rip)
	movl	feats_copy+24(%rip), %eax
	movl	%eax, feats+24(%rip)
	movq	feats_copy+16(%rip), %rax
	movq	%rax, feats+16(%rip)
	movl	feats_copy+8(%rip), %eax
	movl	%eax, feats+8(%rip)
	movq	feats_copy(%rip), %rax
	movq	%rax, feats(%rip)
	movl	helptext_copy+496(%rip), %r15d
	movq	helptext_copy+504(%rip), %rax
	movq	helptext_copy+1008(%rip), %r12
	movq	helptext_copy+1016(%rip), %rcx
	movq	helptext_copy+1520(%rip), %r13
	movl	helptext_copy+1528(%rip), %edx
	movq	helptext_copy+2040(%rip), %rsi
	movq	helptext_copy+2552(%rip), %rdi
	movl	helptext_copy+3064(%rip), %r8d
	movq	helptext_copy+3576(%rip), %r9
	movq	helptext_copy+4088(%rip), %r10
	movl	helptext_copy+4600(%rip), %r11d
	movq	helptext_copy+5112(%rip), %rbx
	movq	helptext_copy+5624(%rip), %r14
	movq	%rax, helptext+504(%rip)
	movl	%r15d, helptext+496(%rip)
	movq	helptext_copy+488(%rip), %rax
	movq	%rax, helptext+488(%rip)
	movq	helptext_copy+480(%rip), %rax
	movq	%rax, helptext+480(%rip)
	movl	helptext_copy+472(%rip), %eax
	movl	%eax, helptext+472(%rip)
	movq	helptext_copy+464(%rip), %rax
	movq	%rax, helptext+464(%rip)
	movq	helptext_copy+456(%rip), %rax
	movq	%rax, helptext+456(%rip)
	movl	helptext_copy+448(%rip), %eax
	movl	%eax, helptext+448(%rip)
	movq	helptext_copy+440(%rip), %rax
	movq	%rax, helptext+440(%rip)
	movq	helptext_copy+432(%rip), %rax
	movq	%rax, helptext+432(%rip)
	movl	helptext_copy+424(%rip), %eax
	movl	%eax, helptext+424(%rip)
	movq	helptext_copy+416(%rip), %rax
	movq	%rax, helptext+416(%rip)
	movq	helptext_copy+408(%rip), %rax
	movq	%rax, helptext+408(%rip)
	movl	helptext_copy+400(%rip), %eax
	movl	%eax, helptext+400(%rip)
	movq	helptext_copy+392(%rip), %rax
	movq	%rax, helptext+392(%rip)
	movq	helptext_copy+384(%rip), %rax
	movq	%rax, helptext+384(%rip)
	movl	helptext_copy+376(%rip), %eax
	movl	%eax, helptext+376(%rip)
	movq	helptext_copy+368(%rip), %rax
	movq	%rax, helptext+368(%rip)
	movq	helptext_copy+360(%rip), %rax
	movq	%rax, helptext+360(%rip)
	movl	helptext_copy+352(%rip), %eax
	movl	%eax, helptext+352(%rip)
	movq	helptext_copy+344(%rip), %rax
	movq	%rax, helptext+344(%rip)
	movq	helptext_copy+336(%rip), %rax
	movq	%rax, helptext+336(%rip)
	movl	helptext_copy+328(%rip), %eax
	movl	%eax, helptext+328(%rip)
	movq	helptext_copy+320(%rip), %rax
	movq	%rax, helptext+320(%rip)
	movq	helptext_copy+312(%rip), %rax
	movq	%rax, helptext+312(%rip)
	movl	helptext_copy+304(%rip), %eax
	movl	%eax, helptext+304(%rip)
	movq	helptext_copy+296(%rip), %rax
	movq	%rax, helptext+296(%rip)
	movq	helptext_copy+288(%rip), %rax
	movq	%rax, helptext+288(%rip)
	movl	helptext_copy+280(%rip), %eax
	movl	%eax, helptext+280(%rip)
	movq	helptext_copy+272(%rip), %rax
	movq	%rax, helptext+272(%rip)
	movq	helptext_copy+264(%rip), %rax
	movq	%rax, helptext+264(%rip)
	movl	helptext_copy+256(%rip), %eax
	movl	%eax, helptext+256(%rip)
	movq	helptext_copy+248(%rip), %rax
	movq	%rax, helptext+248(%rip)
	movq	helptext_copy+240(%rip), %rax
	movq	%rax, helptext+240(%rip)
	movl	helptext_copy+232(%rip), %eax
	movl	%eax, helptext+232(%rip)
	movq	helptext_copy+224(%rip), %rax
	movq	%rax, helptext+224(%rip)
	movq	helptext_copy+216(%rip), %rax
	movq	%rax, helptext+216(%rip)
	movl	helptext_copy+208(%rip), %eax
	movl	%eax, helptext+208(%rip)
	movq	helptext_copy+200(%rip), %rax
	movq	%rax, helptext+200(%rip)
	movq	helptext_copy+192(%rip), %rax
	movq	%rax, helptext+192(%rip)
	movl	helptext_copy+184(%rip), %eax
	movl	%eax, helptext+184(%rip)
	movq	helptext_copy+176(%rip), %rax
	movq	%rax, helptext+176(%rip)
	movq	helptext_copy+168(%rip), %rax
	movq	%rax, helptext+168(%rip)
	movl	helptext_copy+160(%rip), %eax
	movl	%eax, helptext+160(%rip)
	movq	helptext_copy+152(%rip), %rax
	movq	%rax, helptext+152(%rip)
	movq	helptext_copy+144(%rip), %rax
	movq	%rax, helptext+144(%rip)
	movl	helptext_copy+136(%rip), %eax
	movl	%eax, helptext+136(%rip)
	movq	helptext_copy+128(%rip), %rax
	movq	%rax, helptext+128(%rip)
	movq	helptext_copy+120(%rip), %rax
	movq	%rax, helptext+120(%rip)
	movl	helptext_copy+112(%rip), %eax
	movl	%eax, helptext+112(%rip)
	movq	helptext_copy+104(%rip), %rax
	movq	%rax, helptext+104(%rip)
	movq	helptext_copy+96(%rip), %rax
	movq	%rax, helptext+96(%rip)
	movl	helptext_copy+88(%rip), %eax
	movl	%eax, helptext+88(%rip)
	movq	helptext_copy+80(%rip), %rax
	movq	%rax, helptext+80(%rip)
	movq	helptext_copy+72(%rip), %rax
	movq	%rax, helptext+72(%rip)
	movl	helptext_copy+64(%rip), %eax
	movl	%eax, helptext+64(%rip)
	movq	helptext_copy+56(%rip), %rax
	movq	%rax, helptext+56(%rip)
	movq	helptext_copy+48(%rip), %rax
	movq	%rax, helptext+48(%rip)
	movl	helptext_copy+40(%rip), %eax
	movl	%eax, helptext+40(%rip)
	movq	helptext_copy+32(%rip), %rax
	movq	%rax, helptext+32(%rip)
	movq	helptext_copy+24(%rip), %rax
	movq	%rax, helptext+24(%rip)
	movl	helptext_copy+16(%rip), %eax
	movl	%eax, helptext+16(%rip)
	movq	helptext_copy+8(%rip), %rax
	movq	%rax, helptext+8(%rip)
	movq	helptext_copy(%rip), %rax
	movq	%rax, helptext(%rip)
	movq	%rcx, helptext+1016(%rip)
	movq	%r12, helptext+1008(%rip)
	movl	helptext_copy+1000(%rip), %eax
	movl	%eax, helptext+1000(%rip)
	movq	helptext_copy+992(%rip), %rax
	movq	%rax, helptext+992(%rip)
	movq	helptext_copy+984(%rip), %rax
	movq	%rax, helptext+984(%rip)
	movl	helptext_copy+976(%rip), %eax
	movl	%eax, helptext+976(%rip)
	movq	helptext_copy+968(%rip), %rax
	movq	%rax, helptext+968(%rip)
	movq	helptext_copy+960(%rip), %rax
	movq	%rax, helptext+960(%rip)
	movl	helptext_copy+952(%rip), %eax
	movl	%eax, helptext+952(%rip)
	movq	helptext_copy+944(%rip), %rax
	movq	%rax, helptext+944(%rip)
	movq	helptext_copy+936(%rip), %rax
	movq	%rax, helptext+936(%rip)
	movl	helptext_copy+928(%rip), %eax
	movl	%eax, helptext+928(%rip)
	movq	helptext_copy+920(%rip), %rax
	movq	%rax, helptext+920(%rip)
	movq	helptext_copy+912(%rip), %rax
	movq	%rax, helptext+912(%rip)
	movl	helptext_copy+904(%rip), %eax
	movl	%eax, helptext+904(%rip)
	movq	helptext_copy+896(%rip), %rax
	movq	%rax, helptext+896(%rip)
	movq	helptext_copy+888(%rip), %rax
	movq	%rax, helptext+888(%rip)
	movl	helptext_copy+880(%rip), %eax
	movl	%eax, helptext+880(%rip)
	movq	helptext_copy+872(%rip), %rax
	movq	%rax, helptext+872(%rip)
	movq	helptext_copy+864(%rip), %rax
	movq	%rax, helptext+864(%rip)
	movl	helptext_copy+856(%rip), %eax
	movl	%eax, helptext+856(%rip)
	movq	helptext_copy+848(%rip), %rax
	movq	%rax, helptext+848(%rip)
	movq	helptext_copy+840(%rip), %rax
	movq	%rax, helptext+840(%rip)
	movl	helptext_copy+832(%rip), %eax
	movl	%eax, helptext+832(%rip)
	movq	helptext_copy+824(%rip), %rax
	movq	%rax, helptext+824(%rip)
	movq	helptext_copy+816(%rip), %rax
	movq	%rax, helptext+816(%rip)
	movl	helptext_copy+808(%rip), %eax
	movl	%eax, helptext+808(%rip)
	movq	helptext_copy+800(%rip), %rax
	movq	%rax, helptext+800(%rip)
	movq	helptext_copy+792(%rip), %rax
	movq	%rax, helptext+792(%rip)
	movl	helptext_copy+784(%rip), %eax
	movl	%eax, helptext+784(%rip)
	movq	helptext_copy+776(%rip), %rax
	movq	%rax, helptext+776(%rip)
	movq	helptext_copy+768(%rip), %rax
	movq	%rax, helptext+768(%rip)
	movl	helptext_copy+760(%rip), %eax
	movl	%eax, helptext+760(%rip)
	movq	helptext_copy+752(%rip), %rax
	movq	%rax, helptext+752(%rip)
	movq	helptext_copy+744(%rip), %rax
	movq	%rax, helptext+744(%rip)
	movl	helptext_copy+736(%rip), %eax
	movl	%eax, helptext+736(%rip)
	movq	helptext_copy+728(%rip), %rax
	movq	%rax, helptext+728(%rip)
	movq	helptext_copy+720(%rip), %rax
	movq	%rax, helptext+720(%rip)
	movl	helptext_copy+712(%rip), %eax
	movl	%eax, helptext+712(%rip)
	movq	helptext_copy+704(%rip), %rax
	movq	%rax, helptext+704(%rip)
	movq	helptext_copy+696(%rip), %rax
	movq	%rax, helptext+696(%rip)
	movl	helptext_copy+688(%rip), %eax
	movl	%eax, helptext+688(%rip)
	movq	helptext_copy+680(%rip), %rax
	movq	%rax, helptext+680(%rip)
	movq	helptext_copy+672(%rip), %rax
	movq	%rax, helptext+672(%rip)
	movl	helptext_copy+664(%rip), %eax
	movl	%eax, helptext+664(%rip)
	movq	helptext_copy+656(%rip), %rax
	movq	%rax, helptext+656(%rip)
	movq	helptext_copy+648(%rip), %rax
	movq	%rax, helptext+648(%rip)
	movl	helptext_copy+640(%rip), %eax
	movl	%eax, helptext+640(%rip)
	movq	helptext_copy+632(%rip), %rax
	movq	%rax, helptext+632(%rip)
	movq	helptext_copy+624(%rip), %rax
	movq	%rax, helptext+624(%rip)
	movl	helptext_copy+616(%rip), %eax
	movl	%eax, helptext+616(%rip)
	movq	helptext_copy+608(%rip), %rax
	movq	%rax, helptext+608(%rip)
	movq	helptext_copy+600(%rip), %rax
	movq	%rax, helptext+600(%rip)
	movl	helptext_copy+592(%rip), %eax
	movl	%eax, helptext+592(%rip)
	movq	helptext_copy+584(%rip), %rax
	movq	%rax, helptext+584(%rip)
	movq	helptext_copy+576(%rip), %rax
	movq	%rax, helptext+576(%rip)
	movl	helptext_copy+568(%rip), %eax
	movl	%eax, helptext+568(%rip)
	movq	helptext_copy+560(%rip), %rax
	movq	%rax, helptext+560(%rip)
	movq	helptext_copy+552(%rip), %rax
	movq	%rax, helptext+552(%rip)
	movl	helptext_copy+544(%rip), %eax
	movl	%eax, helptext+544(%rip)
	movq	helptext_copy+536(%rip), %rax
	movq	%rax, helptext+536(%rip)
	movq	helptext_copy+528(%rip), %rax
	movq	%rax, helptext+528(%rip)
	movl	helptext_copy+520(%rip), %eax
	movl	%eax, helptext+520(%rip)
	movq	helptext_copy+512(%rip), %rax
	movq	%rax, helptext+512(%rip)
	movl	%edx, helptext+1528(%rip)
	movq	%r13, helptext+1520(%rip)
	movq	helptext_copy+1512(%rip), %rax
	movq	%rax, helptext+1512(%rip)
	movl	helptext_copy+1504(%rip), %eax
	movl	%eax, helptext+1504(%rip)
	movq	helptext_copy+1496(%rip), %rax
	movq	%rax, helptext+1496(%rip)
	movq	helptext_copy+1488(%rip), %rax
	movq	%rax, helptext+1488(%rip)
	movl	helptext_copy+1480(%rip), %eax
	movl	%eax, helptext+1480(%rip)
	movq	helptext_copy+1472(%rip), %rax
	movq	%rax, helptext+1472(%rip)
	movq	helptext_copy+1464(%rip), %rax
	movq	%rax, helptext+1464(%rip)
	movl	helptext_copy+1456(%rip), %eax
	movl	%eax, helptext+1456(%rip)
	movq	helptext_copy+1448(%rip), %rax
	movq	%rax, helptext+1448(%rip)
	movq	helptext_copy+1440(%rip), %rax
	movq	%rax, helptext+1440(%rip)
	movl	helptext_copy+1432(%rip), %eax
	movl	%eax, helptext+1432(%rip)
	movq	helptext_copy+1424(%rip), %rax
	movq	%rax, helptext+1424(%rip)
	movq	helptext_copy+1416(%rip), %rax
	movq	%rax, helptext+1416(%rip)
	movl	helptext_copy+1408(%rip), %eax
	movl	%eax, helptext+1408(%rip)
	movq	helptext_copy+1400(%rip), %rax
	movq	%rax, helptext+1400(%rip)
	movq	helptext_copy+1392(%rip), %rax
	movq	%rax, helptext+1392(%rip)
	movl	helptext_copy+1384(%rip), %eax
	movl	%eax, helptext+1384(%rip)
	movq	helptext_copy+1376(%rip), %rax
	movq	%rax, helptext+1376(%rip)
	movq	helptext_copy+1368(%rip), %rax
	movq	%rax, helptext+1368(%rip)
	movl	helptext_copy+1360(%rip), %eax
	movl	%eax, helptext+1360(%rip)
	movq	helptext_copy+1352(%rip), %rax
	movq	%rax, helptext+1352(%rip)
	movq	helptext_copy+1344(%rip), %rax
	movq	%rax, helptext+1344(%rip)
	movl	helptext_copy+1336(%rip), %eax
	movl	%eax, helptext+1336(%rip)
	movq	helptext_copy+1328(%rip), %rax
	movq	%rax, helptext+1328(%rip)
	movq	helptext_copy+1320(%rip), %rax
	movq	%rax, helptext+1320(%rip)
	movl	helptext_copy+1312(%rip), %eax
	movl	%eax, helptext+1312(%rip)
	movq	helptext_copy+1304(%rip), %rax
	movq	%rax, helptext+1304(%rip)
	movq	helptext_copy+1296(%rip), %rax
	movq	%rax, helptext+1296(%rip)
	movl	helptext_copy+1288(%rip), %eax
	movl	%eax, helptext+1288(%rip)
	movq	helptext_copy+1280(%rip), %rax
	movq	%rax, helptext+1280(%rip)
	movq	helptext_copy+1272(%rip), %rax
	movq	%rax, helptext+1272(%rip)
	movl	helptext_copy+1264(%rip), %eax
	movl	%eax, helptext+1264(%rip)
	movq	helptext_copy+1256(%rip), %rax
	movq	%rax, helptext+1256(%rip)
	movq	helptext_copy+1248(%rip), %rax
	movq	%rax, helptext+1248(%rip)
	movl	helptext_copy+1240(%rip), %eax
	movl	%eax, helptext+1240(%rip)
	movq	helptext_copy+1232(%rip), %rax
	movq	%rax, helptext+1232(%rip)
	movq	helptext_copy+1224(%rip), %rax
	movq	%rax, helptext+1224(%rip)
	movl	helptext_copy+1216(%rip), %eax
	movl	%eax, helptext+1216(%rip)
	movq	helptext_copy+1208(%rip), %rax
	movq	%rax, helptext+1208(%rip)
	movq	helptext_copy+1200(%rip), %rax
	movq	%rax, helptext+1200(%rip)
	movl	helptext_copy+1192(%rip), %eax
	movl	%eax, helptext+1192(%rip)
	movq	helptext_copy+1184(%rip), %rax
	movq	%rax, helptext+1184(%rip)
	movq	helptext_copy+1176(%rip), %rax
	movq	%rax, helptext+1176(%rip)
	movl	helptext_copy+1168(%rip), %eax
	movl	%eax, helptext+1168(%rip)
	movq	helptext_copy+1160(%rip), %rax
	movq	%rax, helptext+1160(%rip)
	movq	helptext_copy+1152(%rip), %rax
	movq	%rax, helptext+1152(%rip)
	movl	helptext_copy+1144(%rip), %eax
	movl	%eax, helptext+1144(%rip)
	movq	helptext_copy+1136(%rip), %rax
	movq	%rax, helptext+1136(%rip)
	movq	helptext_copy+1128(%rip), %rax
	movq	%rax, helptext+1128(%rip)
	movl	helptext_copy+1120(%rip), %eax
	movl	%eax, helptext+1120(%rip)
	movq	helptext_copy+1112(%rip), %rax
	movq	%rax, helptext+1112(%rip)
	movq	helptext_copy+1104(%rip), %rax
	movq	%rax, helptext+1104(%rip)
	movl	helptext_copy+1096(%rip), %eax
	movl	%eax, helptext+1096(%rip)
	movq	helptext_copy+1088(%rip), %rax
	movq	%rax, helptext+1088(%rip)
	movq	helptext_copy+1080(%rip), %rax
	movq	%rax, helptext+1080(%rip)
	movl	helptext_copy+1072(%rip), %eax
	movl	%eax, helptext+1072(%rip)
	movq	helptext_copy+1064(%rip), %rax
	movq	%rax, helptext+1064(%rip)
	movq	helptext_copy+1056(%rip), %rax
	movq	%rax, helptext+1056(%rip)
	movl	helptext_copy+1048(%rip), %eax
	movl	%eax, helptext+1048(%rip)
	movq	helptext_copy+1040(%rip), %rax
	movq	%rax, helptext+1040(%rip)
	movq	helptext_copy+1032(%rip), %rax
	movq	%rax, helptext+1032(%rip)
	movl	helptext_copy+1024(%rip), %eax
	movl	%eax, helptext+1024(%rip)
	movq	%rsi, helptext+2040(%rip)
	movl	helptext_copy+2032(%rip), %eax
	movl	%eax, helptext+2032(%rip)
	movq	helptext_copy+2024(%rip), %rax
	movq	%rax, helptext+2024(%rip)
	movq	helptext_copy+2016(%rip), %rax
	movq	%rax, helptext+2016(%rip)
	movl	helptext_copy+2008(%rip), %eax
	movl	%eax, helptext+2008(%rip)
	movq	helptext_copy+2000(%rip), %rax
	movq	%rax, helptext+2000(%rip)
	movq	helptext_copy+1992(%rip), %rax
	movq	%rax, helptext+1992(%rip)
	movl	helptext_copy+1984(%rip), %eax
	movl	%eax, helptext+1984(%rip)
	movq	helptext_copy+1976(%rip), %rax
	movq	%rax, helptext+1976(%rip)
	movq	helptext_copy+1968(%rip), %rax
	movq	%rax, helptext+1968(%rip)
	movl	helptext_copy+1960(%rip), %eax
	movl	%eax, helptext+1960(%rip)
	movq	helptext_copy+1952(%rip), %rax
	movq	%rax, helptext+1952(%rip)
	movq	helptext_copy+1944(%rip), %rax
	movq	%rax, helptext+1944(%rip)
	movl	helptext_copy+1936(%rip), %eax
	movl	%eax, helptext+1936(%rip)
	movq	helptext_copy+1928(%rip), %rax
	movq	%rax, helptext+1928(%rip)
	movq	helptext_copy+1920(%rip), %rax
	movq	%rax, helptext+1920(%rip)
	movl	helptext_copy+1912(%rip), %eax
	movl	%eax, helptext+1912(%rip)
	movq	helptext_copy+1904(%rip), %rax
	movq	%rax, helptext+1904(%rip)
	movq	helptext_copy+1896(%rip), %rax
	movq	%rax, helptext+1896(%rip)
	movl	helptext_copy+1888(%rip), %eax
	movl	%eax, helptext+1888(%rip)
	movq	helptext_copy+1880(%rip), %rax
	movq	%rax, helptext+1880(%rip)
	movq	helptext_copy+1872(%rip), %rax
	movq	%rax, helptext+1872(%rip)
	movl	helptext_copy+1864(%rip), %eax
	movl	%eax, helptext+1864(%rip)
	movq	helptext_copy+1856(%rip), %rax
	movq	%rax, helptext+1856(%rip)
	movq	helptext_copy+1848(%rip), %rax
	movq	%rax, helptext+1848(%rip)
	movl	helptext_copy+1840(%rip), %eax
	movl	%eax, helptext+1840(%rip)
	movq	helptext_copy+1832(%rip), %rax
	movq	%rax, helptext+1832(%rip)
	movq	helptext_copy+1824(%rip), %rax
	movq	%rax, helptext+1824(%rip)
	movl	helptext_copy+1816(%rip), %eax
	movl	%eax, helptext+1816(%rip)
	movq	helptext_copy+1808(%rip), %rax
	movq	%rax, helptext+1808(%rip)
	movq	helptext_copy+1800(%rip), %rax
	movq	%rax, helptext+1800(%rip)
	movl	helptext_copy+1792(%rip), %eax
	movl	%eax, helptext+1792(%rip)
	movq	helptext_copy+1784(%rip), %rax
	movq	%rax, helptext+1784(%rip)
	movq	helptext_copy+1776(%rip), %rax
	movq	%rax, helptext+1776(%rip)
	movl	helptext_copy+1768(%rip), %eax
	movl	%eax, helptext+1768(%rip)
	movq	helptext_copy+1760(%rip), %rax
	movq	%rax, helptext+1760(%rip)
	movq	helptext_copy+1752(%rip), %rax
	movq	%rax, helptext+1752(%rip)
	movl	helptext_copy+1744(%rip), %eax
	movl	%eax, helptext+1744(%rip)
	movq	helptext_copy+1736(%rip), %rax
	movq	%rax, helptext+1736(%rip)
	movq	helptext_copy+1728(%rip), %rax
	movq	%rax, helptext+1728(%rip)
	movl	helptext_copy+1720(%rip), %eax
	movl	%eax, helptext+1720(%rip)
	movq	helptext_copy+1712(%rip), %rax
	movq	%rax, helptext+1712(%rip)
	movq	helptext_copy+1704(%rip), %rax
	movq	%rax, helptext+1704(%rip)
	movl	helptext_copy+1696(%rip), %eax
	movl	%eax, helptext+1696(%rip)
	movq	helptext_copy+1688(%rip), %rax
	movq	%rax, helptext+1688(%rip)
	movq	helptext_copy+1680(%rip), %rax
	movq	%rax, helptext+1680(%rip)
	movl	helptext_copy+1672(%rip), %eax
	movl	%eax, helptext+1672(%rip)
	movq	helptext_copy+1664(%rip), %rax
	movq	%rax, helptext+1664(%rip)
	movq	helptext_copy+1656(%rip), %rax
	movq	%rax, helptext+1656(%rip)
	movl	helptext_copy+1648(%rip), %eax
	movl	%eax, helptext+1648(%rip)
	movq	helptext_copy+1640(%rip), %rax
	movq	%rax, helptext+1640(%rip)
	movq	helptext_copy+1632(%rip), %rax
	movq	%rax, helptext+1632(%rip)
	movl	helptext_copy+1624(%rip), %eax
	movl	%eax, helptext+1624(%rip)
	movq	helptext_copy+1616(%rip), %rax
	movq	%rax, helptext+1616(%rip)
	movq	helptext_copy+1608(%rip), %rax
	movq	%rax, helptext+1608(%rip)
	movl	helptext_copy+1600(%rip), %eax
	movl	%eax, helptext+1600(%rip)
	movq	helptext_copy+1592(%rip), %rax
	movq	%rax, helptext+1592(%rip)
	movq	helptext_copy+1584(%rip), %rax
	movq	%rax, helptext+1584(%rip)
	movl	helptext_copy+1576(%rip), %eax
	movl	%eax, helptext+1576(%rip)
	movq	helptext_copy+1568(%rip), %rax
	movq	%rax, helptext+1568(%rip)
	movq	helptext_copy+1560(%rip), %rax
	movq	%rax, helptext+1560(%rip)
	movl	helptext_copy+1552(%rip), %eax
	movl	%eax, helptext+1552(%rip)
	movq	helptext_copy+1544(%rip), %rax
	movq	%rax, helptext+1544(%rip)
	movq	helptext_copy+1536(%rip), %rax
	movq	%rax, helptext+1536(%rip)
	movq	%rdi, helptext+2552(%rip)
	movq	helptext_copy+2544(%rip), %rax
	movq	%rax, helptext+2544(%rip)
	movl	helptext_copy+2536(%rip), %eax
	movl	%eax, helptext+2536(%rip)
	movq	helptext_copy+2528(%rip), %rax
	movq	%rax, helptext+2528(%rip)
	movq	helptext_copy+2520(%rip), %rax
	movq	%rax, helptext+2520(%rip)
	movl	helptext_copy+2512(%rip), %eax
	movl	%eax, helptext+2512(%rip)
	movq	helptext_copy+2504(%rip), %rax
	movq	%rax, helptext+2504(%rip)
	movq	helptext_copy+2496(%rip), %rax
	movq	%rax, helptext+2496(%rip)
	movl	helptext_copy+2488(%rip), %eax
	movl	%eax, helptext+2488(%rip)
	movq	helptext_copy+2480(%rip), %rax
	movq	%rax, helptext+2480(%rip)
	movq	helptext_copy+2472(%rip), %rax
	movq	%rax, helptext+2472(%rip)
	movl	helptext_copy+2464(%rip), %eax
	movl	%eax, helptext+2464(%rip)
	movq	helptext_copy+2456(%rip), %rax
	movq	%rax, helptext+2456(%rip)
	movq	helptext_copy+2448(%rip), %rax
	movq	%rax, helptext+2448(%rip)
	movl	helptext_copy+2440(%rip), %eax
	movl	%eax, helptext+2440(%rip)
	movq	helptext_copy+2432(%rip), %rax
	movq	%rax, helptext+2432(%rip)
	movq	helptext_copy+2424(%rip), %rax
	movq	%rax, helptext+2424(%rip)
	movl	helptext_copy+2416(%rip), %eax
	movl	%eax, helptext+2416(%rip)
	movq	helptext_copy+2408(%rip), %rax
	movq	%rax, helptext+2408(%rip)
	movq	helptext_copy+2400(%rip), %rax
	movq	%rax, helptext+2400(%rip)
	movl	helptext_copy+2392(%rip), %eax
	movl	%eax, helptext+2392(%rip)
	movq	helptext_copy+2384(%rip), %rax
	movq	%rax, helptext+2384(%rip)
	movq	helptext_copy+2376(%rip), %rax
	movq	%rax, helptext+2376(%rip)
	movl	helptext_copy+2368(%rip), %eax
	movl	%eax, helptext+2368(%rip)
	movq	helptext_copy+2360(%rip), %rax
	movq	%rax, helptext+2360(%rip)
	movq	helptext_copy+2352(%rip), %rax
	movq	%rax, helptext+2352(%rip)
	movl	helptext_copy+2344(%rip), %eax
	movl	%eax, helptext+2344(%rip)
	movq	helptext_copy+2336(%rip), %rax
	movq	%rax, helptext+2336(%rip)
	movq	helptext_copy+2328(%rip), %rax
	movq	%rax, helptext+2328(%rip)
	movl	helptext_copy+2320(%rip), %eax
	movl	%eax, helptext+2320(%rip)
	movq	helptext_copy+2312(%rip), %rax
	movq	%rax, helptext+2312(%rip)
	movq	helptext_copy+2304(%rip), %rax
	movq	%rax, helptext+2304(%rip)
	movl	helptext_copy+2296(%rip), %eax
	movl	%eax, helptext+2296(%rip)
	movq	helptext_copy+2288(%rip), %rax
	movq	%rax, helptext+2288(%rip)
	movq	helptext_copy+2280(%rip), %rax
	movq	%rax, helptext+2280(%rip)
	movl	helptext_copy+2272(%rip), %eax
	movl	%eax, helptext+2272(%rip)
	movq	helptext_copy+2264(%rip), %rax
	movq	%rax, helptext+2264(%rip)
	movq	helptext_copy+2256(%rip), %rax
	movq	%rax, helptext+2256(%rip)
	movl	helptext_copy+2248(%rip), %eax
	movl	%eax, helptext+2248(%rip)
	movq	helptext_copy+2240(%rip), %rax
	movq	%rax, helptext+2240(%rip)
	movq	helptext_copy+2232(%rip), %rax
	movq	%rax, helptext+2232(%rip)
	movl	helptext_copy+2224(%rip), %eax
	movl	%eax, helptext+2224(%rip)
	movq	helptext_copy+2216(%rip), %rax
	movq	%rax, helptext+2216(%rip)
	movq	helptext_copy+2208(%rip), %rax
	movq	%rax, helptext+2208(%rip)
	movl	helptext_copy+2200(%rip), %eax
	movl	%eax, helptext+2200(%rip)
	movq	helptext_copy+2192(%rip), %rax
	movq	%rax, helptext+2192(%rip)
	movq	helptext_copy+2184(%rip), %rax
	movq	%rax, helptext+2184(%rip)
	movl	helptext_copy+2176(%rip), %eax
	movl	%eax, helptext+2176(%rip)
	movq	helptext_copy+2168(%rip), %rax
	movq	%rax, helptext+2168(%rip)
	movq	helptext_copy+2160(%rip), %rax
	movq	%rax, helptext+2160(%rip)
	movl	helptext_copy+2152(%rip), %eax
	movl	%eax, helptext+2152(%rip)
	movq	helptext_copy+2144(%rip), %rax
	movq	%rax, helptext+2144(%rip)
	movq	helptext_copy+2136(%rip), %rax
	movq	%rax, helptext+2136(%rip)
	movl	helptext_copy+2128(%rip), %eax
	movl	%eax, helptext+2128(%rip)
	movq	helptext_copy+2120(%rip), %rax
	movq	%rax, helptext+2120(%rip)
	movq	helptext_copy+2112(%rip), %rax
	movq	%rax, helptext+2112(%rip)
	movl	helptext_copy+2104(%rip), %eax
	movl	%eax, helptext+2104(%rip)
	movq	helptext_copy+2096(%rip), %rax
	movq	%rax, helptext+2096(%rip)
	movq	helptext_copy+2088(%rip), %rax
	movq	%rax, helptext+2088(%rip)
	movl	helptext_copy+2080(%rip), %eax
	movl	%eax, helptext+2080(%rip)
	movq	helptext_copy+2072(%rip), %rax
	movq	%rax, helptext+2072(%rip)
	movq	helptext_copy+2064(%rip), %rax
	movq	%rax, helptext+2064(%rip)
	movl	helptext_copy+2056(%rip), %eax
	movl	%eax, helptext+2056(%rip)
	movq	helptext_copy+2048(%rip), %rax
	movq	%rax, helptext+2048(%rip)
	movl	%r8d, helptext+3064(%rip)
	movq	helptext_copy+3056(%rip), %rax
	movq	%rax, helptext+3056(%rip)
	movq	helptext_copy+3048(%rip), %rax
	movq	%rax, helptext+3048(%rip)
	movl	helptext_copy+3040(%rip), %eax
	movl	%eax, helptext+3040(%rip)
	movq	helptext_copy+3032(%rip), %rax
	movq	%rax, helptext+3032(%rip)
	movq	helptext_copy+3024(%rip), %rax
	movq	%rax, helptext+3024(%rip)
	movl	helptext_copy+3016(%rip), %eax
	movl	%eax, helptext+3016(%rip)
	movq	helptext_copy+3008(%rip), %rax
	movq	%rax, helptext+3008(%rip)
	movq	helptext_copy+3000(%rip), %rax
	movq	%rax, helptext+3000(%rip)
	movl	helptext_copy+2992(%rip), %eax
	movl	%eax, helptext+2992(%rip)
	movq	helptext_copy+2984(%rip), %rax
	movq	%rax, helptext+2984(%rip)
	movq	helptext_copy+2976(%rip), %rax
	movq	%rax, helptext+2976(%rip)
	movl	helptext_copy+2968(%rip), %eax
	movl	%eax, helptext+2968(%rip)
	movq	helptext_copy+2960(%rip), %rax
	movq	%rax, helptext+2960(%rip)
	movq	helptext_copy+2952(%rip), %rax
	movq	%rax, helptext+2952(%rip)
	movl	helptext_copy+2944(%rip), %eax
	movl	%eax, helptext+2944(%rip)
	movq	helptext_copy+2936(%rip), %rax
	movq	%rax, helptext+2936(%rip)
	movq	helptext_copy+2928(%rip), %rax
	movq	%rax, helptext+2928(%rip)
	movl	helptext_copy+2920(%rip), %eax
	movl	%eax, helptext+2920(%rip)
	movq	helptext_copy+2912(%rip), %rax
	movq	%rax, helptext+2912(%rip)
	movq	helptext_copy+2904(%rip), %rax
	movq	%rax, helptext+2904(%rip)
	movl	helptext_copy+2896(%rip), %eax
	movl	%eax, helptext+2896(%rip)
	movq	helptext_copy+2888(%rip), %rax
	movq	%rax, helptext+2888(%rip)
	movq	helptext_copy+2880(%rip), %rax
	movq	%rax, helptext+2880(%rip)
	movl	helptext_copy+2872(%rip), %eax
	movl	%eax, helptext+2872(%rip)
	movq	helptext_copy+2864(%rip), %rax
	movq	%rax, helptext+2864(%rip)
	movq	helptext_copy+2856(%rip), %rax
	movq	%rax, helptext+2856(%rip)
	movl	helptext_copy+2848(%rip), %eax
	movl	%eax, helptext+2848(%rip)
	movq	helptext_copy+2840(%rip), %rax
	movq	%rax, helptext+2840(%rip)
	movq	helptext_copy+2832(%rip), %rax
	movq	%rax, helptext+2832(%rip)
	movl	helptext_copy+2824(%rip), %eax
	movl	%eax, helptext+2824(%rip)
	movq	helptext_copy+2816(%rip), %rax
	movq	%rax, helptext+2816(%rip)
	movq	helptext_copy+2808(%rip), %rax
	movq	%rax, helptext+2808(%rip)
	movl	helptext_copy+2800(%rip), %eax
	movl	%eax, helptext+2800(%rip)
	movq	helptext_copy+2792(%rip), %rax
	movq	%rax, helptext+2792(%rip)
	movq	helptext_copy+2784(%rip), %rax
	movq	%rax, helptext+2784(%rip)
	movl	helptext_copy+2776(%rip), %eax
	movl	%eax, helptext+2776(%rip)
	movq	helptext_copy+2768(%rip), %rax
	movq	%rax, helptext+2768(%rip)
	movq	helptext_copy+2760(%rip), %rax
	movq	%rax, helptext+2760(%rip)
	movl	helptext_copy+2752(%rip), %eax
	movl	%eax, helptext+2752(%rip)
	movq	helptext_copy+2744(%rip), %rax
	movq	%rax, helptext+2744(%rip)
	movq	helptext_copy+2736(%rip), %rax
	movq	%rax, helptext+2736(%rip)
	movl	helptext_copy+2728(%rip), %eax
	movl	%eax, helptext+2728(%rip)
	movq	helptext_copy+2720(%rip), %rax
	movq	%rax, helptext+2720(%rip)
	movq	helptext_copy+2712(%rip), %rax
	movq	%rax, helptext+2712(%rip)
	movl	helptext_copy+2704(%rip), %eax
	movl	%eax, helptext+2704(%rip)
	movq	helptext_copy+2696(%rip), %rax
	movq	%rax, helptext+2696(%rip)
	movq	helptext_copy+2688(%rip), %rax
	movq	%rax, helptext+2688(%rip)
	movl	helptext_copy+2680(%rip), %eax
	movl	%eax, helptext+2680(%rip)
	movq	helptext_copy+2672(%rip), %rax
	movq	%rax, helptext+2672(%rip)
	movq	helptext_copy+2664(%rip), %rax
	movq	%rax, helptext+2664(%rip)
	movl	helptext_copy+2656(%rip), %eax
	movl	%eax, helptext+2656(%rip)
	movq	helptext_copy+2648(%rip), %rax
	movq	%rax, helptext+2648(%rip)
	movq	helptext_copy+2640(%rip), %rax
	movq	%rax, helptext+2640(%rip)
	movl	helptext_copy+2632(%rip), %eax
	movl	%eax, helptext+2632(%rip)
	movq	helptext_copy+2624(%rip), %rax
	movq	%rax, helptext+2624(%rip)
	movq	helptext_copy+2616(%rip), %rax
	movq	%rax, helptext+2616(%rip)
	movl	helptext_copy+2608(%rip), %eax
	movl	%eax, helptext+2608(%rip)
	movq	helptext_copy+2600(%rip), %rax
	movq	%rax, helptext+2600(%rip)
	movq	helptext_copy+2592(%rip), %rax
	movq	%rax, helptext+2592(%rip)
	movl	helptext_copy+2584(%rip), %eax
	movl	%eax, helptext+2584(%rip)
	movq	helptext_copy+2576(%rip), %rax
	movq	%rax, helptext+2576(%rip)
	movq	helptext_copy+2568(%rip), %rax
	movq	%rax, helptext+2568(%rip)
	movl	helptext_copy+2560(%rip), %eax
	movl	%eax, helptext+2560(%rip)
	movq	%r9, helptext+3576(%rip)
	movl	helptext_copy+3568(%rip), %eax
	movl	%eax, helptext+3568(%rip)
	movq	helptext_copy+3560(%rip), %rax
	movq	%rax, helptext+3560(%rip)
	movq	helptext_copy+3552(%rip), %rax
	movq	%rax, helptext+3552(%rip)
	movl	helptext_copy+3544(%rip), %eax
	movl	%eax, helptext+3544(%rip)
	movq	helptext_copy+3536(%rip), %rax
	movq	%rax, helptext+3536(%rip)
	movq	helptext_copy+3528(%rip), %rax
	movq	%rax, helptext+3528(%rip)
	movl	helptext_copy+3520(%rip), %eax
	movl	%eax, helptext+3520(%rip)
	movq	helptext_copy+3512(%rip), %rax
	movq	%rax, helptext+3512(%rip)
	movq	helptext_copy+3504(%rip), %rax
	movq	%rax, helptext+3504(%rip)
	movl	helptext_copy+3496(%rip), %eax
	movl	%eax, helptext+3496(%rip)
	movq	helptext_copy+3488(%rip), %rax
	movq	%rax, helptext+3488(%rip)
	movq	helptext_copy+3480(%rip), %rax
	movq	%rax, helptext+3480(%rip)
	movl	helptext_copy+3472(%rip), %eax
	movl	%eax, helptext+3472(%rip)
	movq	helptext_copy+3464(%rip), %rax
	movq	%rax, helptext+3464(%rip)
	movq	helptext_copy+3456(%rip), %rax
	movq	%rax, helptext+3456(%rip)
	movl	helptext_copy+3448(%rip), %eax
	movl	%eax, helptext+3448(%rip)
	movq	helptext_copy+3440(%rip), %rax
	movq	%rax, helptext+3440(%rip)
	movq	helptext_copy+3432(%rip), %rax
	movq	%rax, helptext+3432(%rip)
	movl	helptext_copy+3424(%rip), %eax
	movl	%eax, helptext+3424(%rip)
	movq	helptext_copy+3416(%rip), %rax
	movq	%rax, helptext+3416(%rip)
	movq	helptext_copy+3408(%rip), %rax
	movq	%rax, helptext+3408(%rip)
	movl	helptext_copy+3400(%rip), %eax
	movl	%eax, helptext+3400(%rip)
	movq	helptext_copy+3392(%rip), %rax
	movq	%rax, helptext+3392(%rip)
	movq	helptext_copy+3384(%rip), %rax
	movq	%rax, helptext+3384(%rip)
	movl	helptext_copy+3376(%rip), %eax
	movl	%eax, helptext+3376(%rip)
	movq	helptext_copy+3368(%rip), %rax
	movq	%rax, helptext+3368(%rip)
	movq	helptext_copy+3360(%rip), %rax
	movq	%rax, helptext+3360(%rip)
	movl	helptext_copy+3352(%rip), %eax
	movl	%eax, helptext+3352(%rip)
	movq	helptext_copy+3344(%rip), %rax
	movq	%rax, helptext+3344(%rip)
	movq	helptext_copy+3336(%rip), %rax
	movq	%rax, helptext+3336(%rip)
	movl	helptext_copy+3328(%rip), %eax
	movl	%eax, helptext+3328(%rip)
	movq	helptext_copy+3320(%rip), %rax
	movq	%rax, helptext+3320(%rip)
	movq	helptext_copy+3312(%rip), %rax
	movq	%rax, helptext+3312(%rip)
	movl	helptext_copy+3304(%rip), %eax
	movl	%eax, helptext+3304(%rip)
	movq	helptext_copy+3296(%rip), %rax
	movq	%rax, helptext+3296(%rip)
	movq	helptext_copy+3288(%rip), %rax
	movq	%rax, helptext+3288(%rip)
	movl	helptext_copy+3280(%rip), %eax
	movl	%eax, helptext+3280(%rip)
	movq	helptext_copy+3272(%rip), %rax
	movq	%rax, helptext+3272(%rip)
	movq	helptext_copy+3264(%rip), %rax
	movq	%rax, helptext+3264(%rip)
	movl	helptext_copy+3256(%rip), %eax
	movl	%eax, helptext+3256(%rip)
	movq	helptext_copy+3248(%rip), %rax
	movq	%rax, helptext+3248(%rip)
	movq	helptext_copy+3240(%rip), %rax
	movq	%rax, helptext+3240(%rip)
	movl	helptext_copy+3232(%rip), %eax
	movl	%eax, helptext+3232(%rip)
	movq	helptext_copy+3224(%rip), %rax
	movq	%rax, helptext+3224(%rip)
	movq	helptext_copy+3216(%rip), %rax
	movq	%rax, helptext+3216(%rip)
	movl	helptext_copy+3208(%rip), %eax
	movl	%eax, helptext+3208(%rip)
	movq	helptext_copy+3200(%rip), %rax
	movq	%rax, helptext+3200(%rip)
	movq	helptext_copy+3192(%rip), %rax
	movq	%rax, helptext+3192(%rip)
	movl	helptext_copy+3184(%rip), %eax
	movl	%eax, helptext+3184(%rip)
	movq	helptext_copy+3176(%rip), %rax
	movq	%rax, helptext+3176(%rip)
	movq	helptext_copy+3168(%rip), %rax
	movq	%rax, helptext+3168(%rip)
	movl	helptext_copy+3160(%rip), %eax
	movl	%eax, helptext+3160(%rip)
	movq	helptext_copy+3152(%rip), %rax
	movq	%rax, helptext+3152(%rip)
	movq	helptext_copy+3144(%rip), %rax
	movq	%rax, helptext+3144(%rip)
	movl	helptext_copy+3136(%rip), %eax
	movl	%eax, helptext+3136(%rip)
	movq	helptext_copy+3128(%rip), %rax
	movq	%rax, helptext+3128(%rip)
	movq	helptext_copy+3120(%rip), %rax
	movq	%rax, helptext+3120(%rip)
	movl	helptext_copy+3112(%rip), %eax
	movl	%eax, helptext+3112(%rip)
	movq	helptext_copy+3104(%rip), %rax
	movq	%rax, helptext+3104(%rip)
	movq	helptext_copy+3096(%rip), %rax
	movq	%rax, helptext+3096(%rip)
	movl	helptext_copy+3088(%rip), %eax
	movl	%eax, helptext+3088(%rip)
	movq	helptext_copy+3080(%rip), %rax
	movq	%rax, helptext+3080(%rip)
	movq	helptext_copy+3072(%rip), %rax
	movq	%rax, helptext+3072(%rip)
	movq	%r10, helptext+4088(%rip)
	movq	helptext_copy+4080(%rip), %rax
	movq	%rax, helptext+4080(%rip)
	movl	helptext_copy+4072(%rip), %eax
	movl	%eax, helptext+4072(%rip)
	movq	helptext_copy+4064(%rip), %rax
	movq	%rax, helptext+4064(%rip)
	movq	helptext_copy+4056(%rip), %rax
	movq	%rax, helptext+4056(%rip)
	movl	helptext_copy+4048(%rip), %eax
	movl	%eax, helptext+4048(%rip)
	movq	helptext_copy+4040(%rip), %rax
	movq	%rax, helptext+4040(%rip)
	movq	helptext_copy+4032(%rip), %rax
	movq	%rax, helptext+4032(%rip)
	movl	helptext_copy+4024(%rip), %eax
	movl	%eax, helptext+4024(%rip)
	movq	helptext_copy+4016(%rip), %rax
	movq	%rax, helptext+4016(%rip)
	movq	helptext_copy+4008(%rip), %rax
	movq	%rax, helptext+4008(%rip)
	movl	helptext_copy+4000(%rip), %eax
	movl	%eax, helptext+4000(%rip)
	movq	helptext_copy+3992(%rip), %rax
	movq	%rax, helptext+3992(%rip)
	movq	helptext_copy+3984(%rip), %rax
	movq	%rax, helptext+3984(%rip)
	movl	helptext_copy+3976(%rip), %eax
	movl	%eax, helptext+3976(%rip)
	movq	helptext_copy+3968(%rip), %rax
	movq	%rax, helptext+3968(%rip)
	movq	helptext_copy+3960(%rip), %rax
	movq	%rax, helptext+3960(%rip)
	movl	helptext_copy+3952(%rip), %eax
	movl	%eax, helptext+3952(%rip)
	movq	helptext_copy+3944(%rip), %rax
	movq	%rax, helptext+3944(%rip)
	movq	helptext_copy+3936(%rip), %rax
	movq	%rax, helptext+3936(%rip)
	movl	helptext_copy+3928(%rip), %eax
	movl	%eax, helptext+3928(%rip)
	movq	helptext_copy+3920(%rip), %rax
	movq	%rax, helptext+3920(%rip)
	movq	helptext_copy+3912(%rip), %rax
	movq	%rax, helptext+3912(%rip)
	movl	helptext_copy+3904(%rip), %eax
	movl	%eax, helptext+3904(%rip)
	movq	helptext_copy+3896(%rip), %rax
	movq	%rax, helptext+3896(%rip)
	movq	helptext_copy+3888(%rip), %rax
	movq	%rax, helptext+3888(%rip)
	movl	helptext_copy+3880(%rip), %eax
	movl	%eax, helptext+3880(%rip)
	movq	helptext_copy+3872(%rip), %rax
	movq	%rax, helptext+3872(%rip)
	movq	helptext_copy+3864(%rip), %rax
	movq	%rax, helptext+3864(%rip)
	movl	helptext_copy+3856(%rip), %eax
	movl	%eax, helptext+3856(%rip)
	movq	helptext_copy+3848(%rip), %rax
	movq	%rax, helptext+3848(%rip)
	movq	helptext_copy+3840(%rip), %rax
	movq	%rax, helptext+3840(%rip)
	movl	helptext_copy+3832(%rip), %eax
	movl	%eax, helptext+3832(%rip)
	movq	helptext_copy+3824(%rip), %rax
	movq	%rax, helptext+3824(%rip)
	movq	helptext_copy+3816(%rip), %rax
	movq	%rax, helptext+3816(%rip)
	movl	helptext_copy+3808(%rip), %eax
	movl	%eax, helptext+3808(%rip)
	movq	helptext_copy+3800(%rip), %rax
	movq	%rax, helptext+3800(%rip)
	movq	helptext_copy+3792(%rip), %rax
	movq	%rax, helptext+3792(%rip)
	movl	helptext_copy+3784(%rip), %eax
	movl	%eax, helptext+3784(%rip)
	movq	helptext_copy+3776(%rip), %rax
	movq	%rax, helptext+3776(%rip)
	movq	helptext_copy+3768(%rip), %rax
	movq	%rax, helptext+3768(%rip)
	movl	helptext_copy+3760(%rip), %eax
	movl	%eax, helptext+3760(%rip)
	movq	helptext_copy+3752(%rip), %rax
	movq	%rax, helptext+3752(%rip)
	movq	helptext_copy+3744(%rip), %rax
	movq	%rax, helptext+3744(%rip)
	movl	helptext_copy+3736(%rip), %eax
	movl	%eax, helptext+3736(%rip)
	movq	helptext_copy+3728(%rip), %rax
	movq	%rax, helptext+3728(%rip)
	movq	helptext_copy+3720(%rip), %rax
	movq	%rax, helptext+3720(%rip)
	movl	helptext_copy+3712(%rip), %eax
	movl	%eax, helptext+3712(%rip)
	movq	helptext_copy+3704(%rip), %rax
	movq	%rax, helptext+3704(%rip)
	movq	helptext_copy+3696(%rip), %rax
	movq	%rax, helptext+3696(%rip)
	movl	helptext_copy+3688(%rip), %eax
	movl	%eax, helptext+3688(%rip)
	movq	helptext_copy+3680(%rip), %rax
	movq	%rax, helptext+3680(%rip)
	movq	helptext_copy+3672(%rip), %rax
	movq	%rax, helptext+3672(%rip)
	movl	helptext_copy+3664(%rip), %eax
	movl	%eax, helptext+3664(%rip)
	movq	helptext_copy+3656(%rip), %rax
	movq	%rax, helptext+3656(%rip)
	movq	helptext_copy+3648(%rip), %rax
	movq	%rax, helptext+3648(%rip)
	movl	helptext_copy+3640(%rip), %eax
	movl	%eax, helptext+3640(%rip)
	movq	helptext_copy+3632(%rip), %rax
	movq	%rax, helptext+3632(%rip)
	movq	helptext_copy+3624(%rip), %rax
	movq	%rax, helptext+3624(%rip)
	movl	helptext_copy+3616(%rip), %eax
	movl	%eax, helptext+3616(%rip)
	movq	helptext_copy+3608(%rip), %rax
	movq	%rax, helptext+3608(%rip)
	movq	helptext_copy+3600(%rip), %rax
	movq	%rax, helptext+3600(%rip)
	movl	helptext_copy+3592(%rip), %eax
	movl	%eax, helptext+3592(%rip)
	movq	helptext_copy+3584(%rip), %rax
	movq	%rax, helptext+3584(%rip)
	movl	%r11d, helptext+4600(%rip)
	movq	helptext_copy+4592(%rip), %rax
	movq	%rax, helptext+4592(%rip)
	movq	helptext_copy+4584(%rip), %rax
	movq	%rax, helptext+4584(%rip)
	movl	helptext_copy+4576(%rip), %eax
	movl	%eax, helptext+4576(%rip)
	movq	helptext_copy+4568(%rip), %rax
	movq	%rax, helptext+4568(%rip)
	movq	helptext_copy+4560(%rip), %rax
	movq	%rax, helptext+4560(%rip)
	movl	helptext_copy+4552(%rip), %eax
	movl	%eax, helptext+4552(%rip)
	movq	helptext_copy+4544(%rip), %rax
	movq	%rax, helptext+4544(%rip)
	movq	helptext_copy+4536(%rip), %rax
	movq	%rax, helptext+4536(%rip)
	movl	helptext_copy+4528(%rip), %eax
	movl	%eax, helptext+4528(%rip)
	movq	helptext_copy+4520(%rip), %rax
	movq	%rax, helptext+4520(%rip)
	movq	helptext_copy+4512(%rip), %rax
	movq	%rax, helptext+4512(%rip)
	movl	helptext_copy+4504(%rip), %eax
	movl	%eax, helptext+4504(%rip)
	movq	helptext_copy+4496(%rip), %rax
	movq	%rax, helptext+4496(%rip)
	movq	helptext_copy+4488(%rip), %rax
	movq	%rax, helptext+4488(%rip)
	movl	helptext_copy+4480(%rip), %eax
	movl	%eax, helptext+4480(%rip)
	movq	helptext_copy+4472(%rip), %rax
	movq	%rax, helptext+4472(%rip)
	movq	helptext_copy+4464(%rip), %rax
	movq	%rax, helptext+4464(%rip)
	movl	helptext_copy+4456(%rip), %eax
	movl	%eax, helptext+4456(%rip)
	movq	helptext_copy+4448(%rip), %rax
	movq	%rax, helptext+4448(%rip)
	movq	helptext_copy+4440(%rip), %rax
	movq	%rax, helptext+4440(%rip)
	movl	helptext_copy+4432(%rip), %eax
	movl	%eax, helptext+4432(%rip)
	movq	helptext_copy+4424(%rip), %rax
	movq	%rax, helptext+4424(%rip)
	movq	helptext_copy+4416(%rip), %rax
	movq	%rax, helptext+4416(%rip)
	movl	helptext_copy+4408(%rip), %eax
	movl	%eax, helptext+4408(%rip)
	movq	helptext_copy+4400(%rip), %rax
	movq	%rax, helptext+4400(%rip)
	movq	helptext_copy+4392(%rip), %rax
	movq	%rax, helptext+4392(%rip)
	movl	helptext_copy+4384(%rip), %eax
	movl	%eax, helptext+4384(%rip)
	movq	helptext_copy+4376(%rip), %rax
	movq	%rax, helptext+4376(%rip)
	movq	helptext_copy+4368(%rip), %rax
	movq	%rax, helptext+4368(%rip)
	movl	helptext_copy+4360(%rip), %eax
	movl	%eax, helptext+4360(%rip)
	movq	helptext_copy+4352(%rip), %rax
	movq	%rax, helptext+4352(%rip)
	movq	helptext_copy+4344(%rip), %rax
	movq	%rax, helptext+4344(%rip)
	movl	helptext_copy+4336(%rip), %eax
	movl	%eax, helptext+4336(%rip)
	movq	helptext_copy+4328(%rip), %rax
	movq	%rax, helptext+4328(%rip)
	movq	helptext_copy+4320(%rip), %rax
	movq	%rax, helptext+4320(%rip)
	movl	helptext_copy+4312(%rip), %eax
	movl	%eax, helptext+4312(%rip)
	movq	helptext_copy+4304(%rip), %rax
	movq	%rax, helptext+4304(%rip)
	movq	helptext_copy+4296(%rip), %rax
	movq	%rax, helptext+4296(%rip)
	movl	helptext_copy+4288(%rip), %eax
	movl	%eax, helptext+4288(%rip)
	movq	helptext_copy+4280(%rip), %rax
	movq	%rax, helptext+4280(%rip)
	movq	helptext_copy+4272(%rip), %rax
	movq	%rax, helptext+4272(%rip)
	movl	helptext_copy+4264(%rip), %eax
	movl	%eax, helptext+4264(%rip)
	movq	helptext_copy+4256(%rip), %rax
	movq	%rax, helptext+4256(%rip)
	movq	helptext_copy+4248(%rip), %rax
	movq	%rax, helptext+4248(%rip)
	movl	helptext_copy+4240(%rip), %eax
	movl	%eax, helptext+4240(%rip)
	movq	helptext_copy+4232(%rip), %rax
	movq	%rax, helptext+4232(%rip)
	movq	helptext_copy+4224(%rip), %rax
	movq	%rax, helptext+4224(%rip)
	movl	helptext_copy+4216(%rip), %eax
	movl	%eax, helptext+4216(%rip)
	movq	helptext_copy+4208(%rip), %rax
	movq	%rax, helptext+4208(%rip)
	movq	helptext_copy+4200(%rip), %rax
	movq	%rax, helptext+4200(%rip)
	movl	helptext_copy+4192(%rip), %eax
	movl	%eax, helptext+4192(%rip)
	movq	helptext_copy+4184(%rip), %rax
	movq	%rax, helptext+4184(%rip)
	movq	helptext_copy+4176(%rip), %rax
	movq	%rax, helptext+4176(%rip)
	movl	helptext_copy+4168(%rip), %eax
	movl	%eax, helptext+4168(%rip)
	movq	helptext_copy+4160(%rip), %rax
	movq	%rax, helptext+4160(%rip)
	movq	helptext_copy+4152(%rip), %rax
	movq	%rax, helptext+4152(%rip)
	movl	helptext_copy+4144(%rip), %eax
	movl	%eax, helptext+4144(%rip)
	movq	helptext_copy+4136(%rip), %rax
	movq	%rax, helptext+4136(%rip)
	movq	helptext_copy+4128(%rip), %rax
	movq	%rax, helptext+4128(%rip)
	movl	helptext_copy+4120(%rip), %eax
	movl	%eax, helptext+4120(%rip)
	movq	helptext_copy+4112(%rip), %rax
	movq	%rax, helptext+4112(%rip)
	movq	helptext_copy+4104(%rip), %rax
	movq	%rax, helptext+4104(%rip)
	movl	helptext_copy+4096(%rip), %eax
	movl	%eax, helptext+4096(%rip)
	movq	%rbx, helptext+5112(%rip)
	movl	helptext_copy+5104(%rip), %eax
	movl	%eax, helptext+5104(%rip)
	movq	helptext_copy+5096(%rip), %rax
	movq	%rax, helptext+5096(%rip)
	movq	helptext_copy+5088(%rip), %rax
	movq	%rax, helptext+5088(%rip)
	movl	helptext_copy+5080(%rip), %eax
	movl	%eax, helptext+5080(%rip)
	movq	helptext_copy+5072(%rip), %rax
	movq	%rax, helptext+5072(%rip)
	movq	helptext_copy+5064(%rip), %rax
	movq	%rax, helptext+5064(%rip)
	movl	helptext_copy+5056(%rip), %eax
	movl	%eax, helptext+5056(%rip)
	movq	helptext_copy+5048(%rip), %rax
	movq	%rax, helptext+5048(%rip)
	movq	helptext_copy+5040(%rip), %rax
	movq	%rax, helptext+5040(%rip)
	movl	helptext_copy+5032(%rip), %eax
	movl	%eax, helptext+5032(%rip)
	movq	helptext_copy+5024(%rip), %rax
	movq	%rax, helptext+5024(%rip)
	movq	helptext_copy+5016(%rip), %rax
	movq	%rax, helptext+5016(%rip)
	movl	helptext_copy+5008(%rip), %eax
	movl	%eax, helptext+5008(%rip)
	movq	helptext_copy+5000(%rip), %rax
	movq	%rax, helptext+5000(%rip)
	movq	helptext_copy+4992(%rip), %rax
	movq	%rax, helptext+4992(%rip)
	movl	helptext_copy+4984(%rip), %eax
	movl	%eax, helptext+4984(%rip)
	movq	helptext_copy+4976(%rip), %rax
	movq	%rax, helptext+4976(%rip)
	movq	helptext_copy+4968(%rip), %rax
	movq	%rax, helptext+4968(%rip)
	movl	helptext_copy+4960(%rip), %eax
	movl	%eax, helptext+4960(%rip)
	movq	helptext_copy+4952(%rip), %rax
	movq	%rax, helptext+4952(%rip)
	movq	helptext_copy+4944(%rip), %rax
	movq	%rax, helptext+4944(%rip)
	movl	helptext_copy+4936(%rip), %eax
	movl	%eax, helptext+4936(%rip)
	movq	helptext_copy+4928(%rip), %rax
	movq	%rax, helptext+4928(%rip)
	movq	helptext_copy+4920(%rip), %rax
	movq	%rax, helptext+4920(%rip)
	movl	helptext_copy+4912(%rip), %eax
	movl	%eax, helptext+4912(%rip)
	movq	helptext_copy+4904(%rip), %rax
	movq	%rax, helptext+4904(%rip)
	movq	helptext_copy+4896(%rip), %rax
	movq	%rax, helptext+4896(%rip)
	movl	helptext_copy+4888(%rip), %eax
	movl	%eax, helptext+4888(%rip)
	movq	helptext_copy+4880(%rip), %rax
	movq	%rax, helptext+4880(%rip)
	movq	helptext_copy+4872(%rip), %rax
	movq	%rax, helptext+4872(%rip)
	movl	helptext_copy+4864(%rip), %eax
	movl	%eax, helptext+4864(%rip)
	movq	helptext_copy+4856(%rip), %rax
	movq	%rax, helptext+4856(%rip)
	movq	helptext_copy+4848(%rip), %rax
	movq	%rax, helptext+4848(%rip)
	movl	helptext_copy+4840(%rip), %eax
	movl	%eax, helptext+4840(%rip)
	movq	helptext_copy+4832(%rip), %rax
	movq	%rax, helptext+4832(%rip)
	movq	helptext_copy+4824(%rip), %rax
	movq	%rax, helptext+4824(%rip)
	movl	helptext_copy+4816(%rip), %eax
	movl	%eax, helptext+4816(%rip)
	movq	helptext_copy+4808(%rip), %rax
	movq	%rax, helptext+4808(%rip)
	movq	helptext_copy+4800(%rip), %rax
	movq	%rax, helptext+4800(%rip)
	movl	helptext_copy+4792(%rip), %eax
	movl	%eax, helptext+4792(%rip)
	movq	helptext_copy+4784(%rip), %rax
	movq	%rax, helptext+4784(%rip)
	movq	helptext_copy+4776(%rip), %rax
	movq	%rax, helptext+4776(%rip)
	movl	helptext_copy+4768(%rip), %eax
	movl	%eax, helptext+4768(%rip)
	movq	helptext_copy+4760(%rip), %rax
	movq	%rax, helptext+4760(%rip)
	movq	helptext_copy+4752(%rip), %rax
	movq	%rax, helptext+4752(%rip)
	movl	helptext_copy+4744(%rip), %eax
	movl	%eax, helptext+4744(%rip)
	movq	helptext_copy+4736(%rip), %rax
	movq	%rax, helptext+4736(%rip)
	movq	helptext_copy+4728(%rip), %rax
	movq	%rax, helptext+4728(%rip)
	movl	helptext_copy+4720(%rip), %eax
	movl	%eax, helptext+4720(%rip)
	movq	helptext_copy+4712(%rip), %rax
	movq	%rax, helptext+4712(%rip)
	movq	helptext_copy+4704(%rip), %rax
	movq	%rax, helptext+4704(%rip)
	movl	helptext_copy+4696(%rip), %eax
	movl	%eax, helptext+4696(%rip)
	movq	helptext_copy+4688(%rip), %rax
	movq	%rax, helptext+4688(%rip)
	movq	helptext_copy+4680(%rip), %rax
	movq	%rax, helptext+4680(%rip)
	movl	helptext_copy+4672(%rip), %eax
	movl	%eax, helptext+4672(%rip)
	movq	helptext_copy+4664(%rip), %rax
	movq	%rax, helptext+4664(%rip)
	movq	helptext_copy+4656(%rip), %rax
	movq	%rax, helptext+4656(%rip)
	movl	helptext_copy+4648(%rip), %eax
	movl	%eax, helptext+4648(%rip)
	movq	helptext_copy+4640(%rip), %rax
	movq	%rax, helptext+4640(%rip)
	movq	helptext_copy+4632(%rip), %rax
	movq	%rax, helptext+4632(%rip)
	movl	helptext_copy+4624(%rip), %eax
	movl	%eax, helptext+4624(%rip)
	movq	helptext_copy+4616(%rip), %rax
	movq	%rax, helptext+4616(%rip)
	movq	helptext_copy+4608(%rip), %rax
	movq	%rax, helptext+4608(%rip)
	movq	%r14, helptext+5624(%rip)
	movq	helptext_copy+5616(%rip), %rax
	movq	%rax, helptext+5616(%rip)
	movl	helptext_copy+5608(%rip), %eax
	movl	%eax, helptext+5608(%rip)
	movq	helptext_copy+5600(%rip), %rax
	movq	%rax, helptext+5600(%rip)
	movq	helptext_copy+5592(%rip), %rax
	movq	%rax, helptext+5592(%rip)
	movl	helptext_copy+5584(%rip), %eax
	movl	%eax, helptext+5584(%rip)
	movq	helptext_copy+5576(%rip), %rax
	movq	%rax, helptext+5576(%rip)
	movq	helptext_copy+5568(%rip), %rax
	movq	%rax, helptext+5568(%rip)
	movl	helptext_copy+5560(%rip), %eax
	movl	%eax, helptext+5560(%rip)
	movq	helptext_copy+5552(%rip), %rax
	movq	%rax, helptext+5552(%rip)
	movq	helptext_copy+5544(%rip), %rax
	movq	%rax, helptext+5544(%rip)
	movl	helptext_copy+5536(%rip), %eax
	movl	%eax, helptext+5536(%rip)
	movq	helptext_copy+5528(%rip), %rax
	movq	%rax, helptext+5528(%rip)
	movq	helptext_copy+5520(%rip), %rax
	movq	%rax, helptext+5520(%rip)
	movl	helptext_copy+5512(%rip), %eax
	movl	%eax, helptext+5512(%rip)
	movq	helptext_copy+5504(%rip), %rax
	movq	%rax, helptext+5504(%rip)
	movq	helptext_copy+5496(%rip), %rax
	movq	%rax, helptext+5496(%rip)
	movl	helptext_copy+5488(%rip), %eax
	movl	%eax, helptext+5488(%rip)
	movq	helptext_copy+5480(%rip), %rax
	movq	%rax, helptext+5480(%rip)
	movq	helptext_copy+5472(%rip), %rax
	movq	%rax, helptext+5472(%rip)
	movl	helptext_copy+5464(%rip), %eax
	movl	%eax, helptext+5464(%rip)
	movq	helptext_copy+5456(%rip), %rax
	movq	%rax, helptext+5456(%rip)
	movq	helptext_copy+5448(%rip), %rax
	movq	%rax, helptext+5448(%rip)
	movl	helptext_copy+5440(%rip), %eax
	movl	%eax, helptext+5440(%rip)
	movq	helptext_copy+5432(%rip), %rax
	movq	%rax, helptext+5432(%rip)
	movq	helptext_copy+5424(%rip), %rax
	movq	%rax, helptext+5424(%rip)
	movl	helptext_copy+5416(%rip), %eax
	movl	%eax, helptext+5416(%rip)
	movq	helptext_copy+5408(%rip), %rax
	movq	%rax, helptext+5408(%rip)
	movq	helptext_copy+5400(%rip), %rax
	movq	%rax, helptext+5400(%rip)
	movl	helptext_copy+5392(%rip), %eax
	movl	%eax, helptext+5392(%rip)
	movq	helptext_copy+5384(%rip), %rax
	movq	%rax, helptext+5384(%rip)
	movq	helptext_copy+5376(%rip), %rax
	movq	%rax, helptext+5376(%rip)
	movl	helptext_copy+5368(%rip), %eax
	movl	%eax, helptext+5368(%rip)
	movq	helptext_copy+5360(%rip), %rax
	movq	%rax, helptext+5360(%rip)
	movq	helptext_copy+5352(%rip), %rax
	movq	%rax, helptext+5352(%rip)
	movl	helptext_copy+5344(%rip), %eax
	movl	%eax, helptext+5344(%rip)
	movq	helptext_copy+5336(%rip), %rax
	movq	%rax, helptext+5336(%rip)
	movq	helptext_copy+5328(%rip), %rax
	movq	%rax, helptext+5328(%rip)
	movl	helptext_copy+5320(%rip), %eax
	movl	%eax, helptext+5320(%rip)
	movq	helptext_copy+5312(%rip), %rax
	movq	%rax, helptext+5312(%rip)
	movq	helptext_copy+5304(%rip), %rax
	movq	%rax, helptext+5304(%rip)
	movl	helptext_copy+5296(%rip), %eax
	movl	%eax, helptext+5296(%rip)
	movq	helptext_copy+5288(%rip), %rax
	movq	%rax, helptext+5288(%rip)
	movq	helptext_copy+5280(%rip), %rax
	movq	%rax, helptext+5280(%rip)
	movl	helptext_copy+5272(%rip), %eax
	movl	%eax, helptext+5272(%rip)
	movq	helptext_copy+5264(%rip), %rax
	movq	%rax, helptext+5264(%rip)
	movq	helptext_copy+5256(%rip), %rax
	movq	%rax, helptext+5256(%rip)
	movl	helptext_copy+5248(%rip), %eax
	movl	%eax, helptext+5248(%rip)
	movq	helptext_copy+5240(%rip), %rax
	movq	%rax, helptext+5240(%rip)
	movq	helptext_copy+5232(%rip), %rax
	movq	%rax, helptext+5232(%rip)
	movl	helptext_copy+5224(%rip), %eax
	movl	%eax, helptext+5224(%rip)
	movq	helptext_copy+5216(%rip), %rax
	movq	%rax, helptext+5216(%rip)
	movq	helptext_copy+5208(%rip), %rax
	movq	%rax, helptext+5208(%rip)
	movl	helptext_copy+5200(%rip), %eax
	movl	%eax, helptext+5200(%rip)
	movq	helptext_copy+5192(%rip), %rax
	movq	%rax, helptext+5192(%rip)
	movq	helptext_copy+5184(%rip), %rax
	movq	%rax, helptext+5184(%rip)
	movl	helptext_copy+5176(%rip), %eax
	movl	%eax, helptext+5176(%rip)
	movq	helptext_copy+5168(%rip), %rax
	movq	%rax, helptext+5168(%rip)
	movq	helptext_copy+5160(%rip), %rax
	movq	%rax, helptext+5160(%rip)
	movl	helptext_copy+5152(%rip), %eax
	movl	%eax, helptext+5152(%rip)
	movq	helptext_copy+5144(%rip), %rax
	movq	%rax, helptext+5144(%rip)
	movq	helptext_copy+5136(%rip), %rax
	movq	%rax, helptext+5136(%rip)
	movl	helptext_copy+5128(%rip), %eax
	movl	%eax, helptext+5128(%rip)
	movq	helptext_copy+5120(%rip), %rax
	movq	%rax, helptext+5120(%rip)
	movl	helptext_copy+5824(%rip), %eax
	movl	%eax, helptext+5824(%rip)
	movq	helptext_copy+5816(%rip), %rax
	movq	%rax, helptext+5816(%rip)
	movq	helptext_copy+5808(%rip), %rax
	movq	%rax, helptext+5808(%rip)
	movl	helptext_copy+5800(%rip), %eax
	movl	%eax, helptext+5800(%rip)
	movq	helptext_copy+5792(%rip), %rax
	movq	%rax, helptext+5792(%rip)
	movq	helptext_copy+5784(%rip), %rax
	movq	%rax, helptext+5784(%rip)
	movl	helptext_copy+5776(%rip), %eax
	movl	%eax, helptext+5776(%rip)
	movq	helptext_copy+5768(%rip), %rax
	movq	%rax, helptext+5768(%rip)
	movq	helptext_copy+5760(%rip), %rax
	movq	%rax, helptext+5760(%rip)
	movl	helptext_copy+5752(%rip), %eax
	movl	%eax, helptext+5752(%rip)
	movq	helptext_copy+5744(%rip), %rax
	movq	%rax, helptext+5744(%rip)
	movq	helptext_copy+5736(%rip), %rax
	movq	%rax, helptext+5736(%rip)
	movl	helptext_copy+5728(%rip), %eax
	movl	%eax, helptext+5728(%rip)
	movq	helptext_copy+5720(%rip), %rax
	movq	%rax, helptext+5720(%rip)
	movq	helptext_copy+5712(%rip), %rax
	movq	%rax, helptext+5712(%rip)
	movl	helptext_copy+5704(%rip), %eax
	movl	%eax, helptext+5704(%rip)
	movq	helptext_copy+5696(%rip), %rax
	movq	%rax, helptext+5696(%rip)
	movq	helptext_copy+5688(%rip), %rax
	movq	%rax, helptext+5688(%rip)
	movl	helptext_copy+5680(%rip), %eax
	movl	%eax, helptext+5680(%rip)
	movq	helptext_copy+5672(%rip), %rax
	movq	%rax, helptext+5672(%rip)
	movq	helptext_copy+5664(%rip), %rax
	movq	%rax, helptext+5664(%rip)
	movl	helptext_copy+5656(%rip), %eax
	movl	%eax, helptext+5656(%rip)
	movq	helptext_copy+5648(%rip), %rax
	movq	%rax, helptext+5648(%rip)
	movq	helptext_copy+5640(%rip), %rax
	movq	%rax, helptext+5640(%rip)
	movl	helptext_copy+5632(%rip), %eax
	movl	%eax, helptext+5632(%rip)
	movl	categories_copy+400(%rip), %r13d
	movq	categories_copy+408(%rip), %r12
	movq	categories_copy+416(%rip), %r15
	movl	categories_copy+424(%rip), %r14d
	movq	categories_copy+432(%rip), %rbx
	movq	categories_copy+440(%rip), %r11
	movl	categories_copy+448(%rip), %r10d
	movq	categories_copy+456(%rip), %r9
	movq	categories_copy+464(%rip), %r8
	movl	categories_copy+472(%rip), %edi
	movq	categories_copy+480(%rip), %rsi
	movq	categories_copy+488(%rip), %rdx
	movl	categories_copy+496(%rip), %ecx
	movq	categories_copy+504(%rip), %rax
	movq	%rax, categories+504(%rip)
	movl	%ecx, categories+496(%rip)
	movq	%rdx, categories+488(%rip)
	movq	%rsi, categories+480(%rip)
	movl	%edi, categories+472(%rip)
	movq	%r8, categories+464(%rip)
	movq	%r9, categories+456(%rip)
	movl	%r10d, categories+448(%rip)
	movq	%r11, categories+440(%rip)
	movq	%rbx, categories+432(%rip)
	movl	%r14d, categories+424(%rip)
	movq	%r15, categories+416(%rip)
	movq	%r12, categories+408(%rip)
	movl	%r13d, categories+400(%rip)
	movq	categories_copy+392(%rip), %rax
	movq	%rax, categories+392(%rip)
	movq	categories_copy+384(%rip), %rax
	movq	%rax, categories+384(%rip)
	movl	categories_copy+376(%rip), %eax
	movl	%eax, categories+376(%rip)
	movq	categories_copy+368(%rip), %rax
	movq	%rax, categories+368(%rip)
	movq	categories_copy+360(%rip), %rax
	movq	%rax, categories+360(%rip)
	movl	categories_copy+352(%rip), %eax
	movl	%eax, categories+352(%rip)
	movq	categories_copy+344(%rip), %rax
	movq	%rax, categories+344(%rip)
	movq	categories_copy+336(%rip), %rax
	movq	%rax, categories+336(%rip)
	movl	categories_copy+328(%rip), %eax
	movl	%eax, categories+328(%rip)
	movq	categories_copy+320(%rip), %rax
	movq	%rax, categories+320(%rip)
	movq	categories_copy+312(%rip), %rax
	movq	%rax, categories+312(%rip)
	movl	categories_copy+304(%rip), %eax
	movl	%eax, categories+304(%rip)
	movq	categories_copy+296(%rip), %rax
	movq	%rax, categories+296(%rip)
	movq	categories_copy+288(%rip), %rax
	movq	%rax, categories+288(%rip)
	movl	categories_copy+280(%rip), %eax
	movl	%eax, categories+280(%rip)
	movq	categories_copy+272(%rip), %rax
	movq	%rax, categories+272(%rip)
	movq	categories_copy+264(%rip), %rax
	movq	%rax, categories+264(%rip)
	movl	categories_copy+256(%rip), %eax
	movl	%eax, categories+256(%rip)
	movq	categories_copy+248(%rip), %rax
	movq	%rax, categories+248(%rip)
	movq	categories_copy+240(%rip), %rax
	movq	%rax, categories+240(%rip)
	movl	categories_copy+232(%rip), %eax
	movl	%eax, categories+232(%rip)
	movq	categories_copy+224(%rip), %rax
	movq	%rax, categories+224(%rip)
	movq	categories_copy+216(%rip), %rax
	movq	%rax, categories+216(%rip)
	movl	categories_copy+208(%rip), %eax
	movl	%eax, categories+208(%rip)
	movq	categories_copy+200(%rip), %rax
	movq	%rax, categories+200(%rip)
	movq	categories_copy+192(%rip), %rax
	movq	%rax, categories+192(%rip)
	movl	categories_copy+184(%rip), %eax
	movl	%eax, categories+184(%rip)
	movq	categories_copy+176(%rip), %rax
	movq	%rax, categories+176(%rip)
	movq	categories_copy+168(%rip), %rax
	movq	%rax, categories+168(%rip)
	movl	categories_copy+160(%rip), %eax
	movl	%eax, categories+160(%rip)
	movq	categories_copy+152(%rip), %rax
	movq	%rax, categories+152(%rip)
	movq	categories_copy+144(%rip), %rax
	movq	%rax, categories+144(%rip)
	movl	categories_copy+136(%rip), %eax
	movl	%eax, categories+136(%rip)
	movq	categories_copy+128(%rip), %rax
	movq	%rax, categories+128(%rip)
	movq	categories_copy+120(%rip), %rax
	movq	%rax, categories+120(%rip)
	movl	categories_copy+112(%rip), %eax
	movl	%eax, categories+112(%rip)
	movq	categories_copy+104(%rip), %rax
	movq	%rax, categories+104(%rip)
	movq	categories_copy+96(%rip), %rax
	movq	%rax, categories+96(%rip)
	movl	categories_copy+88(%rip), %eax
	movl	%eax, categories+88(%rip)
	movq	categories_copy+80(%rip), %rax
	movq	%rax, categories+80(%rip)
	movq	categories_copy+72(%rip), %rax
	movq	%rax, categories+72(%rip)
	movl	categories_copy+64(%rip), %eax
	movl	%eax, categories+64(%rip)
	movq	categories_copy+56(%rip), %rax
	movq	%rax, categories+56(%rip)
	movq	categories_copy+48(%rip), %rax
	movq	%rax, categories+48(%rip)
	movl	categories_copy+40(%rip), %eax
	movl	%eax, categories+40(%rip)
	movq	categories_copy+32(%rip), %rax
	movq	%rax, categories+32(%rip)
	movq	categories_copy+24(%rip), %rax
	movq	%rax, categories+24(%rip)
	movl	categories_copy+16(%rip), %eax
	movl	%eax, categories+16(%rip)
	movq	categories_copy+8(%rip), %rax
	movq	%rax, categories+8(%rip)
	movq	categories_copy(%rip), %rax
	movq	%rax, categories(%rip)
	movl	categories_copy+544(%rip), %eax
	movl	%eax, categories+544(%rip)
	movq	categories_copy+536(%rip), %rax
	movq	%rax, categories+536(%rip)
	movq	categories_copy+528(%rip), %rax
	movq	%rax, categories+528(%rip)
	movl	categories_copy+520(%rip), %eax
	movl	%eax, categories+520(%rip)
	movq	categories_copy+512(%rip), %rax
	movq	%rax, categories+512(%rip)
	movl	aliases_copy+496(%rip), %r15d
	movq	aliases_copy+504(%rip), %rax
	movq	aliases_copy+1008(%rip), %r12
	movq	aliases_copy+1016(%rip), %rcx
	movq	aliases_copy+1520(%rip), %r13
	movl	aliases_copy+1528(%rip), %edx
	movq	aliases_copy+2040(%rip), %rsi
	movq	aliases_copy+2552(%rip), %rdi
	movl	aliases_copy+3064(%rip), %r8d
	movq	aliases_copy+3576(%rip), %r9
	movq	aliases_copy+4088(%rip), %r10
	movl	aliases_copy+4600(%rip), %r11d
	movq	aliases_copy+5112(%rip), %rbx
	movq	aliases_copy+5624(%rip), %r14
	movq	%rax, aliases+504(%rip)
	movl	%r15d, aliases+496(%rip)
	movq	aliases_copy+488(%rip), %rax
	movq	%rax, aliases+488(%rip)
	movq	aliases_copy+480(%rip), %rax
	movq	%rax, aliases+480(%rip)
	movl	aliases_copy+472(%rip), %eax
	movl	%eax, aliases+472(%rip)
	movq	aliases_copy+464(%rip), %rax
	movq	%rax, aliases+464(%rip)
	movq	aliases_copy+456(%rip), %rax
	movq	%rax, aliases+456(%rip)
	movl	aliases_copy+448(%rip), %eax
	movl	%eax, aliases+448(%rip)
	movq	aliases_copy+440(%rip), %rax
	movq	%rax, aliases+440(%rip)
	movq	aliases_copy+432(%rip), %rax
	movq	%rax, aliases+432(%rip)
	movl	aliases_copy+424(%rip), %eax
	movl	%eax, aliases+424(%rip)
	movq	aliases_copy+416(%rip), %rax
	movq	%rax, aliases+416(%rip)
	movq	aliases_copy+408(%rip), %rax
	movq	%rax, aliases+408(%rip)
	movl	aliases_copy+400(%rip), %eax
	movl	%eax, aliases+400(%rip)
	movq	aliases_copy+392(%rip), %rax
	movq	%rax, aliases+392(%rip)
	movq	aliases_copy+384(%rip), %rax
	movq	%rax, aliases+384(%rip)
	movl	aliases_copy+376(%rip), %eax
	movl	%eax, aliases+376(%rip)
	movq	aliases_copy+368(%rip), %rax
	movq	%rax, aliases+368(%rip)
	movq	aliases_copy+360(%rip), %rax
	movq	%rax, aliases+360(%rip)
	movl	aliases_copy+352(%rip), %eax
	movl	%eax, aliases+352(%rip)
	movq	aliases_copy+344(%rip), %rax
	movq	%rax, aliases+344(%rip)
	movq	aliases_copy+336(%rip), %rax
	movq	%rax, aliases+336(%rip)
	movl	aliases_copy+328(%rip), %eax
	movl	%eax, aliases+328(%rip)
	movq	aliases_copy+320(%rip), %rax
	movq	%rax, aliases+320(%rip)
	movq	aliases_copy+312(%rip), %rax
	movq	%rax, aliases+312(%rip)
	movl	aliases_copy+304(%rip), %eax
	movl	%eax, aliases+304(%rip)
	movq	aliases_copy+296(%rip), %rax
	movq	%rax, aliases+296(%rip)
	movq	aliases_copy+288(%rip), %rax
	movq	%rax, aliases+288(%rip)
	movl	aliases_copy+280(%rip), %eax
	movl	%eax, aliases+280(%rip)
	movq	aliases_copy+272(%rip), %rax
	movq	%rax, aliases+272(%rip)
	movq	aliases_copy+264(%rip), %rax
	movq	%rax, aliases+264(%rip)
	movl	aliases_copy+256(%rip), %eax
	movl	%eax, aliases+256(%rip)
	movq	aliases_copy+248(%rip), %rax
	movq	%rax, aliases+248(%rip)
	movq	aliases_copy+240(%rip), %rax
	movq	%rax, aliases+240(%rip)
	movl	aliases_copy+232(%rip), %eax
	movl	%eax, aliases+232(%rip)
	movq	aliases_copy+224(%rip), %rax
	movq	%rax, aliases+224(%rip)
	movq	aliases_copy+216(%rip), %rax
	movq	%rax, aliases+216(%rip)
	movl	aliases_copy+208(%rip), %eax
	movl	%eax, aliases+208(%rip)
	movq	aliases_copy+200(%rip), %rax
	movq	%rax, aliases+200(%rip)
	movq	aliases_copy+192(%rip), %rax
	movq	%rax, aliases+192(%rip)
	movl	aliases_copy+184(%rip), %eax
	movl	%eax, aliases+184(%rip)
	movq	aliases_copy+176(%rip), %rax
	movq	%rax, aliases+176(%rip)
	movq	aliases_copy+168(%rip), %rax
	movq	%rax, aliases+168(%rip)
	movl	aliases_copy+160(%rip), %eax
	movl	%eax, aliases+160(%rip)
	movq	aliases_copy+152(%rip), %rax
	movq	%rax, aliases+152(%rip)
	movq	aliases_copy+144(%rip), %rax
	movq	%rax, aliases+144(%rip)
	movl	aliases_copy+136(%rip), %eax
	movl	%eax, aliases+136(%rip)
	movq	aliases_copy+128(%rip), %rax
	movq	%rax, aliases+128(%rip)
	movq	aliases_copy+120(%rip), %rax
	movq	%rax, aliases+120(%rip)
	movl	aliases_copy+112(%rip), %eax
	movl	%eax, aliases+112(%rip)
	movq	aliases_copy+104(%rip), %rax
	movq	%rax, aliases+104(%rip)
	movq	aliases_copy+96(%rip), %rax
	movq	%rax, aliases+96(%rip)
	movl	aliases_copy+88(%rip), %eax
	movl	%eax, aliases+88(%rip)
	movq	aliases_copy+80(%rip), %rax
	movq	%rax, aliases+80(%rip)
	movq	aliases_copy+72(%rip), %rax
	movq	%rax, aliases+72(%rip)
	movl	aliases_copy+64(%rip), %eax
	movl	%eax, aliases+64(%rip)
	movq	aliases_copy+56(%rip), %rax
	movq	%rax, aliases+56(%rip)
	movq	aliases_copy+48(%rip), %rax
	movq	%rax, aliases+48(%rip)
	movl	aliases_copy+40(%rip), %eax
	movl	%eax, aliases+40(%rip)
	movq	aliases_copy+32(%rip), %rax
	movq	%rax, aliases+32(%rip)
	movq	aliases_copy+24(%rip), %rax
	movq	%rax, aliases+24(%rip)
	movl	aliases_copy+16(%rip), %eax
	movl	%eax, aliases+16(%rip)
	movq	aliases_copy+8(%rip), %rax
	movq	%rax, aliases+8(%rip)
	movq	aliases_copy(%rip), %rax
	movq	%rax, aliases(%rip)
	movq	%rcx, aliases+1016(%rip)
	movq	%r12, aliases+1008(%rip)
	movl	aliases_copy+1000(%rip), %eax
	movl	%eax, aliases+1000(%rip)
	movq	aliases_copy+992(%rip), %rax
	movq	%rax, aliases+992(%rip)
	movq	aliases_copy+984(%rip), %rax
	movq	%rax, aliases+984(%rip)
	movl	aliases_copy+976(%rip), %eax
	movl	%eax, aliases+976(%rip)
	movq	aliases_copy+968(%rip), %rax
	movq	%rax, aliases+968(%rip)
	movq	aliases_copy+960(%rip), %rax
	movq	%rax, aliases+960(%rip)
	movl	aliases_copy+952(%rip), %eax
	movl	%eax, aliases+952(%rip)
	movq	aliases_copy+944(%rip), %rax
	movq	%rax, aliases+944(%rip)
	movq	aliases_copy+936(%rip), %rax
	movq	%rax, aliases+936(%rip)
	movl	aliases_copy+928(%rip), %eax
	movl	%eax, aliases+928(%rip)
	movq	aliases_copy+920(%rip), %rax
	movq	%rax, aliases+920(%rip)
	movq	aliases_copy+912(%rip), %rax
	movq	%rax, aliases+912(%rip)
	movl	aliases_copy+904(%rip), %eax
	movl	%eax, aliases+904(%rip)
	movq	aliases_copy+896(%rip), %rax
	movq	%rax, aliases+896(%rip)
	movq	aliases_copy+888(%rip), %rax
	movq	%rax, aliases+888(%rip)
	movl	aliases_copy+880(%rip), %eax
	movl	%eax, aliases+880(%rip)
	movq	aliases_copy+872(%rip), %rax
	movq	%rax, aliases+872(%rip)
	movq	aliases_copy+864(%rip), %rax
	movq	%rax, aliases+864(%rip)
	movl	aliases_copy+856(%rip), %eax
	movl	%eax, aliases+856(%rip)
	movq	aliases_copy+848(%rip), %rax
	movq	%rax, aliases+848(%rip)
	movq	aliases_copy+840(%rip), %rax
	movq	%rax, aliases+840(%rip)
	movl	aliases_copy+832(%rip), %eax
	movl	%eax, aliases+832(%rip)
	movq	aliases_copy+824(%rip), %rax
	movq	%rax, aliases+824(%rip)
	movq	aliases_copy+816(%rip), %rax
	movq	%rax, aliases+816(%rip)
	movl	aliases_copy+808(%rip), %eax
	movl	%eax, aliases+808(%rip)
	movq	aliases_copy+800(%rip), %rax
	movq	%rax, aliases+800(%rip)
	movq	aliases_copy+792(%rip), %rax
	movq	%rax, aliases+792(%rip)
	movl	aliases_copy+784(%rip), %eax
	movl	%eax, aliases+784(%rip)
	movq	aliases_copy+776(%rip), %rax
	movq	%rax, aliases+776(%rip)
	movq	aliases_copy+768(%rip), %rax
	movq	%rax, aliases+768(%rip)
	movl	aliases_copy+760(%rip), %eax
	movl	%eax, aliases+760(%rip)
	movq	aliases_copy+752(%rip), %rax
	movq	%rax, aliases+752(%rip)
	movq	aliases_copy+744(%rip), %rax
	movq	%rax, aliases+744(%rip)
	movl	aliases_copy+736(%rip), %eax
	movl	%eax, aliases+736(%rip)
	movq	aliases_copy+728(%rip), %rax
	movq	%rax, aliases+728(%rip)
	movq	aliases_copy+720(%rip), %rax
	movq	%rax, aliases+720(%rip)
	movl	aliases_copy+712(%rip), %eax
	movl	%eax, aliases+712(%rip)
	movq	aliases_copy+704(%rip), %rax
	movq	%rax, aliases+704(%rip)
	movq	aliases_copy+696(%rip), %rax
	movq	%rax, aliases+696(%rip)
	movl	aliases_copy+688(%rip), %eax
	movl	%eax, aliases+688(%rip)
	movq	aliases_copy+680(%rip), %rax
	movq	%rax, aliases+680(%rip)
	movq	aliases_copy+672(%rip), %rax
	movq	%rax, aliases+672(%rip)
	movl	aliases_copy+664(%rip), %eax
	movl	%eax, aliases+664(%rip)
	movq	aliases_copy+656(%rip), %rax
	movq	%rax, aliases+656(%rip)
	movq	aliases_copy+648(%rip), %rax
	movq	%rax, aliases+648(%rip)
	movl	aliases_copy+640(%rip), %eax
	movl	%eax, aliases+640(%rip)
	movq	aliases_copy+632(%rip), %rax
	movq	%rax, aliases+632(%rip)
	movq	aliases_copy+624(%rip), %rax
	movq	%rax, aliases+624(%rip)
	movl	aliases_copy+616(%rip), %eax
	movl	%eax, aliases+616(%rip)
	movq	aliases_copy+608(%rip), %rax
	movq	%rax, aliases+608(%rip)
	movq	aliases_copy+600(%rip), %rax
	movq	%rax, aliases+600(%rip)
	movl	aliases_copy+592(%rip), %eax
	movl	%eax, aliases+592(%rip)
	movq	aliases_copy+584(%rip), %rax
	movq	%rax, aliases+584(%rip)
	movq	aliases_copy+576(%rip), %rax
	movq	%rax, aliases+576(%rip)
	movl	aliases_copy+568(%rip), %eax
	movl	%eax, aliases+568(%rip)
	movq	aliases_copy+560(%rip), %rax
	movq	%rax, aliases+560(%rip)
	movq	aliases_copy+552(%rip), %rax
	movq	%rax, aliases+552(%rip)
	movl	aliases_copy+544(%rip), %eax
	movl	%eax, aliases+544(%rip)
	movq	aliases_copy+536(%rip), %rax
	movq	%rax, aliases+536(%rip)
	movq	aliases_copy+528(%rip), %rax
	movq	%rax, aliases+528(%rip)
	movl	aliases_copy+520(%rip), %eax
	movl	%eax, aliases+520(%rip)
	movq	aliases_copy+512(%rip), %rax
	movq	%rax, aliases+512(%rip)
	movl	%edx, aliases+1528(%rip)
	movq	%r13, aliases+1520(%rip)
	movq	aliases_copy+1512(%rip), %rax
	movq	%rax, aliases+1512(%rip)
	movl	aliases_copy+1504(%rip), %eax
	movl	%eax, aliases+1504(%rip)
	movq	aliases_copy+1496(%rip), %rax
	movq	%rax, aliases+1496(%rip)
	movq	aliases_copy+1488(%rip), %rax
	movq	%rax, aliases+1488(%rip)
	movl	aliases_copy+1480(%rip), %eax
	movl	%eax, aliases+1480(%rip)
	movq	aliases_copy+1472(%rip), %rax
	movq	%rax, aliases+1472(%rip)
	movq	aliases_copy+1464(%rip), %rax
	movq	%rax, aliases+1464(%rip)
	movl	aliases_copy+1456(%rip), %eax
	movl	%eax, aliases+1456(%rip)
	movq	aliases_copy+1448(%rip), %rax
	movq	%rax, aliases+1448(%rip)
	movq	aliases_copy+1440(%rip), %rax
	movq	%rax, aliases+1440(%rip)
	movl	aliases_copy+1432(%rip), %eax
	movl	%eax, aliases+1432(%rip)
	movq	aliases_copy+1424(%rip), %rax
	movq	%rax, aliases+1424(%rip)
	movq	aliases_copy+1416(%rip), %rax
	movq	%rax, aliases+1416(%rip)
	movl	aliases_copy+1408(%rip), %eax
	movl	%eax, aliases+1408(%rip)
	movq	aliases_copy+1400(%rip), %rax
	movq	%rax, aliases+1400(%rip)
	movq	aliases_copy+1392(%rip), %rax
	movq	%rax, aliases+1392(%rip)
	movl	aliases_copy+1384(%rip), %eax
	movl	%eax, aliases+1384(%rip)
	movq	aliases_copy+1376(%rip), %rax
	movq	%rax, aliases+1376(%rip)
	movq	aliases_copy+1368(%rip), %rax
	movq	%rax, aliases+1368(%rip)
	movl	aliases_copy+1360(%rip), %eax
	movl	%eax, aliases+1360(%rip)
	movq	aliases_copy+1352(%rip), %rax
	movq	%rax, aliases+1352(%rip)
	movq	aliases_copy+1344(%rip), %rax
	movq	%rax, aliases+1344(%rip)
	movl	aliases_copy+1336(%rip), %eax
	movl	%eax, aliases+1336(%rip)
	movq	aliases_copy+1328(%rip), %rax
	movq	%rax, aliases+1328(%rip)
	movq	aliases_copy+1320(%rip), %rax
	movq	%rax, aliases+1320(%rip)
	movl	aliases_copy+1312(%rip), %eax
	movl	%eax, aliases+1312(%rip)
	movq	aliases_copy+1304(%rip), %rax
	movq	%rax, aliases+1304(%rip)
	movq	aliases_copy+1296(%rip), %rax
	movq	%rax, aliases+1296(%rip)
	movl	aliases_copy+1288(%rip), %eax
	movl	%eax, aliases+1288(%rip)
	movq	aliases_copy+1280(%rip), %rax
	movq	%rax, aliases+1280(%rip)
	movq	aliases_copy+1272(%rip), %rax
	movq	%rax, aliases+1272(%rip)
	movl	aliases_copy+1264(%rip), %eax
	movl	%eax, aliases+1264(%rip)
	movq	aliases_copy+1256(%rip), %rax
	movq	%rax, aliases+1256(%rip)
	movq	aliases_copy+1248(%rip), %rax
	movq	%rax, aliases+1248(%rip)
	movl	aliases_copy+1240(%rip), %eax
	movl	%eax, aliases+1240(%rip)
	movq	aliases_copy+1232(%rip), %rax
	movq	%rax, aliases+1232(%rip)
	movq	aliases_copy+1224(%rip), %rax
	movq	%rax, aliases+1224(%rip)
	movl	aliases_copy+1216(%rip), %eax
	movl	%eax, aliases+1216(%rip)
	movq	aliases_copy+1208(%rip), %rax
	movq	%rax, aliases+1208(%rip)
	movq	aliases_copy+1200(%rip), %rax
	movq	%rax, aliases+1200(%rip)
	movl	aliases_copy+1192(%rip), %eax
	movl	%eax, aliases+1192(%rip)
	movq	aliases_copy+1184(%rip), %rax
	movq	%rax, aliases+1184(%rip)
	movq	aliases_copy+1176(%rip), %rax
	movq	%rax, aliases+1176(%rip)
	movl	aliases_copy+1168(%rip), %eax
	movl	%eax, aliases+1168(%rip)
	movq	aliases_copy+1160(%rip), %rax
	movq	%rax, aliases+1160(%rip)
	movq	aliases_copy+1152(%rip), %rax
	movq	%rax, aliases+1152(%rip)
	movl	aliases_copy+1144(%rip), %eax
	movl	%eax, aliases+1144(%rip)
	movq	aliases_copy+1136(%rip), %rax
	movq	%rax, aliases+1136(%rip)
	movq	aliases_copy+1128(%rip), %rax
	movq	%rax, aliases+1128(%rip)
	movl	aliases_copy+1120(%rip), %eax
	movl	%eax, aliases+1120(%rip)
	movq	aliases_copy+1112(%rip), %rax
	movq	%rax, aliases+1112(%rip)
	movq	aliases_copy+1104(%rip), %rax
	movq	%rax, aliases+1104(%rip)
	movl	aliases_copy+1096(%rip), %eax
	movl	%eax, aliases+1096(%rip)
	movq	aliases_copy+1088(%rip), %rax
	movq	%rax, aliases+1088(%rip)
	movq	aliases_copy+1080(%rip), %rax
	movq	%rax, aliases+1080(%rip)
	movl	aliases_copy+1072(%rip), %eax
	movl	%eax, aliases+1072(%rip)
	movq	aliases_copy+1064(%rip), %rax
	movq	%rax, aliases+1064(%rip)
	movq	aliases_copy+1056(%rip), %rax
	movq	%rax, aliases+1056(%rip)
	movl	aliases_copy+1048(%rip), %eax
	movl	%eax, aliases+1048(%rip)
	movq	aliases_copy+1040(%rip), %rax
	movq	%rax, aliases+1040(%rip)
	movq	aliases_copy+1032(%rip), %rax
	movq	%rax, aliases+1032(%rip)
	movl	aliases_copy+1024(%rip), %eax
	movl	%eax, aliases+1024(%rip)
	movq	%rsi, aliases+2040(%rip)
	movl	aliases_copy+2032(%rip), %eax
	movl	%eax, aliases+2032(%rip)
	movq	aliases_copy+2024(%rip), %rax
	movq	%rax, aliases+2024(%rip)
	movq	aliases_copy+2016(%rip), %rax
	movq	%rax, aliases+2016(%rip)
	movl	aliases_copy+2008(%rip), %eax
	movl	%eax, aliases+2008(%rip)
	movq	aliases_copy+2000(%rip), %rax
	movq	%rax, aliases+2000(%rip)
	movq	aliases_copy+1992(%rip), %rax
	movq	%rax, aliases+1992(%rip)
	movl	aliases_copy+1984(%rip), %eax
	movl	%eax, aliases+1984(%rip)
	movq	aliases_copy+1976(%rip), %rax
	movq	%rax, aliases+1976(%rip)
	movq	aliases_copy+1968(%rip), %rax
	movq	%rax, aliases+1968(%rip)
	movl	aliases_copy+1960(%rip), %eax
	movl	%eax, aliases+1960(%rip)
	movq	aliases_copy+1952(%rip), %rax
	movq	%rax, aliases+1952(%rip)
	movq	aliases_copy+1944(%rip), %rax
	movq	%rax, aliases+1944(%rip)
	movl	aliases_copy+1936(%rip), %eax
	movl	%eax, aliases+1936(%rip)
	movq	aliases_copy+1928(%rip), %rax
	movq	%rax, aliases+1928(%rip)
	movq	aliases_copy+1920(%rip), %rax
	movq	%rax, aliases+1920(%rip)
	movl	aliases_copy+1912(%rip), %eax
	movl	%eax, aliases+1912(%rip)
	movq	aliases_copy+1904(%rip), %rax
	movq	%rax, aliases+1904(%rip)
	movq	aliases_copy+1896(%rip), %rax
	movq	%rax, aliases+1896(%rip)
	movl	aliases_copy+1888(%rip), %eax
	movl	%eax, aliases+1888(%rip)
	movq	aliases_copy+1880(%rip), %rax
	movq	%rax, aliases+1880(%rip)
	movq	aliases_copy+1872(%rip), %rax
	movq	%rax, aliases+1872(%rip)
	movl	aliases_copy+1864(%rip), %eax
	movl	%eax, aliases+1864(%rip)
	movq	aliases_copy+1856(%rip), %rax
	movq	%rax, aliases+1856(%rip)
	movq	aliases_copy+1848(%rip), %rax
	movq	%rax, aliases+1848(%rip)
	movl	aliases_copy+1840(%rip), %eax
	movl	%eax, aliases+1840(%rip)
	movq	aliases_copy+1832(%rip), %rax
	movq	%rax, aliases+1832(%rip)
	movq	aliases_copy+1824(%rip), %rax
	movq	%rax, aliases+1824(%rip)
	movl	aliases_copy+1816(%rip), %eax
	movl	%eax, aliases+1816(%rip)
	movq	aliases_copy+1808(%rip), %rax
	movq	%rax, aliases+1808(%rip)
	movq	aliases_copy+1800(%rip), %rax
	movq	%rax, aliases+1800(%rip)
	movl	aliases_copy+1792(%rip), %eax
	movl	%eax, aliases+1792(%rip)
	movq	aliases_copy+1784(%rip), %rax
	movq	%rax, aliases+1784(%rip)
	movq	aliases_copy+1776(%rip), %rax
	movq	%rax, aliases+1776(%rip)
	movl	aliases_copy+1768(%rip), %eax
	movl	%eax, aliases+1768(%rip)
	movq	aliases_copy+1760(%rip), %rax
	movq	%rax, aliases+1760(%rip)
	movq	aliases_copy+1752(%rip), %rax
	movq	%rax, aliases+1752(%rip)
	movl	aliases_copy+1744(%rip), %eax
	movl	%eax, aliases+1744(%rip)
	movq	aliases_copy+1736(%rip), %rax
	movq	%rax, aliases+1736(%rip)
	movq	aliases_copy+1728(%rip), %rax
	movq	%rax, aliases+1728(%rip)
	movl	aliases_copy+1720(%rip), %eax
	movl	%eax, aliases+1720(%rip)
	movq	aliases_copy+1712(%rip), %rax
	movq	%rax, aliases+1712(%rip)
	movq	aliases_copy+1704(%rip), %rax
	movq	%rax, aliases+1704(%rip)
	movl	aliases_copy+1696(%rip), %eax
	movl	%eax, aliases+1696(%rip)
	movq	aliases_copy+1688(%rip), %rax
	movq	%rax, aliases+1688(%rip)
	movq	aliases_copy+1680(%rip), %rax
	movq	%rax, aliases+1680(%rip)
	movl	aliases_copy+1672(%rip), %eax
	movl	%eax, aliases+1672(%rip)
	movq	aliases_copy+1664(%rip), %rax
	movq	%rax, aliases+1664(%rip)
	movq	aliases_copy+1656(%rip), %rax
	movq	%rax, aliases+1656(%rip)
	movl	aliases_copy+1648(%rip), %eax
	movl	%eax, aliases+1648(%rip)
	movq	aliases_copy+1640(%rip), %rax
	movq	%rax, aliases+1640(%rip)
	movq	aliases_copy+1632(%rip), %rax
	movq	%rax, aliases+1632(%rip)
	movl	aliases_copy+1624(%rip), %eax
	movl	%eax, aliases+1624(%rip)
	movq	aliases_copy+1616(%rip), %rax
	movq	%rax, aliases+1616(%rip)
	movq	aliases_copy+1608(%rip), %rax
	movq	%rax, aliases+1608(%rip)
	movl	aliases_copy+1600(%rip), %eax
	movl	%eax, aliases+1600(%rip)
	movq	aliases_copy+1592(%rip), %rax
	movq	%rax, aliases+1592(%rip)
	movq	aliases_copy+1584(%rip), %rax
	movq	%rax, aliases+1584(%rip)
	movl	aliases_copy+1576(%rip), %eax
	movl	%eax, aliases+1576(%rip)
	movq	aliases_copy+1568(%rip), %rax
	movq	%rax, aliases+1568(%rip)
	movq	aliases_copy+1560(%rip), %rax
	movq	%rax, aliases+1560(%rip)
	movl	aliases_copy+1552(%rip), %eax
	movl	%eax, aliases+1552(%rip)
	movq	aliases_copy+1544(%rip), %rax
	movq	%rax, aliases+1544(%rip)
	movq	aliases_copy+1536(%rip), %rax
	movq	%rax, aliases+1536(%rip)
	movq	%rdi, aliases+2552(%rip)
	movq	aliases_copy+2544(%rip), %rax
	movq	%rax, aliases+2544(%rip)
	movl	aliases_copy+2536(%rip), %eax
	movl	%eax, aliases+2536(%rip)
	movq	aliases_copy+2528(%rip), %rax
	movq	%rax, aliases+2528(%rip)
	movq	aliases_copy+2520(%rip), %rax
	movq	%rax, aliases+2520(%rip)
	movl	aliases_copy+2512(%rip), %eax
	movl	%eax, aliases+2512(%rip)
	movq	aliases_copy+2504(%rip), %rax
	movq	%rax, aliases+2504(%rip)
	movq	aliases_copy+2496(%rip), %rax
	movq	%rax, aliases+2496(%rip)
	movl	aliases_copy+2488(%rip), %eax
	movl	%eax, aliases+2488(%rip)
	movq	aliases_copy+2480(%rip), %rax
	movq	%rax, aliases+2480(%rip)
	movq	aliases_copy+2472(%rip), %rax
	movq	%rax, aliases+2472(%rip)
	movl	aliases_copy+2464(%rip), %eax
	movl	%eax, aliases+2464(%rip)
	movq	aliases_copy+2456(%rip), %rax
	movq	%rax, aliases+2456(%rip)
	movq	aliases_copy+2448(%rip), %rax
	movq	%rax, aliases+2448(%rip)
	movl	aliases_copy+2440(%rip), %eax
	movl	%eax, aliases+2440(%rip)
	movq	aliases_copy+2432(%rip), %rax
	movq	%rax, aliases+2432(%rip)
	movq	aliases_copy+2424(%rip), %rax
	movq	%rax, aliases+2424(%rip)
	movl	aliases_copy+2416(%rip), %eax
	movl	%eax, aliases+2416(%rip)
	movq	aliases_copy+2408(%rip), %rax
	movq	%rax, aliases+2408(%rip)
	movq	aliases_copy+2400(%rip), %rax
	movq	%rax, aliases+2400(%rip)
	movl	aliases_copy+2392(%rip), %eax
	movl	%eax, aliases+2392(%rip)
	movq	aliases_copy+2384(%rip), %rax
	movq	%rax, aliases+2384(%rip)
	movq	aliases_copy+2376(%rip), %rax
	movq	%rax, aliases+2376(%rip)
	movl	aliases_copy+2368(%rip), %eax
	movl	%eax, aliases+2368(%rip)
	movq	aliases_copy+2360(%rip), %rax
	movq	%rax, aliases+2360(%rip)
	movq	aliases_copy+2352(%rip), %rax
	movq	%rax, aliases+2352(%rip)
	movl	aliases_copy+2344(%rip), %eax
	movl	%eax, aliases+2344(%rip)
	movq	aliases_copy+2336(%rip), %rax
	movq	%rax, aliases+2336(%rip)
	movq	aliases_copy+2328(%rip), %rax
	movq	%rax, aliases+2328(%rip)
	movl	aliases_copy+2320(%rip), %eax
	movl	%eax, aliases+2320(%rip)
	movq	aliases_copy+2312(%rip), %rax
	movq	%rax, aliases+2312(%rip)
	movq	aliases_copy+2304(%rip), %rax
	movq	%rax, aliases+2304(%rip)
	movl	aliases_copy+2296(%rip), %eax
	movl	%eax, aliases+2296(%rip)
	movq	aliases_copy+2288(%rip), %rax
	movq	%rax, aliases+2288(%rip)
	movq	aliases_copy+2280(%rip), %rax
	movq	%rax, aliases+2280(%rip)
	movl	aliases_copy+2272(%rip), %eax
	movl	%eax, aliases+2272(%rip)
	movq	aliases_copy+2264(%rip), %rax
	movq	%rax, aliases+2264(%rip)
	movq	aliases_copy+2256(%rip), %rax
	movq	%rax, aliases+2256(%rip)
	movl	aliases_copy+2248(%rip), %eax
	movl	%eax, aliases+2248(%rip)
	movq	aliases_copy+2240(%rip), %rax
	movq	%rax, aliases+2240(%rip)
	movq	aliases_copy+2232(%rip), %rax
	movq	%rax, aliases+2232(%rip)
	movl	aliases_copy+2224(%rip), %eax
	movl	%eax, aliases+2224(%rip)
	movq	aliases_copy+2216(%rip), %rax
	movq	%rax, aliases+2216(%rip)
	movq	aliases_copy+2208(%rip), %rax
	movq	%rax, aliases+2208(%rip)
	movl	aliases_copy+2200(%rip), %eax
	movl	%eax, aliases+2200(%rip)
	movq	aliases_copy+2192(%rip), %rax
	movq	%rax, aliases+2192(%rip)
	movq	aliases_copy+2184(%rip), %rax
	movq	%rax, aliases+2184(%rip)
	movl	aliases_copy+2176(%rip), %eax
	movl	%eax, aliases+2176(%rip)
	movq	aliases_copy+2168(%rip), %rax
	movq	%rax, aliases+2168(%rip)
	movq	aliases_copy+2160(%rip), %rax
	movq	%rax, aliases+2160(%rip)
	movl	aliases_copy+2152(%rip), %eax
	movl	%eax, aliases+2152(%rip)
	movq	aliases_copy+2144(%rip), %rax
	movq	%rax, aliases+2144(%rip)
	movq	aliases_copy+2136(%rip), %rax
	movq	%rax, aliases+2136(%rip)
	movl	aliases_copy+2128(%rip), %eax
	movl	%eax, aliases+2128(%rip)
	movq	aliases_copy+2120(%rip), %rax
	movq	%rax, aliases+2120(%rip)
	movq	aliases_copy+2112(%rip), %rax
	movq	%rax, aliases+2112(%rip)
	movl	aliases_copy+2104(%rip), %eax
	movl	%eax, aliases+2104(%rip)
	movq	aliases_copy+2096(%rip), %rax
	movq	%rax, aliases+2096(%rip)
	movq	aliases_copy+2088(%rip), %rax
	movq	%rax, aliases+2088(%rip)
	movl	aliases_copy+2080(%rip), %eax
	movl	%eax, aliases+2080(%rip)
	movq	aliases_copy+2072(%rip), %rax
	movq	%rax, aliases+2072(%rip)
	movq	aliases_copy+2064(%rip), %rax
	movq	%rax, aliases+2064(%rip)
	movl	aliases_copy+2056(%rip), %eax
	movl	%eax, aliases+2056(%rip)
	movq	aliases_copy+2048(%rip), %rax
	movq	%rax, aliases+2048(%rip)
	movl	%r8d, aliases+3064(%rip)
	movq	aliases_copy+3056(%rip), %rax
	movq	%rax, aliases+3056(%rip)
	movq	aliases_copy+3048(%rip), %rax
	movq	%rax, aliases+3048(%rip)
	movl	aliases_copy+3040(%rip), %eax
	movl	%eax, aliases+3040(%rip)
	movq	aliases_copy+3032(%rip), %rax
	movq	%rax, aliases+3032(%rip)
	movq	aliases_copy+3024(%rip), %rax
	movq	%rax, aliases+3024(%rip)
	movl	aliases_copy+3016(%rip), %eax
	movl	%eax, aliases+3016(%rip)
	movq	aliases_copy+3008(%rip), %rax
	movq	%rax, aliases+3008(%rip)
	movq	aliases_copy+3000(%rip), %rax
	movq	%rax, aliases+3000(%rip)
	movl	aliases_copy+2992(%rip), %eax
	movl	%eax, aliases+2992(%rip)
	movq	aliases_copy+2984(%rip), %rax
	movq	%rax, aliases+2984(%rip)
	movq	aliases_copy+2976(%rip), %rax
	movq	%rax, aliases+2976(%rip)
	movl	aliases_copy+2968(%rip), %eax
	movl	%eax, aliases+2968(%rip)
	movq	aliases_copy+2960(%rip), %rax
	movq	%rax, aliases+2960(%rip)
	movq	aliases_copy+2952(%rip), %rax
	movq	%rax, aliases+2952(%rip)
	movl	aliases_copy+2944(%rip), %eax
	movl	%eax, aliases+2944(%rip)
	movq	aliases_copy+2936(%rip), %rax
	movq	%rax, aliases+2936(%rip)
	movq	aliases_copy+2928(%rip), %rax
	movq	%rax, aliases+2928(%rip)
	movl	aliases_copy+2920(%rip), %eax
	movl	%eax, aliases+2920(%rip)
	movq	aliases_copy+2912(%rip), %rax
	movq	%rax, aliases+2912(%rip)
	movq	aliases_copy+2904(%rip), %rax
	movq	%rax, aliases+2904(%rip)
	movl	aliases_copy+2896(%rip), %eax
	movl	%eax, aliases+2896(%rip)
	movq	aliases_copy+2888(%rip), %rax
	movq	%rax, aliases+2888(%rip)
	movq	aliases_copy+2880(%rip), %rax
	movq	%rax, aliases+2880(%rip)
	movl	aliases_copy+2872(%rip), %eax
	movl	%eax, aliases+2872(%rip)
	movq	aliases_copy+2864(%rip), %rax
	movq	%rax, aliases+2864(%rip)
	movq	aliases_copy+2856(%rip), %rax
	movq	%rax, aliases+2856(%rip)
	movl	aliases_copy+2848(%rip), %eax
	movl	%eax, aliases+2848(%rip)
	movq	aliases_copy+2840(%rip), %rax
	movq	%rax, aliases+2840(%rip)
	movq	aliases_copy+2832(%rip), %rax
	movq	%rax, aliases+2832(%rip)
	movl	aliases_copy+2824(%rip), %eax
	movl	%eax, aliases+2824(%rip)
	movq	aliases_copy+2816(%rip), %rax
	movq	%rax, aliases+2816(%rip)
	movq	aliases_copy+2808(%rip), %rax
	movq	%rax, aliases+2808(%rip)
	movl	aliases_copy+2800(%rip), %eax
	movl	%eax, aliases+2800(%rip)
	movq	aliases_copy+2792(%rip), %rax
	movq	%rax, aliases+2792(%rip)
	movq	aliases_copy+2784(%rip), %rax
	movq	%rax, aliases+2784(%rip)
	movl	aliases_copy+2776(%rip), %eax
	movl	%eax, aliases+2776(%rip)
	movq	aliases_copy+2768(%rip), %rax
	movq	%rax, aliases+2768(%rip)
	movq	aliases_copy+2760(%rip), %rax
	movq	%rax, aliases+2760(%rip)
	movl	aliases_copy+2752(%rip), %eax
	movl	%eax, aliases+2752(%rip)
	movq	aliases_copy+2744(%rip), %rax
	movq	%rax, aliases+2744(%rip)
	movq	aliases_copy+2736(%rip), %rax
	movq	%rax, aliases+2736(%rip)
	movl	aliases_copy+2728(%rip), %eax
	movl	%eax, aliases+2728(%rip)
	movq	aliases_copy+2720(%rip), %rax
	movq	%rax, aliases+2720(%rip)
	movq	aliases_copy+2712(%rip), %rax
	movq	%rax, aliases+2712(%rip)
	movl	aliases_copy+2704(%rip), %eax
	movl	%eax, aliases+2704(%rip)
	movq	aliases_copy+2696(%rip), %rax
	movq	%rax, aliases+2696(%rip)
	movq	aliases_copy+2688(%rip), %rax
	movq	%rax, aliases+2688(%rip)
	movl	aliases_copy+2680(%rip), %eax
	movl	%eax, aliases+2680(%rip)
	movq	aliases_copy+2672(%rip), %rax
	movq	%rax, aliases+2672(%rip)
	movq	aliases_copy+2664(%rip), %rax
	movq	%rax, aliases+2664(%rip)
	movl	aliases_copy+2656(%rip), %eax
	movl	%eax, aliases+2656(%rip)
	movq	aliases_copy+2648(%rip), %rax
	movq	%rax, aliases+2648(%rip)
	movq	aliases_copy+2640(%rip), %rax
	movq	%rax, aliases+2640(%rip)
	movl	aliases_copy+2632(%rip), %eax
	movl	%eax, aliases+2632(%rip)
	movq	aliases_copy+2624(%rip), %rax
	movq	%rax, aliases+2624(%rip)
	movq	aliases_copy+2616(%rip), %rax
	movq	%rax, aliases+2616(%rip)
	movl	aliases_copy+2608(%rip), %eax
	movl	%eax, aliases+2608(%rip)
	movq	aliases_copy+2600(%rip), %rax
	movq	%rax, aliases+2600(%rip)
	movq	aliases_copy+2592(%rip), %rax
	movq	%rax, aliases+2592(%rip)
	movl	aliases_copy+2584(%rip), %eax
	movl	%eax, aliases+2584(%rip)
	movq	aliases_copy+2576(%rip), %rax
	movq	%rax, aliases+2576(%rip)
	movq	aliases_copy+2568(%rip), %rax
	movq	%rax, aliases+2568(%rip)
	movl	aliases_copy+2560(%rip), %eax
	movl	%eax, aliases+2560(%rip)
	movq	%r9, aliases+3576(%rip)
	movl	aliases_copy+3568(%rip), %eax
	movl	%eax, aliases+3568(%rip)
	movq	aliases_copy+3560(%rip), %rax
	movq	%rax, aliases+3560(%rip)
	movq	aliases_copy+3552(%rip), %rax
	movq	%rax, aliases+3552(%rip)
	movl	aliases_copy+3544(%rip), %eax
	movl	%eax, aliases+3544(%rip)
	movq	aliases_copy+3536(%rip), %rax
	movq	%rax, aliases+3536(%rip)
	movq	aliases_copy+3528(%rip), %rax
	movq	%rax, aliases+3528(%rip)
	movl	aliases_copy+3520(%rip), %eax
	movl	%eax, aliases+3520(%rip)
	movq	aliases_copy+3512(%rip), %rax
	movq	%rax, aliases+3512(%rip)
	movq	aliases_copy+3504(%rip), %rax
	movq	%rax, aliases+3504(%rip)
	movl	aliases_copy+3496(%rip), %eax
	movl	%eax, aliases+3496(%rip)
	movq	aliases_copy+3488(%rip), %rax
	movq	%rax, aliases+3488(%rip)
	movq	aliases_copy+3480(%rip), %rax
	movq	%rax, aliases+3480(%rip)
	movl	aliases_copy+3472(%rip), %eax
	movl	%eax, aliases+3472(%rip)
	movq	aliases_copy+3464(%rip), %rax
	movq	%rax, aliases+3464(%rip)
	movq	aliases_copy+3456(%rip), %rax
	movq	%rax, aliases+3456(%rip)
	movl	aliases_copy+3448(%rip), %eax
	movl	%eax, aliases+3448(%rip)
	movq	aliases_copy+3440(%rip), %rax
	movq	%rax, aliases+3440(%rip)
	movq	aliases_copy+3432(%rip), %rax
	movq	%rax, aliases+3432(%rip)
	movl	aliases_copy+3424(%rip), %eax
	movl	%eax, aliases+3424(%rip)
	movq	aliases_copy+3416(%rip), %rax
	movq	%rax, aliases+3416(%rip)
	movq	aliases_copy+3408(%rip), %rax
	movq	%rax, aliases+3408(%rip)
	movl	aliases_copy+3400(%rip), %eax
	movl	%eax, aliases+3400(%rip)
	movq	aliases_copy+3392(%rip), %rax
	movq	%rax, aliases+3392(%rip)
	movq	aliases_copy+3384(%rip), %rax
	movq	%rax, aliases+3384(%rip)
	movl	aliases_copy+3376(%rip), %eax
	movl	%eax, aliases+3376(%rip)
	movq	aliases_copy+3368(%rip), %rax
	movq	%rax, aliases+3368(%rip)
	movq	aliases_copy+3360(%rip), %rax
	movq	%rax, aliases+3360(%rip)
	movl	aliases_copy+3352(%rip), %eax
	movl	%eax, aliases+3352(%rip)
	movq	aliases_copy+3344(%rip), %rax
	movq	%rax, aliases+3344(%rip)
	movq	aliases_copy+3336(%rip), %rax
	movq	%rax, aliases+3336(%rip)
	movl	aliases_copy+3328(%rip), %eax
	movl	%eax, aliases+3328(%rip)
	movq	aliases_copy+3320(%rip), %rax
	movq	%rax, aliases+3320(%rip)
	movq	aliases_copy+3312(%rip), %rax
	movq	%rax, aliases+3312(%rip)
	movl	aliases_copy+3304(%rip), %eax
	movl	%eax, aliases+3304(%rip)
	movq	aliases_copy+3296(%rip), %rax
	movq	%rax, aliases+3296(%rip)
	movq	aliases_copy+3288(%rip), %rax
	movq	%rax, aliases+3288(%rip)
	movl	aliases_copy+3280(%rip), %eax
	movl	%eax, aliases+3280(%rip)
	movq	aliases_copy+3272(%rip), %rax
	movq	%rax, aliases+3272(%rip)
	movq	aliases_copy+3264(%rip), %rax
	movq	%rax, aliases+3264(%rip)
	movl	aliases_copy+3256(%rip), %eax
	movl	%eax, aliases+3256(%rip)
	movq	aliases_copy+3248(%rip), %rax
	movq	%rax, aliases+3248(%rip)
	movq	aliases_copy+3240(%rip), %rax
	movq	%rax, aliases+3240(%rip)
	movl	aliases_copy+3232(%rip), %eax
	movl	%eax, aliases+3232(%rip)
	movq	aliases_copy+3224(%rip), %rax
	movq	%rax, aliases+3224(%rip)
	movq	aliases_copy+3216(%rip), %rax
	movq	%rax, aliases+3216(%rip)
	movl	aliases_copy+3208(%rip), %eax
	movl	%eax, aliases+3208(%rip)
	movq	aliases_copy+3200(%rip), %rax
	movq	%rax, aliases+3200(%rip)
	movq	aliases_copy+3192(%rip), %rax
	movq	%rax, aliases+3192(%rip)
	movl	aliases_copy+3184(%rip), %eax
	movl	%eax, aliases+3184(%rip)
	movq	aliases_copy+3176(%rip), %rax
	movq	%rax, aliases+3176(%rip)
	movq	aliases_copy+3168(%rip), %rax
	movq	%rax, aliases+3168(%rip)
	movl	aliases_copy+3160(%rip), %eax
	movl	%eax, aliases+3160(%rip)
	movq	aliases_copy+3152(%rip), %rax
	movq	%rax, aliases+3152(%rip)
	movq	aliases_copy+3144(%rip), %rax
	movq	%rax, aliases+3144(%rip)
	movl	aliases_copy+3136(%rip), %eax
	movl	%eax, aliases+3136(%rip)
	movq	aliases_copy+3128(%rip), %rax
	movq	%rax, aliases+3128(%rip)
	movq	aliases_copy+3120(%rip), %rax
	movq	%rax, aliases+3120(%rip)
	movl	aliases_copy+3112(%rip), %eax
	movl	%eax, aliases+3112(%rip)
	movq	aliases_copy+3104(%rip), %rax
	movq	%rax, aliases+3104(%rip)
	movq	aliases_copy+3096(%rip), %rax
	movq	%rax, aliases+3096(%rip)
	movl	aliases_copy+3088(%rip), %eax
	movl	%eax, aliases+3088(%rip)
	movq	aliases_copy+3080(%rip), %rax
	movq	%rax, aliases+3080(%rip)
	movq	aliases_copy+3072(%rip), %rax
	movq	%rax, aliases+3072(%rip)
	movq	%r10, aliases+4088(%rip)
	movq	aliases_copy+4080(%rip), %rax
	movq	%rax, aliases+4080(%rip)
	movl	aliases_copy+4072(%rip), %eax
	movl	%eax, aliases+4072(%rip)
	movq	aliases_copy+4064(%rip), %rax
	movq	%rax, aliases+4064(%rip)
	movq	aliases_copy+4056(%rip), %rax
	movq	%rax, aliases+4056(%rip)
	movl	aliases_copy+4048(%rip), %eax
	movl	%eax, aliases+4048(%rip)
	movq	aliases_copy+4040(%rip), %rax
	movq	%rax, aliases+4040(%rip)
	movq	aliases_copy+4032(%rip), %rax
	movq	%rax, aliases+4032(%rip)
	movl	aliases_copy+4024(%rip), %eax
	movl	%eax, aliases+4024(%rip)
	movq	aliases_copy+4016(%rip), %rax
	movq	%rax, aliases+4016(%rip)
	movq	aliases_copy+4008(%rip), %rax
	movq	%rax, aliases+4008(%rip)
	movl	aliases_copy+4000(%rip), %eax
	movl	%eax, aliases+4000(%rip)
	movq	aliases_copy+3992(%rip), %rax
	movq	%rax, aliases+3992(%rip)
	movq	aliases_copy+3984(%rip), %rax
	movq	%rax, aliases+3984(%rip)
	movl	aliases_copy+3976(%rip), %eax
	movl	%eax, aliases+3976(%rip)
	movq	aliases_copy+3968(%rip), %rax
	movq	%rax, aliases+3968(%rip)
	movq	aliases_copy+3960(%rip), %rax
	movq	%rax, aliases+3960(%rip)
	movl	aliases_copy+3952(%rip), %eax
	movl	%eax, aliases+3952(%rip)
	movq	aliases_copy+3944(%rip), %rax
	movq	%rax, aliases+3944(%rip)
	movq	aliases_copy+3936(%rip), %rax
	movq	%rax, aliases+3936(%rip)
	movl	aliases_copy+3928(%rip), %eax
	movl	%eax, aliases+3928(%rip)
	movq	aliases_copy+3920(%rip), %rax
	movq	%rax, aliases+3920(%rip)
	movq	aliases_copy+3912(%rip), %rax
	movq	%rax, aliases+3912(%rip)
	movl	aliases_copy+3904(%rip), %eax
	movl	%eax, aliases+3904(%rip)
	movq	aliases_copy+3896(%rip), %rax
	movq	%rax, aliases+3896(%rip)
	movq	aliases_copy+3888(%rip), %rax
	movq	%rax, aliases+3888(%rip)
	movl	aliases_copy+3880(%rip), %eax
	movl	%eax, aliases+3880(%rip)
	movq	aliases_copy+3872(%rip), %rax
	movq	%rax, aliases+3872(%rip)
	movq	aliases_copy+3864(%rip), %rax
	movq	%rax, aliases+3864(%rip)
	movl	aliases_copy+3856(%rip), %eax
	movl	%eax, aliases+3856(%rip)
	movq	aliases_copy+3848(%rip), %rax
	movq	%rax, aliases+3848(%rip)
	movq	aliases_copy+3840(%rip), %rax
	movq	%rax, aliases+3840(%rip)
	movl	aliases_copy+3832(%rip), %eax
	movl	%eax, aliases+3832(%rip)
	movq	aliases_copy+3824(%rip), %rax
	movq	%rax, aliases+3824(%rip)
	movq	aliases_copy+3816(%rip), %rax
	movq	%rax, aliases+3816(%rip)
	movl	aliases_copy+3808(%rip), %eax
	movl	%eax, aliases+3808(%rip)
	movq	aliases_copy+3800(%rip), %rax
	movq	%rax, aliases+3800(%rip)
	movq	aliases_copy+3792(%rip), %rax
	movq	%rax, aliases+3792(%rip)
	movl	aliases_copy+3784(%rip), %eax
	movl	%eax, aliases+3784(%rip)
	movq	aliases_copy+3776(%rip), %rax
	movq	%rax, aliases+3776(%rip)
	movq	aliases_copy+3768(%rip), %rax
	movq	%rax, aliases+3768(%rip)
	movl	aliases_copy+3760(%rip), %eax
	movl	%eax, aliases+3760(%rip)
	movq	aliases_copy+3752(%rip), %rax
	movq	%rax, aliases+3752(%rip)
	movq	aliases_copy+3744(%rip), %rax
	movq	%rax, aliases+3744(%rip)
	movl	aliases_copy+3736(%rip), %eax
	movl	%eax, aliases+3736(%rip)
	movq	aliases_copy+3728(%rip), %rax
	movq	%rax, aliases+3728(%rip)
	movq	aliases_copy+3720(%rip), %rax
	movq	%rax, aliases+3720(%rip)
	movl	aliases_copy+3712(%rip), %eax
	movl	%eax, aliases+3712(%rip)
	movq	aliases_copy+3704(%rip), %rax
	movq	%rax, aliases+3704(%rip)
	movq	aliases_copy+3696(%rip), %rax
	movq	%rax, aliases+3696(%rip)
	movl	aliases_copy+3688(%rip), %eax
	movl	%eax, aliases+3688(%rip)
	movq	aliases_copy+3680(%rip), %rax
	movq	%rax, aliases+3680(%rip)
	movq	aliases_copy+3672(%rip), %rax
	movq	%rax, aliases+3672(%rip)
	movl	aliases_copy+3664(%rip), %eax
	movl	%eax, aliases+3664(%rip)
	movq	aliases_copy+3656(%rip), %rax
	movq	%rax, aliases+3656(%rip)
	movq	aliases_copy+3648(%rip), %rax
	movq	%rax, aliases+3648(%rip)
	movl	aliases_copy+3640(%rip), %eax
	movl	%eax, aliases+3640(%rip)
	movq	aliases_copy+3632(%rip), %rax
	movq	%rax, aliases+3632(%rip)
	movq	aliases_copy+3624(%rip), %rax
	movq	%rax, aliases+3624(%rip)
	movl	aliases_copy+3616(%rip), %eax
	movl	%eax, aliases+3616(%rip)
	movq	aliases_copy+3608(%rip), %rax
	movq	%rax, aliases+3608(%rip)
	movq	aliases_copy+3600(%rip), %rax
	movq	%rax, aliases+3600(%rip)
	movl	aliases_copy+3592(%rip), %eax
	movl	%eax, aliases+3592(%rip)
	movq	aliases_copy+3584(%rip), %rax
	movq	%rax, aliases+3584(%rip)
	movl	%r11d, aliases+4600(%rip)
	movq	aliases_copy+4592(%rip), %rax
	movq	%rax, aliases+4592(%rip)
	movq	aliases_copy+4584(%rip), %rax
	movq	%rax, aliases+4584(%rip)
	movl	aliases_copy+4576(%rip), %eax
	movl	%eax, aliases+4576(%rip)
	movq	aliases_copy+4568(%rip), %rax
	movq	%rax, aliases+4568(%rip)
	movq	aliases_copy+4560(%rip), %rax
	movq	%rax, aliases+4560(%rip)
	movl	aliases_copy+4552(%rip), %eax
	movl	%eax, aliases+4552(%rip)
	movq	aliases_copy+4544(%rip), %rax
	movq	%rax, aliases+4544(%rip)
	movq	aliases_copy+4536(%rip), %rax
	movq	%rax, aliases+4536(%rip)
	movl	aliases_copy+4528(%rip), %eax
	movl	%eax, aliases+4528(%rip)
	movq	aliases_copy+4520(%rip), %rax
	movq	%rax, aliases+4520(%rip)
	movq	aliases_copy+4512(%rip), %rax
	movq	%rax, aliases+4512(%rip)
	movl	aliases_copy+4504(%rip), %eax
	movl	%eax, aliases+4504(%rip)
	movq	aliases_copy+4496(%rip), %rax
	movq	%rax, aliases+4496(%rip)
	movq	aliases_copy+4488(%rip), %rax
	movq	%rax, aliases+4488(%rip)
	movl	aliases_copy+4480(%rip), %eax
	movl	%eax, aliases+4480(%rip)
	movq	aliases_copy+4472(%rip), %rax
	movq	%rax, aliases+4472(%rip)
	movq	aliases_copy+4464(%rip), %rax
	movq	%rax, aliases+4464(%rip)
	movl	aliases_copy+4456(%rip), %eax
	movl	%eax, aliases+4456(%rip)
	movq	aliases_copy+4448(%rip), %rax
	movq	%rax, aliases+4448(%rip)
	movq	aliases_copy+4440(%rip), %rax
	movq	%rax, aliases+4440(%rip)
	movl	aliases_copy+4432(%rip), %eax
	movl	%eax, aliases+4432(%rip)
	movq	aliases_copy+4424(%rip), %rax
	movq	%rax, aliases+4424(%rip)
	movq	aliases_copy+4416(%rip), %rax
	movq	%rax, aliases+4416(%rip)
	movl	aliases_copy+4408(%rip), %eax
	movl	%eax, aliases+4408(%rip)
	movq	aliases_copy+4400(%rip), %rax
	movq	%rax, aliases+4400(%rip)
	movq	aliases_copy+4392(%rip), %rax
	movq	%rax, aliases+4392(%rip)
	movl	aliases_copy+4384(%rip), %eax
	movl	%eax, aliases+4384(%rip)
	movq	aliases_copy+4376(%rip), %rax
	movq	%rax, aliases+4376(%rip)
	movq	aliases_copy+4368(%rip), %rax
	movq	%rax, aliases+4368(%rip)
	movl	aliases_copy+4360(%rip), %eax
	movl	%eax, aliases+4360(%rip)
	movq	aliases_copy+4352(%rip), %rax
	movq	%rax, aliases+4352(%rip)
	movq	aliases_copy+4344(%rip), %rax
	movq	%rax, aliases+4344(%rip)
	movl	aliases_copy+4336(%rip), %eax
	movl	%eax, aliases+4336(%rip)
	movq	aliases_copy+4328(%rip), %rax
	movq	%rax, aliases+4328(%rip)
	movq	aliases_copy+4320(%rip), %rax
	movq	%rax, aliases+4320(%rip)
	movl	aliases_copy+4312(%rip), %eax
	movl	%eax, aliases+4312(%rip)
	movq	aliases_copy+4304(%rip), %rax
	movq	%rax, aliases+4304(%rip)
	movq	aliases_copy+4296(%rip), %rax
	movq	%rax, aliases+4296(%rip)
	movl	aliases_copy+4288(%rip), %eax
	movl	%eax, aliases+4288(%rip)
	movq	aliases_copy+4280(%rip), %rax
	movq	%rax, aliases+4280(%rip)
	movq	aliases_copy+4272(%rip), %rax
	movq	%rax, aliases+4272(%rip)
	movl	aliases_copy+4264(%rip), %eax
	movl	%eax, aliases+4264(%rip)
	movq	aliases_copy+4256(%rip), %rax
	movq	%rax, aliases+4256(%rip)
	movq	aliases_copy+4248(%rip), %rax
	movq	%rax, aliases+4248(%rip)
	movl	aliases_copy+4240(%rip), %eax
	movl	%eax, aliases+4240(%rip)
	movq	aliases_copy+4232(%rip), %rax
	movq	%rax, aliases+4232(%rip)
	movq	aliases_copy+4224(%rip), %rax
	movq	%rax, aliases+4224(%rip)
	movl	aliases_copy+4216(%rip), %eax
	movl	%eax, aliases+4216(%rip)
	movq	aliases_copy+4208(%rip), %rax
	movq	%rax, aliases+4208(%rip)
	movq	aliases_copy+4200(%rip), %rax
	movq	%rax, aliases+4200(%rip)
	movl	aliases_copy+4192(%rip), %eax
	movl	%eax, aliases+4192(%rip)
	movq	aliases_copy+4184(%rip), %rax
	movq	%rax, aliases+4184(%rip)
	movq	aliases_copy+4176(%rip), %rax
	movq	%rax, aliases+4176(%rip)
	movl	aliases_copy+4168(%rip), %eax
	movl	%eax, aliases+4168(%rip)
	movq	aliases_copy+4160(%rip), %rax
	movq	%rax, aliases+4160(%rip)
	movq	aliases_copy+4152(%rip), %rax
	movq	%rax, aliases+4152(%rip)
	movl	aliases_copy+4144(%rip), %eax
	movl	%eax, aliases+4144(%rip)
	movq	aliases_copy+4136(%rip), %rax
	movq	%rax, aliases+4136(%rip)
	movq	aliases_copy+4128(%rip), %rax
	movq	%rax, aliases+4128(%rip)
	movl	aliases_copy+4120(%rip), %eax
	movl	%eax, aliases+4120(%rip)
	movq	aliases_copy+4112(%rip), %rax
	movq	%rax, aliases+4112(%rip)
	movq	aliases_copy+4104(%rip), %rax
	movq	%rax, aliases+4104(%rip)
	movl	aliases_copy+4096(%rip), %eax
	movl	%eax, aliases+4096(%rip)
	movq	%rbx, aliases+5112(%rip)
	movl	aliases_copy+5104(%rip), %eax
	movl	%eax, aliases+5104(%rip)
	movq	aliases_copy+5096(%rip), %rax
	movq	%rax, aliases+5096(%rip)
	movq	aliases_copy+5088(%rip), %rax
	movq	%rax, aliases+5088(%rip)
	movl	aliases_copy+5080(%rip), %eax
	movl	%eax, aliases+5080(%rip)
	movq	aliases_copy+5072(%rip), %rax
	movq	%rax, aliases+5072(%rip)
	movq	aliases_copy+5064(%rip), %rax
	movq	%rax, aliases+5064(%rip)
	movl	aliases_copy+5056(%rip), %eax
	movl	%eax, aliases+5056(%rip)
	movq	aliases_copy+5048(%rip), %rax
	movq	%rax, aliases+5048(%rip)
	movq	aliases_copy+5040(%rip), %rax
	movq	%rax, aliases+5040(%rip)
	movl	aliases_copy+5032(%rip), %eax
	movl	%eax, aliases+5032(%rip)
	movq	aliases_copy+5024(%rip), %rax
	movq	%rax, aliases+5024(%rip)
	movq	aliases_copy+5016(%rip), %rax
	movq	%rax, aliases+5016(%rip)
	movl	aliases_copy+5008(%rip), %eax
	movl	%eax, aliases+5008(%rip)
	movq	aliases_copy+5000(%rip), %rax
	movq	%rax, aliases+5000(%rip)
	movq	aliases_copy+4992(%rip), %rax
	movq	%rax, aliases+4992(%rip)
	movl	aliases_copy+4984(%rip), %eax
	movl	%eax, aliases+4984(%rip)
	movq	aliases_copy+4976(%rip), %rax
	movq	%rax, aliases+4976(%rip)
	movq	aliases_copy+4968(%rip), %rax
	movq	%rax, aliases+4968(%rip)
	movl	aliases_copy+4960(%rip), %eax
	movl	%eax, aliases+4960(%rip)
	movq	aliases_copy+4952(%rip), %rax
	movq	%rax, aliases+4952(%rip)
	movq	aliases_copy+4944(%rip), %rax
	movq	%rax, aliases+4944(%rip)
	movl	aliases_copy+4936(%rip), %eax
	movl	%eax, aliases+4936(%rip)
	movq	aliases_copy+4928(%rip), %rax
	movq	%rax, aliases+4928(%rip)
	movq	aliases_copy+4920(%rip), %rax
	movq	%rax, aliases+4920(%rip)
	movl	aliases_copy+4912(%rip), %eax
	movl	%eax, aliases+4912(%rip)
	movq	aliases_copy+4904(%rip), %rax
	movq	%rax, aliases+4904(%rip)
	movq	aliases_copy+4896(%rip), %rax
	movq	%rax, aliases+4896(%rip)
	movl	aliases_copy+4888(%rip), %eax
	movl	%eax, aliases+4888(%rip)
	movq	aliases_copy+4880(%rip), %rax
	movq	%rax, aliases+4880(%rip)
	movq	aliases_copy+4872(%rip), %rax
	movq	%rax, aliases+4872(%rip)
	movl	aliases_copy+4864(%rip), %eax
	movl	%eax, aliases+4864(%rip)
	movq	aliases_copy+4856(%rip), %rax
	movq	%rax, aliases+4856(%rip)
	movq	aliases_copy+4848(%rip), %rax
	movq	%rax, aliases+4848(%rip)
	movl	aliases_copy+4840(%rip), %eax
	movl	%eax, aliases+4840(%rip)
	movq	aliases_copy+4832(%rip), %rax
	movq	%rax, aliases+4832(%rip)
	movq	aliases_copy+4824(%rip), %rax
	movq	%rax, aliases+4824(%rip)
	movl	aliases_copy+4816(%rip), %eax
	movl	%eax, aliases+4816(%rip)
	movq	aliases_copy+4808(%rip), %rax
	movq	%rax, aliases+4808(%rip)
	movq	aliases_copy+4800(%rip), %rax
	movq	%rax, aliases+4800(%rip)
	movl	aliases_copy+4792(%rip), %eax
	movl	%eax, aliases+4792(%rip)
	movq	aliases_copy+4784(%rip), %rax
	movq	%rax, aliases+4784(%rip)
	movq	aliases_copy+4776(%rip), %rax
	movq	%rax, aliases+4776(%rip)
	movl	aliases_copy+4768(%rip), %eax
	movl	%eax, aliases+4768(%rip)
	movq	aliases_copy+4760(%rip), %rax
	movq	%rax, aliases+4760(%rip)
	movq	aliases_copy+4752(%rip), %rax
	movq	%rax, aliases+4752(%rip)
	movl	aliases_copy+4744(%rip), %eax
	movl	%eax, aliases+4744(%rip)
	movq	aliases_copy+4736(%rip), %rax
	movq	%rax, aliases+4736(%rip)
	movq	aliases_copy+4728(%rip), %rax
	movq	%rax, aliases+4728(%rip)
	movl	aliases_copy+4720(%rip), %eax
	movl	%eax, aliases+4720(%rip)
	movq	aliases_copy+4712(%rip), %rax
	movq	%rax, aliases+4712(%rip)
	movq	aliases_copy+4704(%rip), %rax
	movq	%rax, aliases+4704(%rip)
	movl	aliases_copy+4696(%rip), %eax
	movl	%eax, aliases+4696(%rip)
	movq	aliases_copy+4688(%rip), %rax
	movq	%rax, aliases+4688(%rip)
	movq	aliases_copy+4680(%rip), %rax
	movq	%rax, aliases+4680(%rip)
	movl	aliases_copy+4672(%rip), %eax
	movl	%eax, aliases+4672(%rip)
	movq	aliases_copy+4664(%rip), %rax
	movq	%rax, aliases+4664(%rip)
	movq	aliases_copy+4656(%rip), %rax
	movq	%rax, aliases+4656(%rip)
	movl	aliases_copy+4648(%rip), %eax
	movl	%eax, aliases+4648(%rip)
	movq	aliases_copy+4640(%rip), %rax
	movq	%rax, aliases+4640(%rip)
	movq	aliases_copy+4632(%rip), %rax
	movq	%rax, aliases+4632(%rip)
	movl	aliases_copy+4624(%rip), %eax
	movl	%eax, aliases+4624(%rip)
	movq	aliases_copy+4616(%rip), %rax
	movq	%rax, aliases+4616(%rip)
	movq	aliases_copy+4608(%rip), %rax
	movq	%rax, aliases+4608(%rip)
	movq	%r14, aliases+5624(%rip)
	movq	aliases_copy+5616(%rip), %rax
	movq	%rax, aliases+5616(%rip)
	movl	aliases_copy+5608(%rip), %eax
	movl	%eax, aliases+5608(%rip)
	movq	aliases_copy+5600(%rip), %rax
	movq	%rax, aliases+5600(%rip)
	movq	aliases_copy+5592(%rip), %rax
	movq	%rax, aliases+5592(%rip)
	movl	aliases_copy+5584(%rip), %eax
	movl	%eax, aliases+5584(%rip)
	movq	aliases_copy+5576(%rip), %rax
	movq	%rax, aliases+5576(%rip)
	movq	aliases_copy+5568(%rip), %rax
	movq	%rax, aliases+5568(%rip)
	movl	aliases_copy+5560(%rip), %eax
	movl	%eax, aliases+5560(%rip)
	movq	aliases_copy+5552(%rip), %rax
	movq	%rax, aliases+5552(%rip)
	movq	aliases_copy+5544(%rip), %rax
	movq	%rax, aliases+5544(%rip)
	movl	aliases_copy+5536(%rip), %eax
	movl	%eax, aliases+5536(%rip)
	movq	aliases_copy+5528(%rip), %rax
	movq	%rax, aliases+5528(%rip)
	movq	aliases_copy+5520(%rip), %rax
	movq	%rax, aliases+5520(%rip)
	movl	aliases_copy+5512(%rip), %eax
	movl	%eax, aliases+5512(%rip)
	movq	aliases_copy+5504(%rip), %rax
	movq	%rax, aliases+5504(%rip)
	movq	aliases_copy+5496(%rip), %rax
	movq	%rax, aliases+5496(%rip)
	movl	aliases_copy+5488(%rip), %eax
	movl	%eax, aliases+5488(%rip)
	movq	aliases_copy+5480(%rip), %rax
	movq	%rax, aliases+5480(%rip)
	movq	aliases_copy+5472(%rip), %rax
	movq	%rax, aliases+5472(%rip)
	movl	aliases_copy+5464(%rip), %eax
	movl	%eax, aliases+5464(%rip)
	movq	aliases_copy+5456(%rip), %rax
	movq	%rax, aliases+5456(%rip)
	movq	aliases_copy+5448(%rip), %rax
	movq	%rax, aliases+5448(%rip)
	movl	aliases_copy+5440(%rip), %eax
	movl	%eax, aliases+5440(%rip)
	movq	aliases_copy+5432(%rip), %rax
	movq	%rax, aliases+5432(%rip)
	movq	aliases_copy+5424(%rip), %rax
	movq	%rax, aliases+5424(%rip)
	movl	aliases_copy+5416(%rip), %eax
	movl	%eax, aliases+5416(%rip)
	movq	aliases_copy+5408(%rip), %rax
	movq	%rax, aliases+5408(%rip)
	movq	aliases_copy+5400(%rip), %rax
	movq	%rax, aliases+5400(%rip)
	movl	aliases_copy+5392(%rip), %eax
	movl	%eax, aliases+5392(%rip)
	movq	aliases_copy+5384(%rip), %rax
	movq	%rax, aliases+5384(%rip)
	movq	aliases_copy+5376(%rip), %rax
	movq	%rax, aliases+5376(%rip)
	movl	aliases_copy+5368(%rip), %eax
	movl	%eax, aliases+5368(%rip)
	movq	aliases_copy+5360(%rip), %rax
	movq	%rax, aliases+5360(%rip)
	movq	aliases_copy+5352(%rip), %rax
	movq	%rax, aliases+5352(%rip)
	movl	aliases_copy+5344(%rip), %eax
	movl	%eax, aliases+5344(%rip)
	movq	aliases_copy+5336(%rip), %rax
	movq	%rax, aliases+5336(%rip)
	movq	aliases_copy+5328(%rip), %rax
	movq	%rax, aliases+5328(%rip)
	movl	aliases_copy+5320(%rip), %eax
	movl	%eax, aliases+5320(%rip)
	movq	aliases_copy+5312(%rip), %rax
	movq	%rax, aliases+5312(%rip)
	movq	aliases_copy+5304(%rip), %rax
	movq	%rax, aliases+5304(%rip)
	movl	aliases_copy+5296(%rip), %eax
	movl	%eax, aliases+5296(%rip)
	movq	aliases_copy+5288(%rip), %rax
	movq	%rax, aliases+5288(%rip)
	movq	aliases_copy+5280(%rip), %rax
	movq	%rax, aliases+5280(%rip)
	movl	aliases_copy+5272(%rip), %eax
	movl	%eax, aliases+5272(%rip)
	movq	aliases_copy+5264(%rip), %rax
	movq	%rax, aliases+5264(%rip)
	movq	aliases_copy+5256(%rip), %rax
	movq	%rax, aliases+5256(%rip)
	movl	aliases_copy+5248(%rip), %eax
	movl	%eax, aliases+5248(%rip)
	movq	aliases_copy+5240(%rip), %rax
	movq	%rax, aliases+5240(%rip)
	movq	aliases_copy+5232(%rip), %rax
	movq	%rax, aliases+5232(%rip)
	movl	aliases_copy+5224(%rip), %eax
	movl	%eax, aliases+5224(%rip)
	movq	aliases_copy+5216(%rip), %rax
	movq	%rax, aliases+5216(%rip)
	movq	aliases_copy+5208(%rip), %rax
	movq	%rax, aliases+5208(%rip)
	movl	aliases_copy+5200(%rip), %eax
	movl	%eax, aliases+5200(%rip)
	movq	aliases_copy+5192(%rip), %rax
	movq	%rax, aliases+5192(%rip)
	movq	aliases_copy+5184(%rip), %rax
	movq	%rax, aliases+5184(%rip)
	movl	aliases_copy+5176(%rip), %eax
	movl	%eax, aliases+5176(%rip)
	movq	aliases_copy+5168(%rip), %rax
	movq	%rax, aliases+5168(%rip)
	movq	aliases_copy+5160(%rip), %rax
	movq	%rax, aliases+5160(%rip)
	movl	aliases_copy+5152(%rip), %eax
	movl	%eax, aliases+5152(%rip)
	movq	aliases_copy+5144(%rip), %rax
	movq	%rax, aliases+5144(%rip)
	movq	aliases_copy+5136(%rip), %rax
	movq	%rax, aliases+5136(%rip)
	movl	aliases_copy+5128(%rip), %eax
	movl	%eax, aliases+5128(%rip)
	movq	aliases_copy+5120(%rip), %rax
	movq	%rax, aliases+5120(%rip)
	movl	aliases_copy+5944(%rip), %eax
	movl	%eax, aliases+5944(%rip)
	movq	aliases_copy+5936(%rip), %rax
	movq	%rax, aliases+5936(%rip)
	movq	aliases_copy+5928(%rip), %rax
	movq	%rax, aliases+5928(%rip)
	movl	aliases_copy+5920(%rip), %eax
	movl	%eax, aliases+5920(%rip)
	movq	aliases_copy+5912(%rip), %rax
	movq	%rax, aliases+5912(%rip)
	movq	aliases_copy+5904(%rip), %rax
	movq	%rax, aliases+5904(%rip)
	movl	aliases_copy+5896(%rip), %eax
	movl	%eax, aliases+5896(%rip)
	movq	aliases_copy+5888(%rip), %rax
	movq	%rax, aliases+5888(%rip)
	movq	aliases_copy+5880(%rip), %rax
	movq	%rax, aliases+5880(%rip)
	movl	aliases_copy+5872(%rip), %eax
	movl	%eax, aliases+5872(%rip)
	movq	aliases_copy+5864(%rip), %rax
	movq	%rax, aliases+5864(%rip)
	movq	aliases_copy+5856(%rip), %rax
	movq	%rax, aliases+5856(%rip)
	movl	aliases_copy+5848(%rip), %eax
	movl	%eax, aliases+5848(%rip)
	movq	aliases_copy+5840(%rip), %rax
	movq	%rax, aliases+5840(%rip)
	movq	aliases_copy+5832(%rip), %rax
	movq	%rax, aliases+5832(%rip)
	movl	aliases_copy+5824(%rip), %eax
	movl	%eax, aliases+5824(%rip)
	movq	aliases_copy+5816(%rip), %rax
	movq	%rax, aliases+5816(%rip)
	movq	aliases_copy+5808(%rip), %rax
	movq	%rax, aliases+5808(%rip)
	movl	aliases_copy+5800(%rip), %eax
	movl	%eax, aliases+5800(%rip)
	movq	aliases_copy+5792(%rip), %rax
	movq	%rax, aliases+5792(%rip)
	movq	aliases_copy+5784(%rip), %rax
	movq	%rax, aliases+5784(%rip)
	movl	aliases_copy+5776(%rip), %eax
	movl	%eax, aliases+5776(%rip)
	movq	aliases_copy+5768(%rip), %rax
	movq	%rax, aliases+5768(%rip)
	movq	aliases_copy+5760(%rip), %rax
	movq	%rax, aliases+5760(%rip)
	movl	aliases_copy+5752(%rip), %eax
	movl	%eax, aliases+5752(%rip)
	movq	aliases_copy+5744(%rip), %rax
	movq	%rax, aliases+5744(%rip)
	movq	aliases_copy+5736(%rip), %rax
	movq	%rax, aliases+5736(%rip)
	movl	aliases_copy+5728(%rip), %eax
	movl	%eax, aliases+5728(%rip)
	movq	aliases_copy+5720(%rip), %rax
	movq	%rax, aliases+5720(%rip)
	movq	aliases_copy+5712(%rip), %rax
	movq	%rax, aliases+5712(%rip)
	movl	aliases_copy+5704(%rip), %eax
	movl	%eax, aliases+5704(%rip)
	movq	aliases_copy+5696(%rip), %rax
	movq	%rax, aliases+5696(%rip)
	movq	aliases_copy+5688(%rip), %rax
	movq	%rax, aliases+5688(%rip)
	movl	aliases_copy+5680(%rip), %eax
	movl	%eax, aliases+5680(%rip)
	movq	aliases_copy+5672(%rip), %rax
	movq	%rax, aliases+5672(%rip)
	movq	aliases_copy+5664(%rip), %rax
	movq	%rax, aliases+5664(%rip)
	movl	aliases_copy+5656(%rip), %eax
	movl	%eax, aliases+5656(%rip)
	movq	aliases_copy+5648(%rip), %rax
	movq	%rax, aliases+5648(%rip)
	movq	aliases_copy+5640(%rip), %rax
	movq	%rax, aliases+5640(%rip)
	movl	aliases_copy+5632(%rip), %eax
	movl	%eax, aliases+5632(%rip)
	movq	srchead_copy(%rip), %r8
	movq	srchead_copy+8(%rip), %r9
	movq	srchead_copy+16(%rip), %r10
	movq	srchead_copy+24(%rip), %r11
	movq	srchead_copy+32(%rip), %r14
	movq	srchead_copy+40(%rip), %rbx
	movq	srchead_copy+48(%rip), %rax
	movq	srchead_copy+56(%rip), %rcx
	movq	srchead_copy+64(%rip), %rdx
	movq	srchead_copy+72(%rip), %rsi
	movq	srchead_copy+80(%rip), %rdi
	movq	%rdi, srchead+80(%rip)
	movq	%rsi, srchead+72(%rip)
	movq	%rdx, srchead+64(%rip)
	movq	%rcx, srchead+56(%rip)
	movq	%rax, srchead+48(%rip)
	movq	%rbx, srchead+40(%rip)
	movq	%r14, srchead+32(%rip)
	movq	%r11, srchead+24(%rip)
	movq	%r10, srchead+16(%rip)
	movq	%r9, srchead+8(%rip)
	movq	%r8, srchead(%rip)
	movq	srchard_copy(%rip), %rax
	movq	srchard_copy+8(%rip), %rcx
	movq	srchard_copy+16(%rip), %rdx
	movq	srchard_copy+24(%rip), %rsi
	movq	srchard_copy+32(%rip), %rdi
	movq	%rdi, srchard+32(%rip)
	movq	%rsi, srchard+24(%rip)
	movq	%rdx, srchard+16(%rip)
	movq	%rcx, srchard+8(%rip)
	movq	%rax, srchard(%rip)
	movl	sinus_copy+236(%rip), %r12d
	movl	sinus_copy+240(%rip), %ebx
	movl	sinus_copy+244(%rip), %r9d
	movl	sinus_copy+248(%rip), %esi
	movl	sinus_copy+252(%rip), %eax
	movl	sinus_copy+492(%rip), %r13d
	movl	sinus_copy+496(%rip), %r14d
	movl	sinus_copy+500(%rip), %r10d
	movl	sinus_copy+504(%rip), %edi
	movl	sinus_copy+508(%rip), %ecx
	movl	sinus_copy+752(%rip), %r15d
	movl	sinus_copy+756(%rip), %r11d
	movl	sinus_copy+760(%rip), %r8d
	movl	sinus_copy+764(%rip), %edx
	movl	%eax, sinus+252(%rip)
	movl	%esi, sinus+248(%rip)
	movl	%r9d, sinus+244(%rip)
	movl	%ebx, sinus+240(%rip)
	movl	%r12d, sinus+236(%rip)
	movl	sinus_copy+232(%rip), %eax
	movl	%eax, sinus+232(%rip)
	movl	sinus_copy+228(%rip), %eax
	movl	%eax, sinus+228(%rip)
	movl	sinus_copy+224(%rip), %eax
	movl	%eax, sinus+224(%rip)
	movl	sinus_copy+220(%rip), %eax
	movl	%eax, sinus+220(%rip)
	movl	sinus_copy+216(%rip), %eax
	movl	%eax, sinus+216(%rip)
	movl	sinus_copy+212(%rip), %eax
	movl	%eax, sinus+212(%rip)
	movl	sinus_copy+208(%rip), %eax
	movl	%eax, sinus+208(%rip)
	movl	sinus_copy+204(%rip), %eax
	movl	%eax, sinus+204(%rip)
	movl	sinus_copy+200(%rip), %eax
	movl	%eax, sinus+200(%rip)
	movl	sinus_copy+196(%rip), %eax
	movl	%eax, sinus+196(%rip)
	movl	sinus_copy+192(%rip), %eax
	movl	%eax, sinus+192(%rip)
	movl	sinus_copy+188(%rip), %eax
	movl	%eax, sinus+188(%rip)
	movl	sinus_copy+184(%rip), %eax
	movl	%eax, sinus+184(%rip)
	movl	sinus_copy+180(%rip), %eax
	movl	%eax, sinus+180(%rip)
	movl	sinus_copy+176(%rip), %eax
	movl	%eax, sinus+176(%rip)
	movl	sinus_copy+172(%rip), %eax
	movl	%eax, sinus+172(%rip)
	movl	sinus_copy+168(%rip), %eax
	movl	%eax, sinus+168(%rip)
	movl	sinus_copy+164(%rip), %eax
	movl	%eax, sinus+164(%rip)
	movl	sinus_copy+160(%rip), %eax
	movl	%eax, sinus+160(%rip)
	movl	sinus_copy+156(%rip), %eax
	movl	%eax, sinus+156(%rip)
	movl	sinus_copy+152(%rip), %eax
	movl	%eax, sinus+152(%rip)
	movl	sinus_copy+148(%rip), %eax
	movl	%eax, sinus+148(%rip)
	movl	sinus_copy+144(%rip), %eax
	movl	%eax, sinus+144(%rip)
	movl	sinus_copy+140(%rip), %eax
	movl	%eax, sinus+140(%rip)
	movl	sinus_copy+136(%rip), %eax
	movl	%eax, sinus+136(%rip)
	movl	sinus_copy+132(%rip), %eax
	movl	%eax, sinus+132(%rip)
	movl	sinus_copy+128(%rip), %eax
	movl	%eax, sinus+128(%rip)
	movl	sinus_copy+124(%rip), %eax
	movl	%eax, sinus+124(%rip)
	movl	sinus_copy+120(%rip), %eax
	movl	%eax, sinus+120(%rip)
	movl	sinus_copy+116(%rip), %eax
	movl	%eax, sinus+116(%rip)
	movl	sinus_copy+112(%rip), %eax
	movl	%eax, sinus+112(%rip)
	movl	sinus_copy+108(%rip), %eax
	movl	%eax, sinus+108(%rip)
	movl	sinus_copy+104(%rip), %eax
	movl	%eax, sinus+104(%rip)
	movl	sinus_copy+100(%rip), %eax
	movl	%eax, sinus+100(%rip)
	movl	sinus_copy+96(%rip), %eax
	movl	%eax, sinus+96(%rip)
	movl	sinus_copy+92(%rip), %eax
	movl	%eax, sinus+92(%rip)
	movl	sinus_copy+88(%rip), %eax
	movl	%eax, sinus+88(%rip)
	movl	sinus_copy+84(%rip), %eax
	movl	%eax, sinus+84(%rip)
	movl	sinus_copy+80(%rip), %eax
	movl	%eax, sinus+80(%rip)
	movl	sinus_copy+76(%rip), %eax
	movl	%eax, sinus+76(%rip)
	movl	sinus_copy+72(%rip), %eax
	movl	%eax, sinus+72(%rip)
	movl	sinus_copy+68(%rip), %eax
	movl	%eax, sinus+68(%rip)
	movl	sinus_copy+64(%rip), %eax
	movl	%eax, sinus+64(%rip)
	movl	sinus_copy+60(%rip), %eax
	movl	%eax, sinus+60(%rip)
	movl	sinus_copy+56(%rip), %eax
	movl	%eax, sinus+56(%rip)
	movl	sinus_copy+52(%rip), %eax
	movl	%eax, sinus+52(%rip)
	movl	sinus_copy+48(%rip), %eax
	movl	%eax, sinus+48(%rip)
	movl	sinus_copy+44(%rip), %eax
	movl	%eax, sinus+44(%rip)
	movl	sinus_copy+40(%rip), %eax
	movl	%eax, sinus+40(%rip)
	movl	sinus_copy+36(%rip), %eax
	movl	%eax, sinus+36(%rip)
	movl	sinus_copy+32(%rip), %eax
	movl	%eax, sinus+32(%rip)
	movl	sinus_copy+28(%rip), %eax
	movl	%eax, sinus+28(%rip)
	movl	sinus_copy+24(%rip), %eax
	movl	%eax, sinus+24(%rip)
	movl	sinus_copy+20(%rip), %eax
	movl	%eax, sinus+20(%rip)
	movl	sinus_copy+16(%rip), %eax
	movl	%eax, sinus+16(%rip)
	movl	sinus_copy+12(%rip), %eax
	movl	%eax, sinus+12(%rip)
	movl	sinus_copy+8(%rip), %eax
	movl	%eax, sinus+8(%rip)
	movl	sinus_copy+4(%rip), %eax
	movl	%eax, sinus+4(%rip)
	movl	sinus_copy(%rip), %eax
	movl	%eax, sinus(%rip)
	movl	%ecx, sinus+508(%rip)
	movl	%edi, sinus+504(%rip)
	movl	%r10d, sinus+500(%rip)
	movl	%r14d, sinus+496(%rip)
	movl	%r13d, sinus+492(%rip)
	movl	sinus_copy+488(%rip), %eax
	movl	%eax, sinus+488(%rip)
	movl	sinus_copy+484(%rip), %eax
	movl	%eax, sinus+484(%rip)
	movl	sinus_copy+480(%rip), %eax
	movl	%eax, sinus+480(%rip)
	movl	sinus_copy+476(%rip), %eax
	movl	%eax, sinus+476(%rip)
	movl	sinus_copy+472(%rip), %eax
	movl	%eax, sinus+472(%rip)
	movl	sinus_copy+468(%rip), %eax
	movl	%eax, sinus+468(%rip)
	movl	sinus_copy+464(%rip), %eax
	movl	%eax, sinus+464(%rip)
	movl	sinus_copy+460(%rip), %eax
	movl	%eax, sinus+460(%rip)
	movl	sinus_copy+456(%rip), %eax
	movl	%eax, sinus+456(%rip)
	movl	sinus_copy+452(%rip), %eax
	movl	%eax, sinus+452(%rip)
	movl	sinus_copy+448(%rip), %eax
	movl	%eax, sinus+448(%rip)
	movl	sinus_copy+444(%rip), %eax
	movl	%eax, sinus+444(%rip)
	movl	sinus_copy+440(%rip), %eax
	movl	%eax, sinus+440(%rip)
	movl	sinus_copy+436(%rip), %eax
	movl	%eax, sinus+436(%rip)
	movl	sinus_copy+432(%rip), %eax
	movl	%eax, sinus+432(%rip)
	movl	sinus_copy+428(%rip), %eax
	movl	%eax, sinus+428(%rip)
	movl	sinus_copy+424(%rip), %eax
	movl	%eax, sinus+424(%rip)
	movl	sinus_copy+420(%rip), %eax
	movl	%eax, sinus+420(%rip)
	movl	sinus_copy+416(%rip), %eax
	movl	%eax, sinus+416(%rip)
	movl	sinus_copy+412(%rip), %eax
	movl	%eax, sinus+412(%rip)
	movl	sinus_copy+408(%rip), %eax
	movl	%eax, sinus+408(%rip)
	movl	sinus_copy+404(%rip), %eax
	movl	%eax, sinus+404(%rip)
	movl	sinus_copy+400(%rip), %eax
	movl	%eax, sinus+400(%rip)
	movl	sinus_copy+396(%rip), %eax
	movl	%eax, sinus+396(%rip)
	movl	sinus_copy+392(%rip), %eax
	movl	%eax, sinus+392(%rip)
	movl	sinus_copy+388(%rip), %eax
	movl	%eax, sinus+388(%rip)
	movl	sinus_copy+384(%rip), %eax
	movl	%eax, sinus+384(%rip)
	movl	sinus_copy+380(%rip), %eax
	movl	%eax, sinus+380(%rip)
	movl	sinus_copy+376(%rip), %eax
	movl	%eax, sinus+376(%rip)
	movl	sinus_copy+372(%rip), %eax
	movl	%eax, sinus+372(%rip)
	movl	sinus_copy+368(%rip), %eax
	movl	%eax, sinus+368(%rip)
	movl	sinus_copy+364(%rip), %eax
	movl	%eax, sinus+364(%rip)
	movl	sinus_copy+360(%rip), %eax
	movl	%eax, sinus+360(%rip)
	movl	sinus_copy+356(%rip), %eax
	movl	%eax, sinus+356(%rip)
	movl	sinus_copy+352(%rip), %eax
	movl	%eax, sinus+352(%rip)
	movl	sinus_copy+348(%rip), %eax
	movl	%eax, sinus+348(%rip)
	movl	sinus_copy+344(%rip), %eax
	movl	%eax, sinus+344(%rip)
	movl	sinus_copy+340(%rip), %eax
	movl	%eax, sinus+340(%rip)
	movl	sinus_copy+336(%rip), %eax
	movl	%eax, sinus+336(%rip)
	movl	sinus_copy+332(%rip), %eax
	movl	%eax, sinus+332(%rip)
	movl	sinus_copy+328(%rip), %eax
	movl	%eax, sinus+328(%rip)
	movl	sinus_copy+324(%rip), %eax
	movl	%eax, sinus+324(%rip)
	movl	sinus_copy+320(%rip), %eax
	movl	%eax, sinus+320(%rip)
	movl	sinus_copy+316(%rip), %eax
	movl	%eax, sinus+316(%rip)
	movl	sinus_copy+312(%rip), %eax
	movl	%eax, sinus+312(%rip)
	movl	sinus_copy+308(%rip), %eax
	movl	%eax, sinus+308(%rip)
	movl	sinus_copy+304(%rip), %eax
	movl	%eax, sinus+304(%rip)
	movl	sinus_copy+300(%rip), %eax
	movl	%eax, sinus+300(%rip)
	movl	sinus_copy+296(%rip), %eax
	movl	%eax, sinus+296(%rip)
	movl	sinus_copy+292(%rip), %eax
	movl	%eax, sinus+292(%rip)
	movl	sinus_copy+288(%rip), %eax
	movl	%eax, sinus+288(%rip)
	movl	sinus_copy+284(%rip), %eax
	movl	%eax, sinus+284(%rip)
	movl	sinus_copy+280(%rip), %eax
	movl	%eax, sinus+280(%rip)
	movl	sinus_copy+276(%rip), %eax
	movl	%eax, sinus+276(%rip)
	movl	sinus_copy+272(%rip), %eax
	movl	%eax, sinus+272(%rip)
	movl	sinus_copy+268(%rip), %eax
	movl	%eax, sinus+268(%rip)
	movl	sinus_copy+264(%rip), %eax
	movl	%eax, sinus+264(%rip)
	movl	sinus_copy+260(%rip), %eax
	movl	%eax, sinus+260(%rip)
	movl	sinus_copy+256(%rip), %eax
	movl	%eax, sinus+256(%rip)
	movl	%edx, sinus+764(%rip)
	movl	%r8d, sinus+760(%rip)
	movl	%r11d, sinus+756(%rip)
	movl	%r15d, sinus+752(%rip)
	movl	sinus_copy+748(%rip), %eax
	movl	%eax, sinus+748(%rip)
	movl	sinus_copy+744(%rip), %eax
	movl	%eax, sinus+744(%rip)
	movl	sinus_copy+740(%rip), %eax
	movl	%eax, sinus+740(%rip)
	movl	sinus_copy+736(%rip), %eax
	movl	%eax, sinus+736(%rip)
	movl	sinus_copy+732(%rip), %eax
	movl	%eax, sinus+732(%rip)
	movl	sinus_copy+728(%rip), %eax
	movl	%eax, sinus+728(%rip)
	movl	sinus_copy+724(%rip), %eax
	movl	%eax, sinus+724(%rip)
	movl	sinus_copy+720(%rip), %eax
	movl	%eax, sinus+720(%rip)
	movl	sinus_copy+716(%rip), %eax
	movl	%eax, sinus+716(%rip)
	movl	sinus_copy+712(%rip), %eax
	movl	%eax, sinus+712(%rip)
	movl	sinus_copy+708(%rip), %eax
	movl	%eax, sinus+708(%rip)
	movl	sinus_copy+704(%rip), %eax
	movl	%eax, sinus+704(%rip)
	movl	sinus_copy+700(%rip), %eax
	movl	%eax, sinus+700(%rip)
	movl	sinus_copy+696(%rip), %eax
	movl	%eax, sinus+696(%rip)
	movl	sinus_copy+692(%rip), %eax
	movl	%eax, sinus+692(%rip)
	movl	sinus_copy+688(%rip), %eax
	movl	%eax, sinus+688(%rip)
	movl	sinus_copy+684(%rip), %eax
	movl	%eax, sinus+684(%rip)
	movl	sinus_copy+680(%rip), %eax
	movl	%eax, sinus+680(%rip)
	movl	sinus_copy+676(%rip), %eax
	movl	%eax, sinus+676(%rip)
	movl	sinus_copy+672(%rip), %eax
	movl	%eax, sinus+672(%rip)
	movl	sinus_copy+668(%rip), %eax
	movl	%eax, sinus+668(%rip)
	movl	sinus_copy+664(%rip), %eax
	movl	%eax, sinus+664(%rip)
	movl	sinus_copy+660(%rip), %eax
	movl	%eax, sinus+660(%rip)
	movl	sinus_copy+656(%rip), %eax
	movl	%eax, sinus+656(%rip)
	movl	sinus_copy+652(%rip), %eax
	movl	%eax, sinus+652(%rip)
	movl	sinus_copy+648(%rip), %eax
	movl	%eax, sinus+648(%rip)
	movl	sinus_copy+644(%rip), %eax
	movl	%eax, sinus+644(%rip)
	movl	sinus_copy+640(%rip), %eax
	movl	%eax, sinus+640(%rip)
	movl	sinus_copy+636(%rip), %eax
	movl	%eax, sinus+636(%rip)
	movl	sinus_copy+632(%rip), %eax
	movl	%eax, sinus+632(%rip)
	movl	sinus_copy+628(%rip), %eax
	movl	%eax, sinus+628(%rip)
	movl	sinus_copy+624(%rip), %eax
	movl	%eax, sinus+624(%rip)
	movl	sinus_copy+620(%rip), %eax
	movl	%eax, sinus+620(%rip)
	movl	sinus_copy+616(%rip), %eax
	movl	%eax, sinus+616(%rip)
	movl	sinus_copy+612(%rip), %eax
	movl	%eax, sinus+612(%rip)
	movl	sinus_copy+608(%rip), %eax
	movl	%eax, sinus+608(%rip)
	movl	sinus_copy+604(%rip), %eax
	movl	%eax, sinus+604(%rip)
	movl	sinus_copy+600(%rip), %eax
	movl	%eax, sinus+600(%rip)
	movl	sinus_copy+596(%rip), %eax
	movl	%eax, sinus+596(%rip)
	movl	sinus_copy+592(%rip), %eax
	movl	%eax, sinus+592(%rip)
	movl	sinus_copy+588(%rip), %eax
	movl	%eax, sinus+588(%rip)
	movl	sinus_copy+584(%rip), %eax
	movl	%eax, sinus+584(%rip)
	movl	sinus_copy+580(%rip), %eax
	movl	%eax, sinus+580(%rip)
	movl	sinus_copy+576(%rip), %eax
	movl	%eax, sinus+576(%rip)
	movl	sinus_copy+572(%rip), %eax
	movl	%eax, sinus+572(%rip)
	movl	sinus_copy+568(%rip), %eax
	movl	%eax, sinus+568(%rip)
	movl	sinus_copy+564(%rip), %eax
	movl	%eax, sinus+564(%rip)
	movl	sinus_copy+560(%rip), %eax
	movl	%eax, sinus+560(%rip)
	movl	sinus_copy+556(%rip), %eax
	movl	%eax, sinus+556(%rip)
	movl	sinus_copy+552(%rip), %eax
	movl	%eax, sinus+552(%rip)
	movl	sinus_copy+548(%rip), %eax
	movl	%eax, sinus+548(%rip)
	movl	sinus_copy+544(%rip), %eax
	movl	%eax, sinus+544(%rip)
	movl	sinus_copy+540(%rip), %eax
	movl	%eax, sinus+540(%rip)
	movl	sinus_copy+536(%rip), %eax
	movl	%eax, sinus+536(%rip)
	movl	sinus_copy+532(%rip), %eax
	movl	%eax, sinus+532(%rip)
	movl	sinus_copy+528(%rip), %eax
	movl	%eax, sinus+528(%rip)
	movl	sinus_copy+524(%rip), %eax
	movl	%eax, sinus+524(%rip)
	movl	sinus_copy+520(%rip), %eax
	movl	%eax, sinus+520(%rip)
	movl	sinus_copy+516(%rip), %eax
	movl	%eax, sinus+516(%rip)
	movl	sinus_copy+512(%rip), %eax
	movl	%eax, sinus+512(%rip)
	movl	sinus_copy+796(%rip), %eax
	movl	%eax, sinus+796(%rip)
	movl	sinus_copy+792(%rip), %eax
	movl	%eax, sinus+792(%rip)
	movl	sinus_copy+788(%rip), %eax
	movl	%eax, sinus+788(%rip)
	movl	sinus_copy+784(%rip), %eax
	movl	%eax, sinus+784(%rip)
	movl	sinus_copy+780(%rip), %eax
	movl	%eax, sinus+780(%rip)
	movl	sinus_copy+776(%rip), %eax
	movl	%eax, sinus+776(%rip)
	movl	sinus_copy+772(%rip), %eax
	movl	%eax, sinus+772(%rip)
	movl	sinus_copy+768(%rip), %eax
	movl	%eax, sinus+768(%rip)
	movb	ascii_copy+57(%rip), %r12b
	movb	ascii_copy+58(%rip), %r14b
	movb	ascii_copy+59(%rip), %r11b
	movb	ascii_copy+60(%rip), %r9b
	movb	ascii_copy+61(%rip), %dil
	movb	ascii_copy+62(%rip), %dl
	movb	ascii_copy+63(%rip), %al
	movb	ascii_copy+121(%rip), %r13b
	movb	ascii_copy+122(%rip), %r15b
	movb	ascii_copy+123(%rip), %bl
	movb	ascii_copy+124(%rip), %r10b
	movb	ascii_copy+125(%rip), %r8b
	movb	ascii_copy+126(%rip), %sil
	movb	ascii_copy+127(%rip), %cl
	movb	%al, ascii+63(%rip)
	movb	%dl, ascii+62(%rip)
	movb	%dil, ascii+61(%rip)
	movb	%r9b, ascii+60(%rip)
	movb	%r11b, ascii+59(%rip)
	movb	%r14b, ascii+58(%rip)
	movb	%r12b, ascii+57(%rip)
	movb	ascii_copy+56(%rip), %al
	movb	%al, ascii+56(%rip)
	movb	ascii_copy+55(%rip), %al
	movb	%al, ascii+55(%rip)
	movb	ascii_copy+54(%rip), %al
	movb	%al, ascii+54(%rip)
	movb	ascii_copy+53(%rip), %al
	movb	%al, ascii+53(%rip)
	movb	ascii_copy+52(%rip), %al
	movb	%al, ascii+52(%rip)
	movb	ascii_copy+51(%rip), %al
	movb	%al, ascii+51(%rip)
	movb	ascii_copy+50(%rip), %al
	movb	%al, ascii+50(%rip)
	movb	ascii_copy+49(%rip), %al
	movb	%al, ascii+49(%rip)
	movb	ascii_copy+48(%rip), %al
	movb	%al, ascii+48(%rip)
	movb	ascii_copy+47(%rip), %al
	movb	%al, ascii+47(%rip)
	movb	ascii_copy+46(%rip), %al
	movb	%al, ascii+46(%rip)
	movb	ascii_copy+45(%rip), %al
	movb	%al, ascii+45(%rip)
	movb	ascii_copy+44(%rip), %al
	movb	%al, ascii+44(%rip)
	movb	ascii_copy+43(%rip), %al
	movb	%al, ascii+43(%rip)
	movb	ascii_copy+42(%rip), %al
	movb	%al, ascii+42(%rip)
	movb	ascii_copy+41(%rip), %al
	movb	%al, ascii+41(%rip)
	movb	ascii_copy+40(%rip), %al
	movb	%al, ascii+40(%rip)
	movb	ascii_copy+39(%rip), %al
	movb	%al, ascii+39(%rip)
	movb	ascii_copy+38(%rip), %al
	movb	%al, ascii+38(%rip)
	movb	ascii_copy+37(%rip), %al
	movb	%al, ascii+37(%rip)
	movb	ascii_copy+36(%rip), %al
	movb	%al, ascii+36(%rip)
	movb	ascii_copy+35(%rip), %al
	movb	%al, ascii+35(%rip)
	movb	ascii_copy+34(%rip), %al
	movb	%al, ascii+34(%rip)
	movb	ascii_copy+33(%rip), %al
	movb	%al, ascii+33(%rip)
	movb	ascii_copy+32(%rip), %al
	movb	%al, ascii+32(%rip)
	movb	ascii_copy+31(%rip), %al
	movb	%al, ascii+31(%rip)
	movb	ascii_copy+30(%rip), %al
	movb	%al, ascii+30(%rip)
	movb	ascii_copy+29(%rip), %al
	movb	%al, ascii+29(%rip)
	movb	ascii_copy+28(%rip), %al
	movb	%al, ascii+28(%rip)
	movb	ascii_copy+27(%rip), %al
	movb	%al, ascii+27(%rip)
	movb	ascii_copy+26(%rip), %al
	movb	%al, ascii+26(%rip)
	movb	ascii_copy+25(%rip), %al
	movb	%al, ascii+25(%rip)
	movb	ascii_copy+24(%rip), %al
	movb	%al, ascii+24(%rip)
	movb	ascii_copy+23(%rip), %al
	movb	%al, ascii+23(%rip)
	movb	ascii_copy+22(%rip), %al
	movb	%al, ascii+22(%rip)
	movb	ascii_copy+21(%rip), %al
	movb	%al, ascii+21(%rip)
	movb	ascii_copy+20(%rip), %al
	movb	%al, ascii+20(%rip)
	movb	ascii_copy+19(%rip), %al
	movb	%al, ascii+19(%rip)
	movb	ascii_copy+18(%rip), %al
	movb	%al, ascii+18(%rip)
	movb	ascii_copy+17(%rip), %al
	movb	%al, ascii+17(%rip)
	movb	ascii_copy+16(%rip), %al
	movb	%al, ascii+16(%rip)
	movb	ascii_copy+15(%rip), %al
	movb	%al, ascii+15(%rip)
	movb	ascii_copy+14(%rip), %al
	movb	%al, ascii+14(%rip)
	movb	ascii_copy+13(%rip), %al
	movb	%al, ascii+13(%rip)
	movb	ascii_copy+12(%rip), %al
	movb	%al, ascii+12(%rip)
	movb	ascii_copy+11(%rip), %al
	movb	%al, ascii+11(%rip)
	movb	ascii_copy+10(%rip), %al
	movb	%al, ascii+10(%rip)
	movb	ascii_copy+9(%rip), %al
	movb	%al, ascii+9(%rip)
	movb	ascii_copy+8(%rip), %al
	movb	%al, ascii+8(%rip)
	movb	ascii_copy+7(%rip), %al
	movb	%al, ascii+7(%rip)
	movb	ascii_copy+6(%rip), %al
	movb	%al, ascii+6(%rip)
	movb	ascii_copy+5(%rip), %al
	movb	%al, ascii+5(%rip)
	movb	ascii_copy+4(%rip), %al
	movb	%al, ascii+4(%rip)
	movb	ascii_copy+3(%rip), %al
	movb	%al, ascii+3(%rip)
	movb	ascii_copy+2(%rip), %al
	movb	%al, ascii+2(%rip)
	movb	ascii_copy+1(%rip), %al
	movb	%al, ascii+1(%rip)
	movb	ascii_copy(%rip), %al
	movb	%al, ascii(%rip)
	movb	%cl, ascii+127(%rip)
	movb	%sil, ascii+126(%rip)
	movb	%r8b, ascii+125(%rip)
	movb	%r10b, ascii+124(%rip)
	movb	%bl, ascii+123(%rip)
	movb	%r15b, ascii+122(%rip)
	movb	%r13b, ascii+121(%rip)
	movb	ascii_copy+120(%rip), %al
	movb	%al, ascii+120(%rip)
	movb	ascii_copy+119(%rip), %al
	movb	%al, ascii+119(%rip)
	movb	ascii_copy+118(%rip), %al
	movb	%al, ascii+118(%rip)
	movb	ascii_copy+117(%rip), %al
	movb	%al, ascii+117(%rip)
	movb	ascii_copy+116(%rip), %al
	movb	%al, ascii+116(%rip)
	movb	ascii_copy+115(%rip), %al
	movb	%al, ascii+115(%rip)
	movb	ascii_copy+114(%rip), %al
	movb	%al, ascii+114(%rip)
	movb	ascii_copy+113(%rip), %al
	movb	%al, ascii+113(%rip)
	movb	ascii_copy+112(%rip), %al
	movb	%al, ascii+112(%rip)
	movb	ascii_copy+111(%rip), %al
	movb	%al, ascii+111(%rip)
	movb	ascii_copy+110(%rip), %al
	movb	%al, ascii+110(%rip)
	movb	ascii_copy+109(%rip), %al
	movb	%al, ascii+109(%rip)
	movb	ascii_copy+108(%rip), %al
	movb	%al, ascii+108(%rip)
	movb	ascii_copy+107(%rip), %al
	movb	%al, ascii+107(%rip)
	movb	ascii_copy+106(%rip), %al
	movb	%al, ascii+106(%rip)
	movb	ascii_copy+105(%rip), %al
	movb	%al, ascii+105(%rip)
	movb	ascii_copy+104(%rip), %al
	movb	%al, ascii+104(%rip)
	movb	ascii_copy+103(%rip), %al
	movb	%al, ascii+103(%rip)
	movb	ascii_copy+102(%rip), %al
	movb	%al, ascii+102(%rip)
	movb	ascii_copy+101(%rip), %al
	movb	%al, ascii+101(%rip)
	movb	ascii_copy+100(%rip), %al
	movb	%al, ascii+100(%rip)
	movb	ascii_copy+99(%rip), %al
	movb	%al, ascii+99(%rip)
	movb	ascii_copy+98(%rip), %al
	movb	%al, ascii+98(%rip)
	movb	ascii_copy+97(%rip), %al
	movb	%al, ascii+97(%rip)
	movb	ascii_copy+96(%rip), %al
	movb	%al, ascii+96(%rip)
	movb	ascii_copy+95(%rip), %al
	movb	%al, ascii+95(%rip)
	movb	ascii_copy+94(%rip), %al
	movb	%al, ascii+94(%rip)
	movb	ascii_copy+93(%rip), %al
	movb	%al, ascii+93(%rip)
	movb	ascii_copy+92(%rip), %al
	movb	%al, ascii+92(%rip)
	movb	ascii_copy+91(%rip), %al
	movb	%al, ascii+91(%rip)
	movb	ascii_copy+90(%rip), %al
	movb	%al, ascii+90(%rip)
	movb	ascii_copy+89(%rip), %al
	movb	%al, ascii+89(%rip)
	movb	ascii_copy+88(%rip), %al
	movb	%al, ascii+88(%rip)
	movb	ascii_copy+87(%rip), %al
	movb	%al, ascii+87(%rip)
	movb	ascii_copy+86(%rip), %al
	movb	%al, ascii+86(%rip)
	movb	ascii_copy+85(%rip), %al
	movb	%al, ascii+85(%rip)
	movb	ascii_copy+84(%rip), %al
	movb	%al, ascii+84(%rip)
	movb	ascii_copy+83(%rip), %al
	movb	%al, ascii+83(%rip)
	movb	ascii_copy+82(%rip), %al
	movb	%al, ascii+82(%rip)
	movb	ascii_copy+81(%rip), %al
	movb	%al, ascii+81(%rip)
	movb	ascii_copy+80(%rip), %al
	movb	%al, ascii+80(%rip)
	movb	ascii_copy+79(%rip), %al
	movb	%al, ascii+79(%rip)
	movb	ascii_copy+78(%rip), %al
	movb	%al, ascii+78(%rip)
	movb	ascii_copy+77(%rip), %al
	movb	%al, ascii+77(%rip)
	movb	ascii_copy+76(%rip), %al
	movb	%al, ascii+76(%rip)
	movb	ascii_copy+75(%rip), %al
	movb	%al, ascii+75(%rip)
	movb	ascii_copy+74(%rip), %al
	movb	%al, ascii+74(%rip)
	movb	ascii_copy+73(%rip), %al
	movb	%al, ascii+73(%rip)
	movb	ascii_copy+72(%rip), %al
	movb	%al, ascii+72(%rip)
	movb	ascii_copy+71(%rip), %al
	movb	%al, ascii+71(%rip)
	movb	ascii_copy+70(%rip), %al
	movb	%al, ascii+70(%rip)
	movb	ascii_copy+69(%rip), %al
	movb	%al, ascii+69(%rip)
	movb	ascii_copy+68(%rip), %al
	movb	%al, ascii+68(%rip)
	movb	ascii_copy+67(%rip), %al
	movb	%al, ascii+67(%rip)
	movb	ascii_copy+66(%rip), %al
	movb	%al, ascii+66(%rip)
	movb	ascii_copy+65(%rip), %al
	movb	%al, ascii+65(%rip)
	movb	ascii_copy+64(%rip), %al
	movb	%al, ascii+64(%rip)
	movq	all_xfers_copy, %rax
	movq	%rax, all_xfers
	movq	transfers_copy, %rax
	movq	%rax, transfers
	movq	built_in_protos_copy, %rax
	movq	%rax, built_in_protos
	movl	easysrc_slist_count_copy, %eax
	movl	%eax, easysrc_slist_count
	movl	easysrc_mime_count_copy, %eax
	movl	%eax, easysrc_mime_count
	movq	easysrc_clean_copy, %rax
	movq	%rax, easysrc_clean
	movq	easysrc_toohard_copy, %rax
	movq	%rax, easysrc_toohard
	movq	easysrc_code_copy, %rax
	movq	%rax, easysrc_code
	movq	easysrc_data_copy, %rax
	movq	%rax, easysrc_data
	movq	easysrc_decl_copy, %rax
	movq	%rax, easysrc_decl
	movabsq	$.L.str.5.580, %rdi
	movb	$0, %al
	callq	printf
	movl	-60(%rbp), %edi         # 4-byte Reload
	movq	-976(%rbp), %rsi        # 8-byte Reload
	callq	start_main
.LBB167_5:                              #   in Loop: Header=BB167_1 Depth=1
	callq	free_ptrs
	callq	clock
	movsd	.LCPI167_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	%rax, -992(%rbp)
	movq	-992(%rbp), %rax
	subq	-1008(%rbp), %rax
	cvtsi2sd	%rax, %xmm1
	divsd	%xmm0, %xmm1
	movsd	%xmm1, -56(%rbp)
	movq	-1016(%rbp), %rdi
	movsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movabsq	$.L.str.6.581, %rsi
	movb	$1, %al
	callq	fprintf
# %bb.6:                                #   in Loop: Header=BB167_1 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB167_1
.LBB167_7:
	movabsq	$.L.str.7.582, %rdi
	movb	$0, %al
	callq	printf
	callq	clock
	movsd	.LCPI167_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	%rax, -984(%rbp)
	movq	-984(%rbp), %rax
	subq	-1000(%rbp), %rax
	cvtsi2sd	%rax, %xmm1
	divsd	%xmm0, %xmm1
	movsd	%xmm1, -56(%rbp)
	movsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movabsq	$.L.str.8.583, %rdi
	movb	$1, %al
	callq	printf
	xorl	%eax, %eax
	addq	$1000, %rsp             # imm = 0x3E8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end167:
	.size	main, .Lfunc_end167-main
	.cfi_endproc
                                        # -- End function
	.type	easysrc_decl,@object    # @easysrc_decl
	.bss
	.globl	easysrc_decl
	.p2align	3
easysrc_decl:
	.quad	0
	.size	easysrc_decl, 8

	.type	easysrc_data,@object    # @easysrc_data
	.globl	easysrc_data
	.p2align	3
easysrc_data:
	.quad	0
	.size	easysrc_data, 8

	.type	easysrc_code,@object    # @easysrc_code
	.globl	easysrc_code
	.p2align	3
easysrc_code:
	.quad	0
	.size	easysrc_code, 8

	.type	easysrc_toohard,@object # @easysrc_toohard
	.globl	easysrc_toohard
	.p2align	3
easysrc_toohard:
	.quad	0
	.size	easysrc_toohard, 8

	.type	easysrc_clean,@object   # @easysrc_clean
	.globl	easysrc_clean
	.p2align	3
easysrc_clean:
	.quad	0
	.size	easysrc_clean, 8

	.type	easysrc_mime_count,@object # @easysrc_mime_count
	.globl	easysrc_mime_count
	.p2align	2
easysrc_mime_count:
	.long	0                       # 0x0
	.size	easysrc_mime_count, 4

	.type	easysrc_slist_count,@object # @easysrc_slist_count
	.globl	easysrc_slist_count
	.p2align	2
easysrc_slist_count:
	.long	0                       # 0x0
	.size	easysrc_slist_count, 4

	.type	curlinfo,@object        # @curlinfo
	.globl	curlinfo
	.p2align	3
curlinfo:
	.quad	0
	.size	curlinfo, 8

	.type	built_in_protos,@object # @built_in_protos
	.globl	built_in_protos
	.p2align	3
built_in_protos:
	.quad	0                       # 0x0
	.size	built_in_protos, 8

	.type	transfers,@object       # @transfers
	.comm	transfers,8,8
	.type	all_xfers,@object       # @all_xfers
	.globl	all_xfers
	.p2align	3
all_xfers:
	.quad	0                       # 0x0
	.size	all_xfers, 8

	.type	setopt_nv_CURLPROXY,@object # @setopt_nv_CURLPROXY
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURLPROXY
	.p2align	4
setopt_nv_CURLPROXY:
	.quad	.L.str.1537
	.quad	0                       # 0x0
	.quad	.L.str.1.1538
	.quad	1                       # 0x1
	.quad	.L.str.2.1539
	.quad	2                       # 0x2
	.quad	.L.str.3.1540
	.quad	4                       # 0x4
	.quad	.L.str.4.1541
	.quad	5                       # 0x5
	.quad	.L.str.5.1542
	.quad	6                       # 0x6
	.quad	.L.str.6.1543
	.quad	7                       # 0x7
	.zero	16
	.size	setopt_nv_CURLPROXY, 128

	.type	.L.str.1537,@object     # @.str.1537
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1537:
	.asciz	"CURLPROXY_HTTP"
	.size	.L.str.1537, 15

	.type	.L.str.1.1538,@object   # @.str.1.1538
.L.str.1.1538:
	.asciz	"CURLPROXY_HTTP_1_0"
	.size	.L.str.1.1538, 19

	.type	.L.str.2.1539,@object   # @.str.2.1539
.L.str.2.1539:
	.asciz	"CURLPROXY_HTTPS"
	.size	.L.str.2.1539, 16

	.type	.L.str.3.1540,@object   # @.str.3.1540
.L.str.3.1540:
	.asciz	"CURLPROXY_SOCKS4"
	.size	.L.str.3.1540, 17

	.type	.L.str.4.1541,@object   # @.str.4.1541
.L.str.4.1541:
	.asciz	"CURLPROXY_SOCKS5"
	.size	.L.str.4.1541, 17

	.type	.L.str.5.1542,@object   # @.str.5.1542
.L.str.5.1542:
	.asciz	"CURLPROXY_SOCKS4A"
	.size	.L.str.5.1542, 18

	.type	.L.str.6.1543,@object   # @.str.6.1543
.L.str.6.1543:
	.asciz	"CURLPROXY_SOCKS5_HOSTNAME"
	.size	.L.str.6.1543, 26

	.type	setopt_nv_CURL_SOCKS_PROXY,@object # @setopt_nv_CURL_SOCKS_PROXY
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURL_SOCKS_PROXY
	.p2align	4
setopt_nv_CURL_SOCKS_PROXY:
	.quad	.L.str.3.1540
	.quad	4                       # 0x4
	.quad	.L.str.4.1541
	.quad	5                       # 0x5
	.quad	.L.str.5.1542
	.quad	6                       # 0x6
	.quad	.L.str.6.1543
	.quad	7                       # 0x7
	.zero	16
	.size	setopt_nv_CURL_SOCKS_PROXY, 80

	.type	setopt_nv_CURLHSTS,@object # @setopt_nv_CURLHSTS
	.globl	setopt_nv_CURLHSTS
	.p2align	4
setopt_nv_CURLHSTS:
	.quad	.L.str.7.1544
	.quad	1                       # 0x1
	.zero	16
	.size	setopt_nv_CURLHSTS, 32

	.type	.L.str.7.1544,@object   # @.str.7.1544
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.7.1544:
	.asciz	"CURLHSTS_ENABLE"
	.size	.L.str.7.1544, 16

	.type	setopt_nv_CURLAUTH,@object # @setopt_nv_CURLAUTH
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURLAUTH
	.p2align	4
setopt_nv_CURLAUTH:
	.quad	.L.str.8.1547
	.quad	-17                     # 0xffffffffffffffef
	.quad	.L.str.9.1548
	.quad	-18                     # 0xffffffffffffffee
	.quad	.L.str.10.1549
	.quad	1                       # 0x1
	.quad	.L.str.11.1550
	.quad	2                       # 0x2
	.quad	.L.str.12.1551
	.quad	4                       # 0x4
	.quad	.L.str.13.1552
	.quad	8                       # 0x8
	.quad	.L.str.14.1553
	.quad	16                      # 0x10
	.quad	.L.str.15.1554
	.quad	32                      # 0x20
	.quad	.L.str.16.1555
	.quad	2147483648              # 0x80000000
	.quad	.L.str.17.1556
	.quad	0                       # 0x0
	.zero	16
	.size	setopt_nv_CURLAUTH, 176

	.type	.L.str.8.1547,@object   # @.str.8.1547
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.8.1547:
	.asciz	"CURLAUTH_ANY"
	.size	.L.str.8.1547, 13

	.type	.L.str.9.1548,@object   # @.str.9.1548
.L.str.9.1548:
	.asciz	"CURLAUTH_ANYSAFE"
	.size	.L.str.9.1548, 17

	.type	.L.str.10.1549,@object  # @.str.10.1549
.L.str.10.1549:
	.asciz	"CURLAUTH_BASIC"
	.size	.L.str.10.1549, 15

	.type	.L.str.11.1550,@object  # @.str.11.1550
.L.str.11.1550:
	.asciz	"CURLAUTH_DIGEST"
	.size	.L.str.11.1550, 16

	.type	.L.str.12.1551,@object  # @.str.12.1551
.L.str.12.1551:
	.asciz	"CURLAUTH_GSSNEGOTIATE"
	.size	.L.str.12.1551, 22

	.type	.L.str.13.1552,@object  # @.str.13.1552
.L.str.13.1552:
	.asciz	"CURLAUTH_NTLM"
	.size	.L.str.13.1552, 14

	.type	.L.str.14.1553,@object  # @.str.14.1553
.L.str.14.1553:
	.asciz	"CURLAUTH_DIGEST_IE"
	.size	.L.str.14.1553, 19

	.type	.L.str.15.1554,@object  # @.str.15.1554
.L.str.15.1554:
	.asciz	"CURLAUTH_NTLM_WB"
	.size	.L.str.15.1554, 17

	.type	.L.str.16.1555,@object  # @.str.16.1555
.L.str.16.1555:
	.asciz	"CURLAUTH_ONLY"
	.size	.L.str.16.1555, 14

	.type	.L.str.17.1556,@object  # @.str.17.1556
.L.str.17.1556:
	.asciz	"CURLAUTH_NONE"
	.size	.L.str.17.1556, 14

	.type	setopt_nv_CURL_HTTP_VERSION,@object # @setopt_nv_CURL_HTTP_VERSION
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURL_HTTP_VERSION
	.p2align	4
setopt_nv_CURL_HTTP_VERSION:
	.quad	.L.str.18.1559
	.quad	0                       # 0x0
	.quad	.L.str.19.1560
	.quad	1                       # 0x1
	.quad	.L.str.20.1561
	.quad	2                       # 0x2
	.quad	.L.str.21.1562
	.quad	3                       # 0x3
	.quad	.L.str.22.1563
	.quad	4                       # 0x4
	.quad	.L.str.23.1564
	.quad	30                      # 0x1e
	.zero	16
	.size	setopt_nv_CURL_HTTP_VERSION, 112

	.type	.L.str.18.1559,@object  # @.str.18.1559
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.18.1559:
	.asciz	"CURL_HTTP_VERSION_NONE"
	.size	.L.str.18.1559, 23

	.type	.L.str.19.1560,@object  # @.str.19.1560
.L.str.19.1560:
	.asciz	"CURL_HTTP_VERSION_1_0"
	.size	.L.str.19.1560, 22

	.type	.L.str.20.1561,@object  # @.str.20.1561
.L.str.20.1561:
	.asciz	"CURL_HTTP_VERSION_1_1"
	.size	.L.str.20.1561, 22

	.type	.L.str.21.1562,@object  # @.str.21.1562
.L.str.21.1562:
	.asciz	"CURL_HTTP_VERSION_2_0"
	.size	.L.str.21.1562, 22

	.type	.L.str.22.1563,@object  # @.str.22.1563
.L.str.22.1563:
	.asciz	"CURL_HTTP_VERSION_2TLS"
	.size	.L.str.22.1563, 23

	.type	.L.str.23.1564,@object  # @.str.23.1564
.L.str.23.1564:
	.asciz	"CURL_HTTP_VERSION_3"
	.size	.L.str.23.1564, 20

	.type	setopt_nv_CURL_SSLVERSION,@object # @setopt_nv_CURL_SSLVERSION
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURL_SSLVERSION
	.p2align	4
setopt_nv_CURL_SSLVERSION:
	.quad	.L.str.24.1567
	.quad	0                       # 0x0
	.quad	.L.str.25.1568
	.quad	1                       # 0x1
	.quad	.L.str.26.1569
	.quad	2                       # 0x2
	.quad	.L.str.27.1570
	.quad	3                       # 0x3
	.quad	.L.str.28.1571
	.quad	4                       # 0x4
	.quad	.L.str.29.1572
	.quad	5                       # 0x5
	.quad	.L.str.30.1573
	.quad	6                       # 0x6
	.quad	.L.str.31.1574
	.quad	7                       # 0x7
	.zero	16
	.size	setopt_nv_CURL_SSLVERSION, 144

	.type	.L.str.24.1567,@object  # @.str.24.1567
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.24.1567:
	.asciz	"CURL_SSLVERSION_DEFAULT"
	.size	.L.str.24.1567, 24

	.type	.L.str.25.1568,@object  # @.str.25.1568
.L.str.25.1568:
	.asciz	"CURL_SSLVERSION_TLSv1"
	.size	.L.str.25.1568, 22

	.type	.L.str.26.1569,@object  # @.str.26.1569
.L.str.26.1569:
	.asciz	"CURL_SSLVERSION_SSLv2"
	.size	.L.str.26.1569, 22

	.type	.L.str.27.1570,@object  # @.str.27.1570
.L.str.27.1570:
	.asciz	"CURL_SSLVERSION_SSLv3"
	.size	.L.str.27.1570, 22

	.type	.L.str.28.1571,@object  # @.str.28.1571
.L.str.28.1571:
	.asciz	"CURL_SSLVERSION_TLSv1_0"
	.size	.L.str.28.1571, 24

	.type	.L.str.29.1572,@object  # @.str.29.1572
.L.str.29.1572:
	.asciz	"CURL_SSLVERSION_TLSv1_1"
	.size	.L.str.29.1572, 24

	.type	.L.str.30.1573,@object  # @.str.30.1573
.L.str.30.1573:
	.asciz	"CURL_SSLVERSION_TLSv1_2"
	.size	.L.str.30.1573, 24

	.type	.L.str.31.1574,@object  # @.str.31.1574
.L.str.31.1574:
	.asciz	"CURL_SSLVERSION_TLSv1_3"
	.size	.L.str.31.1574, 24

	.type	setopt_nv_CURL_TIMECOND,@object # @setopt_nv_CURL_TIMECOND
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURL_TIMECOND
	.p2align	4
setopt_nv_CURL_TIMECOND:
	.quad	.L.str.32.1577
	.quad	1                       # 0x1
	.quad	.L.str.33.1578
	.quad	2                       # 0x2
	.quad	.L.str.34.1579
	.quad	3                       # 0x3
	.quad	.L.str.35.1580
	.quad	0                       # 0x0
	.zero	16
	.size	setopt_nv_CURL_TIMECOND, 80

	.type	.L.str.32.1577,@object  # @.str.32.1577
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.32.1577:
	.asciz	"CURL_TIMECOND_IFMODSINCE"
	.size	.L.str.32.1577, 25

	.type	.L.str.33.1578,@object  # @.str.33.1578
.L.str.33.1578:
	.asciz	"CURL_TIMECOND_IFUNMODSINCE"
	.size	.L.str.33.1578, 27

	.type	.L.str.34.1579,@object  # @.str.34.1579
.L.str.34.1579:
	.asciz	"CURL_TIMECOND_LASTMOD"
	.size	.L.str.34.1579, 22

	.type	.L.str.35.1580,@object  # @.str.35.1580
.L.str.35.1580:
	.asciz	"CURL_TIMECOND_NONE"
	.size	.L.str.35.1580, 19

	.type	setopt_nv_CURLFTPSSL_CCC,@object # @setopt_nv_CURLFTPSSL_CCC
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURLFTPSSL_CCC
	.p2align	4
setopt_nv_CURLFTPSSL_CCC:
	.quad	.L.str.36.1583
	.quad	0                       # 0x0
	.quad	.L.str.37.1584
	.quad	1                       # 0x1
	.quad	.L.str.38.1585
	.quad	2                       # 0x2
	.zero	16
	.size	setopt_nv_CURLFTPSSL_CCC, 64

	.type	.L.str.36.1583,@object  # @.str.36.1583
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.36.1583:
	.asciz	"CURLFTPSSL_CCC_NONE"
	.size	.L.str.36.1583, 20

	.type	.L.str.37.1584,@object  # @.str.37.1584
.L.str.37.1584:
	.asciz	"CURLFTPSSL_CCC_PASSIVE"
	.size	.L.str.37.1584, 23

	.type	.L.str.38.1585,@object  # @.str.38.1585
.L.str.38.1585:
	.asciz	"CURLFTPSSL_CCC_ACTIVE"
	.size	.L.str.38.1585, 22

	.type	setopt_nv_CURLUSESSL,@object # @setopt_nv_CURLUSESSL
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURLUSESSL
	.p2align	4
setopt_nv_CURLUSESSL:
	.quad	.L.str.39.1588
	.quad	0                       # 0x0
	.quad	.L.str.40.1589
	.quad	1                       # 0x1
	.quad	.L.str.41.1590
	.quad	2                       # 0x2
	.quad	.L.str.42.1591
	.quad	3                       # 0x3
	.zero	16
	.size	setopt_nv_CURLUSESSL, 80

	.type	.L.str.39.1588,@object  # @.str.39.1588
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.39.1588:
	.asciz	"CURLUSESSL_NONE"
	.size	.L.str.39.1588, 16

	.type	.L.str.40.1589,@object  # @.str.40.1589
.L.str.40.1589:
	.asciz	"CURLUSESSL_TRY"
	.size	.L.str.40.1589, 15

	.type	.L.str.41.1590,@object  # @.str.41.1590
.L.str.41.1590:
	.asciz	"CURLUSESSL_CONTROL"
	.size	.L.str.41.1590, 19

	.type	.L.str.42.1591,@object  # @.str.42.1591
.L.str.42.1591:
	.asciz	"CURLUSESSL_ALL"
	.size	.L.str.42.1591, 15

	.type	setopt_nv_CURLSSLOPT,@object # @setopt_nv_CURLSSLOPT
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURLSSLOPT
	.p2align	4
setopt_nv_CURLSSLOPT:
	.quad	.L.str.43.1594
	.quad	1                       # 0x1
	.quad	.L.str.44.1595
	.quad	2                       # 0x2
	.quad	.L.str.45.1596
	.quad	4                       # 0x4
	.quad	.L.str.46.1597
	.quad	8                       # 0x8
	.quad	.L.str.47.1598
	.quad	16                      # 0x10
	.quad	.L.str.48.1599
	.quad	32                      # 0x20
	.zero	16
	.size	setopt_nv_CURLSSLOPT, 112

	.type	.L.str.43.1594,@object  # @.str.43.1594
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.43.1594:
	.asciz	"CURLSSLOPT_ALLOW_BEAST"
	.size	.L.str.43.1594, 23

	.type	.L.str.44.1595,@object  # @.str.44.1595
.L.str.44.1595:
	.asciz	"CURLSSLOPT_NO_REVOKE"
	.size	.L.str.44.1595, 21

	.type	.L.str.45.1596,@object  # @.str.45.1596
.L.str.45.1596:
	.asciz	"CURLSSLOPT_NO_PARTIALCHAIN"
	.size	.L.str.45.1596, 27

	.type	.L.str.46.1597,@object  # @.str.46.1597
.L.str.46.1597:
	.asciz	"CURLSSLOPT_REVOKE_BEST_EFFORT"
	.size	.L.str.46.1597, 30

	.type	.L.str.47.1598,@object  # @.str.47.1598
.L.str.47.1598:
	.asciz	"CURLSSLOPT_NATIVE_CA"
	.size	.L.str.47.1598, 21

	.type	.L.str.48.1599,@object  # @.str.48.1599
.L.str.48.1599:
	.asciz	"CURLSSLOPT_AUTO_CLIENT_CERT"
	.size	.L.str.48.1599, 28

	.type	setopt_nv_CURL_NETRC,@object # @setopt_nv_CURL_NETRC
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURL_NETRC
	.p2align	4
setopt_nv_CURL_NETRC:
	.quad	.L.str.49.1602
	.quad	0                       # 0x0
	.quad	.L.str.50.1603
	.quad	1                       # 0x1
	.quad	.L.str.51.1604
	.quad	2                       # 0x2
	.zero	16
	.size	setopt_nv_CURL_NETRC, 64

	.type	.L.str.49.1602,@object  # @.str.49.1602
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.49.1602:
	.asciz	"CURL_NETRC_IGNORED"
	.size	.L.str.49.1602, 19

	.type	.L.str.50.1603,@object  # @.str.50.1603
.L.str.50.1603:
	.asciz	"CURL_NETRC_OPTIONAL"
	.size	.L.str.50.1603, 20

	.type	.L.str.51.1604,@object  # @.str.51.1604
.L.str.51.1604:
	.asciz	"CURL_NETRC_REQUIRED"
	.size	.L.str.51.1604, 20

	.type	setopt_nv_CURLPROTO,@object # @setopt_nv_CURLPROTO
	.section	.rodata,"a",@progbits
	.globl	setopt_nv_CURLPROTO
	.p2align	4
setopt_nv_CURLPROTO:
	.quad	.L.str.52.1607
	.quad	-1                      # 0xffffffffffffffff
	.quad	.L.str.53.1608
	.quad	512                     # 0x200
	.quad	.L.str.54.1609
	.quad	1024                    # 0x400
	.quad	.L.str.55.1610
	.quad	4                       # 0x4
	.quad	.L.str.56.1611
	.quad	8                       # 0x8
	.quad	.L.str.57.1612
	.quad	33554432                # 0x2000000
	.quad	.L.str.58.1613
	.quad	1                       # 0x1
	.quad	.L.str.59.1614
	.quad	2                       # 0x2
	.quad	.L.str.60.1615
	.quad	4096                    # 0x1000
	.quad	.L.str.61.1616
	.quad	8192                    # 0x2000
	.quad	.L.str.62.1617
	.quad	128                     # 0x80
	.quad	.L.str.63.1618
	.quad	256                     # 0x100
	.quad	.L.str.64.1619
	.quad	16384                   # 0x4000
	.quad	.L.str.65.1620
	.quad	32768                   # 0x8000
	.quad	.L.str.66.1621
	.quad	262144                  # 0x40000
	.quad	.L.str.67.1622
	.quad	16                      # 0x10
	.quad	.L.str.68.1623
	.quad	32                      # 0x20
	.quad	.L.str.69.1624
	.quad	67108864                # 0x4000000
	.quad	.L.str.70.1625
	.quad	134217728               # 0x8000000
	.quad	.L.str.71.1626
	.quad	65536                   # 0x10000
	.quad	.L.str.72.1627
	.quad	131072                  # 0x20000
	.quad	.L.str.73.1628
	.quad	64                      # 0x40
	.quad	.L.str.74.1629
	.quad	2048                    # 0x800
	.zero	16
	.size	setopt_nv_CURLPROTO, 384

	.type	.L.str.52.1607,@object  # @.str.52.1607
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.52.1607:
	.asciz	"CURLPROTO_ALL"
	.size	.L.str.52.1607, 14

	.type	.L.str.53.1608,@object  # @.str.53.1608
.L.str.53.1608:
	.asciz	"CURLPROTO_DICT"
	.size	.L.str.53.1608, 15

	.type	.L.str.54.1609,@object  # @.str.54.1609
.L.str.54.1609:
	.asciz	"CURLPROTO_FILE"
	.size	.L.str.54.1609, 15

	.type	.L.str.55.1610,@object  # @.str.55.1610
.L.str.55.1610:
	.asciz	"CURLPROTO_FTP"
	.size	.L.str.55.1610, 14

	.type	.L.str.56.1611,@object  # @.str.56.1611
.L.str.56.1611:
	.asciz	"CURLPROTO_FTPS"
	.size	.L.str.56.1611, 15

	.type	.L.str.57.1612,@object  # @.str.57.1612
.L.str.57.1612:
	.asciz	"CURLPROTO_GOPHER"
	.size	.L.str.57.1612, 17

	.type	.L.str.58.1613,@object  # @.str.58.1613
.L.str.58.1613:
	.asciz	"CURLPROTO_HTTP"
	.size	.L.str.58.1613, 15

	.type	.L.str.59.1614,@object  # @.str.59.1614
.L.str.59.1614:
	.asciz	"CURLPROTO_HTTPS"
	.size	.L.str.59.1614, 16

	.type	.L.str.60.1615,@object  # @.str.60.1615
.L.str.60.1615:
	.asciz	"CURLPROTO_IMAP"
	.size	.L.str.60.1615, 15

	.type	.L.str.61.1616,@object  # @.str.61.1616
.L.str.61.1616:
	.asciz	"CURLPROTO_IMAPS"
	.size	.L.str.61.1616, 16

	.type	.L.str.62.1617,@object  # @.str.62.1617
.L.str.62.1617:
	.asciz	"CURLPROTO_LDAP"
	.size	.L.str.62.1617, 15

	.type	.L.str.63.1618,@object  # @.str.63.1618
.L.str.63.1618:
	.asciz	"CURLPROTO_LDAPS"
	.size	.L.str.63.1618, 16

	.type	.L.str.64.1619,@object  # @.str.64.1619
.L.str.64.1619:
	.asciz	"CURLPROTO_POP3"
	.size	.L.str.64.1619, 15

	.type	.L.str.65.1620,@object  # @.str.65.1620
.L.str.65.1620:
	.asciz	"CURLPROTO_POP3S"
	.size	.L.str.65.1620, 16

	.type	.L.str.66.1621,@object  # @.str.66.1621
.L.str.66.1621:
	.asciz	"CURLPROTO_RTSP"
	.size	.L.str.66.1621, 15

	.type	.L.str.67.1622,@object  # @.str.67.1622
.L.str.67.1622:
	.asciz	"CURLPROTO_SCP"
	.size	.L.str.67.1622, 14

	.type	.L.str.68.1623,@object  # @.str.68.1623
.L.str.68.1623:
	.asciz	"CURLPROTO_SFTP"
	.size	.L.str.68.1623, 15

	.type	.L.str.69.1624,@object  # @.str.69.1624
.L.str.69.1624:
	.asciz	"CURLPROTO_SMB"
	.size	.L.str.69.1624, 14

	.type	.L.str.70.1625,@object  # @.str.70.1625
.L.str.70.1625:
	.asciz	"CURLPROTO_SMBS"
	.size	.L.str.70.1625, 15

	.type	.L.str.71.1626,@object  # @.str.71.1626
.L.str.71.1626:
	.asciz	"CURLPROTO_SMTP"
	.size	.L.str.71.1626, 15

	.type	.L.str.72.1627,@object  # @.str.72.1627
.L.str.72.1627:
	.asciz	"CURLPROTO_SMTPS"
	.size	.L.str.72.1627, 16

	.type	.L.str.73.1628,@object  # @.str.73.1628
.L.str.73.1628:
	.asciz	"CURLPROTO_TELNET"
	.size	.L.str.73.1628, 17

	.type	.L.str.74.1629,@object  # @.str.74.1629
.L.str.74.1629:
	.asciz	"CURLPROTO_TFTP"
	.size	.L.str.74.1629, 15

	.type	tool_debug_cb.known_offset,@object # @tool_debug_cb.known_offset
	.local	tool_debug_cb.known_offset
	.comm	tool_debug_cb.known_offset,1,4
	.type	tool_debug_cb.epoch_offset,@object # @tool_debug_cb.epoch_offset
	.local	tool_debug_cb.epoch_offset
	.comm	tool_debug_cb.epoch_offset,8,8
	.type	.L.str,@object          # @.str
.L.str:
	.asciz	"%02d:%02d:%02d.%06ld "
	.size	.L.str, 22

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"-"
	.size	.L.str.1, 2

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"%"
	.size	.L.str.2, 2

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"w"
	.size	.L.str.3, 2

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"Failed to create/open output"
	.size	.L.str.4, 29

	.type	tool_debug_cb.newl,@object # @tool_debug_cb.newl
	.local	tool_debug_cb.newl
	.comm	tool_debug_cb.newl,1,1
	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"%s%s "
	.size	.L.str.10, 6

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	">"
	.size	.L.str.7, 2

	.type	tool_debug_cb.traced_data,@object # @tool_debug_cb.traced_data
	.local	tool_debug_cb.traced_data
	.comm	tool_debug_cb.traced_data,1,1
	.type	tool_debug_cb.s_infotype,@object # @tool_debug_cb.s_infotype
	.section	.rodata,"a",@progbits
	.p2align	4
tool_debug_cb.s_infotype:
	.quad	.L.str.5
	.quad	.L.str.6
	.quad	.L.str.7
	.quad	.L.str.8
	.quad	.L.str.9
	.quad	.L.str.8
	.quad	.L.str.9
	.size	tool_debug_cb.s_infotype, 56

	.type	.L.str.11,@object       # @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"[%zu bytes data]\n"
	.size	.L.str.11, 18

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"%s== Info: %.*s"
	.size	.L.str.12, 16

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"=> Send SSL data"
	.size	.L.str.18, 17

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"<= Recv SSL data"
	.size	.L.str.17, 17

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"<= Recv data"
	.size	.L.str.16, 13

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"<= Recv header"
	.size	.L.str.15, 15

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"=> Send data"
	.size	.L.str.14, 13

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"=> Send header"
	.size	.L.str.13, 15

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"%s%s, %zu bytes (0x%zx)\n"
	.size	.L.str.19, 25

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"%04zx: "
	.size	.L.str.20, 8

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"%02x "
	.size	.L.str.21, 6

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"   "
	.size	.L.str.22, 4

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"%c"
	.size	.L.str.23, 3

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"*"
	.size	.L.str.5, 2

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"<"
	.size	.L.str.6, 2

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"{"
	.size	.L.str.8, 2

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"}"
	.size	.L.str.9, 2

	.type	.L.str.1.1139,@object   # @.str.1.1139
.L.str.1.1139:
	.asciz	"Warning: "
	.size	.L.str.1.1139, 10

	.type	.L.str.4.1136,@object   # @.str.4.1136
.L.str.4.1136:
	.asciz	"\n"
	.size	.L.str.4.1136, 2

	.type	ascii,@object           # @ascii
	.section	.rodata,"a",@progbits
	.p2align	4
ascii:
	.ascii	"         (((((                  \210\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\004\004\004\004\004\004\004\004\004\004\020\020\020\020\020\020\020AAAAAA\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\020\020\020\020\020\020BBBBBB\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\020\020\020\020 "
	.size	ascii, 128

	.type	.L.str.24,@object       # @.str.24
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.24:
	.asciz	"etag:"
	.size	.L.str.24, 6

	.type	.L.str.1.25,@object     # @.str.1.25
.L.str.1.25:
	.asciz	"Content-disposition:"
	.size	.L.str.1.25, 21

	.type	.L.str.2.26,@object     # @.str.2.26
.L.str.2.26:
	.asciz	"filename="
	.size	.L.str.2.26, 10

	.type	.L.str.3.27,@object     # @.str.3.27
.L.str.3.27:
	.asciz	"\033[1m%.*s\033[0m:"
	.size	.L.str.3.27, 14

	.type	.L.str.35,@object       # @.str.35
.L.str.35:
	.asciz	"Remote filename has no length!\n"
	.size	.L.str.35, 32

	.type	.L.str.1.36,@object     # @.str.1.36
.L.str.1.36:
	.asciz	"%s/%s"
	.size	.L.str.1.36, 6

	.type	.L.str.3.37,@object     # @.str.3.37
.L.str.3.37:
	.asciz	"wb"
	.size	.L.str.3.37, 3

	.type	.L.str.2.38,@object     # @.str.2.38
.L.str.2.38:
	.asciz	"out of memory\n"
	.size	.L.str.2.38, 15

	.type	.L.str.4.39,@object     # @.str.4.39
.L.str.4.39:
	.asciz	"Failed to create the file %s: %s\n"
	.size	.L.str.4.39, 34

	.type	.L.str.2.1142,@object   # @.str.2.1142
.L.str.2.1142:
	.asciz	"curl: "
	.size	.L.str.2.1142, 7

	.type	.L.str.2.28,@object     # @.str.2.28
.L.str.2.28:
	.asciz	"%*s\r"
	.size	.L.str.2.28, 5

	.type	.L.str.3.29,@object     # @.str.3.29
.L.str.3.29:
	.asciz	" "
	.size	.L.str.3.29, 2

	.type	.L.str.4.30,@object     # @.str.4.30
.L.str.4.30:
	.asciz	"-=O=-"
	.size	.L.str.4.30, 6

	.type	sinus,@object           # @sinus
	.section	.rodata,"a",@progbits
	.p2align	4
sinus:
	.long	515704                  # 0x7de78
	.long	531394                  # 0x81bc2
	.long	547052                  # 0x858ec
	.long	562664                  # 0x895e8
	.long	578214                  # 0x8d2a6
	.long	593687                  # 0x90f17
	.long	609068                  # 0x94b2c
	.long	624341                  # 0x986d5
	.long	639491                  # 0x9c203
	.long	654504                  # 0x9fca8
	.long	669364                  # 0xa36b4
	.long	684057                  # 0xa7019
	.long	698568                  # 0xaa8c8
	.long	712883                  # 0xae0b3
	.long	726989                  # 0xb17cd
	.long	740870                  # 0xb4e06
	.long	754513                  # 0xb8351
	.long	767906                  # 0xbb7a2
	.long	781034                  # 0xbeaea
	.long	793885                  # 0xc1d1d
	.long	806445                  # 0xc4e2d
	.long	818704                  # 0xc7e10
	.long	830647                  # 0xcacb7
	.long	842265                  # 0xcda19
	.long	853545                  # 0xd0629
	.long	864476                  # 0xd30dc
	.long	875047                  # 0xd5a27
	.long	885248                  # 0xd8200
	.long	895069                  # 0xda85d
	.long	904500                  # 0xdcd34
	.long	913532                  # 0xdf07c
	.long	922156                  # 0xe122c
	.long	930363                  # 0xe323b
	.long	938145                  # 0xe50a1
	.long	945495                  # 0xe6d57
	.long	952406                  # 0xe8856
	.long	958870                  # 0xea196
	.long	964881                  # 0xeb911
	.long	970434                  # 0xecec2
	.long	975522                  # 0xee2a2
	.long	980141                  # 0xef4ad
	.long	984286                  # 0xf04de
	.long	987954                  # 0xf1332
	.long	991139                  # 0xf1fa3
	.long	993840                  # 0xf2a30
	.long	996054                  # 0xf32d6
	.long	997778                  # 0xf3992
	.long	999011                  # 0xf3e63
	.long	999752                  # 0xf4148
	.long	999999                  # 0xf423f
	.long	999754                  # 0xf414a
	.long	999014                  # 0xf3e66
	.long	997783                  # 0xf3997
	.long	996060                  # 0xf32dc
	.long	993848                  # 0xf2a38
	.long	991148                  # 0xf1fac
	.long	987964                  # 0xf133c
	.long	984298                  # 0xf04ea
	.long	980154                  # 0xef4ba
	.long	975536                  # 0xee2b0
	.long	970449                  # 0xeced1
	.long	964898                  # 0xeb922
	.long	958888                  # 0xea1a8
	.long	952426                  # 0xe886a
	.long	945516                  # 0xe6d6c
	.long	938168                  # 0xe50b8
	.long	930386                  # 0xe3252
	.long	922180                  # 0xe1244
	.long	913558                  # 0xdf096
	.long	904527                  # 0xdcd4f
	.long	895097                  # 0xda879
	.long	885277                  # 0xd821d
	.long	875077                  # 0xd5a45
	.long	864507                  # 0xd30fb
	.long	853577                  # 0xd0649
	.long	842299                  # 0xcda3b
	.long	830682                  # 0xcacda
	.long	818739                  # 0xc7e33
	.long	806482                  # 0xc4e52
	.long	793922                  # 0xc1d42
	.long	781072                  # 0xbeb10
	.long	767945                  # 0xbb7c9
	.long	754553                  # 0xb8379
	.long	740910                  # 0xb4e2e
	.long	727030                  # 0xb17f6
	.long	712925                  # 0xae0dd
	.long	698610                  # 0xaa8f2
	.long	684100                  # 0xa7044
	.long	669407                  # 0xa36df
	.long	654548                  # 0x9fcd4
	.long	639536                  # 0x9c230
	.long	624386                  # 0x98702
	.long	609113                  # 0x94b59
	.long	593733                  # 0x90f45
	.long	578260                  # 0x8d2d4
	.long	562710                  # 0x89616
	.long	547098                  # 0x8591a
	.long	531440                  # 0x81bf0
	.long	515751                  # 0x7dea7
	.long	500046                  # 0x7a14e
	.long	484341                  # 0x763f5
	.long	468651                  # 0x726ab
	.long	452993                  # 0x6e981
	.long	437381                  # 0x6ac85
	.long	421830                  # 0x66fc6
	.long	406357                  # 0x63355
	.long	390976                  # 0x5f740
	.long	375703                  # 0x5bb97
	.long	360552                  # 0x58068
	.long	345539                  # 0x545c3
	.long	330679                  # 0x50bb7
	.long	315985                  # 0x4d251
	.long	301474                  # 0x499a2
	.long	287158                  # 0x461b6
	.long	273052                  # 0x42a9c
	.long	259170                  # 0x3f462
	.long	245525                  # 0x3bf15
	.long	232132                  # 0x38ac4
	.long	219003                  # 0x3577b
	.long	206152                  # 0x32548
	.long	193590                  # 0x2f436
	.long	181331                  # 0x2c453
	.long	169386                  # 0x295aa
	.long	157768                  # 0x26848
	.long	146487                  # 0x23c37
	.long	135555                  # 0x21183
	.long	124983                  # 0x1e837
	.long	114781                  # 0x1c05d
	.long	104959                  # 0x199ff
	.long	95526                   # 0x17526
	.long	86493                   # 0x151dd
	.long	77868                   # 0x1302c
	.long	69660                   # 0x1101c
	.long	61876                   # 0xf1b4
	.long	54525                   # 0xd4fd
	.long	47613                   # 0xb9fd
	.long	41147                   # 0xa0bb
	.long	35135                   # 0x893f
	.long	29581                   # 0x738d
	.long	24491                   # 0x5fab
	.long	19871                   # 0x4d9f
	.long	15724                   # 0x3d6c
	.long	12056                   # 0x2f18
	.long	8868                    # 0x22a4
	.long	6166                    # 0x1816
	.long	3951                    # 0xf6f
	.long	2225                    # 0x8b1
	.long	990                     # 0x3de
	.long	248                     # 0xf8
	.long	0                       # 0x0
	.long	244                     # 0xf4
	.long	982                     # 0x3d6
	.long	2212                    # 0x8a4
	.long	3933                    # 0xf5d
	.long	6144                    # 0x1800
	.long	8842                    # 0x228a
	.long	12025                   # 0x2ef9
	.long	15690                   # 0x3d4a
	.long	19832                   # 0x4d78
	.long	24448                   # 0x5f80
	.long	29534                   # 0x735e
	.long	35084                   # 0x890c
	.long	41092                   # 0xa084
	.long	47554                   # 0xb9c2
	.long	54462                   # 0xd4be
	.long	61809                   # 0xf171
	.long	69589                   # 0x10fd5
	.long	77794                   # 0x12fe2
	.long	86415                   # 0x1518f
	.long	95445                   # 0x174d5
	.long	104873                  # 0x199a9
	.long	114692                  # 0x1c004
	.long	124891                  # 0x1e7db
	.long	135460                  # 0x21124
	.long	146389                  # 0x23bd5
	.long	157667                  # 0x267e3
	.long	169282                  # 0x29542
	.long	181224                  # 0x2c3e8
	.long	193480                  # 0x2f3c8
	.long	206039                  # 0x324d7
	.long	218888                  # 0x35708
	.long	232015                  # 0x38a4f
	.long	245406                  # 0x3be9e
	.long	259048                  # 0x3f3e8
	.long	272928                  # 0x42a20
	.long	287032                  # 0x46138
	.long	301346                  # 0x49922
	.long	315856                  # 0x4d1d0
	.long	330548                  # 0x50b34
	.long	345407                  # 0x5453f
	.long	360419                  # 0x57fe3
	.long	375568                  # 0x5bb10
	.long	390841                  # 0x5f6b9
	.long	406221                  # 0x632cd
	.long	421693                  # 0x66f3d
	.long	437243                  # 0x6abfb
	.long	452854                  # 0x6e8f6
	.long	468513                  # 0x72621
	.long	484202                  # 0x7636a
	.long	499907                  # 0x7a0c3
	.size	sinus, 800

	.type	.L.str.31,@object       # @.str.31
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.31:
	.asciz	"\r%%-%ds %%5.1f%%%%"
	.size	.L.str.31, 19

	.type	.L.str.1.32,@object     # @.str.1.32
.L.str.1.32:
	.asciz	"COLUMNS"
	.size	.L.str.1.32, 8

	.type	.L.str.5.40,@object     # @.str.5.40
.L.str.5.40:
	.asciz	"Binary output can mess up your terminal. Use \"--output -\" to tell curl to output it to your terminal anyway, or consider \"--output <FILE>\" to save to a file.\n"
	.size	.L.str.5.40, 159

	.type	.L.str.41,@object       # @.str.41
.L.str.41:
	.asciz	"/"
	.size	.L.str.41, 2

	.type	.L.str.1.42,@object     # @.str.1.42
.L.str.1.42:
	.asciz	"%s%s"
	.size	.L.str.1.42, 5

	.type	.L.str.3.43,@object     # @.str.3.43
.L.str.3.43:
	.asciz	"The directory name %s is too long.\n"
	.size	.L.str.3.43, 36

	.type	.L.str.4.44,@object     # @.str.4.44
.L.str.4.44:
	.asciz	"%s resides on a read-only file system.\n"
	.size	.L.str.4.44, 40

	.type	.L.str.5.45,@object     # @.str.5.45
.L.str.5.45:
	.asciz	"No space left on the file system that will contain the directory %s.\n"
	.size	.L.str.5.45, 70

	.type	.L.str.6.46,@object     # @.str.6.46
.L.str.6.46:
	.asciz	"Cannot create directory %s because you exceeded your quota.\n"
	.size	.L.str.6.46, 61

	.type	.L.str.7.47,@object     # @.str.7.47
.L.str.7.47:
	.asciz	"Error creating directory %s.\n"
	.size	.L.str.7.47, 30

	.type	.L.str.48,@object       # @.str.48
.L.str.48:
	.asciz	"hnd = curl_easy_init();"
	.size	.L.str.48, 24

	.type	.L.str.1.49,@object     # @.str.1.49
.L.str.1.49:
	.zero	1
	.size	.L.str.1.49, 1

	.type	srchard,@object         # @srchard
	.section	.rodata,"a",@progbits
	.p2align	4
srchard:
	.quad	.L.str.12.52
	.quad	.L.str.13.53
	.quad	.L.str.14.54
	.quad	.L.str.1.49
	.quad	0
	.size	srchard, 40

	.type	.L.str.2.50,@object     # @.str.2.50
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.2.50:
	.asciz	"*/"
	.size	.L.str.2.50, 3

	.type	.L.str.3.51,@object     # @.str.3.51
.L.str.3.51:
	.asciz	"ret = curl_easy_perform(hnd);"
	.size	.L.str.3.51, 30

	.type	.L.str.12.52,@object    # @.str.12.52
.L.str.12.52:
	.asciz	"/* Here is a list of options the curl code used that cannot get generated"
	.size	.L.str.12.52, 74

	.type	.L.str.13.53,@object    # @.str.13.53
.L.str.13.53:
	.asciz	"   as source easily. You may select to either not use them or implement"
	.size	.L.str.13.53, 72

	.type	.L.str.14.54,@object    # @.str.14.54
.L.str.14.54:
	.asciz	"   them yourself."
	.size	.L.str.14.54, 18

	.type	.L.str.4.55,@object     # @.str.4.55
.L.str.4.55:
	.asciz	"curl_easy_cleanup(hnd);"
	.size	.L.str.4.55, 24

	.type	.L.str.5.56,@object     # @.str.5.56
.L.str.5.56:
	.asciz	"hnd = NULL;"
	.size	.L.str.5.56, 12

	.type	.L.str.6.57,@object     # @.str.6.57
.L.str.6.57:
	.asciz	"-"
	.size	.L.str.6.57, 2

	.type	.L.str.7.58,@object     # @.str.7.58
.L.str.7.58:
	.asciz	"w"
	.size	.L.str.7.58, 2

	.type	.L.str.8.59,@object     # @.str.8.59
.L.str.8.59:
	.asciz	"Failed to open %s to write libcurl code!\n"
	.size	.L.str.8.59, 42

	.type	srchead,@object         # @srchead
	.section	.rodata,"a",@progbits
	.p2align	4
srchead:
	.quad	.L.str.15.64
	.quad	.L.str.16.65
	.quad	.L.str.17.66
	.quad	.L.str.18.67
	.quad	.L.str.19.68
	.quad	.L.str.1.49
	.quad	.L.str.20.69
	.quad	.L.str.21.70
	.quad	.L.str.22.71
	.quad	.L.str.23.72
	.quad	0
	.size	srchead, 88

	.type	.L.str.9.60,@object     # @.str.9.60
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.9.60:
	.asciz	"%s\n"
	.size	.L.str.9.60, 4

	.type	.L.str.10.61,@object    # @.str.10.61
.L.str.10.61:
	.asciz	"  %s\n"
	.size	.L.str.10.61, 6

	.type	.L.str.11.62,@object    # @.str.11.62
.L.str.11.62:
	.asciz	"\n"
	.size	.L.str.11.62, 2

	.type	srcend,@object          # @srcend
	.section	.rodata,"a",@progbits
	.p2align	4
srcend:
	.quad	.L.str.1.49
	.quad	.L.str.24.63
	.quad	.L.str.25
	.quad	.L.str.26
	.quad	0
	.size	srcend, 40

	.type	.L.str.24.63,@object    # @.str.24.63
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.24.63:
	.asciz	"  return (int)ret;"
	.size	.L.str.24.63, 19

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"}"
	.size	.L.str.25, 2

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"/**** End of sample code ****/"
	.size	.L.str.26, 31

	.type	.L.str.15.64,@object    # @.str.15.64
.L.str.15.64:
	.asciz	"/********* Sample code generated by the curl command line tool **********"
	.size	.L.str.15.64, 74

	.type	.L.str.16.65,@object    # @.str.16.65
.L.str.16.65:
	.asciz	" * All curl_easy_setopt() options are documented at:"
	.size	.L.str.16.65, 53

	.type	.L.str.17.66,@object    # @.str.17.66
.L.str.17.66:
	.asciz	" * https://curl.se/libcurl/c/curl_easy_setopt.html"
	.size	.L.str.17.66, 51

	.type	.L.str.18.67,@object    # @.str.18.67
.L.str.18.67:
	.asciz	" ************************************************************************/"
	.size	.L.str.18.67, 75

	.type	.L.str.19.68,@object    # @.str.19.68
.L.str.19.68:
	.asciz	"#include <curl/curl.h>"
	.size	.L.str.19.68, 23

	.type	.L.str.20.69,@object    # @.str.20.69
.L.str.20.69:
	.asciz	"int main(int argc, char *argv[])"
	.size	.L.str.20.69, 33

	.type	.L.str.21.70,@object    # @.str.21.70
.L.str.21.70:
	.asciz	"{"
	.size	.L.str.21.70, 2

	.type	.L.str.22.71,@object    # @.str.22.71
.L.str.22.71:
	.asciz	"  CURLcode ret;"
	.size	.L.str.22.71, 16

	.type	.L.str.23.72,@object    # @.str.23.72
.L.str.23.72:
	.asciz	"  CURL *hnd;"
	.size	.L.str.23.72, 13

	.type	.L.str.73,@object       # @.str.73
.L.str.73:
	.asciz	"Failed to get filetime: %s\n"
	.size	.L.str.73, 28

	.type	.L.str.1.74,@object     # @.str.1.74
.L.str.1.74:
	.asciz	"Failed to set filetime %ld on '%s': %s\n"
	.size	.L.str.1.74, 40

	.type	.L.str.77,@object       # @.str.77
.L.str.77:
	.asciz	"stdin: %s\n"
	.size	.L.str.77, 11

	.type	.L.str.7.78,@object     # @.str.7.78
.L.str.7.78:
	.asciz	"-"
	.size	.L.str.7.78, 2

	.type	.L.str.1.79,@object     # @.str.1.79
.L.str.1.79:
	.asciz	"out of memory!\n"
	.size	.L.str.1.79, 16

	.type	.L.str.2.80,@object     # @.str.2.80
.L.str.2.80:
	.asciz	")"
	.size	.L.str.2.80, 2

	.type	.L.str.3.81,@object     # @.str.3.81
.L.str.3.81:
	.asciz	"no multipart to terminate!\n"
	.size	.L.str.3.81, 28

	.type	.L.str.4.82,@object     # @.str.4.82
.L.str.4.82:
	.asciz	"error while reading standard input\n"
	.size	.L.str.4.82, 36

	.type	.L.str.5.83,@object     # @.str.5.83
.L.str.5.83:
	.asciz	"garbage at end of field specification: %s\n"
	.size	.L.str.5.83, 43

	.type	.L.str.6.84,@object     # @.str.6.84
.L.str.6.84:
	.asciz	"Illegally formatted input field!\n"
	.size	.L.str.6.84, 34

	.type	.L.str.26.85,@object    # @.str.26.85
.L.str.26.85:
	.zero	1
	.size	.L.str.26.85, 1

	.type	.L.str.8.86,@object     # @.str.8.86
.L.str.8.86:
	.asciz	"type="
	.size	.L.str.8.86, 6

	.type	.L.str.9.87,@object     # @.str.9.87
.L.str.9.87:
	.asciz	"%127[^/ ]/%127[^;, \n]"
	.size	.L.str.9.87, 22

	.type	.L.str.10.88,@object    # @.str.10.88
.L.str.10.88:
	.asciz	"Illegally formatted content-type field!\n"
	.size	.L.str.10.88, 41

	.type	.L.str.11.89,@object    # @.str.11.89
.L.str.11.89:
	.asciz	"filename="
	.size	.L.str.11.89, 10

	.type	.L.str.12.90,@object    # @.str.12.90
.L.str.12.90:
	.asciz	"headers="
	.size	.L.str.12.90, 9

	.type	.L.str.13.91,@object    # @.str.13.91
.L.str.13.91:
	.asciz	"r"
	.size	.L.str.13.91, 2

	.type	.L.str.14.92,@object    # @.str.14.92
.L.str.14.92:
	.asciz	"Cannot read from %s: %s\n"
	.size	.L.str.14.92, 25

	.type	.L.str.23.93,@object    # @.str.23.93
.L.str.23.93:
	.asciz	"Out of memory for field headers!\n"
	.size	.L.str.23.93, 34

	.type	.L.str.24.94,@object    # @.str.24.94
.L.str.24.94:
	.asciz	"Header file %s read error: %s\n"
	.size	.L.str.24.94, 31

	.type	.L.str.25.95,@object    # @.str.25.95
.L.str.25.95:
	.asciz	"File %s line %d: header too long (truncated)\n"
	.size	.L.str.25.95, 46

	.type	.L.str.15.96,@object    # @.str.15.96
.L.str.15.96:
	.asciz	"Out of memory for field header!\n"
	.size	.L.str.15.96, 33

	.type	.L.str.16.97,@object    # @.str.16.97
.L.str.16.97:
	.asciz	"encoder="
	.size	.L.str.16.97, 9

	.type	.L.str.17.98,@object    # @.str.17.98
.L.str.17.98:
	.asciz	"skip unknown form field: %s\n"
	.size	.L.str.17.98, 29

	.type	.L.str.18.99,@object    # @.str.18.99
.L.str.18.99:
	.asciz	"Field content type not allowed here: %s\n"
	.size	.L.str.18.99, 41

	.type	.L.str.19.100,@object   # @.str.19.100
.L.str.19.100:
	.asciz	"Field file name not allowed here: %s\n"
	.size	.L.str.19.100, 38

	.type	.L.str.20.101,@object   # @.str.20.101
.L.str.20.101:
	.asciz	"Field encoder not allowed here: %s\n"
	.size	.L.str.20.101, 36

	.type	.L.str.21.102,@object   # @.str.21.102
.L.str.21.102:
	.asciz	"Field headers not allowed here: %s\n"
	.size	.L.str.21.102, 36

	.type	.L.str.22.103,@object   # @.str.22.103
.L.str.22.103:
	.asciz	"Trailing data after quoted form parameter\n"
	.size	.L.str.22.103, 43

	.type	.L.str.104,@object      # @.str.104
.L.str.104:
	.asciz	"no-"
	.size	.L.str.104, 4

	.type	aliases,@object         # @aliases
	.section	.rodata,"a",@progbits
	.p2align	4
aliases:
	.quad	.L.str.39
	.quad	.L.str.40
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.41.132
	.quad	.L.str.42
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.43
	.quad	.L.str.44
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.45
	.quad	.L.str.46
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.47
	.quad	.L.str.48.133
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.49
	.quad	.L.str.50
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.51
	.quad	.L.str.52
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.53
	.quad	.L.str.54
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.55
	.quad	.L.str.56
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.57
	.quad	.L.str.58
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.59
	.quad	.L.str.60
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.61
	.quad	.L.str.62
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.63
	.quad	.L.str.64
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.65
	.quad	.L.str.66
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.67
	.quad	.L.str.68
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.69
	.quad	.L.str.70
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.71
	.quad	.L.str.72
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.73.134
	.quad	.L.str.74
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.75
	.quad	.L.str.76
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.77.135
	.quad	.L.str.78
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.79
	.quad	.L.str.80
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.81
	.quad	.L.str.82
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.83
	.quad	.L.str.84
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.85
	.quad	.L.str.86
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.87
	.quad	.L.str.88
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.89
	.quad	.L.str.90
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.91
	.quad	.L.str.92
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.93
	.quad	.L.str.94
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.95
	.quad	.L.str.96
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.97
	.quad	.L.str.98
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.99
	.quad	.L.str.100
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.101
	.quad	.L.str.102
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.103
	.quad	.L.str.104.136
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.105
	.quad	.L.str.106
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.107
	.quad	.L.str.108
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.109
	.quad	.L.str.110
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.111
	.quad	.L.str.112
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.111
	.quad	.L.str.113
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.114
	.quad	.L.str.115
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.116
	.quad	.L.str.8.112
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.117
	.quad	.L.str.118
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.119
	.quad	.L.str.120
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.121
	.quad	.L.str.122
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.123
	.quad	.L.str.124
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.123
	.quad	.L.str.125
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.126
	.quad	.L.str.127
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.128
	.quad	.L.str.129
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.130
	.quad	.L.str.131
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.132
	.quad	.L.str.133
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.134
	.quad	.L.str.135
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.136
	.quad	.L.str.137
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.138
	.quad	.L.str.139
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.140
	.quad	.L.str.141
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.142
	.quad	.L.str.143
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.144
	.quad	.L.str.145
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.146
	.quad	.L.str.147
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.148
	.quad	.L.str.149
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.150
	.quad	.L.str.151
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.152
	.quad	.L.str.153
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.154
	.quad	.L.str.155
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.156
	.quad	.L.str.157
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.158
	.quad	.L.str.159
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.160
	.quad	.L.str.161
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.162
	.quad	.L.str.163
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.164
	.quad	.L.str.165
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.166
	.quad	.L.str.167
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.166
	.quad	.L.str.168
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.169
	.quad	.L.str.170
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.171
	.quad	.L.str.172
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.173
	.quad	.L.str.174
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.175
	.quad	.L.str.176
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.177
	.quad	.L.str.178
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.179
	.quad	.L.str.180
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.181
	.quad	.L.str.182
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.183
	.quad	.L.str.184
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.185
	.quad	.L.str.186
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.187
	.quad	.L.str.188
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.189
	.quad	.L.str.190
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.191
	.quad	.L.str.192
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.193
	.quad	.L.str.194
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.195
	.quad	.L.str.196
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.197
	.quad	.L.str.198
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.199
	.quad	.L.str.200
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.201
	.quad	.L.str.202
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.203
	.quad	.L.str.204
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.205
	.quad	.L.str.206
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.207
	.quad	.L.str.208
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.209
	.quad	.L.str.210
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.211
	.quad	.L.str.212
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.213
	.quad	.L.str.214
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.215
	.quad	.L.str.216
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.217
	.quad	.L.str.218
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.219
	.quad	.L.str.220
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.221
	.quad	.L.str.222
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.223
	.quad	.L.str.224
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.225
	.quad	.L.str.226
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.227
	.quad	.L.str.228
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.229
	.quad	.L.str.230
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.229
	.quad	.L.str.231
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.232
	.quad	.L.str.233
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.234
	.quad	.L.str.235
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.236
	.quad	.L.str.237
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.238
	.quad	.L.str.239
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.240
	.quad	.L.str.241
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.242
	.quad	.L.str.243
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.244
	.quad	.L.str.245
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.246
	.quad	.L.str.247
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.248
	.quad	.L.str.249
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.250
	.quad	.L.str.251
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.252
	.quad	.L.str.253
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.254
	.quad	.L.str.255
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.256
	.quad	.L.str.257
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.258
	.quad	.L.str.259
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.260
	.quad	.L.str.261
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.262
	.quad	.L.str.263
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.264
	.quad	.L.str.265
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.266
	.quad	.L.str.267
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.268
	.quad	.L.str.269
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.270
	.quad	.L.str.271
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.272
	.quad	.L.str.273
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.274
	.quad	.L.str.275
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.276
	.quad	.L.str.277
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.278
	.quad	.L.str.279
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.280
	.quad	.L.str.281
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.282
	.quad	.L.str.283
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.284
	.quad	.L.str.285
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.286
	.quad	.L.str.287
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.288
	.quad	.L.str.289
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.290
	.quad	.L.str.291
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.292
	.quad	.L.str.293
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.294
	.quad	.L.str.295
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.296
	.quad	.L.str.297
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.298
	.quad	.L.str.299
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.300
	.quad	.L.str.301
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.302
	.quad	.L.str.303
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.304
	.quad	.L.str.305
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.306
	.quad	.L.str.307
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.308
	.quad	.L.str.309
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.310
	.quad	.L.str.311
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.312
	.quad	.L.str.313
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.314
	.quad	.L.str.315
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.316
	.quad	.L.str.317
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.318
	.quad	.L.str.319
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.320
	.quad	.L.str.321
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.322
	.quad	.L.str.323
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.324
	.quad	.L.str.325
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.326
	.quad	.L.str.327
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.328
	.quad	.L.str.329
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.330
	.quad	.L.str.331
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.332
	.quad	.L.str.333
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.334
	.quad	.L.str.335
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.336
	.quad	.L.str.337
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.338
	.quad	.L.str.339
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.340
	.quad	.L.str.341
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.342
	.quad	.L.str.343
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.344
	.quad	.L.str.345
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.346
	.quad	.L.str.347
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.348
	.quad	.L.str.349
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.350
	.quad	.L.str.351
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.352
	.quad	.L.str.353
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.354
	.quad	.L.str.355
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.356
	.quad	.L.str.357
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.358
	.quad	.L.str.359
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.360
	.quad	.L.str.361
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.362
	.quad	.L.str.363
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.364
	.quad	.L.str.365
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.366
	.quad	.L.str.367
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.368
	.quad	.L.str.369
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.370
	.quad	.L.str.371
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.372
	.quad	.L.str.373
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.374
	.quad	.L.str.375
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.376
	.quad	.L.str.377
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.378
	.quad	.L.str.379
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.380
	.quad	.L.str.381
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.382
	.quad	.L.str.383
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.384
	.quad	.L.str.385
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.386
	.quad	.L.str.387
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.388
	.quad	.L.str.389
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.390
	.quad	.L.str.391
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.392
	.quad	.L.str.393
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.394
	.quad	.L.str.395
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.396
	.quad	.L.str.397
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.398
	.quad	.L.str.399
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.400
	.quad	.L.str.401
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.402
	.quad	.L.str.403
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.404
	.quad	.L.str.405
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.406
	.quad	.L.str.407
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.408
	.quad	.L.str.409
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.410
	.quad	.L.str.411
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.412
	.quad	.L.str.413
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.414
	.quad	.L.str.415
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.416
	.quad	.L.str.417
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.418
	.quad	.L.str.419
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.420
	.quad	.L.str.421
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.422
	.quad	.L.str.423
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.424
	.quad	.L.str.425
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.426
	.quad	.L.str.427
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.428
	.quad	.L.str.429
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.430
	.quad	.L.str.431
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.432
	.quad	.L.str.433
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.434
	.quad	.L.str.435
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.436
	.quad	.L.str.437
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.438
	.quad	.L.str.439
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.440
	.quad	.L.str.441
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.442
	.quad	.L.str.443
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.444
	.quad	.L.str.445
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.446
	.quad	.L.str.447
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.448
	.quad	.L.str.449
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.450
	.quad	.L.str.451
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.452
	.quad	.L.str.453
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.454
	.quad	.L.str.455
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.456
	.quad	.L.str.457
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.458
	.quad	.L.str.459
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.460
	.quad	.L.str.461
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.462
	.quad	.L.str.463
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.464
	.quad	.L.str.465
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.466
	.quad	.L.str.467
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.468
	.quad	.L.str.469
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.470
	.quad	.L.str.471
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.472
	.quad	.L.str.473
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.474
	.quad	.L.str.475
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.476
	.quad	.L.str.477
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.478
	.quad	.L.str.479
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.480
	.quad	.L.str.481
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.482
	.quad	.L.str.483
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.22.126
	.quad	.L.str.484
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.485
	.quad	.L.str.486
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.487
	.quad	.L.str.488
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.489
	.quad	.L.str.490
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.491
	.quad	.L.str.492
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.493
	.quad	.L.str.494
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.495
	.quad	.L.str.496
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.497
	.quad	.L.str.498
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.499
	.quad	.L.str.500
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.501
	.quad	.L.str.502
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.6.110
	.quad	.L.str.503
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.504
	.quad	.L.str.505
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.506
	.quad	.L.str.507
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.508
	.quad	.L.str.509
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.510
	.quad	.L.str.511
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.512
	.quad	.L.str.513
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.514
	.quad	.L.str.515
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.516
	.quad	.L.str.517
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.518
	.quad	.L.str.519
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.520
	.quad	.L.str.521
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.522
	.quad	.L.str.523
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.524
	.quad	.L.str.525
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.36
	.quad	.L.str.526
	.long	0                       # 0x0
	.zero	4
	.size	aliases, 5952

	.type	.L.str.1.105,@object    # @.str.1.105
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1.105:
	.asciz	"The file name argument '%s' looks like a flag.\n"
	.size	.L.str.1.105, 48

	.type	.L.str.2.106,@object    # @.str.2.106
.L.str.2.106:
	.asciz	"--trace overrides an earlier trace/verbose option\n"
	.size	.L.str.2.106, 51

	.type	.L.str.3.107,@object    # @.str.3.107
.L.str.3.107:
	.asciz	"--trace-ascii overrides an earlier trace/verbose option\n"
	.size	.L.str.3.107, 57

	.type	.L.str.4.108,@object    # @.str.4.108
.L.str.4.108:
	.asciz	"rate"
	.size	.L.str.4.108, 5

	.type	.L.str.5.109,@object    # @.str.5.109
.L.str.5.109:
	.asciz	"-"
	.size	.L.str.5.109, 2

	.type	.L.str.6.110,@object    # @.str.6.110
.L.str.6.110:
	.asciz	"w"
	.size	.L.str.6.110, 2

	.type	.L.str.7.111,@object    # @.str.7.111
.L.str.7.111:
	.asciz	"Failed to open %s!\n"
	.size	.L.str.7.111, 20

	.type	.L.str.8.112,@object    # @.str.8.112
.L.str.8.112:
	.asciz	"max-filesize"
	.size	.L.str.8.112, 13

	.type	.L.str.9.113,@object    # @.str.9.113
.L.str.9.113:
	.asciz	" - %6s"
	.size	.L.str.9.113, 7

	.type	.L.str.10.114,@object   # @.str.10.114
.L.str.10.114:
	.asciz	"--metalink is disabled\n"
	.size	.L.str.10.114, 24

	.type	.L.str.11.115,@object   # @.str.11.115
.L.str.11.115:
	.asciz	"--test-event is ignored unless a debug build!\n"
	.size	.L.str.11.115, 47

	.type	.L.str.12.116,@object   # @.str.12.116
.L.str.12.116:
	.asciz	"Ignores instruction to use SSLv2\n"
	.size	.L.str.12.116, 34

	.type	.L.str.13.117,@object   # @.str.13.117
.L.str.13.117:
	.asciz	"Ignores instruction to use SSLv3\n"
	.size	.L.str.13.117, 34

	.type	.L.str.14.118,@object   # @.str.14.118
.L.str.14.118:
	.asciz	"rb"
	.size	.L.str.14.118, 3

	.type	.L.str.15.119,@object   # @.str.15.119
.L.str.15.119:
	.asciz	"Couldn't read data from file \"%s\", this makes an empty POST.\n"
	.size	.L.str.15.119, 62

	.type	.L.str.16.120,@object   # @.str.16.120
.L.str.16.120:
	.zero	1
	.size	.L.str.16.120, 1

	.type	.L.str.17.121,@object   # @.str.17.121
.L.str.17.121:
	.asciz	"%.*s=%s"
	.size	.L.str.17.121, 8

	.type	.L.str.18.122,@object   # @.str.18.122
.L.str.18.122:
	.asciz	";auto"
	.size	.L.str.18.122, 6

	.type	.L.str.19.123,@object   # @.str.19.123
.L.str.19.123:
	.asciz	"list"
	.size	.L.str.19.123, 5

	.type	.L.str.20.124,@object   # @.str.20.124
.L.str.20.124:
	.asciz	"SRP"
	.size	.L.str.20.124, 4

	.type	.L.str.21.125,@object   # @.str.21.125
.L.str.21.125:
	.asciz	"You must select either --fail or --fail-with-body, not both.\n"
	.size	.L.str.21.125, 62

	.type	.L.str.22.126,@object   # @.str.22.126
.L.str.22.126:
	.asciz	"r"
	.size	.L.str.22.126, 2

	.type	.L.str.23.127,@object   # @.str.23.127
.L.str.23.127:
	.asciz	"\r\n"
	.size	.L.str.23.127, 3

	.type	.L.str.24.128,@object   # @.str.24.128
.L.str.24.128:
	.asciz	"error trying read config from the '%s' file\n"
	.size	.L.str.24.128, 45

	.type	.L.str.25.129,@object   # @.str.25.129
.L.str.25.129:
	.asciz	"unsupported range point\n"
	.size	.L.str.25.129, 25

	.type	.L.str.26.130,@object   # @.str.26.130
.L.str.26.130:
	.asciz	"A specified range MUST include at least one dash (-). Appending one for you!\n"
	.size	.L.str.26.130, 78

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"%ld-"
	.size	.L.str.27, 5

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"Invalid character is found in given range. A specified range MUST have only digits in 'start'-'stop'. The server's response to this request is uncertain.\n"
	.size	.L.str.28, 155

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"%"
	.size	.L.str.29, 2

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"-v, --verbose overrides an earlier trace/verbose option\n"
	.size	.L.str.30, 57

	.type	.L.str.31.131,@object   # @.str.31.131
.L.str.31.131:
	.asciz	"<stdin>"
	.size	.L.str.31.131, 8

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"Failed to read %s"
	.size	.L.str.32, 18

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	"Illegal date format for -z, --time-cond (and not a file name). Disabling time condition. See curl_getdate(3) for valid date syntax.\n"
	.size	.L.str.33, 133

	.type	.L.str.1502,@object     # @.str.1502
.L.str.1502:
	.asciz	".curlrc"
	.size	.L.str.1502, 8

	.type	.L.str.1.1503,@object   # @.str.1.1503
.L.str.1.1503:
	.asciz	"%s%s.curlrc"
	.size	.L.str.1.1503, 12

	.type	.L.str.2.1504,@object   # @.str.2.1504
.L.str.2.1504:
	.asciz	"/"
	.size	.L.str.2.1504, 2

	.type	.L.str.3.1505,@object   # @.str.3.1505
.L.str.3.1505:
	.asciz	"-"
	.size	.L.str.3.1505, 2

	.type	.L.str.4.1506,@object   # @.str.4.1506
.L.str.4.1506:
	.asciz	"r"
	.size	.L.str.4.1506, 2

	.type	.L.str.5.1507,@object   # @.str.5.1507
.L.str.5.1507:
	.asciz	"%s:%d: warning: '%s' uses unquoted whitespace in the line that may cause side-effects!\n"
	.size	.L.str.5.1507, 88

	.type	.L.str.6.1508,@object   # @.str.6.1508
.L.str.6.1508:
	.asciz	"<stdin>"
	.size	.L.str.6.1508, 8

	.type	.L.str.7.1509,@object   # @.str.7.1509
.L.str.7.1509:
	.asciz	"%s:%d: warning: '%s' %s\n"
	.size	.L.str.7.1509, 25

	.type	.Lswitch.table.param2text,@object # @switch.table.param2text
	.section	.rodata,"a",@progbits
	.p2align	3
.Lswitch.table.param2text:
	.quad	.L.str.2.1068
	.quad	.L.str.1.1069
	.quad	.L.str.3.1070
	.quad	.L.str.4.1071
	.quad	.L.str.15.1067
	.quad	.L.str.15.1067
	.quad	.L.str.15.1067
	.quad	.L.str.15.1067
	.quad	.L.str.1072
	.quad	.L.str.5.1073
	.quad	.L.str.6.1074
	.quad	.L.str.7.1075
	.quad	.L.str.8.1076
	.quad	.L.str.9.1077
	.quad	.L.str.15.1067
	.quad	.L.str.10.1078
	.quad	.L.str.11.1079
	.quad	.L.str.12.1080
	.quad	.L.str.13.1081
	.quad	.L.str.14.1082
	.size	.Lswitch.table.param2text, 160

	.type	.L.str.15.1067,@object  # @.str.15.1067
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.15.1067:
	.asciz	"unknown error"
	.size	.L.str.15.1067, 14

	.type	.L.str.2.1068,@object   # @.str.2.1068
.L.str.2.1068:
	.asciz	"is ambiguous"
	.size	.L.str.2.1068, 13

	.type	.L.str.1.1069,@object   # @.str.1.1069
.L.str.1.1069:
	.asciz	"is unknown"
	.size	.L.str.1.1069, 11

	.type	.L.str.3.1070,@object   # @.str.3.1070
.L.str.3.1070:
	.asciz	"requires parameter"
	.size	.L.str.3.1070, 19

	.type	.L.str.4.1071,@object   # @.str.4.1071
.L.str.4.1071:
	.asciz	"is badly used here"
	.size	.L.str.4.1071, 19

	.type	.L.str.1072,@object     # @.str.1072
.L.str.1072:
	.asciz	"had unsupported trailing garbage"
	.size	.L.str.1072, 33

	.type	.L.str.5.1073,@object   # @.str.5.1073
.L.str.5.1073:
	.asciz	"expected a proper numerical parameter"
	.size	.L.str.5.1073, 38

	.type	.L.str.6.1074,@object   # @.str.6.1074
.L.str.6.1074:
	.asciz	"expected a positive numerical parameter"
	.size	.L.str.6.1074, 40

	.type	.L.str.7.1075,@object   # @.str.7.1075
.L.str.7.1075:
	.asciz	"the installed libcurl version doesn't support this"
	.size	.L.str.7.1075, 51

	.type	.L.str.8.1076,@object   # @.str.8.1076
.L.str.8.1076:
	.asciz	"a specified protocol is unsupported by libcurl"
	.size	.L.str.8.1076, 47

	.type	.L.str.9.1077,@object   # @.str.9.1077
.L.str.9.1077:
	.asciz	"out of memory"
	.size	.L.str.9.1077, 14

	.type	.L.str.10.1078,@object  # @.str.10.1078
.L.str.10.1078:
	.asciz	"the given option can't be reversed with a --no- prefix"
	.size	.L.str.10.1078, 55

	.type	.L.str.11.1079,@object  # @.str.11.1079
.L.str.11.1079:
	.asciz	"too large number"
	.size	.L.str.11.1079, 17

	.type	.L.str.12.1080,@object  # @.str.12.1080
.L.str.12.1080:
	.asciz	"used '--no-' for option that isn't a boolean"
	.size	.L.str.12.1080, 45

	.type	.L.str.13.1081,@object  # @.str.13.1081
.L.str.13.1081:
	.asciz	"--include and --remote-header-name cannot be combined"
	.size	.L.str.13.1081, 54

	.type	.L.str.14.1082,@object  # @.str.14.1082
.L.str.14.1082:
	.asciz	"--continue-at and --remote-header-name cannot be combined"
	.size	.L.str.14.1082, 58

	.type	.L.str.1097,@object     # @.str.1097
.L.str.1097:
	.asciz	"CURL_HOME"
	.size	.L.str.1097, 10

	.type	.L.str.1.1098,@object   # @.str.1.1098
.L.str.1.1098:
	.asciz	"XDG_CONFIG_HOME"
	.size	.L.str.1.1098, 16

	.type	.L.str.2.1099,@object   # @.str.2.1099
.L.str.2.1099:
	.asciz	"%s/%s"
	.size	.L.str.2.1099, 6

	.type	.L.str.3.1100,@object   # @.str.3.1100
.L.str.3.1100:
	.asciz	"HOME"
	.size	.L.str.3.1100, 5

	.type	.L.str.16.1085,@object  # @.str.16.1085
.L.str.16.1085:
	.zero	1
	.size	.L.str.16.1085, 1

	.type	.L.str.17.1086,@object  # @.str.17.1086
.L.str.17.1086:
	.asciz	"GET (-G, --get)"
	.size	.L.str.17.1086, 16

	.type	.L.str.18.1087,@object  # @.str.18.1087
.L.str.18.1087:
	.asciz	"HEAD (-I, --head)"
	.size	.L.str.18.1087, 18

	.type	.L.str.19.1088,@object  # @.str.19.1088
.L.str.19.1088:
	.asciz	"multipart formpost (-F, --form)"
	.size	.L.str.19.1088, 32

	.type	.L.str.20.1089,@object  # @.str.20.1089
.L.str.20.1089:
	.asciz	"POST (-d, --data)"
	.size	.L.str.20.1089, 18

	.type	.L.str.21.1090,@object  # @.str.21.1090
.L.str.21.1090:
	.asciz	"You can only select one HTTP request method! You asked for both %s and %s.\n"
	.size	.L.str.21.1090, 76

	.type	.L.str.529,@object      # @.str.529
.L.str.529:
	.asciz	"pkcs11:"
	.size	.L.str.529, 8

	.type	.L.str.530,@object      # @.str.530
.L.str.530:
	.asciz	":\\"
	.size	.L.str.530, 3

	.type	str2tls_max.tls_max_array,@object # @str2tls_max.tls_max_array
	.section	.rodata,"a",@progbits
	.p2align	4
str2tls_max.tls_max_array:
	.quad	.L.str.39.1495
	.quad	65536                   # 0x10000
	.quad	.L.str.40.1496
	.quad	262144                  # 0x40000
	.quad	.L.str.41.1497
	.quad	327680                  # 0x50000
	.quad	.L.str.42.1498
	.quad	393216                  # 0x60000
	.quad	.L.str.43.1499
	.quad	458752                  # 0x70000
	.size	str2tls_max.tls_max_array, 80

	.type	.L.str.39.1495,@object  # @.str.39.1495
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.39.1495:
	.asciz	"default"
	.size	.L.str.39.1495, 8

	.type	.L.str.40.1496,@object  # @.str.40.1496
.L.str.40.1496:
	.asciz	"1.0"
	.size	.L.str.40.1496, 4

	.type	.L.str.41.1497,@object  # @.str.41.1497
.L.str.41.1497:
	.asciz	"1.1"
	.size	.L.str.41.1497, 4

	.type	.L.str.42.1498,@object  # @.str.42.1498
.L.str.42.1498:
	.asciz	"1.2"
	.size	.L.str.42.1498, 4

	.type	.L.str.43.1499,@object  # @.str.43.1499
.L.str.43.1499:
	.asciz	"1.3"
	.size	.L.str.43.1499, 4

	.type	.L.str.32.1480,@object  # @.str.32.1480
.L.str.32.1480:
	.asciz	"none"
	.size	.L.str.32.1480, 5

	.type	.L.str.33.1481,@object  # @.str.33.1481
.L.str.33.1481:
	.asciz	"policy"
	.size	.L.str.33.1481, 7

	.type	.L.str.34.1482,@object  # @.str.34.1482
.L.str.34.1482:
	.asciz	"always"
	.size	.L.str.34.1482, 7

	.type	.L.str.35.1483,@object  # @.str.35.1483
.L.str.35.1483:
	.asciz	"unrecognized delegation method '%s', using none\n"
	.size	.L.str.35.1483, 49

	.type	.L.str.1436,@object     # @.str.1436
.L.str.1436:
	.asciz	","
	.size	.L.str.1436, 2

	.type	.L.str.1.1437,@object   # @.str.1.1437
.L.str.1.1437:
	.asciz	"all"
	.size	.L.str.1.1437, 4

	.type	proto2num.protos,@object # @proto2num.protos
	.section	.rodata,"a",@progbits
	.p2align	4
proto2num.protos:
	.quad	.L.str.1.1437
	.quad	-1                      # 0xffffffffffffffff
	.quad	.L.str.2.1439
	.quad	1                       # 0x1
	.quad	.L.str.3.1440
	.quad	2                       # 0x2
	.quad	.L.str.4.1441
	.quad	4                       # 0x4
	.quad	.L.str.5.1442
	.quad	8                       # 0x8
	.quad	.L.str.6.1443
	.quad	16                      # 0x10
	.quad	.L.str.7.1444
	.quad	32                      # 0x20
	.quad	.L.str.8.1445
	.quad	64                      # 0x40
	.quad	.L.str.9.1446
	.quad	128                     # 0x80
	.quad	.L.str.10.1447
	.quad	256                     # 0x100
	.quad	.L.str.11.1448
	.quad	512                     # 0x200
	.quad	.L.str.12.1449
	.quad	1024                    # 0x400
	.quad	.L.str.13.1450
	.quad	2048                    # 0x800
	.quad	.L.str.14.1451
	.quad	4096                    # 0x1000
	.quad	.L.str.15.1452
	.quad	8192                    # 0x2000
	.quad	.L.str.16.1453
	.quad	16384                   # 0x4000
	.quad	.L.str.17.1454
	.quad	32768                   # 0x8000
	.quad	.L.str.18.1455
	.quad	65536                   # 0x10000
	.quad	.L.str.19.1456
	.quad	131072                  # 0x20000
	.quad	.L.str.20.1457
	.quad	262144                  # 0x40000
	.quad	.L.str.21.1458
	.quad	33554432                # 0x2000000
	.quad	.L.str.22.1459
	.quad	67108864                # 0x4000000
	.quad	.L.str.23.1460
	.quad	134217728               # 0x8000000
	.zero	16
	.size	proto2num.protos, 384

	.type	.L.str.24.1438,@object  # @.str.24.1438
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.24.1438:
	.asciz	"unrecognized protocol '%s'\n"
	.size	.L.str.24.1438, 28

	.type	.L.str.2.1439,@object   # @.str.2.1439
.L.str.2.1439:
	.asciz	"http"
	.size	.L.str.2.1439, 5

	.type	.L.str.3.1440,@object   # @.str.3.1440
.L.str.3.1440:
	.asciz	"https"
	.size	.L.str.3.1440, 6

	.type	.L.str.4.1441,@object   # @.str.4.1441
.L.str.4.1441:
	.asciz	"ftp"
	.size	.L.str.4.1441, 4

	.type	.L.str.5.1442,@object   # @.str.5.1442
.L.str.5.1442:
	.asciz	"ftps"
	.size	.L.str.5.1442, 5

	.type	.L.str.6.1443,@object   # @.str.6.1443
.L.str.6.1443:
	.asciz	"scp"
	.size	.L.str.6.1443, 4

	.type	.L.str.7.1444,@object   # @.str.7.1444
.L.str.7.1444:
	.asciz	"sftp"
	.size	.L.str.7.1444, 5

	.type	.L.str.8.1445,@object   # @.str.8.1445
.L.str.8.1445:
	.asciz	"telnet"
	.size	.L.str.8.1445, 7

	.type	.L.str.9.1446,@object   # @.str.9.1446
.L.str.9.1446:
	.asciz	"ldap"
	.size	.L.str.9.1446, 5

	.type	.L.str.10.1447,@object  # @.str.10.1447
.L.str.10.1447:
	.asciz	"ldaps"
	.size	.L.str.10.1447, 6

	.type	.L.str.11.1448,@object  # @.str.11.1448
.L.str.11.1448:
	.asciz	"dict"
	.size	.L.str.11.1448, 5

	.type	.L.str.12.1449,@object  # @.str.12.1449
.L.str.12.1449:
	.asciz	"file"
	.size	.L.str.12.1449, 5

	.type	.L.str.13.1450,@object  # @.str.13.1450
.L.str.13.1450:
	.asciz	"tftp"
	.size	.L.str.13.1450, 5

	.type	.L.str.14.1451,@object  # @.str.14.1451
.L.str.14.1451:
	.asciz	"imap"
	.size	.L.str.14.1451, 5

	.type	.L.str.15.1452,@object  # @.str.15.1452
.L.str.15.1452:
	.asciz	"imaps"
	.size	.L.str.15.1452, 6

	.type	.L.str.16.1453,@object  # @.str.16.1453
.L.str.16.1453:
	.asciz	"pop3"
	.size	.L.str.16.1453, 5

	.type	.L.str.17.1454,@object  # @.str.17.1454
.L.str.17.1454:
	.asciz	"pop3s"
	.size	.L.str.17.1454, 6

	.type	.L.str.18.1455,@object  # @.str.18.1455
.L.str.18.1455:
	.asciz	"smtp"
	.size	.L.str.18.1455, 5

	.type	.L.str.19.1456,@object  # @.str.19.1456
.L.str.19.1456:
	.asciz	"smtps"
	.size	.L.str.19.1456, 6

	.type	.L.str.20.1457,@object  # @.str.20.1457
.L.str.20.1457:
	.asciz	"rtsp"
	.size	.L.str.20.1457, 5

	.type	.L.str.21.1458,@object  # @.str.21.1458
.L.str.21.1458:
	.asciz	"gopher"
	.size	.L.str.21.1458, 7

	.type	.L.str.22.1459,@object  # @.str.22.1459
.L.str.22.1459:
	.asciz	"smb"
	.size	.L.str.22.1459, 4

	.type	.L.str.23.1460,@object  # @.str.23.1460
.L.str.23.1460:
	.asciz	"smbs"
	.size	.L.str.23.1460, 5

	.type	.L.str.29.1475,@object  # @.str.29.1475
.L.str.29.1475:
	.asciz	"passive"
	.size	.L.str.29.1475, 8

	.type	.L.str.30.1476,@object  # @.str.30.1476
.L.str.30.1476:
	.asciz	"active"
	.size	.L.str.30.1476, 7

	.type	.L.str.31.1477,@object  # @.str.31.1477
.L.str.31.1477:
	.asciz	"unrecognized ftp CCC method '%s', using default\n"
	.size	.L.str.31.1477, 49

	.type	.L.str.25.1469,@object  # @.str.25.1469
.L.str.25.1469:
	.asciz	"singlecwd"
	.size	.L.str.25.1469, 10

	.type	.L.str.26.1470,@object  # @.str.26.1470
.L.str.26.1470:
	.asciz	"nocwd"
	.size	.L.str.26.1470, 6

	.type	.L.str.27.1471,@object  # @.str.27.1471
.L.str.27.1471:
	.asciz	"multicwd"
	.size	.L.str.27.1471, 9

	.type	.L.str.28.1472,@object  # @.str.28.1472
.L.str.28.1472:
	.asciz	"unrecognized ftp file method '%s', using default\n"
	.size	.L.str.28.1472, 50

	.type	new_getout.outnum,@object # @new_getout.outnum
	.local	new_getout.outnum
	.comm	new_getout.outnum,4,4
	.type	.L.str.527,@object      # @.str.527
.L.str.527:
	.asciz	"invalid number specified for %s\n"
	.size	.L.str.527, 33

	.type	.L.str.292,@object      # @.str.292
.L.str.292:
	.asciz	"b"
	.size	.L.str.292, 2

	.type	.L.str.528,@object      # @.str.528
.L.str.528:
	.asciz	"unsupported %s unit. Use G, M, K or B!\n"
	.size	.L.str.528, 40

	.type	.L.str.39,@object       # @.str.39
.L.str.39:
	.asciz	"*@"
	.size	.L.str.39, 3

	.type	.L.str.40,@object       # @.str.40
.L.str.40:
	.asciz	"url"
	.size	.L.str.40, 4

	.type	.L.str.41.132,@object   # @.str.41.132
.L.str.41.132:
	.asciz	"*4"
	.size	.L.str.41.132, 3

	.type	.L.str.42,@object       # @.str.42
.L.str.42:
	.asciz	"dns-ipv4-addr"
	.size	.L.str.42, 14

	.type	.L.str.43,@object       # @.str.43
.L.str.43:
	.asciz	"*6"
	.size	.L.str.43, 3

	.type	.L.str.44,@object       # @.str.44
.L.str.44:
	.asciz	"dns-ipv6-addr"
	.size	.L.str.44, 14

	.type	.L.str.45,@object       # @.str.45
.L.str.45:
	.asciz	"*a"
	.size	.L.str.45, 3

	.type	.L.str.46,@object       # @.str.46
.L.str.46:
	.asciz	"random-file"
	.size	.L.str.46, 12

	.type	.L.str.47,@object       # @.str.47
.L.str.47:
	.asciz	"*b"
	.size	.L.str.47, 3

	.type	.L.str.48.133,@object   # @.str.48.133
.L.str.48.133:
	.asciz	"egd-file"
	.size	.L.str.48.133, 9

	.type	.L.str.49,@object       # @.str.49
.L.str.49:
	.asciz	"*B"
	.size	.L.str.49, 3

	.type	.L.str.50,@object       # @.str.50
.L.str.50:
	.asciz	"oauth2-bearer"
	.size	.L.str.50, 14

	.type	.L.str.51,@object       # @.str.51
.L.str.51:
	.asciz	"*c"
	.size	.L.str.51, 3

	.type	.L.str.52,@object       # @.str.52
.L.str.52:
	.asciz	"connect-timeout"
	.size	.L.str.52, 16

	.type	.L.str.53,@object       # @.str.53
.L.str.53:
	.asciz	"*C"
	.size	.L.str.53, 3

	.type	.L.str.54,@object       # @.str.54
.L.str.54:
	.asciz	"doh-url"
	.size	.L.str.54, 8

	.type	.L.str.55,@object       # @.str.55
.L.str.55:
	.asciz	"*d"
	.size	.L.str.55, 3

	.type	.L.str.56,@object       # @.str.56
.L.str.56:
	.asciz	"ciphers"
	.size	.L.str.56, 8

	.type	.L.str.57,@object       # @.str.57
.L.str.57:
	.asciz	"*D"
	.size	.L.str.57, 3

	.type	.L.str.58,@object       # @.str.58
.L.str.58:
	.asciz	"dns-interface"
	.size	.L.str.58, 14

	.type	.L.str.59,@object       # @.str.59
.L.str.59:
	.asciz	"*e"
	.size	.L.str.59, 3

	.type	.L.str.60,@object       # @.str.60
.L.str.60:
	.asciz	"disable-epsv"
	.size	.L.str.60, 13

	.type	.L.str.61,@object       # @.str.61
.L.str.61:
	.asciz	"*f"
	.size	.L.str.61, 3

	.type	.L.str.62,@object       # @.str.62
.L.str.62:
	.asciz	"disallow-username-in-url"
	.size	.L.str.62, 25

	.type	.L.str.63,@object       # @.str.63
.L.str.63:
	.asciz	"*E"
	.size	.L.str.63, 3

	.type	.L.str.64,@object       # @.str.64
.L.str.64:
	.asciz	"epsv"
	.size	.L.str.64, 5

	.type	.L.str.65,@object       # @.str.65
.L.str.65:
	.asciz	"*F"
	.size	.L.str.65, 3

	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"dns-servers"
	.size	.L.str.66, 12

	.type	.L.str.67,@object       # @.str.67
.L.str.67:
	.asciz	"*g"
	.size	.L.str.67, 3

	.type	.L.str.68,@object       # @.str.68
.L.str.68:
	.asciz	"trace"
	.size	.L.str.68, 6

	.type	.L.str.69,@object       # @.str.69
.L.str.69:
	.asciz	"*G"
	.size	.L.str.69, 3

	.type	.L.str.70,@object       # @.str.70
.L.str.70:
	.asciz	"npn"
	.size	.L.str.70, 4

	.type	.L.str.71,@object       # @.str.71
.L.str.71:
	.asciz	"*h"
	.size	.L.str.71, 3

	.type	.L.str.72,@object       # @.str.72
.L.str.72:
	.asciz	"trace-ascii"
	.size	.L.str.72, 12

	.type	.L.str.73.134,@object   # @.str.73.134
.L.str.73.134:
	.asciz	"*H"
	.size	.L.str.73.134, 3

	.type	.L.str.74,@object       # @.str.74
.L.str.74:
	.asciz	"alpn"
	.size	.L.str.74, 5

	.type	.L.str.75,@object       # @.str.75
.L.str.75:
	.asciz	"*i"
	.size	.L.str.75, 3

	.type	.L.str.76,@object       # @.str.76
.L.str.76:
	.asciz	"limit-rate"
	.size	.L.str.76, 11

	.type	.L.str.77.135,@object   # @.str.77.135
.L.str.77.135:
	.asciz	"*j"
	.size	.L.str.77.135, 3

	.type	.L.str.78,@object       # @.str.78
.L.str.78:
	.asciz	"compressed"
	.size	.L.str.78, 11

	.type	.L.str.79,@object       # @.str.79
.L.str.79:
	.asciz	"*J"
	.size	.L.str.79, 3

	.type	.L.str.80,@object       # @.str.80
.L.str.80:
	.asciz	"tr-encoding"
	.size	.L.str.80, 12

	.type	.L.str.81,@object       # @.str.81
.L.str.81:
	.asciz	"*k"
	.size	.L.str.81, 3

	.type	.L.str.82,@object       # @.str.82
.L.str.82:
	.asciz	"digest"
	.size	.L.str.82, 7

	.type	.L.str.83,@object       # @.str.83
.L.str.83:
	.asciz	"*l"
	.size	.L.str.83, 3

	.type	.L.str.84,@object       # @.str.84
.L.str.84:
	.asciz	"negotiate"
	.size	.L.str.84, 10

	.type	.L.str.85,@object       # @.str.85
.L.str.85:
	.asciz	"*m"
	.size	.L.str.85, 3

	.type	.L.str.86,@object       # @.str.86
.L.str.86:
	.asciz	"ntlm"
	.size	.L.str.86, 5

	.type	.L.str.87,@object       # @.str.87
.L.str.87:
	.asciz	"*M"
	.size	.L.str.87, 3

	.type	.L.str.88,@object       # @.str.88
.L.str.88:
	.asciz	"ntlm-wb"
	.size	.L.str.88, 8

	.type	.L.str.89,@object       # @.str.89
.L.str.89:
	.asciz	"*n"
	.size	.L.str.89, 3

	.type	.L.str.90,@object       # @.str.90
.L.str.90:
	.asciz	"basic"
	.size	.L.str.90, 6

	.type	.L.str.91,@object       # @.str.91
.L.str.91:
	.asciz	"*o"
	.size	.L.str.91, 3

	.type	.L.str.92,@object       # @.str.92
.L.str.92:
	.asciz	"anyauth"
	.size	.L.str.92, 8

	.type	.L.str.93,@object       # @.str.93
.L.str.93:
	.asciz	"*q"
	.size	.L.str.93, 3

	.type	.L.str.94,@object       # @.str.94
.L.str.94:
	.asciz	"ftp-create-dirs"
	.size	.L.str.94, 16

	.type	.L.str.95,@object       # @.str.95
.L.str.95:
	.asciz	"*r"
	.size	.L.str.95, 3

	.type	.L.str.96,@object       # @.str.96
.L.str.96:
	.asciz	"create-dirs"
	.size	.L.str.96, 12

	.type	.L.str.97,@object       # @.str.97
.L.str.97:
	.asciz	"*R"
	.size	.L.str.97, 3

	.type	.L.str.98,@object       # @.str.98
.L.str.98:
	.asciz	"create-file-mode"
	.size	.L.str.98, 17

	.type	.L.str.99,@object       # @.str.99
.L.str.99:
	.asciz	"*s"
	.size	.L.str.99, 3

	.type	.L.str.100,@object      # @.str.100
.L.str.100:
	.asciz	"max-redirs"
	.size	.L.str.100, 11

	.type	.L.str.101,@object      # @.str.101
.L.str.101:
	.asciz	"*t"
	.size	.L.str.101, 3

	.type	.L.str.102,@object      # @.str.102
.L.str.102:
	.asciz	"proxy-ntlm"
	.size	.L.str.102, 11

	.type	.L.str.103,@object      # @.str.103
.L.str.103:
	.asciz	"*u"
	.size	.L.str.103, 3

	.type	.L.str.104.136,@object  # @.str.104.136
.L.str.104.136:
	.asciz	"crlf"
	.size	.L.str.104.136, 5

	.type	.L.str.105,@object      # @.str.105
.L.str.105:
	.asciz	"*v"
	.size	.L.str.105, 3

	.type	.L.str.106,@object      # @.str.106
.L.str.106:
	.asciz	"stderr"
	.size	.L.str.106, 7

	.type	.L.str.107,@object      # @.str.107
.L.str.107:
	.asciz	"*V"
	.size	.L.str.107, 3

	.type	.L.str.108,@object      # @.str.108
.L.str.108:
	.asciz	"aws-sigv4"
	.size	.L.str.108, 10

	.type	.L.str.109,@object      # @.str.109
.L.str.109:
	.asciz	"*w"
	.size	.L.str.109, 3

	.type	.L.str.110,@object      # @.str.110
.L.str.110:
	.asciz	"interface"
	.size	.L.str.110, 10

	.type	.L.str.111,@object      # @.str.111
.L.str.111:
	.asciz	"*x"
	.size	.L.str.111, 3

	.type	.L.str.112,@object      # @.str.112
.L.str.112:
	.asciz	"krb"
	.size	.L.str.112, 4

	.type	.L.str.113,@object      # @.str.113
.L.str.113:
	.asciz	"krb4"
	.size	.L.str.113, 5

	.type	.L.str.114,@object      # @.str.114
.L.str.114:
	.asciz	"*X"
	.size	.L.str.114, 3

	.type	.L.str.115,@object      # @.str.115
.L.str.115:
	.asciz	"haproxy-protocol"
	.size	.L.str.115, 17

	.type	.L.str.116,@object      # @.str.116
.L.str.116:
	.asciz	"*y"
	.size	.L.str.116, 3

	.type	.L.str.117,@object      # @.str.117
.L.str.117:
	.asciz	"*z"
	.size	.L.str.117, 3

	.type	.L.str.118,@object      # @.str.118
.L.str.118:
	.asciz	"disable-eprt"
	.size	.L.str.118, 13

	.type	.L.str.119,@object      # @.str.119
.L.str.119:
	.asciz	"*Z"
	.size	.L.str.119, 3

	.type	.L.str.120,@object      # @.str.120
.L.str.120:
	.asciz	"eprt"
	.size	.L.str.120, 5

	.type	.L.str.121,@object      # @.str.121
.L.str.121:
	.asciz	"*~"
	.size	.L.str.121, 3

	.type	.L.str.122,@object      # @.str.122
.L.str.122:
	.asciz	"xattr"
	.size	.L.str.122, 6

	.type	.L.str.123,@object      # @.str.123
.L.str.123:
	.asciz	"$a"
	.size	.L.str.123, 3

	.type	.L.str.124,@object      # @.str.124
.L.str.124:
	.asciz	"ftp-ssl"
	.size	.L.str.124, 8

	.type	.L.str.125,@object      # @.str.125
.L.str.125:
	.asciz	"ssl"
	.size	.L.str.125, 4

	.type	.L.str.126,@object      # @.str.126
.L.str.126:
	.asciz	"$b"
	.size	.L.str.126, 3

	.type	.L.str.127,@object      # @.str.127
.L.str.127:
	.asciz	"ftp-pasv"
	.size	.L.str.127, 9

	.type	.L.str.128,@object      # @.str.128
.L.str.128:
	.asciz	"$c"
	.size	.L.str.128, 3

	.type	.L.str.129,@object      # @.str.129
.L.str.129:
	.asciz	"socks5"
	.size	.L.str.129, 7

	.type	.L.str.130,@object      # @.str.130
.L.str.130:
	.asciz	"$d"
	.size	.L.str.130, 3

	.type	.L.str.131,@object      # @.str.131
.L.str.131:
	.asciz	"tcp-nodelay"
	.size	.L.str.131, 12

	.type	.L.str.132,@object      # @.str.132
.L.str.132:
	.asciz	"$e"
	.size	.L.str.132, 3

	.type	.L.str.133,@object      # @.str.133
.L.str.133:
	.asciz	"proxy-digest"
	.size	.L.str.133, 13

	.type	.L.str.134,@object      # @.str.134
.L.str.134:
	.asciz	"$f"
	.size	.L.str.134, 3

	.type	.L.str.135,@object      # @.str.135
.L.str.135:
	.asciz	"proxy-basic"
	.size	.L.str.135, 12

	.type	.L.str.136,@object      # @.str.136
.L.str.136:
	.asciz	"$g"
	.size	.L.str.136, 3

	.type	.L.str.137,@object      # @.str.137
.L.str.137:
	.asciz	"retry"
	.size	.L.str.137, 6

	.type	.L.str.138,@object      # @.str.138
.L.str.138:
	.asciz	"$V"
	.size	.L.str.138, 3

	.type	.L.str.139,@object      # @.str.139
.L.str.139:
	.asciz	"retry-connrefused"
	.size	.L.str.139, 18

	.type	.L.str.140,@object      # @.str.140
.L.str.140:
	.asciz	"$h"
	.size	.L.str.140, 3

	.type	.L.str.141,@object      # @.str.141
.L.str.141:
	.asciz	"retry-delay"
	.size	.L.str.141, 12

	.type	.L.str.142,@object      # @.str.142
.L.str.142:
	.asciz	"$i"
	.size	.L.str.142, 3

	.type	.L.str.143,@object      # @.str.143
.L.str.143:
	.asciz	"retry-max-time"
	.size	.L.str.143, 15

	.type	.L.str.144,@object      # @.str.144
.L.str.144:
	.asciz	"$k"
	.size	.L.str.144, 3

	.type	.L.str.145,@object      # @.str.145
.L.str.145:
	.asciz	"proxy-negotiate"
	.size	.L.str.145, 16

	.type	.L.str.146,@object      # @.str.146
.L.str.146:
	.asciz	"$m"
	.size	.L.str.146, 3

	.type	.L.str.147,@object      # @.str.147
.L.str.147:
	.asciz	"ftp-account"
	.size	.L.str.147, 12

	.type	.L.str.148,@object      # @.str.148
.L.str.148:
	.asciz	"$n"
	.size	.L.str.148, 3

	.type	.L.str.149,@object      # @.str.149
.L.str.149:
	.asciz	"proxy-anyauth"
	.size	.L.str.149, 14

	.type	.L.str.150,@object      # @.str.150
.L.str.150:
	.asciz	"$o"
	.size	.L.str.150, 3

	.type	.L.str.151,@object      # @.str.151
.L.str.151:
	.asciz	"trace-time"
	.size	.L.str.151, 11

	.type	.L.str.152,@object      # @.str.152
.L.str.152:
	.asciz	"$p"
	.size	.L.str.152, 3

	.type	.L.str.153,@object      # @.str.153
.L.str.153:
	.asciz	"ignore-content-length"
	.size	.L.str.153, 22

	.type	.L.str.154,@object      # @.str.154
.L.str.154:
	.asciz	"$q"
	.size	.L.str.154, 3

	.type	.L.str.155,@object      # @.str.155
.L.str.155:
	.asciz	"ftp-skip-pasv-ip"
	.size	.L.str.155, 17

	.type	.L.str.156,@object      # @.str.156
.L.str.156:
	.asciz	"$r"
	.size	.L.str.156, 3

	.type	.L.str.157,@object      # @.str.157
.L.str.157:
	.asciz	"ftp-method"
	.size	.L.str.157, 11

	.type	.L.str.158,@object      # @.str.158
.L.str.158:
	.asciz	"$s"
	.size	.L.str.158, 3

	.type	.L.str.159,@object      # @.str.159
.L.str.159:
	.asciz	"local-port"
	.size	.L.str.159, 11

	.type	.L.str.160,@object      # @.str.160
.L.str.160:
	.asciz	"$t"
	.size	.L.str.160, 3

	.type	.L.str.161,@object      # @.str.161
.L.str.161:
	.asciz	"socks4"
	.size	.L.str.161, 7

	.type	.L.str.162,@object      # @.str.162
.L.str.162:
	.asciz	"$T"
	.size	.L.str.162, 3

	.type	.L.str.163,@object      # @.str.163
.L.str.163:
	.asciz	"socks4a"
	.size	.L.str.163, 8

	.type	.L.str.164,@object      # @.str.164
.L.str.164:
	.asciz	"$u"
	.size	.L.str.164, 3

	.type	.L.str.165,@object      # @.str.165
.L.str.165:
	.asciz	"ftp-alternative-to-user"
	.size	.L.str.165, 24

	.type	.L.str.166,@object      # @.str.166
.L.str.166:
	.asciz	"$v"
	.size	.L.str.166, 3

	.type	.L.str.167,@object      # @.str.167
.L.str.167:
	.asciz	"ftp-ssl-reqd"
	.size	.L.str.167, 13

	.type	.L.str.168,@object      # @.str.168
.L.str.168:
	.asciz	"ssl-reqd"
	.size	.L.str.168, 9

	.type	.L.str.169,@object      # @.str.169
.L.str.169:
	.asciz	"$w"
	.size	.L.str.169, 3

	.type	.L.str.170,@object      # @.str.170
.L.str.170:
	.asciz	"sessionid"
	.size	.L.str.170, 10

	.type	.L.str.171,@object      # @.str.171
.L.str.171:
	.asciz	"$x"
	.size	.L.str.171, 3

	.type	.L.str.172,@object      # @.str.172
.L.str.172:
	.asciz	"ftp-ssl-control"
	.size	.L.str.172, 16

	.type	.L.str.173,@object      # @.str.173
.L.str.173:
	.asciz	"$y"
	.size	.L.str.173, 3

	.type	.L.str.174,@object      # @.str.174
.L.str.174:
	.asciz	"ftp-ssl-ccc"
	.size	.L.str.174, 12

	.type	.L.str.175,@object      # @.str.175
.L.str.175:
	.asciz	"$j"
	.size	.L.str.175, 3

	.type	.L.str.176,@object      # @.str.176
.L.str.176:
	.asciz	"ftp-ssl-ccc-mode"
	.size	.L.str.176, 17

	.type	.L.str.177,@object      # @.str.177
.L.str.177:
	.asciz	"$z"
	.size	.L.str.177, 3

	.type	.L.str.178,@object      # @.str.178
.L.str.178:
	.asciz	"libcurl"
	.size	.L.str.178, 8

	.type	.L.str.179,@object      # @.str.179
.L.str.179:
	.asciz	"$#"
	.size	.L.str.179, 3

	.type	.L.str.180,@object      # @.str.180
.L.str.180:
	.asciz	"raw"
	.size	.L.str.180, 4

	.type	.L.str.181,@object      # @.str.181
.L.str.181:
	.asciz	"$0"
	.size	.L.str.181, 3

	.type	.L.str.182,@object      # @.str.182
.L.str.182:
	.asciz	"post301"
	.size	.L.str.182, 8

	.type	.L.str.183,@object      # @.str.183
.L.str.183:
	.asciz	"$1"
	.size	.L.str.183, 3

	.type	.L.str.184,@object      # @.str.184
.L.str.184:
	.asciz	"keepalive"
	.size	.L.str.184, 10

	.type	.L.str.185,@object      # @.str.185
.L.str.185:
	.asciz	"$2"
	.size	.L.str.185, 3

	.type	.L.str.186,@object      # @.str.186
.L.str.186:
	.asciz	"socks5-hostname"
	.size	.L.str.186, 16

	.type	.L.str.187,@object      # @.str.187
.L.str.187:
	.asciz	"$3"
	.size	.L.str.187, 3

	.type	.L.str.188,@object      # @.str.188
.L.str.188:
	.asciz	"keepalive-time"
	.size	.L.str.188, 15

	.type	.L.str.189,@object      # @.str.189
.L.str.189:
	.asciz	"$4"
	.size	.L.str.189, 3

	.type	.L.str.190,@object      # @.str.190
.L.str.190:
	.asciz	"post302"
	.size	.L.str.190, 8

	.type	.L.str.191,@object      # @.str.191
.L.str.191:
	.asciz	"$5"
	.size	.L.str.191, 3

	.type	.L.str.192,@object      # @.str.192
.L.str.192:
	.asciz	"noproxy"
	.size	.L.str.192, 8

	.type	.L.str.193,@object      # @.str.193
.L.str.193:
	.asciz	"$7"
	.size	.L.str.193, 3

	.type	.L.str.194,@object      # @.str.194
.L.str.194:
	.asciz	"socks5-gssapi-nec"
	.size	.L.str.194, 18

	.type	.L.str.195,@object      # @.str.195
.L.str.195:
	.asciz	"$8"
	.size	.L.str.195, 3

	.type	.L.str.196,@object      # @.str.196
.L.str.196:
	.asciz	"proxy1.0"
	.size	.L.str.196, 9

	.type	.L.str.197,@object      # @.str.197
.L.str.197:
	.asciz	"$9"
	.size	.L.str.197, 3

	.type	.L.str.198,@object      # @.str.198
.L.str.198:
	.asciz	"tftp-blksize"
	.size	.L.str.198, 13

	.type	.L.str.199,@object      # @.str.199
.L.str.199:
	.asciz	"$A"
	.size	.L.str.199, 3

	.type	.L.str.200,@object      # @.str.200
.L.str.200:
	.asciz	"mail-from"
	.size	.L.str.200, 10

	.type	.L.str.201,@object      # @.str.201
.L.str.201:
	.asciz	"$B"
	.size	.L.str.201, 3

	.type	.L.str.202,@object      # @.str.202
.L.str.202:
	.asciz	"mail-rcpt"
	.size	.L.str.202, 10

	.type	.L.str.203,@object      # @.str.203
.L.str.203:
	.asciz	"$C"
	.size	.L.str.203, 3

	.type	.L.str.204,@object      # @.str.204
.L.str.204:
	.asciz	"ftp-pret"
	.size	.L.str.204, 9

	.type	.L.str.205,@object      # @.str.205
.L.str.205:
	.asciz	"$D"
	.size	.L.str.205, 3

	.type	.L.str.206,@object      # @.str.206
.L.str.206:
	.asciz	"proto"
	.size	.L.str.206, 6

	.type	.L.str.207,@object      # @.str.207
.L.str.207:
	.asciz	"$E"
	.size	.L.str.207, 3

	.type	.L.str.208,@object      # @.str.208
.L.str.208:
	.asciz	"proto-redir"
	.size	.L.str.208, 12

	.type	.L.str.209,@object      # @.str.209
.L.str.209:
	.asciz	"$F"
	.size	.L.str.209, 3

	.type	.L.str.210,@object      # @.str.210
.L.str.210:
	.asciz	"resolve"
	.size	.L.str.210, 8

	.type	.L.str.211,@object      # @.str.211
.L.str.211:
	.asciz	"$G"
	.size	.L.str.211, 3

	.type	.L.str.212,@object      # @.str.212
.L.str.212:
	.asciz	"delegation"
	.size	.L.str.212, 11

	.type	.L.str.213,@object      # @.str.213
.L.str.213:
	.asciz	"$H"
	.size	.L.str.213, 3

	.type	.L.str.214,@object      # @.str.214
.L.str.214:
	.asciz	"mail-auth"
	.size	.L.str.214, 10

	.type	.L.str.215,@object      # @.str.215
.L.str.215:
	.asciz	"$I"
	.size	.L.str.215, 3

	.type	.L.str.216,@object      # @.str.216
.L.str.216:
	.asciz	"post303"
	.size	.L.str.216, 8

	.type	.L.str.217,@object      # @.str.217
.L.str.217:
	.asciz	"$J"
	.size	.L.str.217, 3

	.type	.L.str.218,@object      # @.str.218
.L.str.218:
	.asciz	"metalink"
	.size	.L.str.218, 9

	.type	.L.str.219,@object      # @.str.219
.L.str.219:
	.asciz	"$6"
	.size	.L.str.219, 3

	.type	.L.str.220,@object      # @.str.220
.L.str.220:
	.asciz	"sasl-authzid"
	.size	.L.str.220, 13

	.type	.L.str.221,@object      # @.str.221
.L.str.221:
	.asciz	"$K"
	.size	.L.str.221, 3

	.type	.L.str.222,@object      # @.str.222
.L.str.222:
	.asciz	"sasl-ir"
	.size	.L.str.222, 8

	.type	.L.str.223,@object      # @.str.223
.L.str.223:
	.asciz	"$L"
	.size	.L.str.223, 3

	.type	.L.str.224,@object      # @.str.224
.L.str.224:
	.asciz	"test-event"
	.size	.L.str.224, 11

	.type	.L.str.225,@object      # @.str.225
.L.str.225:
	.asciz	"$M"
	.size	.L.str.225, 3

	.type	.L.str.226,@object      # @.str.226
.L.str.226:
	.asciz	"unix-socket"
	.size	.L.str.226, 12

	.type	.L.str.227,@object      # @.str.227
.L.str.227:
	.asciz	"$N"
	.size	.L.str.227, 3

	.type	.L.str.228,@object      # @.str.228
.L.str.228:
	.asciz	"path-as-is"
	.size	.L.str.228, 11

	.type	.L.str.229,@object      # @.str.229
.L.str.229:
	.asciz	"$O"
	.size	.L.str.229, 3

	.type	.L.str.230,@object      # @.str.230
.L.str.230:
	.asciz	"socks5-gssapi-service"
	.size	.L.str.230, 22

	.type	.L.str.231,@object      # @.str.231
.L.str.231:
	.asciz	"proxy-service-name"
	.size	.L.str.231, 19

	.type	.L.str.232,@object      # @.str.232
.L.str.232:
	.asciz	"$P"
	.size	.L.str.232, 3

	.type	.L.str.233,@object      # @.str.233
.L.str.233:
	.asciz	"service-name"
	.size	.L.str.233, 13

	.type	.L.str.234,@object      # @.str.234
.L.str.234:
	.asciz	"$Q"
	.size	.L.str.234, 3

	.type	.L.str.235,@object      # @.str.235
.L.str.235:
	.asciz	"proto-default"
	.size	.L.str.235, 14

	.type	.L.str.236,@object      # @.str.236
.L.str.236:
	.asciz	"$R"
	.size	.L.str.236, 3

	.type	.L.str.237,@object      # @.str.237
.L.str.237:
	.asciz	"expect100-timeout"
	.size	.L.str.237, 18

	.type	.L.str.238,@object      # @.str.238
.L.str.238:
	.asciz	"$S"
	.size	.L.str.238, 3

	.type	.L.str.239,@object      # @.str.239
.L.str.239:
	.asciz	"tftp-no-options"
	.size	.L.str.239, 16

	.type	.L.str.240,@object      # @.str.240
.L.str.240:
	.asciz	"$U"
	.size	.L.str.240, 3

	.type	.L.str.241,@object      # @.str.241
.L.str.241:
	.asciz	"connect-to"
	.size	.L.str.241, 11

	.type	.L.str.242,@object      # @.str.242
.L.str.242:
	.asciz	"$W"
	.size	.L.str.242, 3

	.type	.L.str.243,@object      # @.str.243
.L.str.243:
	.asciz	"abstract-unix-socket"
	.size	.L.str.243, 21

	.type	.L.str.244,@object      # @.str.244
.L.str.244:
	.asciz	"$X"
	.size	.L.str.244, 3

	.type	.L.str.245,@object      # @.str.245
.L.str.245:
	.asciz	"tls-max"
	.size	.L.str.245, 8

	.type	.L.str.246,@object      # @.str.246
.L.str.246:
	.asciz	"$Y"
	.size	.L.str.246, 3

	.type	.L.str.247,@object      # @.str.247
.L.str.247:
	.asciz	"suppress-connect-headers"
	.size	.L.str.247, 25

	.type	.L.str.248,@object      # @.str.248
.L.str.248:
	.asciz	"$Z"
	.size	.L.str.248, 3

	.type	.L.str.249,@object      # @.str.249
.L.str.249:
	.asciz	"compressed-ssh"
	.size	.L.str.249, 15

	.type	.L.str.250,@object      # @.str.250
.L.str.250:
	.asciz	"$~"
	.size	.L.str.250, 3

	.type	.L.str.251,@object      # @.str.251
.L.str.251:
	.asciz	"happy-eyeballs-timeout-ms"
	.size	.L.str.251, 26

	.type	.L.str.252,@object      # @.str.252
.L.str.252:
	.asciz	"$!"
	.size	.L.str.252, 3

	.type	.L.str.253,@object      # @.str.253
.L.str.253:
	.asciz	"retry-all-errors"
	.size	.L.str.253, 17

	.type	.L.str.254,@object      # @.str.254
.L.str.254:
	.asciz	"0"
	.size	.L.str.254, 2

	.type	.L.str.255,@object      # @.str.255
.L.str.255:
	.asciz	"http1.0"
	.size	.L.str.255, 8

	.type	.L.str.256,@object      # @.str.256
.L.str.256:
	.asciz	"01"
	.size	.L.str.256, 3

	.type	.L.str.257,@object      # @.str.257
.L.str.257:
	.asciz	"http1.1"
	.size	.L.str.257, 8

	.type	.L.str.258,@object      # @.str.258
.L.str.258:
	.asciz	"02"
	.size	.L.str.258, 3

	.type	.L.str.259,@object      # @.str.259
.L.str.259:
	.asciz	"http2"
	.size	.L.str.259, 6

	.type	.L.str.260,@object      # @.str.260
.L.str.260:
	.asciz	"03"
	.size	.L.str.260, 3

	.type	.L.str.261,@object      # @.str.261
.L.str.261:
	.asciz	"http2-prior-knowledge"
	.size	.L.str.261, 22

	.type	.L.str.262,@object      # @.str.262
.L.str.262:
	.asciz	"04"
	.size	.L.str.262, 3

	.type	.L.str.263,@object      # @.str.263
.L.str.263:
	.asciz	"http3"
	.size	.L.str.263, 6

	.type	.L.str.264,@object      # @.str.264
.L.str.264:
	.asciz	"09"
	.size	.L.str.264, 3

	.type	.L.str.265,@object      # @.str.265
.L.str.265:
	.asciz	"http0.9"
	.size	.L.str.265, 8

	.type	.L.str.266,@object      # @.str.266
.L.str.266:
	.asciz	"1"
	.size	.L.str.266, 2

	.type	.L.str.267,@object      # @.str.267
.L.str.267:
	.asciz	"tlsv1"
	.size	.L.str.267, 6

	.type	.L.str.268,@object      # @.str.268
.L.str.268:
	.asciz	"10"
	.size	.L.str.268, 3

	.type	.L.str.269,@object      # @.str.269
.L.str.269:
	.asciz	"tlsv1.0"
	.size	.L.str.269, 8

	.type	.L.str.270,@object      # @.str.270
.L.str.270:
	.asciz	"11"
	.size	.L.str.270, 3

	.type	.L.str.271,@object      # @.str.271
.L.str.271:
	.asciz	"tlsv1.1"
	.size	.L.str.271, 8

	.type	.L.str.272,@object      # @.str.272
.L.str.272:
	.asciz	"12"
	.size	.L.str.272, 3

	.type	.L.str.273,@object      # @.str.273
.L.str.273:
	.asciz	"tlsv1.2"
	.size	.L.str.273, 8

	.type	.L.str.274,@object      # @.str.274
.L.str.274:
	.asciz	"13"
	.size	.L.str.274, 3

	.type	.L.str.275,@object      # @.str.275
.L.str.275:
	.asciz	"tlsv1.3"
	.size	.L.str.275, 8

	.type	.L.str.276,@object      # @.str.276
.L.str.276:
	.asciz	"1A"
	.size	.L.str.276, 3

	.type	.L.str.277,@object      # @.str.277
.L.str.277:
	.asciz	"tls13-ciphers"
	.size	.L.str.277, 14

	.type	.L.str.278,@object      # @.str.278
.L.str.278:
	.asciz	"1B"
	.size	.L.str.278, 3

	.type	.L.str.279,@object      # @.str.279
.L.str.279:
	.asciz	"proxy-tls13-ciphers"
	.size	.L.str.279, 20

	.type	.L.str.280,@object      # @.str.280
.L.str.280:
	.asciz	"2"
	.size	.L.str.280, 2

	.type	.L.str.281,@object      # @.str.281
.L.str.281:
	.asciz	"sslv2"
	.size	.L.str.281, 6

	.type	.L.str.282,@object      # @.str.282
.L.str.282:
	.asciz	"3"
	.size	.L.str.282, 2

	.type	.L.str.283,@object      # @.str.283
.L.str.283:
	.asciz	"sslv3"
	.size	.L.str.283, 6

	.type	.L.str.284,@object      # @.str.284
.L.str.284:
	.asciz	"4"
	.size	.L.str.284, 2

	.type	.L.str.285,@object      # @.str.285
.L.str.285:
	.asciz	"ipv4"
	.size	.L.str.285, 5

	.type	.L.str.286,@object      # @.str.286
.L.str.286:
	.asciz	"6"
	.size	.L.str.286, 2

	.type	.L.str.287,@object      # @.str.287
.L.str.287:
	.asciz	"ipv6"
	.size	.L.str.287, 5

	.type	.L.str.288,@object      # @.str.288
.L.str.288:
	.asciz	"a"
	.size	.L.str.288, 2

	.type	.L.str.289,@object      # @.str.289
.L.str.289:
	.asciz	"append"
	.size	.L.str.289, 7

	.type	.L.str.290,@object      # @.str.290
.L.str.290:
	.asciz	"A"
	.size	.L.str.290, 2

	.type	.L.str.291,@object      # @.str.291
.L.str.291:
	.asciz	"user-agent"
	.size	.L.str.291, 11

	.type	.L.str.293,@object      # @.str.293
.L.str.293:
	.asciz	"cookie"
	.size	.L.str.293, 7

	.type	.L.str.294,@object      # @.str.294
.L.str.294:
	.asciz	"ba"
	.size	.L.str.294, 3

	.type	.L.str.295,@object      # @.str.295
.L.str.295:
	.asciz	"alt-svc"
	.size	.L.str.295, 8

	.type	.L.str.296,@object      # @.str.296
.L.str.296:
	.asciz	"bb"
	.size	.L.str.296, 3

	.type	.L.str.297,@object      # @.str.297
.L.str.297:
	.asciz	"hsts"
	.size	.L.str.297, 5

	.type	.L.str.298,@object      # @.str.298
.L.str.298:
	.asciz	"B"
	.size	.L.str.298, 2

	.type	.L.str.299,@object      # @.str.299
.L.str.299:
	.asciz	"use-ascii"
	.size	.L.str.299, 10

	.type	.L.str.300,@object      # @.str.300
.L.str.300:
	.asciz	"c"
	.size	.L.str.300, 2

	.type	.L.str.301,@object      # @.str.301
.L.str.301:
	.asciz	"cookie-jar"
	.size	.L.str.301, 11

	.type	.L.str.302,@object      # @.str.302
.L.str.302:
	.asciz	"C"
	.size	.L.str.302, 2

	.type	.L.str.303,@object      # @.str.303
.L.str.303:
	.asciz	"continue-at"
	.size	.L.str.303, 12

	.type	.L.str.304,@object      # @.str.304
.L.str.304:
	.asciz	"d"
	.size	.L.str.304, 2

	.type	.L.str.305,@object      # @.str.305
.L.str.305:
	.asciz	"data"
	.size	.L.str.305, 5

	.type	.L.str.306,@object      # @.str.306
.L.str.306:
	.asciz	"dr"
	.size	.L.str.306, 3

	.type	.L.str.307,@object      # @.str.307
.L.str.307:
	.asciz	"data-raw"
	.size	.L.str.307, 9

	.type	.L.str.308,@object      # @.str.308
.L.str.308:
	.asciz	"da"
	.size	.L.str.308, 3

	.type	.L.str.309,@object      # @.str.309
.L.str.309:
	.asciz	"data-ascii"
	.size	.L.str.309, 11

	.type	.L.str.310,@object      # @.str.310
.L.str.310:
	.asciz	"db"
	.size	.L.str.310, 3

	.type	.L.str.311,@object      # @.str.311
.L.str.311:
	.asciz	"data-binary"
	.size	.L.str.311, 12

	.type	.L.str.312,@object      # @.str.312
.L.str.312:
	.asciz	"de"
	.size	.L.str.312, 3

	.type	.L.str.313,@object      # @.str.313
.L.str.313:
	.asciz	"data-urlencode"
	.size	.L.str.313, 15

	.type	.L.str.314,@object      # @.str.314
.L.str.314:
	.asciz	"D"
	.size	.L.str.314, 2

	.type	.L.str.315,@object      # @.str.315
.L.str.315:
	.asciz	"dump-header"
	.size	.L.str.315, 12

	.type	.L.str.316,@object      # @.str.316
.L.str.316:
	.asciz	"e"
	.size	.L.str.316, 2

	.type	.L.str.317,@object      # @.str.317
.L.str.317:
	.asciz	"referer"
	.size	.L.str.317, 8

	.type	.L.str.318,@object      # @.str.318
.L.str.318:
	.asciz	"E"
	.size	.L.str.318, 2

	.type	.L.str.319,@object      # @.str.319
.L.str.319:
	.asciz	"cert"
	.size	.L.str.319, 5

	.type	.L.str.320,@object      # @.str.320
.L.str.320:
	.asciz	"Ea"
	.size	.L.str.320, 3

	.type	.L.str.321,@object      # @.str.321
.L.str.321:
	.asciz	"cacert"
	.size	.L.str.321, 7

	.type	.L.str.322,@object      # @.str.322
.L.str.322:
	.asciz	"Eb"
	.size	.L.str.322, 3

	.type	.L.str.323,@object      # @.str.323
.L.str.323:
	.asciz	"cert-type"
	.size	.L.str.323, 10

	.type	.L.str.324,@object      # @.str.324
.L.str.324:
	.asciz	"Ec"
	.size	.L.str.324, 3

	.type	.L.str.325,@object      # @.str.325
.L.str.325:
	.asciz	"key"
	.size	.L.str.325, 4

	.type	.L.str.326,@object      # @.str.326
.L.str.326:
	.asciz	"Ed"
	.size	.L.str.326, 3

	.type	.L.str.327,@object      # @.str.327
.L.str.327:
	.asciz	"key-type"
	.size	.L.str.327, 9

	.type	.L.str.328,@object      # @.str.328
.L.str.328:
	.asciz	"Ee"
	.size	.L.str.328, 3

	.type	.L.str.329,@object      # @.str.329
.L.str.329:
	.asciz	"pass"
	.size	.L.str.329, 5

	.type	.L.str.330,@object      # @.str.330
.L.str.330:
	.asciz	"Ef"
	.size	.L.str.330, 3

	.type	.L.str.331,@object      # @.str.331
.L.str.331:
	.asciz	"engine"
	.size	.L.str.331, 7

	.type	.L.str.332,@object      # @.str.332
.L.str.332:
	.asciz	"Eg"
	.size	.L.str.332, 3

	.type	.L.str.333,@object      # @.str.333
.L.str.333:
	.asciz	"capath"
	.size	.L.str.333, 7

	.type	.L.str.334,@object      # @.str.334
.L.str.334:
	.asciz	"Eh"
	.size	.L.str.334, 3

	.type	.L.str.335,@object      # @.str.335
.L.str.335:
	.asciz	"pubkey"
	.size	.L.str.335, 7

	.type	.L.str.336,@object      # @.str.336
.L.str.336:
	.asciz	"Ei"
	.size	.L.str.336, 3

	.type	.L.str.337,@object      # @.str.337
.L.str.337:
	.asciz	"hostpubmd5"
	.size	.L.str.337, 11

	.type	.L.str.338,@object      # @.str.338
.L.str.338:
	.asciz	"Ej"
	.size	.L.str.338, 3

	.type	.L.str.339,@object      # @.str.339
.L.str.339:
	.asciz	"crlfile"
	.size	.L.str.339, 8

	.type	.L.str.340,@object      # @.str.340
.L.str.340:
	.asciz	"Ek"
	.size	.L.str.340, 3

	.type	.L.str.341,@object      # @.str.341
.L.str.341:
	.asciz	"tlsuser"
	.size	.L.str.341, 8

	.type	.L.str.342,@object      # @.str.342
.L.str.342:
	.asciz	"El"
	.size	.L.str.342, 3

	.type	.L.str.343,@object      # @.str.343
.L.str.343:
	.asciz	"tlspassword"
	.size	.L.str.343, 12

	.type	.L.str.344,@object      # @.str.344
.L.str.344:
	.asciz	"Em"
	.size	.L.str.344, 3

	.type	.L.str.345,@object      # @.str.345
.L.str.345:
	.asciz	"tlsauthtype"
	.size	.L.str.345, 12

	.type	.L.str.346,@object      # @.str.346
.L.str.346:
	.asciz	"En"
	.size	.L.str.346, 3

	.type	.L.str.347,@object      # @.str.347
.L.str.347:
	.asciz	"ssl-allow-beast"
	.size	.L.str.347, 16

	.type	.L.str.348,@object      # @.str.348
.L.str.348:
	.asciz	"Eo"
	.size	.L.str.348, 3

	.type	.L.str.349,@object      # @.str.349
.L.str.349:
	.asciz	"ssl-auto-client-cert"
	.size	.L.str.349, 21

	.type	.L.str.350,@object      # @.str.350
.L.str.350:
	.asciz	"EO"
	.size	.L.str.350, 3

	.type	.L.str.351,@object      # @.str.351
.L.str.351:
	.asciz	"proxy-ssl-auto-client-cert"
	.size	.L.str.351, 27

	.type	.L.str.352,@object      # @.str.352
.L.str.352:
	.asciz	"Ep"
	.size	.L.str.352, 3

	.type	.L.str.353,@object      # @.str.353
.L.str.353:
	.asciz	"pinnedpubkey"
	.size	.L.str.353, 13

	.type	.L.str.354,@object      # @.str.354
.L.str.354:
	.asciz	"EP"
	.size	.L.str.354, 3

	.type	.L.str.355,@object      # @.str.355
.L.str.355:
	.asciz	"proxy-pinnedpubkey"
	.size	.L.str.355, 19

	.type	.L.str.356,@object      # @.str.356
.L.str.356:
	.asciz	"Eq"
	.size	.L.str.356, 3

	.type	.L.str.357,@object      # @.str.357
.L.str.357:
	.asciz	"cert-status"
	.size	.L.str.357, 12

	.type	.L.str.358,@object      # @.str.358
.L.str.358:
	.asciz	"EQ"
	.size	.L.str.358, 3

	.type	.L.str.359,@object      # @.str.359
.L.str.359:
	.asciz	"doh-cert-status"
	.size	.L.str.359, 16

	.type	.L.str.360,@object      # @.str.360
.L.str.360:
	.asciz	"Er"
	.size	.L.str.360, 3

	.type	.L.str.361,@object      # @.str.361
.L.str.361:
	.asciz	"false-start"
	.size	.L.str.361, 12

	.type	.L.str.362,@object      # @.str.362
.L.str.362:
	.asciz	"Es"
	.size	.L.str.362, 3

	.type	.L.str.363,@object      # @.str.363
.L.str.363:
	.asciz	"ssl-no-revoke"
	.size	.L.str.363, 14

	.type	.L.str.364,@object      # @.str.364
.L.str.364:
	.asciz	"ES"
	.size	.L.str.364, 3

	.type	.L.str.365,@object      # @.str.365
.L.str.365:
	.asciz	"ssl-revoke-best-effort"
	.size	.L.str.365, 23

	.type	.L.str.366,@object      # @.str.366
.L.str.366:
	.asciz	"Et"
	.size	.L.str.366, 3

	.type	.L.str.367,@object      # @.str.367
.L.str.367:
	.asciz	"tcp-fastopen"
	.size	.L.str.367, 13

	.type	.L.str.368,@object      # @.str.368
.L.str.368:
	.asciz	"Eu"
	.size	.L.str.368, 3

	.type	.L.str.369,@object      # @.str.369
.L.str.369:
	.asciz	"proxy-tlsuser"
	.size	.L.str.369, 14

	.type	.L.str.370,@object      # @.str.370
.L.str.370:
	.asciz	"Ev"
	.size	.L.str.370, 3

	.type	.L.str.371,@object      # @.str.371
.L.str.371:
	.asciz	"proxy-tlspassword"
	.size	.L.str.371, 18

	.type	.L.str.372,@object      # @.str.372
.L.str.372:
	.asciz	"Ew"
	.size	.L.str.372, 3

	.type	.L.str.373,@object      # @.str.373
.L.str.373:
	.asciz	"proxy-tlsauthtype"
	.size	.L.str.373, 18

	.type	.L.str.374,@object      # @.str.374
.L.str.374:
	.asciz	"Ex"
	.size	.L.str.374, 3

	.type	.L.str.375,@object      # @.str.375
.L.str.375:
	.asciz	"proxy-cert"
	.size	.L.str.375, 11

	.type	.L.str.376,@object      # @.str.376
.L.str.376:
	.asciz	"Ey"
	.size	.L.str.376, 3

	.type	.L.str.377,@object      # @.str.377
.L.str.377:
	.asciz	"proxy-cert-type"
	.size	.L.str.377, 16

	.type	.L.str.378,@object      # @.str.378
.L.str.378:
	.asciz	"Ez"
	.size	.L.str.378, 3

	.type	.L.str.379,@object      # @.str.379
.L.str.379:
	.asciz	"proxy-key"
	.size	.L.str.379, 10

	.type	.L.str.380,@object      # @.str.380
.L.str.380:
	.asciz	"E0"
	.size	.L.str.380, 3

	.type	.L.str.381,@object      # @.str.381
.L.str.381:
	.asciz	"proxy-key-type"
	.size	.L.str.381, 15

	.type	.L.str.382,@object      # @.str.382
.L.str.382:
	.asciz	"E1"
	.size	.L.str.382, 3

	.type	.L.str.383,@object      # @.str.383
.L.str.383:
	.asciz	"proxy-pass"
	.size	.L.str.383, 11

	.type	.L.str.384,@object      # @.str.384
.L.str.384:
	.asciz	"E2"
	.size	.L.str.384, 3

	.type	.L.str.385,@object      # @.str.385
.L.str.385:
	.asciz	"proxy-ciphers"
	.size	.L.str.385, 14

	.type	.L.str.386,@object      # @.str.386
.L.str.386:
	.asciz	"E3"
	.size	.L.str.386, 3

	.type	.L.str.387,@object      # @.str.387
.L.str.387:
	.asciz	"proxy-crlfile"
	.size	.L.str.387, 14

	.type	.L.str.388,@object      # @.str.388
.L.str.388:
	.asciz	"E4"
	.size	.L.str.388, 3

	.type	.L.str.389,@object      # @.str.389
.L.str.389:
	.asciz	"proxy-ssl-allow-beast"
	.size	.L.str.389, 22

	.type	.L.str.390,@object      # @.str.390
.L.str.390:
	.asciz	"E5"
	.size	.L.str.390, 3

	.type	.L.str.391,@object      # @.str.391
.L.str.391:
	.asciz	"login-options"
	.size	.L.str.391, 14

	.type	.L.str.392,@object      # @.str.392
.L.str.392:
	.asciz	"E6"
	.size	.L.str.392, 3

	.type	.L.str.393,@object      # @.str.393
.L.str.393:
	.asciz	"proxy-cacert"
	.size	.L.str.393, 13

	.type	.L.str.394,@object      # @.str.394
.L.str.394:
	.asciz	"E7"
	.size	.L.str.394, 3

	.type	.L.str.395,@object      # @.str.395
.L.str.395:
	.asciz	"proxy-capath"
	.size	.L.str.395, 13

	.type	.L.str.396,@object      # @.str.396
.L.str.396:
	.asciz	"E8"
	.size	.L.str.396, 3

	.type	.L.str.397,@object      # @.str.397
.L.str.397:
	.asciz	"proxy-insecure"
	.size	.L.str.397, 15

	.type	.L.str.398,@object      # @.str.398
.L.str.398:
	.asciz	"E9"
	.size	.L.str.398, 3

	.type	.L.str.399,@object      # @.str.399
.L.str.399:
	.asciz	"proxy-tlsv1"
	.size	.L.str.399, 12

	.type	.L.str.400,@object      # @.str.400
.L.str.400:
	.asciz	"EA"
	.size	.L.str.400, 3

	.type	.L.str.401,@object      # @.str.401
.L.str.401:
	.asciz	"socks5-basic"
	.size	.L.str.401, 13

	.type	.L.str.402,@object      # @.str.402
.L.str.402:
	.asciz	"EB"
	.size	.L.str.402, 3

	.type	.L.str.403,@object      # @.str.403
.L.str.403:
	.asciz	"socks5-gssapi"
	.size	.L.str.403, 14

	.type	.L.str.404,@object      # @.str.404
.L.str.404:
	.asciz	"EC"
	.size	.L.str.404, 3

	.type	.L.str.405,@object      # @.str.405
.L.str.405:
	.asciz	"etag-save"
	.size	.L.str.405, 10

	.type	.L.str.406,@object      # @.str.406
.L.str.406:
	.asciz	"ED"
	.size	.L.str.406, 3

	.type	.L.str.407,@object      # @.str.407
.L.str.407:
	.asciz	"etag-compare"
	.size	.L.str.407, 13

	.type	.L.str.408,@object      # @.str.408
.L.str.408:
	.asciz	"EE"
	.size	.L.str.408, 3

	.type	.L.str.409,@object      # @.str.409
.L.str.409:
	.asciz	"curves"
	.size	.L.str.409, 7

	.type	.L.str.410,@object      # @.str.410
.L.str.410:
	.asciz	"f"
	.size	.L.str.410, 2

	.type	.L.str.411,@object      # @.str.411
.L.str.411:
	.asciz	"fail"
	.size	.L.str.411, 5

	.type	.L.str.412,@object      # @.str.412
.L.str.412:
	.asciz	"fa"
	.size	.L.str.412, 3

	.type	.L.str.413,@object      # @.str.413
.L.str.413:
	.asciz	"fail-early"
	.size	.L.str.413, 11

	.type	.L.str.414,@object      # @.str.414
.L.str.414:
	.asciz	"fb"
	.size	.L.str.414, 3

	.type	.L.str.415,@object      # @.str.415
.L.str.415:
	.asciz	"styled-output"
	.size	.L.str.415, 14

	.type	.L.str.416,@object      # @.str.416
.L.str.416:
	.asciz	"fc"
	.size	.L.str.416, 3

	.type	.L.str.417,@object      # @.str.417
.L.str.417:
	.asciz	"mail-rcpt-allowfails"
	.size	.L.str.417, 21

	.type	.L.str.418,@object      # @.str.418
.L.str.418:
	.asciz	"fd"
	.size	.L.str.418, 3

	.type	.L.str.419,@object      # @.str.419
.L.str.419:
	.asciz	"fail-with-body"
	.size	.L.str.419, 15

	.type	.L.str.420,@object      # @.str.420
.L.str.420:
	.asciz	"F"
	.size	.L.str.420, 2

	.type	.L.str.421,@object      # @.str.421
.L.str.421:
	.asciz	"form"
	.size	.L.str.421, 5

	.type	.L.str.422,@object      # @.str.422
.L.str.422:
	.asciz	"Fs"
	.size	.L.str.422, 3

	.type	.L.str.423,@object      # @.str.423
.L.str.423:
	.asciz	"form-string"
	.size	.L.str.423, 12

	.type	.L.str.424,@object      # @.str.424
.L.str.424:
	.asciz	"g"
	.size	.L.str.424, 2

	.type	.L.str.425,@object      # @.str.425
.L.str.425:
	.asciz	"globoff"
	.size	.L.str.425, 8

	.type	.L.str.426,@object      # @.str.426
.L.str.426:
	.asciz	"G"
	.size	.L.str.426, 2

	.type	.L.str.427,@object      # @.str.427
.L.str.427:
	.asciz	"get"
	.size	.L.str.427, 4

	.type	.L.str.428,@object      # @.str.428
.L.str.428:
	.asciz	"Ga"
	.size	.L.str.428, 3

	.type	.L.str.429,@object      # @.str.429
.L.str.429:
	.asciz	"request-target"
	.size	.L.str.429, 15

	.type	.L.str.430,@object      # @.str.430
.L.str.430:
	.asciz	"h"
	.size	.L.str.430, 2

	.type	.L.str.431,@object      # @.str.431
.L.str.431:
	.asciz	"help"
	.size	.L.str.431, 5

	.type	.L.str.432,@object      # @.str.432
.L.str.432:
	.asciz	"H"
	.size	.L.str.432, 2

	.type	.L.str.433,@object      # @.str.433
.L.str.433:
	.asciz	"header"
	.size	.L.str.433, 7

	.type	.L.str.434,@object      # @.str.434
.L.str.434:
	.asciz	"Hp"
	.size	.L.str.434, 3

	.type	.L.str.435,@object      # @.str.435
.L.str.435:
	.asciz	"proxy-header"
	.size	.L.str.435, 13

	.type	.L.str.436,@object      # @.str.436
.L.str.436:
	.asciz	"i"
	.size	.L.str.436, 2

	.type	.L.str.437,@object      # @.str.437
.L.str.437:
	.asciz	"include"
	.size	.L.str.437, 8

	.type	.L.str.438,@object      # @.str.438
.L.str.438:
	.asciz	"I"
	.size	.L.str.438, 2

	.type	.L.str.439,@object      # @.str.439
.L.str.439:
	.asciz	"head"
	.size	.L.str.439, 5

	.type	.L.str.440,@object      # @.str.440
.L.str.440:
	.asciz	"j"
	.size	.L.str.440, 2

	.type	.L.str.441,@object      # @.str.441
.L.str.441:
	.asciz	"junk-session-cookies"
	.size	.L.str.441, 21

	.type	.L.str.442,@object      # @.str.442
.L.str.442:
	.asciz	"J"
	.size	.L.str.442, 2

	.type	.L.str.443,@object      # @.str.443
.L.str.443:
	.asciz	"remote-header-name"
	.size	.L.str.443, 19

	.type	.L.str.444,@object      # @.str.444
.L.str.444:
	.asciz	"k"
	.size	.L.str.444, 2

	.type	.L.str.445,@object      # @.str.445
.L.str.445:
	.asciz	"insecure"
	.size	.L.str.445, 9

	.type	.L.str.446,@object      # @.str.446
.L.str.446:
	.asciz	"kd"
	.size	.L.str.446, 3

	.type	.L.str.447,@object      # @.str.447
.L.str.447:
	.asciz	"doh-insecure"
	.size	.L.str.447, 13

	.type	.L.str.448,@object      # @.str.448
.L.str.448:
	.asciz	"K"
	.size	.L.str.448, 2

	.type	.L.str.449,@object      # @.str.449
.L.str.449:
	.asciz	"config"
	.size	.L.str.449, 7

	.type	.L.str.450,@object      # @.str.450
.L.str.450:
	.asciz	"l"
	.size	.L.str.450, 2

	.type	.L.str.451,@object      # @.str.451
.L.str.451:
	.asciz	"list-only"
	.size	.L.str.451, 10

	.type	.L.str.452,@object      # @.str.452
.L.str.452:
	.asciz	"L"
	.size	.L.str.452, 2

	.type	.L.str.453,@object      # @.str.453
.L.str.453:
	.asciz	"location"
	.size	.L.str.453, 9

	.type	.L.str.454,@object      # @.str.454
.L.str.454:
	.asciz	"Lt"
	.size	.L.str.454, 3

	.type	.L.str.455,@object      # @.str.455
.L.str.455:
	.asciz	"location-trusted"
	.size	.L.str.455, 17

	.type	.L.str.456,@object      # @.str.456
.L.str.456:
	.asciz	"m"
	.size	.L.str.456, 2

	.type	.L.str.457,@object      # @.str.457
.L.str.457:
	.asciz	"max-time"
	.size	.L.str.457, 9

	.type	.L.str.458,@object      # @.str.458
.L.str.458:
	.asciz	"M"
	.size	.L.str.458, 2

	.type	.L.str.459,@object      # @.str.459
.L.str.459:
	.asciz	"manual"
	.size	.L.str.459, 7

	.type	.L.str.460,@object      # @.str.460
.L.str.460:
	.asciz	"n"
	.size	.L.str.460, 2

	.type	.L.str.461,@object      # @.str.461
.L.str.461:
	.asciz	"netrc"
	.size	.L.str.461, 6

	.type	.L.str.462,@object      # @.str.462
.L.str.462:
	.asciz	"no"
	.size	.L.str.462, 3

	.type	.L.str.463,@object      # @.str.463
.L.str.463:
	.asciz	"netrc-optional"
	.size	.L.str.463, 15

	.type	.L.str.464,@object      # @.str.464
.L.str.464:
	.asciz	"ne"
	.size	.L.str.464, 3

	.type	.L.str.465,@object      # @.str.465
.L.str.465:
	.asciz	"netrc-file"
	.size	.L.str.465, 11

	.type	.L.str.466,@object      # @.str.466
.L.str.466:
	.asciz	"N"
	.size	.L.str.466, 2

	.type	.L.str.467,@object      # @.str.467
.L.str.467:
	.asciz	"buffer"
	.size	.L.str.467, 7

	.type	.L.str.468,@object      # @.str.468
.L.str.468:
	.asciz	"o"
	.size	.L.str.468, 2

	.type	.L.str.469,@object      # @.str.469
.L.str.469:
	.asciz	"output"
	.size	.L.str.469, 7

	.type	.L.str.470,@object      # @.str.470
.L.str.470:
	.asciz	"O"
	.size	.L.str.470, 2

	.type	.L.str.471,@object      # @.str.471
.L.str.471:
	.asciz	"remote-name"
	.size	.L.str.471, 12

	.type	.L.str.472,@object      # @.str.472
.L.str.472:
	.asciz	"Oa"
	.size	.L.str.472, 3

	.type	.L.str.473,@object      # @.str.473
.L.str.473:
	.asciz	"remote-name-all"
	.size	.L.str.473, 16

	.type	.L.str.474,@object      # @.str.474
.L.str.474:
	.asciz	"Ob"
	.size	.L.str.474, 3

	.type	.L.str.475,@object      # @.str.475
.L.str.475:
	.asciz	"output-dir"
	.size	.L.str.475, 11

	.type	.L.str.476,@object      # @.str.476
.L.str.476:
	.asciz	"p"
	.size	.L.str.476, 2

	.type	.L.str.477,@object      # @.str.477
.L.str.477:
	.asciz	"proxytunnel"
	.size	.L.str.477, 12

	.type	.L.str.478,@object      # @.str.478
.L.str.478:
	.asciz	"P"
	.size	.L.str.478, 2

	.type	.L.str.479,@object      # @.str.479
.L.str.479:
	.asciz	"ftp-port"
	.size	.L.str.479, 9

	.type	.L.str.480,@object      # @.str.480
.L.str.480:
	.asciz	"q"
	.size	.L.str.480, 2

	.type	.L.str.481,@object      # @.str.481
.L.str.481:
	.asciz	"disable"
	.size	.L.str.481, 8

	.type	.L.str.482,@object      # @.str.482
.L.str.482:
	.asciz	"Q"
	.size	.L.str.482, 2

	.type	.L.str.483,@object      # @.str.483
.L.str.483:
	.asciz	"quote"
	.size	.L.str.483, 6

	.type	.L.str.484,@object      # @.str.484
.L.str.484:
	.asciz	"range"
	.size	.L.str.484, 6

	.type	.L.str.485,@object      # @.str.485
.L.str.485:
	.asciz	"R"
	.size	.L.str.485, 2

	.type	.L.str.486,@object      # @.str.486
.L.str.486:
	.asciz	"remote-time"
	.size	.L.str.486, 12

	.type	.L.str.487,@object      # @.str.487
.L.str.487:
	.asciz	"s"
	.size	.L.str.487, 2

	.type	.L.str.488,@object      # @.str.488
.L.str.488:
	.asciz	"silent"
	.size	.L.str.488, 7

	.type	.L.str.489,@object      # @.str.489
.L.str.489:
	.asciz	"S"
	.size	.L.str.489, 2

	.type	.L.str.490,@object      # @.str.490
.L.str.490:
	.asciz	"show-error"
	.size	.L.str.490, 11

	.type	.L.str.491,@object      # @.str.491
.L.str.491:
	.asciz	"t"
	.size	.L.str.491, 2

	.type	.L.str.492,@object      # @.str.492
.L.str.492:
	.asciz	"telnet-option"
	.size	.L.str.492, 14

	.type	.L.str.493,@object      # @.str.493
.L.str.493:
	.asciz	"T"
	.size	.L.str.493, 2

	.type	.L.str.494,@object      # @.str.494
.L.str.494:
	.asciz	"upload-file"
	.size	.L.str.494, 12

	.type	.L.str.495,@object      # @.str.495
.L.str.495:
	.asciz	"u"
	.size	.L.str.495, 2

	.type	.L.str.496,@object      # @.str.496
.L.str.496:
	.asciz	"user"
	.size	.L.str.496, 5

	.type	.L.str.497,@object      # @.str.497
.L.str.497:
	.asciz	"U"
	.size	.L.str.497, 2

	.type	.L.str.498,@object      # @.str.498
.L.str.498:
	.asciz	"proxy-user"
	.size	.L.str.498, 11

	.type	.L.str.499,@object      # @.str.499
.L.str.499:
	.asciz	"v"
	.size	.L.str.499, 2

	.type	.L.str.500,@object      # @.str.500
.L.str.500:
	.asciz	"verbose"
	.size	.L.str.500, 8

	.type	.L.str.501,@object      # @.str.501
.L.str.501:
	.asciz	"V"
	.size	.L.str.501, 2

	.type	.L.str.502,@object      # @.str.502
.L.str.502:
	.asciz	"version"
	.size	.L.str.502, 8

	.type	.L.str.503,@object      # @.str.503
.L.str.503:
	.asciz	"write-out"
	.size	.L.str.503, 10

	.type	.L.str.504,@object      # @.str.504
.L.str.504:
	.asciz	"x"
	.size	.L.str.504, 2

	.type	.L.str.505,@object      # @.str.505
.L.str.505:
	.asciz	"proxy"
	.size	.L.str.505, 6

	.type	.L.str.506,@object      # @.str.506
.L.str.506:
	.asciz	"xa"
	.size	.L.str.506, 3

	.type	.L.str.507,@object      # @.str.507
.L.str.507:
	.asciz	"preproxy"
	.size	.L.str.507, 9

	.type	.L.str.508,@object      # @.str.508
.L.str.508:
	.asciz	"X"
	.size	.L.str.508, 2

	.type	.L.str.509,@object      # @.str.509
.L.str.509:
	.asciz	"request"
	.size	.L.str.509, 8

	.type	.L.str.510,@object      # @.str.510
.L.str.510:
	.asciz	"Y"
	.size	.L.str.510, 2

	.type	.L.str.511,@object      # @.str.511
.L.str.511:
	.asciz	"speed-limit"
	.size	.L.str.511, 12

	.type	.L.str.512,@object      # @.str.512
.L.str.512:
	.asciz	"y"
	.size	.L.str.512, 2

	.type	.L.str.513,@object      # @.str.513
.L.str.513:
	.asciz	"speed-time"
	.size	.L.str.513, 11

	.type	.L.str.514,@object      # @.str.514
.L.str.514:
	.asciz	"z"
	.size	.L.str.514, 2

	.type	.L.str.515,@object      # @.str.515
.L.str.515:
	.asciz	"time-cond"
	.size	.L.str.515, 10

	.type	.L.str.516,@object      # @.str.516
.L.str.516:
	.asciz	"Z"
	.size	.L.str.516, 2

	.type	.L.str.517,@object      # @.str.517
.L.str.517:
	.asciz	"parallel"
	.size	.L.str.517, 9

	.type	.L.str.518,@object      # @.str.518
.L.str.518:
	.asciz	"Zb"
	.size	.L.str.518, 3

	.type	.L.str.519,@object      # @.str.519
.L.str.519:
	.asciz	"parallel-max"
	.size	.L.str.519, 13

	.type	.L.str.520,@object      # @.str.520
.L.str.520:
	.asciz	"Zc"
	.size	.L.str.520, 3

	.type	.L.str.521,@object      # @.str.521
.L.str.521:
	.asciz	"parallel-immediate"
	.size	.L.str.521, 19

	.type	.L.str.522,@object      # @.str.522
.L.str.522:
	.asciz	"#"
	.size	.L.str.522, 2

	.type	.L.str.523,@object      # @.str.523
.L.str.523:
	.asciz	"progress-bar"
	.size	.L.str.523, 13

	.type	.L.str.524,@object      # @.str.524
.L.str.524:
	.asciz	"#m"
	.size	.L.str.524, 3

	.type	.L.str.525,@object      # @.str.525
.L.str.525:
	.asciz	"progress-meter"
	.size	.L.str.525, 15

	.type	.L.str.36,@object       # @.str.36
.L.str.36:
	.asciz	":"
	.size	.L.str.36, 2

	.type	.L.str.526,@object      # @.str.526
.L.str.526:
	.asciz	"next"
	.size	.L.str.526, 5

	.type	.L.str.34,@object       # @.str.34
.L.str.34:
	.asciz	"--"
	.size	.L.str.34, 3

	.type	.L.str.35.137,@object   # @.str.35.137
.L.str.35.137:
	.asciz	"--url"
	.size	.L.str.35.137, 6

	.type	.L.str.37,@object       # @.str.37
.L.str.37:
	.asciz	"option %s: %s\n"
	.size	.L.str.37, 15

	.type	.L.str.38,@object       # @.str.38
.L.str.38:
	.asciz	"%s\n"
	.size	.L.str.38, 4

	.type	.L.str.3.1143,@object   # @.str.3.1143
.L.str.3.1143:
	.asciz	"curl: try 'curl --help' or 'curl --manual' for more information\n"
	.size	.L.str.3.1143, 65

	.type	.L.str.531,@object      # @.str.531
.L.str.531:
	.asciz	"/dev/tty"
	.size	.L.str.531, 9

	.type	ttyecho.withecho,@object # @ttyecho.withecho
	.local	ttyecho.withecho
	.comm	ttyecho.withecho,60,4
	.type	ttyecho.noecho,@object  # @ttyecho.noecho
	.local	ttyecho.noecho
	.comm	ttyecho.noecho,60,4
	.type	.L.str.1.532,@object    # @.str.1.532
.L.str.1.532:
	.asciz	"\n"
	.size	.L.str.1.532, 2

	.type	.L.str.533,@object      # @.str.533
.L.str.533:
	.asciz	"Usage: curl [options...] <url>"
	.size	.L.str.533, 31

	.type	.L.str.1.534,@object    # @.str.1.534
.L.str.1.534:
	.asciz	"\nThis is not the full help, this menu is stripped into categories.\nUse \"--help category\" to get an overview of all categories.\nFor all options use the manual or \"--help all\"."
	.size	.L.str.1.534, 175

	.type	.L.str.2.535,@object    # @.str.2.535
.L.str.2.535:
	.asciz	"all"
	.size	.L.str.2.535, 4

	.type	.L.str.3.536,@object    # @.str.3.536
.L.str.3.536:
	.asciz	"category"
	.size	.L.str.3.536, 9

	.type	categories,@object      # @categories
	.section	.rodata,"a",@progbits
	.p2align	4
categories:
	.quad	.L.str.502.538
	.quad	.L.str.503.539
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.504.540
	.quad	.L.str.505.541
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.506.542
	.quad	.L.str.507.543
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.508.544
	.quad	.L.str.509.545
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.510.546
	.quad	.L.str.511.547
	.long	32                      # 0x20
	.zero	4
	.quad	.L.str.512.548
	.quad	.L.str.513.549
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.514.550
	.quad	.L.str.515.551
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.516.552
	.quad	.L.str.517.553
	.long	256                     # 0x100
	.zero	4
	.quad	.L.str.518.554
	.quad	.L.str.519.555
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.520.556
	.quad	.L.str.521.557
	.long	2048                    # 0x800
	.zero	4
	.quad	.L.str.522.558
	.quad	.L.str.523.559
	.long	4096                    # 0x1000
	.zero	4
	.quad	.L.str.524.560
	.quad	.L.str.525.561
	.long	8192                    # 0x2000
	.zero	4
	.quad	.L.str.526.562
	.quad	.L.str.527.563
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.528.564
	.quad	.L.str.529.565
	.long	32768                   # 0x8000
	.zero	4
	.quad	.L.str.530.566
	.quad	.L.str.531.567
	.long	65536                   # 0x10000
	.zero	4
	.quad	.L.str.532
	.quad	.L.str.533.568
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.534
	.quad	.L.str.535
	.long	262144                  # 0x40000
	.zero	4
	.quad	.L.str.536
	.quad	.L.str.537
	.long	524288                  # 0x80000
	.zero	4
	.quad	.L.str.538
	.quad	.L.str.539
	.long	1048576                 # 0x100000
	.zero	4
	.quad	.L.str.540
	.quad	.L.str.541
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.542
	.quad	.L.str.543
	.long	4194304                 # 0x400000
	.zero	4
	.quad	.L.str.544
	.quad	.L.str.545
	.long	8388608                 # 0x800000
	.zero	4
	.quad	0
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.size	categories, 552

	.type	.L.str.546,@object      # @.str.546
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.546:
	.asciz	"%s: %s\n"
	.size	.L.str.546, 8

	.type	.L.str.4.537,@object    # @.str.4.537
.L.str.4.537:
	.asciz	"Invalid category provided, here is a list of all categories:\n"
	.size	.L.str.4.537, 62

	.type	.L.str.502.538,@object  # @.str.502.538
.L.str.502.538:
	.asciz	"auth"
	.size	.L.str.502.538, 5

	.type	.L.str.503.539,@object  # @.str.503.539
.L.str.503.539:
	.asciz	"Different types of authentication methods"
	.size	.L.str.503.539, 42

	.type	.L.str.504.540,@object  # @.str.504.540
.L.str.504.540:
	.asciz	"connection"
	.size	.L.str.504.540, 11

	.type	.L.str.505.541,@object  # @.str.505.541
.L.str.505.541:
	.asciz	"Low level networking operations"
	.size	.L.str.505.541, 32

	.type	.L.str.506.542,@object  # @.str.506.542
.L.str.506.542:
	.asciz	"curl"
	.size	.L.str.506.542, 5

	.type	.L.str.507.543,@object  # @.str.507.543
.L.str.507.543:
	.asciz	"The command line tool itself"
	.size	.L.str.507.543, 29

	.type	.L.str.508.544,@object  # @.str.508.544
.L.str.508.544:
	.asciz	"dns"
	.size	.L.str.508.544, 4

	.type	.L.str.509.545,@object  # @.str.509.545
.L.str.509.545:
	.asciz	"General DNS options"
	.size	.L.str.509.545, 20

	.type	.L.str.510.546,@object  # @.str.510.546
.L.str.510.546:
	.asciz	"file"
	.size	.L.str.510.546, 5

	.type	.L.str.511.547,@object  # @.str.511.547
.L.str.511.547:
	.asciz	"FILE protocol options"
	.size	.L.str.511.547, 22

	.type	.L.str.512.548,@object  # @.str.512.548
.L.str.512.548:
	.asciz	"ftp"
	.size	.L.str.512.548, 4

	.type	.L.str.513.549,@object  # @.str.513.549
.L.str.513.549:
	.asciz	"FTP protocol options"
	.size	.L.str.513.549, 21

	.type	.L.str.514.550,@object  # @.str.514.550
.L.str.514.550:
	.asciz	"http"
	.size	.L.str.514.550, 5

	.type	.L.str.515.551,@object  # @.str.515.551
.L.str.515.551:
	.asciz	"HTTP and HTTPS protocol options"
	.size	.L.str.515.551, 32

	.type	.L.str.516.552,@object  # @.str.516.552
.L.str.516.552:
	.asciz	"imap"
	.size	.L.str.516.552, 5

	.type	.L.str.517.553,@object  # @.str.517.553
.L.str.517.553:
	.asciz	"IMAP protocol options"
	.size	.L.str.517.553, 22

	.type	.L.str.518.554,@object  # @.str.518.554
.L.str.518.554:
	.asciz	"misc"
	.size	.L.str.518.554, 5

	.type	.L.str.519.555,@object  # @.str.519.555
.L.str.519.555:
	.asciz	"Options that don't fit into any other category"
	.size	.L.str.519.555, 47

	.type	.L.str.520.556,@object  # @.str.520.556
.L.str.520.556:
	.asciz	"output"
	.size	.L.str.520.556, 7

	.type	.L.str.521.557,@object  # @.str.521.557
.L.str.521.557:
	.asciz	"Filesystem output"
	.size	.L.str.521.557, 18

	.type	.L.str.522.558,@object  # @.str.522.558
.L.str.522.558:
	.asciz	"pop3"
	.size	.L.str.522.558, 5

	.type	.L.str.523.559,@object  # @.str.523.559
.L.str.523.559:
	.asciz	"POP3 protocol options"
	.size	.L.str.523.559, 22

	.type	.L.str.524.560,@object  # @.str.524.560
.L.str.524.560:
	.asciz	"post"
	.size	.L.str.524.560, 5

	.type	.L.str.525.561,@object  # @.str.525.561
.L.str.525.561:
	.asciz	"HTTP Post specific options"
	.size	.L.str.525.561, 27

	.type	.L.str.526.562,@object  # @.str.526.562
.L.str.526.562:
	.asciz	"proxy"
	.size	.L.str.526.562, 6

	.type	.L.str.527.563,@object  # @.str.527.563
.L.str.527.563:
	.asciz	"All options related to proxies"
	.size	.L.str.527.563, 31

	.type	.L.str.528.564,@object  # @.str.528.564
.L.str.528.564:
	.asciz	"scp"
	.size	.L.str.528.564, 4

	.type	.L.str.529.565,@object  # @.str.529.565
.L.str.529.565:
	.asciz	"SCP protocol options"
	.size	.L.str.529.565, 21

	.type	.L.str.530.566,@object  # @.str.530.566
.L.str.530.566:
	.asciz	"sftp"
	.size	.L.str.530.566, 5

	.type	.L.str.531.567,@object  # @.str.531.567
.L.str.531.567:
	.asciz	"SFTP protocol options"
	.size	.L.str.531.567, 22

	.type	.L.str.532,@object      # @.str.532
.L.str.532:
	.asciz	"smtp"
	.size	.L.str.532, 5

	.type	.L.str.533.568,@object  # @.str.533.568
.L.str.533.568:
	.asciz	"SMTP protocol options"
	.size	.L.str.533.568, 22

	.type	.L.str.534,@object      # @.str.534
.L.str.534:
	.asciz	"ssh"
	.size	.L.str.534, 4

	.type	.L.str.535,@object      # @.str.535
.L.str.535:
	.asciz	"SSH protocol options"
	.size	.L.str.535, 21

	.type	.L.str.536,@object      # @.str.536
.L.str.536:
	.asciz	"telnet"
	.size	.L.str.536, 7

	.type	.L.str.537,@object      # @.str.537
.L.str.537:
	.asciz	"TELNET protocol options"
	.size	.L.str.537, 24

	.type	.L.str.538,@object      # @.str.538
.L.str.538:
	.asciz	"tftp"
	.size	.L.str.538, 5

	.type	.L.str.539,@object      # @.str.539
.L.str.539:
	.asciz	"TFTP protocol options"
	.size	.L.str.539, 22

	.type	.L.str.540,@object      # @.str.540
.L.str.540:
	.asciz	"tls"
	.size	.L.str.540, 4

	.type	.L.str.541,@object      # @.str.541
.L.str.541:
	.asciz	"All TLS/SSL related options"
	.size	.L.str.541, 28

	.type	.L.str.542,@object      # @.str.542
.L.str.542:
	.asciz	"upload"
	.size	.L.str.542, 7

	.type	.L.str.543,@object      # @.str.543
.L.str.543:
	.asciz	"All options for uploads"
	.size	.L.str.543, 24

	.type	.L.str.544,@object      # @.str.544
.L.str.544:
	.asciz	"verbose"
	.size	.L.str.544, 8

	.type	.L.str.545,@object      # @.str.545
.L.str.545:
	.asciz	"Options related to any kind of command line output of curl"
	.size	.L.str.545, 59

	.type	.L.str.501.569,@object  # @.str.501.569
.L.str.501.569:
	.asciz	" %-11s %s\n"
	.size	.L.str.501.569, 11

	.type	.L.str.19.570,@object   # @.str.19.570
.L.str.19.570:
	.asciz	"    --abstract-unix-socket <path>"
	.size	.L.str.19.570, 34

	.type	helptext,@object        # @helptext
	.section	.rodata,"a",@progbits
	.p2align	4
helptext:
	.quad	.L.str.19.570
	.quad	.L.str.20.572
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.21.573
	.quad	.L.str.22.574
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.23.575
	.quad	.L.str.24.576
	.long	16514                   # 0x4082
	.zero	4
	.quad	.L.str.25.577
	.quad	.L.str.26.578
	.long	65600                   # 0x10040
	.zero	4
	.quad	.L.str.27.579
	.quad	.L.str.28.580
	.long	130                     # 0x82
	.zero	4
	.quad	.L.str.29.581
	.quad	.L.str.30.582
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.31.583
	.quad	.L.str.32.584
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.33.585
	.quad	.L.str.34.586
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.35.587
	.quad	.L.str.36.588
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.37.589
	.quad	.L.str.38.590
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.39.591
	.quad	.L.str.40.592
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.41.593
	.quad	.L.str.42.594
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.43.595
	.quad	.L.str.44.596
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.45.597
	.quad	.L.str.46.598
	.long	294912                  # 0x48000
	.zero	4
	.quad	.L.str.47.599
	.quad	.L.str.48.600
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.49.601
	.quad	.L.str.50.602
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.51.603
	.quad	.L.str.52.604
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.53.605
	.quad	.L.str.54.606
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.55.607
	.quad	.L.str.56.608
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.57.609
	.quad	.L.str.58.610
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.59.611
	.quad	.L.str.60.612
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.61.613
	.quad	.L.str.62.614
	.long	4292640                 # 0x418020
	.zero	4
	.quad	.L.str.63.615
	.quad	.L.str.64.616
	.long	131136                  # 0x20040
	.zero	4
	.quad	.L.str.65.617
	.quad	.L.str.66.618
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.67.619
	.quad	.L.str.68.620
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.69.621
	.quad	.L.str.70.622
	.long	4203136                 # 0x402280
	.zero	4
	.quad	.L.str.71.623
	.quad	.L.str.72.624
	.long	4202624                 # 0x402080
	.zero	4
	.quad	.L.str.73.625
	.quad	.L.str.74.626
	.long	4202624                 # 0x402080
	.zero	4
	.quad	.L.str.75.627
	.quad	.L.str.76.628
	.long	4202624                 # 0x402080
	.zero	4
	.quad	.L.str.77.629
	.quad	.L.str.78.630
	.long	4202624                 # 0x402080
	.zero	4
	.quad	.L.str.79.631
	.quad	.L.str.80.632
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.81.633
	.quad	.L.str.82.634
	.long	16514                   # 0x4082
	.zero	4
	.quad	.L.str.83.635
	.quad	.L.str.84.636
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.85.637
	.quad	.L.str.86.638
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.87.639
	.quad	.L.str.88.640
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.89.641
	.quad	.L.str.90.642
	.long	136                     # 0x88
	.zero	4
	.quad	.L.str.91.643
	.quad	.L.str.92.644
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.93.645
	.quad	.L.str.94.646
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.95.647
	.quad	.L.str.96.648
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.97.649
	.quad	.L.str.98.650
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.99.651
	.quad	.L.str.100.652
	.long	2097168                 # 0x200010
	.zero	4
	.quad	.L.str.101.653
	.quad	.L.str.102.654
	.long	2097168                 # 0x200010
	.zero	4
	.quad	.L.str.103.655
	.quad	.L.str.104.656
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.105.657
	.quad	.L.str.106.658
	.long	192                     # 0xc0
	.zero	4
	.quad	.L.str.107.659
	.quad	.L.str.108.660
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.109.661
	.quad	.L.str.110.662
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.111.663
	.quad	.L.str.112.664
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.113.665
	.quad	.L.str.114.666
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.115.667
	.quad	.L.str.116.668
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.117.669
	.quad	.L.str.118.670
	.long	640                     # 0x280
	.zero	4
	.quad	.L.str.119.671
	.quad	.L.str.120.672
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.121.673
	.quad	.L.str.122.674
	.long	2176                    # 0x880
	.zero	4
	.quad	.L.str.123.675
	.quad	.L.str.124.676
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.125.677
	.quad	.L.str.126.678
	.long	4194432                 # 0x400080
	.zero	4
	.quad	.L.str.127.679
	.quad	.L.str.126.678
	.long	4194432                 # 0x400080
	.zero	4
	.quad	.L.str.128.680
	.quad	.L.str.129.681
	.long	66                      # 0x42
	.zero	4
	.quad	.L.str.130.682
	.quad	.L.str.131.683
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.132.684
	.quad	.L.str.133.685
	.long	65608                   # 0x10048
	.zero	4
	.quad	.L.str.134.686
	.quad	.L.str.135.687
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.136.688
	.quad	.L.str.137.689
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.138.690
	.quad	.L.str.139.691
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.140.692
	.quad	.L.str.141.693
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.142.694
	.quad	.L.str.143.695
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.144.696
	.quad	.L.str.145.697
	.long	2097216                 # 0x200040
	.zero	4
	.quad	.L.str.146.698
	.quad	.L.str.147.699
	.long	2097216                 # 0x200040
	.zero	4
	.quad	.L.str.148.700
	.quad	.L.str.149.701
	.long	2097216                 # 0x200040
	.zero	4
	.quad	.L.str.150.702
	.quad	.L.str.151.703
	.long	4194432                 # 0x400080
	.zero	4
	.quad	.L.str.152.704
	.quad	.L.str.153.705
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.154.706
	.quad	.L.str.155.707
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.156.708
	.quad	.L.str.157.709
	.long	16512                   # 0x4080
	.zero	4
	.quad	.L.str.158.710
	.quad	.L.str.159.711
	.long	224                     # 0xe0
	.zero	4
	.quad	.L.str.160.712
	.quad	.L.str.161.713
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.162.714
	.quad	.L.str.163.715
	.long	520                     # 0x208
	.zero	4
	.quad	.L.str.164.716
	.quad	.L.str.165.717
	.long	98304                   # 0x18000
	.zero	4
	.quad	.L.str.166.718
	.quad	.L.str.167.719
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.168.720
	.quad	.L.str.169.721
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.170.722
	.quad	.L.str.171.723
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.172.724
	.quad	.L.str.173.725
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.174.726
	.quad	.L.str.175.727
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.176.728
	.quad	.L.str.177.729
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.178.730
	.quad	.L.str.179.731
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.180.732
	.quad	.L.str.181.733
	.long	192                     # 0xc0
	.zero	4
	.quad	.L.str.182.734
	.quad	.L.str.183.735
	.long	8389120                 # 0x800200
	.zero	4
	.quad	.L.str.184.736
	.quad	.L.str.185.737
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.186.738
	.quad	.L.str.187.739
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.188.740
	.quad	.L.str.189.741
	.long	20                      # 0x14
	.zero	4
	.quad	.L.str.190.742
	.quad	.L.str.191.743
	.long	20                      # 0x14
	.zero	4
	.quad	.L.str.192.744
	.quad	.L.str.193.745
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.194.746
	.quad	.L.str.195.747
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.196.748
	.quad	.L.str.197.749
	.long	2359296                 # 0x240000
	.zero	4
	.quad	.L.str.198.750
	.quad	.L.str.199.751
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.200.752
	.quad	.L.str.201.753
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.202.754
	.quad	.L.str.203.755
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.204.756
	.quad	.L.str.205.757
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.206.758
	.quad	.L.str.207.759
	.long	4160                    # 0x1040
	.zero	4
	.quad	.L.str.208.760
	.quad	.L.str.209.761
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.210.762
	.quad	.L.str.211.763
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.212.764
	.quad	.L.str.213.765
	.long	130                     # 0x82
	.zero	4
	.quad	.L.str.214.766
	.quad	.L.str.215.767
	.long	135426                  # 0x21102
	.zero	4
	.quad	.L.str.216.768
	.quad	.L.str.217.769
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.218.770
	.quad	.L.str.219.771
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.220.772
	.quad	.L.str.221.773
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.222.774
	.quad	.L.str.223.775
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.224.776
	.quad	.L.str.225.777
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.226.778
	.quad	.L.str.227.779
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.228.780
	.quad	.L.str.229.781
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.230.782
	.quad	.L.str.231.783
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.232.784
	.quad	.L.str.233.785
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.234.786
	.quad	.L.str.235.787
	.long	130                     # 0x82
	.zero	4
	.quad	.L.str.236.788
	.quad	.L.str.237.789
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.238.790
	.quad	.L.str.239.791
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.240.792
	.quad	.L.str.241.793
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.242.794
	.quad	.L.str.243.795
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.244.796
	.quad	.L.str.245.797
	.long	2097280                 # 0x200080
	.zero	4
	.quad	.L.str.246.798
	.quad	.L.str.247.799
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.248.800
	.quad	.L.str.249.801
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.250.802
	.quad	.L.str.251.803
	.long	2097280                 # 0x200080
	.zero	4
	.quad	.L.str.252.804
	.quad	.L.str.253.805
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.254.806
	.quad	.L.str.255.807
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.256.808
	.quad	.L.str.257.809
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.258.810
	.quad	.L.str.259.811
	.long	130                     # 0x82
	.zero	4
	.quad	.L.str.260.812
	.quad	.L.str.261.813
	.long	130                     # 0x82
	.zero	4
	.quad	.L.str.262.814
	.quad	.L.str.263.815
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.264.816
	.quad	.L.str.265.817
	.long	520                     # 0x208
	.zero	4
	.quad	.L.str.266.818
	.quad	.L.str.267.819
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.268.820
	.quad	.L.str.269.821
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.270.822
	.quad	.L.str.271.823
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.272.824
	.quad	.L.str.273.825
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.274.826
	.quad	.L.str.275.827
	.long	2359298                 # 0x240002
	.zero	4
	.quad	.L.str.276.828
	.quad	.L.str.277.829
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.278.830
	.quad	.L.str.279.831
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.280.832
	.quad	.L.str.281.833
	.long	8320                    # 0x2080
	.zero	4
	.quad	.L.str.282.834
	.quad	.L.str.283.835
	.long	8320                    # 0x2080
	.zero	4
	.quad	.L.str.284.836
	.quad	.L.str.285.837
	.long	8320                    # 0x2080
	.zero	4
	.quad	.L.str.286.838
	.quad	.L.str.287.839
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.288.840
	.quad	.L.str.289.841
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.290.842
	.quad	.L.str.291.843
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.292.844
	.quad	.L.str.293.845
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.294.846
	.quad	.L.str.295.847
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.296.848
	.quad	.L.str.297.849
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.298.850
	.quad	.L.str.299.851
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.300.852
	.quad	.L.str.301.853
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.302.854
	.quad	.L.str.303.855
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.304.856
	.quad	.L.str.305.857
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.306.858
	.quad	.L.str.307.859
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.308.860
	.quad	.L.str.309.861
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.310.862
	.quad	.L.str.311.863
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.312.864
	.quad	.L.str.313.865
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.314.866
	.quad	.L.str.315.867
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.316.868
	.quad	.L.str.317.869
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.318.870
	.quad	.L.str.319.871
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.320.872
	.quad	.L.str.321.873
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.322.874
	.quad	.L.str.323.875
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.324.876
	.quad	.L.str.325.877
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.326.878
	.quad	.L.str.327.879
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.328.880
	.quad	.L.str.329.881
	.long	2113538                 # 0x204002
	.zero	4
	.quad	.L.str.330.882
	.quad	.L.str.331.883
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.332.884
	.quad	.L.str.333.885
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.334.886
	.quad	.L.str.335.887
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.336.888
	.quad	.L.str.337.889
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.338.890
	.quad	.L.str.339.891
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.340.892
	.quad	.L.str.341.893
	.long	2113538                 # 0x204002
	.zero	4
	.quad	.L.str.342.894
	.quad	.L.str.343.895
	.long	2113538                 # 0x204002
	.zero	4
	.quad	.L.str.344.896
	.quad	.L.str.345.897
	.long	2113538                 # 0x204002
	.zero	4
	.quad	.L.str.346.898
	.quad	.L.str.347.899
	.long	2113538                 # 0x204002
	.zero	4
	.quad	.L.str.348.900
	.quad	.L.str.349.901
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.350.902
	.quad	.L.str.351.903
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.352.904
	.quad	.L.str.353.905
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.354.906
	.quad	.L.str.355.907
	.long	98306                   # 0x18002
	.zero	4
	.quad	.L.str.356.908
	.quad	.L.str.357.909
	.long	65600                   # 0x10040
	.zero	4
	.quad	.L.str.358.910
	.quad	.L.str.359.911
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.360.912
	.quad	.L.str.361.913
	.long	65760                   # 0x100e0
	.zero	4
	.quad	.L.str.362.914
	.quad	.L.str.363.915
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.364.916
	.quad	.L.str.365.917
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.366.918
	.quad	.L.str.367.919
	.long	2048                    # 0x800
	.zero	4
	.quad	.L.str.368.920
	.quad	.L.str.369.921
	.long	2560                    # 0xa00
	.zero	4
	.quad	.L.str.370.922
	.quad	.L.str.371.923
	.long	2048                    # 0x800
	.zero	4
	.quad	.L.str.372.924
	.quad	.L.str.373.925
	.long	2048                    # 0x800
	.zero	4
	.quad	.L.str.374.926
	.quad	.L.str.375.927
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.376.928
	.quad	.L.str.377.929
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.378.930
	.quad	.L.str.379.931
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.380.932
	.quad	.L.str.381.933
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.382.934
	.quad	.L.str.383.935
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.384.936
	.quad	.L.str.385.937
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.386.938
	.quad	.L.str.387.939
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.388.940
	.quad	.L.str.389.941
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.390.942
	.quad	.L.str.391.943
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.392.944
	.quad	.L.str.393.945
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.394.946
	.quad	.L.str.395.947
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.396.948
	.quad	.L.str.397.949
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.398.950
	.quad	.L.str.399.951
	.long	8389120                 # 0x800200
	.zero	4
	.quad	.L.str.400.952
	.quad	.L.str.401.953
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.402.954
	.quad	.L.str.403.955
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.404.956
	.quad	.L.str.405.957
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.406.958
	.quad	.L.str.407.959
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.408.960
	.quad	.L.str.409.961
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.410.962
	.quad	.L.str.411.963
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.412.964
	.quad	.L.str.413.965
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.414.966
	.quad	.L.str.415.967
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.416.968
	.quad	.L.str.417.969
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.418.970
	.quad	.L.str.419.971
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.420.972
	.quad	.L.str.421.973
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.422.974
	.quad	.L.str.423.975
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.424.976
	.quad	.L.str.425.977
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.426.978
	.quad	.L.str.427.979
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.428.980
	.quad	.L.str.429.981
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.430.982
	.quad	.L.str.431.983
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.432.984
	.quad	.L.str.433.985
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.434.986
	.quad	.L.str.435.987
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.436.988
	.quad	.L.str.437.989
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.438.990
	.quad	.L.str.439.991
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.440.992
	.quad	.L.str.441.993
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.442.994
	.quad	.L.str.443.995
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.444.996
	.quad	.L.str.445.997
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.446.998
	.quad	.L.str.447.999
	.long	524288                  # 0x80000
	.zero	4
	.quad	.L.str.448.1000
	.quad	.L.str.449.1001
	.long	1048576                 # 0x100000
	.zero	4
	.quad	.L.str.450.1002
	.quad	.L.str.451.1003
	.long	1048576                 # 0x100000
	.zero	4
	.quad	.L.str.452.1004
	.quad	.L.str.453.1005
	.long	192                     # 0xc0
	.zero	4
	.quad	.L.str.454.1006
	.quad	.L.str.455.1007
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.456.1008
	.quad	.L.str.457.1009
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.458.1010
	.quad	.L.str.459.1011
	.long	2097154                 # 0x200002
	.zero	4
	.quad	.L.str.460.1012
	.quad	.L.str.461.1013
	.long	2097154                 # 0x200002
	.zero	4
	.quad	.L.str.462.1014
	.quad	.L.str.463.1015
	.long	2097154                 # 0x200002
	.zero	4
	.quad	.L.str.464.1016
	.quad	.L.str.465.1017
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.466.1018
	.quad	.L.str.465.1017
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.467.1019
	.quad	.L.str.468.1020
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.469.1021
	.quad	.L.str.470.1022
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.471.1023
	.quad	.L.str.472.1024
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.473.1025
	.quad	.L.str.474.1026
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.475.1027
	.quad	.L.str.476.1028
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.477.1029
	.quad	.L.str.478.1030
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.479.1031
	.quad	.L.str.480.1032
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.481.1033
	.quad	.L.str.482.1034
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.483.1035
	.quad	.L.str.484.1036
	.long	4194816                 # 0x400200
	.zero	4
	.quad	.L.str.485.1037
	.quad	.L.str.486.1038
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.487.1039
	.quad	.L.str.488.1040
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.489.1041
	.quad	.L.str.490.1042
	.long	514                     # 0x202
	.zero	4
	.quad	.L.str.491.1043
	.quad	.L.str.492.1044
	.long	640                     # 0x280
	.zero	4
	.quad	.L.str.493.1045
	.quad	.L.str.494.1046
	.long	8389120                 # 0x800200
	.zero	4
	.quad	.L.str.495.1047
	.quad	.L.str.496.1048
	.long	520                     # 0x208
	.zero	4
	.quad	.L.str.497.1049
	.quad	.L.str.498.1050
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.499.1051
	.quad	.L.str.500.1052
	.long	1024                    # 0x400
	.zero	4
	.quad	0
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.size	helptext, 5832

	.type	.L.str.18.571,@object   # @.str.18.571
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.18.571:
	.asciz	" %-18s  %s\n"
	.size	.L.str.18.571, 12

	.type	.L.str.20.572,@object   # @.str.20.572
.L.str.20.572:
	.asciz	"Connect via abstract Unix domain socket"
	.size	.L.str.20.572, 40

	.type	.L.str.21.573,@object   # @.str.21.573
.L.str.21.573:
	.asciz	"    --alt-svc <file name>"
	.size	.L.str.21.573, 26

	.type	.L.str.22.574,@object   # @.str.22.574
.L.str.22.574:
	.asciz	"Enable alt-svc with this cache file"
	.size	.L.str.22.574, 36

	.type	.L.str.23.575,@object   # @.str.23.575
.L.str.23.575:
	.asciz	"    --anyauth"
	.size	.L.str.23.575, 14

	.type	.L.str.24.576,@object   # @.str.24.576
.L.str.24.576:
	.asciz	"Pick any authentication method"
	.size	.L.str.24.576, 31

	.type	.L.str.25.577,@object   # @.str.25.577
.L.str.25.577:
	.asciz	"-a, --append"
	.size	.L.str.25.577, 13

	.type	.L.str.26.578,@object   # @.str.26.578
.L.str.26.578:
	.asciz	"Append to target file when uploading"
	.size	.L.str.26.578, 37

	.type	.L.str.27.579,@object   # @.str.27.579
.L.str.27.579:
	.asciz	"    --aws-sigv4 <provider1[:provider2[:region[:service]]]>"
	.size	.L.str.27.579, 59

	.type	.L.str.28.580,@object   # @.str.28.580
.L.str.28.580:
	.asciz	"Use AWS V4 signature authentication"
	.size	.L.str.28.580, 36

	.type	.L.str.29.581,@object   # @.str.29.581
.L.str.29.581:
	.asciz	"    --basic"
	.size	.L.str.29.581, 12

	.type	.L.str.30.582,@object   # @.str.30.582
.L.str.30.582:
	.asciz	"Use HTTP Basic Authentication"
	.size	.L.str.30.582, 30

	.type	.L.str.31.583,@object   # @.str.31.583
.L.str.31.583:
	.asciz	"    --cacert <file>"
	.size	.L.str.31.583, 20

	.type	.L.str.32.584,@object   # @.str.32.584
.L.str.32.584:
	.asciz	"CA certificate to verify peer against"
	.size	.L.str.32.584, 38

	.type	.L.str.33.585,@object   # @.str.33.585
.L.str.33.585:
	.asciz	"    --capath <dir>"
	.size	.L.str.33.585, 19

	.type	.L.str.34.586,@object   # @.str.34.586
.L.str.34.586:
	.asciz	"CA directory to verify peer against"
	.size	.L.str.34.586, 36

	.type	.L.str.35.587,@object   # @.str.35.587
.L.str.35.587:
	.asciz	"-E, --cert <certificate[:password]>"
	.size	.L.str.35.587, 36

	.type	.L.str.36.588,@object   # @.str.36.588
.L.str.36.588:
	.asciz	"Client certificate file and password"
	.size	.L.str.36.588, 37

	.type	.L.str.37.589,@object   # @.str.37.589
.L.str.37.589:
	.asciz	"    --cert-status"
	.size	.L.str.37.589, 18

	.type	.L.str.38.590,@object   # @.str.38.590
.L.str.38.590:
	.asciz	"Verify the status of the server cert via OCSP-staple"
	.size	.L.str.38.590, 53

	.type	.L.str.39.591,@object   # @.str.39.591
.L.str.39.591:
	.asciz	"    --cert-type <type>"
	.size	.L.str.39.591, 23

	.type	.L.str.40.592,@object   # @.str.40.592
.L.str.40.592:
	.asciz	"Certificate type (DER/PEM/ENG)"
	.size	.L.str.40.592, 31

	.type	.L.str.41.593,@object   # @.str.41.593
.L.str.41.593:
	.asciz	"    --ciphers <list of ciphers>"
	.size	.L.str.41.593, 32

	.type	.L.str.42.594,@object   # @.str.42.594
.L.str.42.594:
	.asciz	"SSL ciphers to use"
	.size	.L.str.42.594, 19

	.type	.L.str.43.595,@object   # @.str.43.595
.L.str.43.595:
	.asciz	"    --compressed"
	.size	.L.str.43.595, 17

	.type	.L.str.44.596,@object   # @.str.44.596
.L.str.44.596:
	.asciz	"Request compressed response"
	.size	.L.str.44.596, 28

	.type	.L.str.45.597,@object   # @.str.45.597
.L.str.45.597:
	.asciz	"    --compressed-ssh"
	.size	.L.str.45.597, 21

	.type	.L.str.46.598,@object   # @.str.46.598
.L.str.46.598:
	.asciz	"Enable SSH compression"
	.size	.L.str.46.598, 23

	.type	.L.str.47.599,@object   # @.str.47.599
.L.str.47.599:
	.asciz	"-K, --config <file>"
	.size	.L.str.47.599, 20

	.type	.L.str.48.600,@object   # @.str.48.600
.L.str.48.600:
	.asciz	"Read config from a file"
	.size	.L.str.48.600, 24

	.type	.L.str.49.601,@object   # @.str.49.601
.L.str.49.601:
	.asciz	"    --connect-timeout <fractional seconds>"
	.size	.L.str.49.601, 43

	.type	.L.str.50.602,@object   # @.str.50.602
.L.str.50.602:
	.asciz	"Maximum time allowed for connection"
	.size	.L.str.50.602, 36

	.type	.L.str.51.603,@object   # @.str.51.603
.L.str.51.603:
	.asciz	"    --connect-to <HOST1:PORT1:HOST2:PORT2>"
	.size	.L.str.51.603, 43

	.type	.L.str.52.604,@object   # @.str.52.604
.L.str.52.604:
	.asciz	"Connect to host"
	.size	.L.str.52.604, 16

	.type	.L.str.53.605,@object   # @.str.53.605
.L.str.53.605:
	.asciz	"-C, --continue-at <offset>"
	.size	.L.str.53.605, 27

	.type	.L.str.54.606,@object   # @.str.54.606
.L.str.54.606:
	.asciz	"Resumed transfer offset"
	.size	.L.str.54.606, 24

	.type	.L.str.55.607,@object   # @.str.55.607
.L.str.55.607:
	.asciz	"-b, --cookie <data|filename>"
	.size	.L.str.55.607, 29

	.type	.L.str.56.608,@object   # @.str.56.608
.L.str.56.608:
	.asciz	"Send cookies from string/file"
	.size	.L.str.56.608, 30

	.type	.L.str.57.609,@object   # @.str.57.609
.L.str.57.609:
	.asciz	"-c, --cookie-jar <filename>"
	.size	.L.str.57.609, 28

	.type	.L.str.58.610,@object   # @.str.58.610
.L.str.58.610:
	.asciz	"Write cookies to <filename> after operation"
	.size	.L.str.58.610, 44

	.type	.L.str.59.611,@object   # @.str.59.611
.L.str.59.611:
	.asciz	"    --create-dirs"
	.size	.L.str.59.611, 18

	.type	.L.str.60.612,@object   # @.str.60.612
.L.str.60.612:
	.asciz	"Create necessary local directory hierarchy"
	.size	.L.str.60.612, 43

	.type	.L.str.61.613,@object   # @.str.61.613
.L.str.61.613:
	.asciz	"    --create-file-mode <mode>"
	.size	.L.str.61.613, 30

	.type	.L.str.62.614,@object   # @.str.62.614
.L.str.62.614:
	.asciz	"File mode (octal) for created files"
	.size	.L.str.62.614, 36

	.type	.L.str.63.615,@object   # @.str.63.615
.L.str.63.615:
	.asciz	"    --crlf"
	.size	.L.str.63.615, 11

	.type	.L.str.64.616,@object   # @.str.64.616
.L.str.64.616:
	.asciz	"Convert LF to CRLF in upload"
	.size	.L.str.64.616, 29

	.type	.L.str.65.617,@object   # @.str.65.617
.L.str.65.617:
	.asciz	"    --crlfile <file>"
	.size	.L.str.65.617, 21

	.type	.L.str.66.618,@object   # @.str.66.618
.L.str.66.618:
	.asciz	"Use this CRL list"
	.size	.L.str.66.618, 18

	.type	.L.str.67.619,@object   # @.str.67.619
.L.str.67.619:
	.asciz	"    --curves <algorithm list>"
	.size	.L.str.67.619, 30

	.type	.L.str.68.620,@object   # @.str.68.620
.L.str.68.620:
	.asciz	"(EC) TLS key exchange algorithm(s) to request"
	.size	.L.str.68.620, 46

	.type	.L.str.69.621,@object   # @.str.69.621
.L.str.69.621:
	.asciz	"-d, --data <data>"
	.size	.L.str.69.621, 18

	.type	.L.str.70.622,@object   # @.str.70.622
.L.str.70.622:
	.asciz	"HTTP POST data"
	.size	.L.str.70.622, 15

	.type	.L.str.71.623,@object   # @.str.71.623
.L.str.71.623:
	.asciz	"    --data-ascii <data>"
	.size	.L.str.71.623, 24

	.type	.L.str.72.624,@object   # @.str.72.624
.L.str.72.624:
	.asciz	"HTTP POST ASCII data"
	.size	.L.str.72.624, 21

	.type	.L.str.73.625,@object   # @.str.73.625
.L.str.73.625:
	.asciz	"    --data-binary <data>"
	.size	.L.str.73.625, 25

	.type	.L.str.74.626,@object   # @.str.74.626
.L.str.74.626:
	.asciz	"HTTP POST binary data"
	.size	.L.str.74.626, 22

	.type	.L.str.75.627,@object   # @.str.75.627
.L.str.75.627:
	.asciz	"    --data-raw <data>"
	.size	.L.str.75.627, 22

	.type	.L.str.76.628,@object   # @.str.76.628
.L.str.76.628:
	.asciz	"HTTP POST data, '@' allowed"
	.size	.L.str.76.628, 28

	.type	.L.str.77.629,@object   # @.str.77.629
.L.str.77.629:
	.asciz	"    --data-urlencode <data>"
	.size	.L.str.77.629, 28

	.type	.L.str.78.630,@object   # @.str.78.630
.L.str.78.630:
	.asciz	"HTTP POST data url encoded"
	.size	.L.str.78.630, 27

	.type	.L.str.79.631,@object   # @.str.79.631
.L.str.79.631:
	.asciz	"    --delegation <LEVEL>"
	.size	.L.str.79.631, 25

	.type	.L.str.80.632,@object   # @.str.80.632
.L.str.80.632:
	.asciz	"GSS-API delegation permission"
	.size	.L.str.80.632, 30

	.type	.L.str.81.633,@object   # @.str.81.633
.L.str.81.633:
	.asciz	"    --digest"
	.size	.L.str.81.633, 13

	.type	.L.str.82.634,@object   # @.str.82.634
.L.str.82.634:
	.asciz	"Use HTTP Digest Authentication"
	.size	.L.str.82.634, 31

	.type	.L.str.83.635,@object   # @.str.83.635
.L.str.83.635:
	.asciz	"-q, --disable"
	.size	.L.str.83.635, 14

	.type	.L.str.84.636,@object   # @.str.84.636
.L.str.84.636:
	.asciz	"Disable .curlrc"
	.size	.L.str.84.636, 16

	.type	.L.str.85.637,@object   # @.str.85.637
.L.str.85.637:
	.asciz	"    --disable-eprt"
	.size	.L.str.85.637, 19

	.type	.L.str.86.638,@object   # @.str.86.638
.L.str.86.638:
	.asciz	"Inhibit using EPRT or LPRT"
	.size	.L.str.86.638, 27

	.type	.L.str.87.639,@object   # @.str.87.639
.L.str.87.639:
	.asciz	"    --disable-epsv"
	.size	.L.str.87.639, 19

	.type	.L.str.88.640,@object   # @.str.88.640
.L.str.88.640:
	.asciz	"Inhibit using EPSV"
	.size	.L.str.88.640, 19

	.type	.L.str.89.641,@object   # @.str.89.641
.L.str.89.641:
	.asciz	"    --disallow-username-in-url"
	.size	.L.str.89.641, 31

	.type	.L.str.90.642,@object   # @.str.90.642
.L.str.90.642:
	.asciz	"Disallow username in url"
	.size	.L.str.90.642, 25

	.type	.L.str.91.643,@object   # @.str.91.643
.L.str.91.643:
	.asciz	"    --dns-interface <interface>"
	.size	.L.str.91.643, 32

	.type	.L.str.92.644,@object   # @.str.92.644
.L.str.92.644:
	.asciz	"Interface to use for DNS requests"
	.size	.L.str.92.644, 34

	.type	.L.str.93.645,@object   # @.str.93.645
.L.str.93.645:
	.asciz	"    --dns-ipv4-addr <address>"
	.size	.L.str.93.645, 30

	.type	.L.str.94.646,@object   # @.str.94.646
.L.str.94.646:
	.asciz	"IPv4 address to use for DNS requests"
	.size	.L.str.94.646, 37

	.type	.L.str.95.647,@object   # @.str.95.647
.L.str.95.647:
	.asciz	"    --dns-ipv6-addr <address>"
	.size	.L.str.95.647, 30

	.type	.L.str.96.648,@object   # @.str.96.648
.L.str.96.648:
	.asciz	"IPv6 address to use for DNS requests"
	.size	.L.str.96.648, 37

	.type	.L.str.97.649,@object   # @.str.97.649
.L.str.97.649:
	.asciz	"    --dns-servers <addresses>"
	.size	.L.str.97.649, 30

	.type	.L.str.98.650,@object   # @.str.98.650
.L.str.98.650:
	.asciz	"DNS server addrs to use"
	.size	.L.str.98.650, 24

	.type	.L.str.99.651,@object   # @.str.99.651
.L.str.99.651:
	.asciz	"    --doh-cert-status"
	.size	.L.str.99.651, 22

	.type	.L.str.100.652,@object  # @.str.100.652
.L.str.100.652:
	.asciz	"Verify the status of the DoH server cert via OCSP-staple"
	.size	.L.str.100.652, 57

	.type	.L.str.101.653,@object  # @.str.101.653
.L.str.101.653:
	.asciz	"    --doh-insecure"
	.size	.L.str.101.653, 19

	.type	.L.str.102.654,@object  # @.str.102.654
.L.str.102.654:
	.asciz	"Allow insecure DoH server connections"
	.size	.L.str.102.654, 38

	.type	.L.str.103.655,@object  # @.str.103.655
.L.str.103.655:
	.asciz	"    --doh-url <URL>"
	.size	.L.str.103.655, 20

	.type	.L.str.104.656,@object  # @.str.104.656
.L.str.104.656:
	.asciz	"Resolve host names over DoH"
	.size	.L.str.104.656, 28

	.type	.L.str.105.657,@object  # @.str.105.657
.L.str.105.657:
	.asciz	"-D, --dump-header <filename>"
	.size	.L.str.105.657, 29

	.type	.L.str.106.658,@object  # @.str.106.658
.L.str.106.658:
	.asciz	"Write the received headers to <filename>"
	.size	.L.str.106.658, 41

	.type	.L.str.107.659,@object  # @.str.107.659
.L.str.107.659:
	.asciz	"    --egd-file <file>"
	.size	.L.str.107.659, 22

	.type	.L.str.108.660,@object  # @.str.108.660
.L.str.108.660:
	.asciz	"EGD socket path for random data"
	.size	.L.str.108.660, 32

	.type	.L.str.109.661,@object  # @.str.109.661
.L.str.109.661:
	.asciz	"    --engine <name>"
	.size	.L.str.109.661, 20

	.type	.L.str.110.662,@object  # @.str.110.662
.L.str.110.662:
	.asciz	"Crypto engine to use"
	.size	.L.str.110.662, 21

	.type	.L.str.111.663,@object  # @.str.111.663
.L.str.111.663:
	.asciz	"    --etag-compare <file>"
	.size	.L.str.111.663, 26

	.type	.L.str.112.664,@object  # @.str.112.664
.L.str.112.664:
	.asciz	"Pass an ETag from a file as a custom header"
	.size	.L.str.112.664, 44

	.type	.L.str.113.665,@object  # @.str.113.665
.L.str.113.665:
	.asciz	"    --etag-save <file>"
	.size	.L.str.113.665, 23

	.type	.L.str.114.666,@object  # @.str.114.666
.L.str.114.666:
	.asciz	"Parse ETag from a request and save it to a file"
	.size	.L.str.114.666, 48

	.type	.L.str.115.667,@object  # @.str.115.667
.L.str.115.667:
	.asciz	"    --expect100-timeout <seconds>"
	.size	.L.str.115.667, 34

	.type	.L.str.116.668,@object  # @.str.116.668
.L.str.116.668:
	.asciz	"How long to wait for 100-continue"
	.size	.L.str.116.668, 34

	.type	.L.str.117.669,@object  # @.str.117.669
.L.str.117.669:
	.asciz	"-f, --fail"
	.size	.L.str.117.669, 11

	.type	.L.str.118.670,@object  # @.str.118.670
.L.str.118.670:
	.asciz	"Fail silently (no output at all) on HTTP errors"
	.size	.L.str.118.670, 48

	.type	.L.str.119.671,@object  # @.str.119.671
.L.str.119.671:
	.asciz	"    --fail-early"
	.size	.L.str.119.671, 17

	.type	.L.str.120.672,@object  # @.str.120.672
.L.str.120.672:
	.asciz	"Fail on first transfer error, do not continue"
	.size	.L.str.120.672, 46

	.type	.L.str.121.673,@object  # @.str.121.673
.L.str.121.673:
	.asciz	"    --fail-with-body"
	.size	.L.str.121.673, 21

	.type	.L.str.122.674,@object  # @.str.122.674
.L.str.122.674:
	.asciz	"Fail on HTTP errors but save the body"
	.size	.L.str.122.674, 38

	.type	.L.str.123.675,@object  # @.str.123.675
.L.str.123.675:
	.asciz	"    --false-start"
	.size	.L.str.123.675, 18

	.type	.L.str.124.676,@object  # @.str.124.676
.L.str.124.676:
	.asciz	"Enable TLS False Start"
	.size	.L.str.124.676, 23

	.type	.L.str.125.677,@object  # @.str.125.677
.L.str.125.677:
	.asciz	"-F, --form <name=content>"
	.size	.L.str.125.677, 26

	.type	.L.str.126.678,@object  # @.str.126.678
.L.str.126.678:
	.asciz	"Specify multipart MIME data"
	.size	.L.str.126.678, 28

	.type	.L.str.127.679,@object  # @.str.127.679
.L.str.127.679:
	.asciz	"    --form-string <name=string>"
	.size	.L.str.127.679, 32

	.type	.L.str.128.680,@object  # @.str.128.680
.L.str.128.680:
	.asciz	"    --ftp-account <data>"
	.size	.L.str.128.680, 25

	.type	.L.str.129.681,@object  # @.str.129.681
.L.str.129.681:
	.asciz	"Account data string"
	.size	.L.str.129.681, 20

	.type	.L.str.130.682,@object  # @.str.130.682
.L.str.130.682:
	.asciz	"    --ftp-alternative-to-user <command>"
	.size	.L.str.130.682, 40

	.type	.L.str.131.683,@object  # @.str.131.683
.L.str.131.683:
	.asciz	"String to replace USER [name]"
	.size	.L.str.131.683, 30

	.type	.L.str.132.684,@object  # @.str.132.684
.L.str.132.684:
	.asciz	"    --ftp-create-dirs"
	.size	.L.str.132.684, 22

	.type	.L.str.133.685,@object  # @.str.133.685
.L.str.133.685:
	.asciz	"Create the remote dirs if not present"
	.size	.L.str.133.685, 38

	.type	.L.str.134.686,@object  # @.str.134.686
.L.str.134.686:
	.asciz	"    --ftp-method <method>"
	.size	.L.str.134.686, 26

	.type	.L.str.135.687,@object  # @.str.135.687
.L.str.135.687:
	.asciz	"Control CWD usage"
	.size	.L.str.135.687, 18

	.type	.L.str.136.688,@object  # @.str.136.688
.L.str.136.688:
	.asciz	"    --ftp-pasv"
	.size	.L.str.136.688, 15

	.type	.L.str.137.689,@object  # @.str.137.689
.L.str.137.689:
	.asciz	"Use PASV/EPSV instead of PORT"
	.size	.L.str.137.689, 30

	.type	.L.str.138.690,@object  # @.str.138.690
.L.str.138.690:
	.asciz	"-P, --ftp-port <address>"
	.size	.L.str.138.690, 25

	.type	.L.str.139.691,@object  # @.str.139.691
.L.str.139.691:
	.asciz	"Use PORT instead of PASV"
	.size	.L.str.139.691, 25

	.type	.L.str.140.692,@object  # @.str.140.692
.L.str.140.692:
	.asciz	"    --ftp-pret"
	.size	.L.str.140.692, 15

	.type	.L.str.141.693,@object  # @.str.141.693
.L.str.141.693:
	.asciz	"Send PRET before PASV"
	.size	.L.str.141.693, 22

	.type	.L.str.142.694,@object  # @.str.142.694
.L.str.142.694:
	.asciz	"    --ftp-skip-pasv-ip"
	.size	.L.str.142.694, 23

	.type	.L.str.143.695,@object  # @.str.143.695
.L.str.143.695:
	.asciz	"Skip the IP address for PASV"
	.size	.L.str.143.695, 29

	.type	.L.str.144.696,@object  # @.str.144.696
.L.str.144.696:
	.asciz	"    --ftp-ssl-ccc"
	.size	.L.str.144.696, 18

	.type	.L.str.145.697,@object  # @.str.145.697
.L.str.145.697:
	.asciz	"Send CCC after authenticating"
	.size	.L.str.145.697, 30

	.type	.L.str.146.698,@object  # @.str.146.698
.L.str.146.698:
	.asciz	"    --ftp-ssl-ccc-mode <active/passive>"
	.size	.L.str.146.698, 40

	.type	.L.str.147.699,@object  # @.str.147.699
.L.str.147.699:
	.asciz	"Set CCC mode"
	.size	.L.str.147.699, 13

	.type	.L.str.148.700,@object  # @.str.148.700
.L.str.148.700:
	.asciz	"    --ftp-ssl-control"
	.size	.L.str.148.700, 22

	.type	.L.str.149.701,@object  # @.str.149.701
.L.str.149.701:
	.asciz	"Require SSL/TLS for FTP login, clear for transfer"
	.size	.L.str.149.701, 50

	.type	.L.str.150.702,@object  # @.str.150.702
.L.str.150.702:
	.asciz	"-G, --get"
	.size	.L.str.150.702, 10

	.type	.L.str.151.703,@object  # @.str.151.703
.L.str.151.703:
	.asciz	"Put the post data in the URL and use GET"
	.size	.L.str.151.703, 41

	.type	.L.str.152.704,@object  # @.str.152.704
.L.str.152.704:
	.asciz	"-g, --globoff"
	.size	.L.str.152.704, 14

	.type	.L.str.153.705,@object  # @.str.153.705
.L.str.153.705:
	.asciz	"Disable URL sequences and ranges using {} and []"
	.size	.L.str.153.705, 49

	.type	.L.str.154.706,@object  # @.str.154.706
.L.str.154.706:
	.asciz	"    --happy-eyeballs-timeout-ms <milliseconds>"
	.size	.L.str.154.706, 47

	.type	.L.str.155.707,@object  # @.str.155.707
.L.str.155.707:
	.asciz	"Time for IPv6 before trying IPv4"
	.size	.L.str.155.707, 33

	.type	.L.str.156.708,@object  # @.str.156.708
.L.str.156.708:
	.asciz	"    --haproxy-protocol"
	.size	.L.str.156.708, 23

	.type	.L.str.157.709,@object  # @.str.157.709
.L.str.157.709:
	.asciz	"Send HAProxy PROXY protocol v1 header"
	.size	.L.str.157.709, 38

	.type	.L.str.158.710,@object  # @.str.158.710
.L.str.158.710:
	.asciz	"-I, --head"
	.size	.L.str.158.710, 11

	.type	.L.str.159.711,@object  # @.str.159.711
.L.str.159.711:
	.asciz	"Show document info only"
	.size	.L.str.159.711, 24

	.type	.L.str.160.712,@object  # @.str.160.712
.L.str.160.712:
	.asciz	"-H, --header <header/@file>"
	.size	.L.str.160.712, 28

	.type	.L.str.161.713,@object  # @.str.161.713
.L.str.161.713:
	.asciz	"Pass custom header(s) to server"
	.size	.L.str.161.713, 32

	.type	.L.str.162.714,@object  # @.str.162.714
.L.str.162.714:
	.asciz	"-h, --help <category>"
	.size	.L.str.162.714, 22

	.type	.L.str.163.715,@object  # @.str.163.715
.L.str.163.715:
	.asciz	"Get help for commands"
	.size	.L.str.163.715, 22

	.type	.L.str.164.716,@object  # @.str.164.716
.L.str.164.716:
	.asciz	"    --hostpubmd5 <md5>"
	.size	.L.str.164.716, 23

	.type	.L.str.165.717,@object  # @.str.165.717
.L.str.165.717:
	.asciz	"Acceptable MD5 hash of the host public key"
	.size	.L.str.165.717, 43

	.type	.L.str.166.718,@object  # @.str.166.718
.L.str.166.718:
	.asciz	"    --hsts <file name>"
	.size	.L.str.166.718, 23

	.type	.L.str.167.719,@object  # @.str.167.719
.L.str.167.719:
	.asciz	"Enable HSTS with this cache file"
	.size	.L.str.167.719, 33

	.type	.L.str.168.720,@object  # @.str.168.720
.L.str.168.720:
	.asciz	"    --http0.9"
	.size	.L.str.168.720, 14

	.type	.L.str.169.721,@object  # @.str.169.721
.L.str.169.721:
	.asciz	"Allow HTTP 0.9 responses"
	.size	.L.str.169.721, 25

	.type	.L.str.170.722,@object  # @.str.170.722
.L.str.170.722:
	.asciz	"-0, --http1.0"
	.size	.L.str.170.722, 14

	.type	.L.str.171.723,@object  # @.str.171.723
.L.str.171.723:
	.asciz	"Use HTTP 1.0"
	.size	.L.str.171.723, 13

	.type	.L.str.172.724,@object  # @.str.172.724
.L.str.172.724:
	.asciz	"    --http1.1"
	.size	.L.str.172.724, 14

	.type	.L.str.173.725,@object  # @.str.173.725
.L.str.173.725:
	.asciz	"Use HTTP 1.1"
	.size	.L.str.173.725, 13

	.type	.L.str.174.726,@object  # @.str.174.726
.L.str.174.726:
	.asciz	"    --http2"
	.size	.L.str.174.726, 12

	.type	.L.str.175.727,@object  # @.str.175.727
.L.str.175.727:
	.asciz	"Use HTTP 2"
	.size	.L.str.175.727, 11

	.type	.L.str.176.728,@object  # @.str.176.728
.L.str.176.728:
	.asciz	"    --http2-prior-knowledge"
	.size	.L.str.176.728, 28

	.type	.L.str.177.729,@object  # @.str.177.729
.L.str.177.729:
	.asciz	"Use HTTP 2 without HTTP/1.1 Upgrade"
	.size	.L.str.177.729, 36

	.type	.L.str.178.730,@object  # @.str.178.730
.L.str.178.730:
	.asciz	"    --http3"
	.size	.L.str.178.730, 12

	.type	.L.str.179.731,@object  # @.str.179.731
.L.str.179.731:
	.asciz	"Use HTTP v3"
	.size	.L.str.179.731, 12

	.type	.L.str.180.732,@object  # @.str.180.732
.L.str.180.732:
	.asciz	"    --ignore-content-length"
	.size	.L.str.180.732, 28

	.type	.L.str.181.733,@object  # @.str.181.733
.L.str.181.733:
	.asciz	"Ignore the size of the remote resource"
	.size	.L.str.181.733, 39

	.type	.L.str.182.734,@object  # @.str.182.734
.L.str.182.734:
	.asciz	"-i, --include"
	.size	.L.str.182.734, 14

	.type	.L.str.183.735,@object  # @.str.183.735
.L.str.183.735:
	.asciz	"Include protocol response headers in the output"
	.size	.L.str.183.735, 48

	.type	.L.str.184.736,@object  # @.str.184.736
.L.str.184.736:
	.asciz	"-k, --insecure"
	.size	.L.str.184.736, 15

	.type	.L.str.185.737,@object  # @.str.185.737
.L.str.185.737:
	.asciz	"Allow insecure server connections when using SSL"
	.size	.L.str.185.737, 49

	.type	.L.str.186.738,@object  # @.str.186.738
.L.str.186.738:
	.asciz	"    --interface <name>"
	.size	.L.str.186.738, 23

	.type	.L.str.187.739,@object  # @.str.187.739
.L.str.187.739:
	.asciz	"Use network INTERFACE (or address)"
	.size	.L.str.187.739, 35

	.type	.L.str.188.740,@object  # @.str.188.740
.L.str.188.740:
	.asciz	"-4, --ipv4"
	.size	.L.str.188.740, 11

	.type	.L.str.189.741,@object  # @.str.189.741
.L.str.189.741:
	.asciz	"Resolve names to IPv4 addresses"
	.size	.L.str.189.741, 32

	.type	.L.str.190.742,@object  # @.str.190.742
.L.str.190.742:
	.asciz	"-6, --ipv6"
	.size	.L.str.190.742, 11

	.type	.L.str.191.743,@object  # @.str.191.743
.L.str.191.743:
	.asciz	"Resolve names to IPv6 addresses"
	.size	.L.str.191.743, 32

	.type	.L.str.192.744,@object  # @.str.192.744
.L.str.192.744:
	.asciz	"-j, --junk-session-cookies"
	.size	.L.str.192.744, 27

	.type	.L.str.193.745,@object  # @.str.193.745
.L.str.193.745:
	.asciz	"Ignore session cookies read from file"
	.size	.L.str.193.745, 38

	.type	.L.str.194.746,@object  # @.str.194.746
.L.str.194.746:
	.asciz	"    --keepalive-time <seconds>"
	.size	.L.str.194.746, 31

	.type	.L.str.195.747,@object  # @.str.195.747
.L.str.195.747:
	.asciz	"Interval time for keepalive probes"
	.size	.L.str.195.747, 35

	.type	.L.str.196.748,@object  # @.str.196.748
.L.str.196.748:
	.asciz	"    --key <key>"
	.size	.L.str.196.748, 16

	.type	.L.str.197.749,@object  # @.str.197.749
.L.str.197.749:
	.asciz	"Private key file name"
	.size	.L.str.197.749, 22

	.type	.L.str.198.750,@object  # @.str.198.750
.L.str.198.750:
	.asciz	"    --key-type <type>"
	.size	.L.str.198.750, 22

	.type	.L.str.199.751,@object  # @.str.199.751
.L.str.199.751:
	.asciz	"Private key file type (DER/PEM/ENG)"
	.size	.L.str.199.751, 36

	.type	.L.str.200.752,@object  # @.str.200.752
.L.str.200.752:
	.asciz	"    --krb <level>"
	.size	.L.str.200.752, 18

	.type	.L.str.201.753,@object  # @.str.201.753
.L.str.201.753:
	.asciz	"Enable Kerberos with security <level>"
	.size	.L.str.201.753, 38

	.type	.L.str.202.754,@object  # @.str.202.754
.L.str.202.754:
	.asciz	"    --libcurl <file>"
	.size	.L.str.202.754, 21

	.type	.L.str.203.755,@object  # @.str.203.755
.L.str.203.755:
	.asciz	"Dump libcurl equivalent code of this command line"
	.size	.L.str.203.755, 50

	.type	.L.str.204.756,@object  # @.str.204.756
.L.str.204.756:
	.asciz	"    --limit-rate <speed>"
	.size	.L.str.204.756, 25

	.type	.L.str.205.757,@object  # @.str.205.757
.L.str.205.757:
	.asciz	"Limit transfer speed to RATE"
	.size	.L.str.205.757, 29

	.type	.L.str.206.758,@object  # @.str.206.758
.L.str.206.758:
	.asciz	"-l, --list-only"
	.size	.L.str.206.758, 16

	.type	.L.str.207.759,@object  # @.str.207.759
.L.str.207.759:
	.asciz	"List only mode"
	.size	.L.str.207.759, 15

	.type	.L.str.208.760,@object  # @.str.208.760
.L.str.208.760:
	.asciz	"    --local-port <num/range>"
	.size	.L.str.208.760, 29

	.type	.L.str.209.761,@object  # @.str.209.761
.L.str.209.761:
	.asciz	"Force use of RANGE for local port numbers"
	.size	.L.str.209.761, 42

	.type	.L.str.210.762,@object  # @.str.210.762
.L.str.210.762:
	.asciz	"-L, --location"
	.size	.L.str.210.762, 15

	.type	.L.str.211.763,@object  # @.str.211.763
.L.str.211.763:
	.asciz	"Follow redirects"
	.size	.L.str.211.763, 17

	.type	.L.str.212.764,@object  # @.str.212.764
.L.str.212.764:
	.asciz	"    --location-trusted"
	.size	.L.str.212.764, 23

	.type	.L.str.213.765,@object  # @.str.213.765
.L.str.213.765:
	.asciz	"Like --location, and send auth to other hosts"
	.size	.L.str.213.765, 46

	.type	.L.str.214.766,@object  # @.str.214.766
.L.str.214.766:
	.asciz	"    --login-options <options>"
	.size	.L.str.214.766, 30

	.type	.L.str.215.767,@object  # @.str.215.767
.L.str.215.767:
	.asciz	"Server login options"
	.size	.L.str.215.767, 21

	.type	.L.str.216.768,@object  # @.str.216.768
.L.str.216.768:
	.asciz	"    --mail-auth <address>"
	.size	.L.str.216.768, 26

	.type	.L.str.217.769,@object  # @.str.217.769
.L.str.217.769:
	.asciz	"Originator address of the original email"
	.size	.L.str.217.769, 41

	.type	.L.str.218.770,@object  # @.str.218.770
.L.str.218.770:
	.asciz	"    --mail-from <address>"
	.size	.L.str.218.770, 26

	.type	.L.str.219.771,@object  # @.str.219.771
.L.str.219.771:
	.asciz	"Mail from this address"
	.size	.L.str.219.771, 23

	.type	.L.str.220.772,@object  # @.str.220.772
.L.str.220.772:
	.asciz	"    --mail-rcpt <address>"
	.size	.L.str.220.772, 26

	.type	.L.str.221.773,@object  # @.str.221.773
.L.str.221.773:
	.asciz	"Mail to this address"
	.size	.L.str.221.773, 21

	.type	.L.str.222.774,@object  # @.str.222.774
.L.str.222.774:
	.asciz	"    --mail-rcpt-allowfails"
	.size	.L.str.222.774, 27

	.type	.L.str.223.775,@object  # @.str.223.775
.L.str.223.775:
	.asciz	"Allow RCPT TO command to fail for some recipients"
	.size	.L.str.223.775, 50

	.type	.L.str.224.776,@object  # @.str.224.776
.L.str.224.776:
	.asciz	"-M, --manual"
	.size	.L.str.224.776, 13

	.type	.L.str.225.777,@object  # @.str.225.777
.L.str.225.777:
	.asciz	"Display the full manual"
	.size	.L.str.225.777, 24

	.type	.L.str.226.778,@object  # @.str.226.778
.L.str.226.778:
	.asciz	"    --max-filesize <bytes>"
	.size	.L.str.226.778, 27

	.type	.L.str.227.779,@object  # @.str.227.779
.L.str.227.779:
	.asciz	"Maximum file size to download"
	.size	.L.str.227.779, 30

	.type	.L.str.228.780,@object  # @.str.228.780
.L.str.228.780:
	.asciz	"    --max-redirs <num>"
	.size	.L.str.228.780, 23

	.type	.L.str.229.781,@object  # @.str.229.781
.L.str.229.781:
	.asciz	"Maximum number of redirects allowed"
	.size	.L.str.229.781, 36

	.type	.L.str.230.782,@object  # @.str.230.782
.L.str.230.782:
	.asciz	"-m, --max-time <fractional seconds>"
	.size	.L.str.230.782, 36

	.type	.L.str.231.783,@object  # @.str.231.783
.L.str.231.783:
	.asciz	"Maximum time allowed for the transfer"
	.size	.L.str.231.783, 38

	.type	.L.str.232.784,@object  # @.str.232.784
.L.str.232.784:
	.asciz	"    --metalink"
	.size	.L.str.232.784, 15

	.type	.L.str.233.785,@object  # @.str.233.785
.L.str.233.785:
	.asciz	"Process given URLs as metalink XML file"
	.size	.L.str.233.785, 40

	.type	.L.str.234.786,@object  # @.str.234.786
.L.str.234.786:
	.asciz	"    --negotiate"
	.size	.L.str.234.786, 16

	.type	.L.str.235.787,@object  # @.str.235.787
.L.str.235.787:
	.asciz	"Use HTTP Negotiate (SPNEGO) authentication"
	.size	.L.str.235.787, 43

	.type	.L.str.236.788,@object  # @.str.236.788
.L.str.236.788:
	.asciz	"-n, --netrc"
	.size	.L.str.236.788, 12

	.type	.L.str.237.789,@object  # @.str.237.789
.L.str.237.789:
	.asciz	"Must read .netrc for user name and password"
	.size	.L.str.237.789, 44

	.type	.L.str.238.790,@object  # @.str.238.790
.L.str.238.790:
	.asciz	"    --netrc-file <filename>"
	.size	.L.str.238.790, 28

	.type	.L.str.239.791,@object  # @.str.239.791
.L.str.239.791:
	.asciz	"Specify FILE for netrc"
	.size	.L.str.239.791, 23

	.type	.L.str.240.792,@object  # @.str.240.792
.L.str.240.792:
	.asciz	"    --netrc-optional"
	.size	.L.str.240.792, 21

	.type	.L.str.241.793,@object  # @.str.241.793
.L.str.241.793:
	.asciz	"Use either .netrc or URL"
	.size	.L.str.241.793, 25

	.type	.L.str.242.794,@object  # @.str.242.794
.L.str.242.794:
	.asciz	"-:, --next"
	.size	.L.str.242.794, 11

	.type	.L.str.243.795,@object  # @.str.243.795
.L.str.243.795:
	.asciz	"Make next URL use its separate set of options"
	.size	.L.str.243.795, 46

	.type	.L.str.244.796,@object  # @.str.244.796
.L.str.244.796:
	.asciz	"    --no-alpn"
	.size	.L.str.244.796, 14

	.type	.L.str.245.797,@object  # @.str.245.797
.L.str.245.797:
	.asciz	"Disable the ALPN TLS extension"
	.size	.L.str.245.797, 31

	.type	.L.str.246.798,@object  # @.str.246.798
.L.str.246.798:
	.asciz	"-N, --no-buffer"
	.size	.L.str.246.798, 16

	.type	.L.str.247.799,@object  # @.str.247.799
.L.str.247.799:
	.asciz	"Disable buffering of the output stream"
	.size	.L.str.247.799, 39

	.type	.L.str.248.800,@object  # @.str.248.800
.L.str.248.800:
	.asciz	"    --no-keepalive"
	.size	.L.str.248.800, 19

	.type	.L.str.249.801,@object  # @.str.249.801
.L.str.249.801:
	.asciz	"Disable TCP keepalive on the connection"
	.size	.L.str.249.801, 40

	.type	.L.str.250.802,@object  # @.str.250.802
.L.str.250.802:
	.asciz	"    --no-npn"
	.size	.L.str.250.802, 13

	.type	.L.str.251.803,@object  # @.str.251.803
.L.str.251.803:
	.asciz	"Disable the NPN TLS extension"
	.size	.L.str.251.803, 30

	.type	.L.str.252.804,@object  # @.str.252.804
.L.str.252.804:
	.asciz	"    --no-progress-meter"
	.size	.L.str.252.804, 24

	.type	.L.str.253.805,@object  # @.str.253.805
.L.str.253.805:
	.asciz	"Do not show the progress meter"
	.size	.L.str.253.805, 31

	.type	.L.str.254.806,@object  # @.str.254.806
.L.str.254.806:
	.asciz	"    --no-sessionid"
	.size	.L.str.254.806, 19

	.type	.L.str.255.807,@object  # @.str.255.807
.L.str.255.807:
	.asciz	"Disable SSL session-ID reusing"
	.size	.L.str.255.807, 31

	.type	.L.str.256.808,@object  # @.str.256.808
.L.str.256.808:
	.asciz	"    --noproxy <no-proxy-list>"
	.size	.L.str.256.808, 30

	.type	.L.str.257.809,@object  # @.str.257.809
.L.str.257.809:
	.asciz	"List of hosts which do not use proxy"
	.size	.L.str.257.809, 37

	.type	.L.str.258.810,@object  # @.str.258.810
.L.str.258.810:
	.asciz	"    --ntlm"
	.size	.L.str.258.810, 11

	.type	.L.str.259.811,@object  # @.str.259.811
.L.str.259.811:
	.asciz	"Use HTTP NTLM authentication"
	.size	.L.str.259.811, 29

	.type	.L.str.260.812,@object  # @.str.260.812
.L.str.260.812:
	.asciz	"    --ntlm-wb"
	.size	.L.str.260.812, 14

	.type	.L.str.261.813,@object  # @.str.261.813
.L.str.261.813:
	.asciz	"Use HTTP NTLM authentication with winbind"
	.size	.L.str.261.813, 42

	.type	.L.str.262.814,@object  # @.str.262.814
.L.str.262.814:
	.asciz	"    --oauth2-bearer <token>"
	.size	.L.str.262.814, 28

	.type	.L.str.263.815,@object  # @.str.263.815
.L.str.263.815:
	.asciz	"OAuth 2 Bearer Token"
	.size	.L.str.263.815, 21

	.type	.L.str.264.816,@object  # @.str.264.816
.L.str.264.816:
	.asciz	"-o, --output <file>"
	.size	.L.str.264.816, 20

	.type	.L.str.265.817,@object  # @.str.265.817
.L.str.265.817:
	.asciz	"Write to file instead of stdout"
	.size	.L.str.265.817, 32

	.type	.L.str.266.818,@object  # @.str.266.818
.L.str.266.818:
	.asciz	"    --output-dir <dir>"
	.size	.L.str.266.818, 23

	.type	.L.str.267.819,@object  # @.str.267.819
.L.str.267.819:
	.asciz	"Directory to save files in"
	.size	.L.str.267.819, 27

	.type	.L.str.268.820,@object  # @.str.268.820
.L.str.268.820:
	.asciz	"-Z, --parallel"
	.size	.L.str.268.820, 15

	.type	.L.str.269.821,@object  # @.str.269.821
.L.str.269.821:
	.asciz	"Perform transfers in parallel"
	.size	.L.str.269.821, 30

	.type	.L.str.270.822,@object  # @.str.270.822
.L.str.270.822:
	.asciz	"    --parallel-immediate"
	.size	.L.str.270.822, 25

	.type	.L.str.271.823,@object  # @.str.271.823
.L.str.271.823:
	.asciz	"Do not wait for multiplexing (with --parallel)"
	.size	.L.str.271.823, 47

	.type	.L.str.272.824,@object  # @.str.272.824
.L.str.272.824:
	.asciz	"    --parallel-max <num>"
	.size	.L.str.272.824, 25

	.type	.L.str.273.825,@object  # @.str.273.825
.L.str.273.825:
	.asciz	"Maximum concurrency for parallel transfers"
	.size	.L.str.273.825, 43

	.type	.L.str.274.826,@object  # @.str.274.826
.L.str.274.826:
	.asciz	"    --pass <phrase>"
	.size	.L.str.274.826, 20

	.type	.L.str.275.827,@object  # @.str.275.827
.L.str.275.827:
	.asciz	"Pass phrase for the private key"
	.size	.L.str.275.827, 32

	.type	.L.str.276.828,@object  # @.str.276.828
.L.str.276.828:
	.asciz	"    --path-as-is"
	.size	.L.str.276.828, 17

	.type	.L.str.277.829,@object  # @.str.277.829
.L.str.277.829:
	.asciz	"Do not squash .. sequences in URL path"
	.size	.L.str.277.829, 39

	.type	.L.str.278.830,@object  # @.str.278.830
.L.str.278.830:
	.asciz	"    --pinnedpubkey <hashes>"
	.size	.L.str.278.830, 28

	.type	.L.str.279.831,@object  # @.str.279.831
.L.str.279.831:
	.asciz	"FILE/HASHES Public key to verify peer against"
	.size	.L.str.279.831, 46

	.type	.L.str.280.832,@object  # @.str.280.832
.L.str.280.832:
	.asciz	"    --post301"
	.size	.L.str.280.832, 14

	.type	.L.str.281.833,@object  # @.str.281.833
.L.str.281.833:
	.asciz	"Do not switch to GET after following a 301"
	.size	.L.str.281.833, 43

	.type	.L.str.282.834,@object  # @.str.282.834
.L.str.282.834:
	.asciz	"    --post302"
	.size	.L.str.282.834, 14

	.type	.L.str.283.835,@object  # @.str.283.835
.L.str.283.835:
	.asciz	"Do not switch to GET after following a 302"
	.size	.L.str.283.835, 43

	.type	.L.str.284.836,@object  # @.str.284.836
.L.str.284.836:
	.asciz	"    --post303"
	.size	.L.str.284.836, 14

	.type	.L.str.285.837,@object  # @.str.285.837
.L.str.285.837:
	.asciz	"Do not switch to GET after following a 303"
	.size	.L.str.285.837, 43

	.type	.L.str.286.838,@object  # @.str.286.838
.L.str.286.838:
	.asciz	"    --preproxy [protocol://]host[:port]"
	.size	.L.str.286.838, 40

	.type	.L.str.287.839,@object  # @.str.287.839
.L.str.287.839:
	.asciz	"Use this proxy first"
	.size	.L.str.287.839, 21

	.type	.L.str.288.840,@object  # @.str.288.840
.L.str.288.840:
	.asciz	"-#, --progress-bar"
	.size	.L.str.288.840, 19

	.type	.L.str.289.841,@object  # @.str.289.841
.L.str.289.841:
	.asciz	"Display transfer progress as a bar"
	.size	.L.str.289.841, 35

	.type	.L.str.290.842,@object  # @.str.290.842
.L.str.290.842:
	.asciz	"    --proto <protocols>"
	.size	.L.str.290.842, 24

	.type	.L.str.291.843,@object  # @.str.291.843
.L.str.291.843:
	.asciz	"Enable/disable PROTOCOLS"
	.size	.L.str.291.843, 25

	.type	.L.str.292.844,@object  # @.str.292.844
.L.str.292.844:
	.asciz	"    --proto-default <protocol>"
	.size	.L.str.292.844, 31

	.type	.L.str.293.845,@object  # @.str.293.845
.L.str.293.845:
	.asciz	"Use PROTOCOL for any URL missing a scheme"
	.size	.L.str.293.845, 42

	.type	.L.str.294.846,@object  # @.str.294.846
.L.str.294.846:
	.asciz	"    --proto-redir <protocols>"
	.size	.L.str.294.846, 30

	.type	.L.str.295.847,@object  # @.str.295.847
.L.str.295.847:
	.asciz	"Enable/disable PROTOCOLS on redirect"
	.size	.L.str.295.847, 37

	.type	.L.str.296.848,@object  # @.str.296.848
.L.str.296.848:
	.asciz	"-x, --proxy [protocol://]host[:port]"
	.size	.L.str.296.848, 37

	.type	.L.str.297.849,@object  # @.str.297.849
.L.str.297.849:
	.asciz	"Use this proxy"
	.size	.L.str.297.849, 15

	.type	.L.str.298.850,@object  # @.str.298.850
.L.str.298.850:
	.asciz	"    --proxy-anyauth"
	.size	.L.str.298.850, 20

	.type	.L.str.299.851,@object  # @.str.299.851
.L.str.299.851:
	.asciz	"Pick any proxy authentication method"
	.size	.L.str.299.851, 37

	.type	.L.str.300.852,@object  # @.str.300.852
.L.str.300.852:
	.asciz	"    --proxy-basic"
	.size	.L.str.300.852, 18

	.type	.L.str.301.853,@object  # @.str.301.853
.L.str.301.853:
	.asciz	"Use Basic authentication on the proxy"
	.size	.L.str.301.853, 38

	.type	.L.str.302.854,@object  # @.str.302.854
.L.str.302.854:
	.asciz	"    --proxy-cacert <file>"
	.size	.L.str.302.854, 26

	.type	.L.str.303.855,@object  # @.str.303.855
.L.str.303.855:
	.asciz	"CA certificate to verify peer against for proxy"
	.size	.L.str.303.855, 48

	.type	.L.str.304.856,@object  # @.str.304.856
.L.str.304.856:
	.asciz	"    --proxy-capath <dir>"
	.size	.L.str.304.856, 25

	.type	.L.str.305.857,@object  # @.str.305.857
.L.str.305.857:
	.asciz	"CA directory to verify peer against for proxy"
	.size	.L.str.305.857, 46

	.type	.L.str.306.858,@object  # @.str.306.858
.L.str.306.858:
	.asciz	"    --proxy-cert <cert[:passwd]>"
	.size	.L.str.306.858, 33

	.type	.L.str.307.859,@object  # @.str.307.859
.L.str.307.859:
	.asciz	"Set client certificate for proxy"
	.size	.L.str.307.859, 33

	.type	.L.str.308.860,@object  # @.str.308.860
.L.str.308.860:
	.asciz	"    --proxy-cert-type <type>"
	.size	.L.str.308.860, 29

	.type	.L.str.309.861,@object  # @.str.309.861
.L.str.309.861:
	.asciz	"Client certificate type for HTTPS proxy"
	.size	.L.str.309.861, 40

	.type	.L.str.310.862,@object  # @.str.310.862
.L.str.310.862:
	.asciz	"    --proxy-ciphers <list>"
	.size	.L.str.310.862, 27

	.type	.L.str.311.863,@object  # @.str.311.863
.L.str.311.863:
	.asciz	"SSL ciphers to use for proxy"
	.size	.L.str.311.863, 29

	.type	.L.str.312.864,@object  # @.str.312.864
.L.str.312.864:
	.asciz	"    --proxy-crlfile <file>"
	.size	.L.str.312.864, 27

	.type	.L.str.313.865,@object  # @.str.313.865
.L.str.313.865:
	.asciz	"Set a CRL list for proxy"
	.size	.L.str.313.865, 25

	.type	.L.str.314.866,@object  # @.str.314.866
.L.str.314.866:
	.asciz	"    --proxy-digest"
	.size	.L.str.314.866, 19

	.type	.L.str.315.867,@object  # @.str.315.867
.L.str.315.867:
	.asciz	"Use Digest authentication on the proxy"
	.size	.L.str.315.867, 39

	.type	.L.str.316.868,@object  # @.str.316.868
.L.str.316.868:
	.asciz	"    --proxy-header <header/@file>"
	.size	.L.str.316.868, 34

	.type	.L.str.317.869,@object  # @.str.317.869
.L.str.317.869:
	.asciz	"Pass custom header(s) to proxy"
	.size	.L.str.317.869, 31

	.type	.L.str.318.870,@object  # @.str.318.870
.L.str.318.870:
	.asciz	"    --proxy-insecure"
	.size	.L.str.318.870, 21

	.type	.L.str.319.871,@object  # @.str.319.871
.L.str.319.871:
	.asciz	"Do HTTPS proxy connections without verifying the proxy"
	.size	.L.str.319.871, 55

	.type	.L.str.320.872,@object  # @.str.320.872
.L.str.320.872:
	.asciz	"    --proxy-key <key>"
	.size	.L.str.320.872, 22

	.type	.L.str.321.873,@object  # @.str.321.873
.L.str.321.873:
	.asciz	"Private key for HTTPS proxy"
	.size	.L.str.321.873, 28

	.type	.L.str.322.874,@object  # @.str.322.874
.L.str.322.874:
	.asciz	"    --proxy-key-type <type>"
	.size	.L.str.322.874, 28

	.type	.L.str.323.875,@object  # @.str.323.875
.L.str.323.875:
	.asciz	"Private key file type for proxy"
	.size	.L.str.323.875, 32

	.type	.L.str.324.876,@object  # @.str.324.876
.L.str.324.876:
	.asciz	"    --proxy-negotiate"
	.size	.L.str.324.876, 22

	.type	.L.str.325.877,@object  # @.str.325.877
.L.str.325.877:
	.asciz	"Use HTTP Negotiate (SPNEGO) authentication on the proxy"
	.size	.L.str.325.877, 56

	.type	.L.str.326.878,@object  # @.str.326.878
.L.str.326.878:
	.asciz	"    --proxy-ntlm"
	.size	.L.str.326.878, 17

	.type	.L.str.327.879,@object  # @.str.327.879
.L.str.327.879:
	.asciz	"Use NTLM authentication on the proxy"
	.size	.L.str.327.879, 37

	.type	.L.str.328.880,@object  # @.str.328.880
.L.str.328.880:
	.asciz	"    --proxy-pass <phrase>"
	.size	.L.str.328.880, 26

	.type	.L.str.329.881,@object  # @.str.329.881
.L.str.329.881:
	.asciz	"Pass phrase for the private key for HTTPS proxy"
	.size	.L.str.329.881, 48

	.type	.L.str.330.882,@object  # @.str.330.882
.L.str.330.882:
	.asciz	"    --proxy-pinnedpubkey <hashes>"
	.size	.L.str.330.882, 34

	.type	.L.str.331.883,@object  # @.str.331.883
.L.str.331.883:
	.asciz	"FILE/HASHES public key to verify proxy with"
	.size	.L.str.331.883, 44

	.type	.L.str.332.884,@object  # @.str.332.884
.L.str.332.884:
	.asciz	"    --proxy-service-name <name>"
	.size	.L.str.332.884, 32

	.type	.L.str.333.885,@object  # @.str.333.885
.L.str.333.885:
	.asciz	"SPNEGO proxy service name"
	.size	.L.str.333.885, 26

	.type	.L.str.334.886,@object  # @.str.334.886
.L.str.334.886:
	.asciz	"    --proxy-ssl-allow-beast"
	.size	.L.str.334.886, 28

	.type	.L.str.335.887,@object  # @.str.335.887
.L.str.335.887:
	.asciz	"Allow security flaw for interop for HTTPS proxy"
	.size	.L.str.335.887, 48

	.type	.L.str.336.888,@object  # @.str.336.888
.L.str.336.888:
	.asciz	"    --proxy-ssl-auto-client-cert"
	.size	.L.str.336.888, 33

	.type	.L.str.337.889,@object  # @.str.337.889
.L.str.337.889:
	.asciz	"Use auto client certificate for proxy (Schannel)"
	.size	.L.str.337.889, 49

	.type	.L.str.338.890,@object  # @.str.338.890
.L.str.338.890:
	.asciz	"    --proxy-tls13-ciphers <ciphersuite list>"
	.size	.L.str.338.890, 45

	.type	.L.str.339.891,@object  # @.str.339.891
.L.str.339.891:
	.asciz	"TLS 1.3 proxy cipher suites"
	.size	.L.str.339.891, 28

	.type	.L.str.340.892,@object  # @.str.340.892
.L.str.340.892:
	.asciz	"    --proxy-tlsauthtype <type>"
	.size	.L.str.340.892, 31

	.type	.L.str.341.893,@object  # @.str.341.893
.L.str.341.893:
	.asciz	"TLS authentication type for HTTPS proxy"
	.size	.L.str.341.893, 40

	.type	.L.str.342.894,@object  # @.str.342.894
.L.str.342.894:
	.asciz	"    --proxy-tlspassword <string>"
	.size	.L.str.342.894, 33

	.type	.L.str.343.895,@object  # @.str.343.895
.L.str.343.895:
	.asciz	"TLS password for HTTPS proxy"
	.size	.L.str.343.895, 29

	.type	.L.str.344.896,@object  # @.str.344.896
.L.str.344.896:
	.asciz	"    --proxy-tlsuser <name>"
	.size	.L.str.344.896, 27

	.type	.L.str.345.897,@object  # @.str.345.897
.L.str.345.897:
	.asciz	"TLS username for HTTPS proxy"
	.size	.L.str.345.897, 29

	.type	.L.str.346.898,@object  # @.str.346.898
.L.str.346.898:
	.asciz	"    --proxy-tlsv1"
	.size	.L.str.346.898, 18

	.type	.L.str.347.899,@object  # @.str.347.899
.L.str.347.899:
	.asciz	"Use TLSv1 for HTTPS proxy"
	.size	.L.str.347.899, 26

	.type	.L.str.348.900,@object  # @.str.348.900
.L.str.348.900:
	.asciz	"-U, --proxy-user <user:password>"
	.size	.L.str.348.900, 33

	.type	.L.str.349.901,@object  # @.str.349.901
.L.str.349.901:
	.asciz	"Proxy user and password"
	.size	.L.str.349.901, 24

	.type	.L.str.350.902,@object  # @.str.350.902
.L.str.350.902:
	.asciz	"    --proxy1.0 <host[:port]>"
	.size	.L.str.350.902, 29

	.type	.L.str.351.903,@object  # @.str.351.903
.L.str.351.903:
	.asciz	"Use HTTP/1.0 proxy on given port"
	.size	.L.str.351.903, 33

	.type	.L.str.352.904,@object  # @.str.352.904
.L.str.352.904:
	.asciz	"-p, --proxytunnel"
	.size	.L.str.352.904, 18

	.type	.L.str.353.905,@object  # @.str.353.905
.L.str.353.905:
	.asciz	"Operate through an HTTP proxy tunnel (using CONNECT)"
	.size	.L.str.353.905, 53

	.type	.L.str.354.906,@object  # @.str.354.906
.L.str.354.906:
	.asciz	"    --pubkey <key>"
	.size	.L.str.354.906, 19

	.type	.L.str.355.907,@object  # @.str.355.907
.L.str.355.907:
	.asciz	"SSH Public key file name"
	.size	.L.str.355.907, 25

	.type	.L.str.356.908,@object  # @.str.356.908
.L.str.356.908:
	.asciz	"-Q, --quote <command>"
	.size	.L.str.356.908, 22

	.type	.L.str.357.909,@object  # @.str.357.909
.L.str.357.909:
	.asciz	"Send command(s) to server before transfer"
	.size	.L.str.357.909, 42

	.type	.L.str.358.910,@object  # @.str.358.910
.L.str.358.910:
	.asciz	"    --random-file <file>"
	.size	.L.str.358.910, 25

	.type	.L.str.359.911,@object  # @.str.359.911
.L.str.359.911:
	.asciz	"File for reading random data from"
	.size	.L.str.359.911, 34

	.type	.L.str.360.912,@object  # @.str.360.912
.L.str.360.912:
	.asciz	"-r, --range <range>"
	.size	.L.str.360.912, 20

	.type	.L.str.361.913,@object  # @.str.361.913
.L.str.361.913:
	.asciz	"Retrieve only the bytes within RANGE"
	.size	.L.str.361.913, 37

	.type	.L.str.362.914,@object  # @.str.362.914
.L.str.362.914:
	.asciz	"    --raw"
	.size	.L.str.362.914, 10

	.type	.L.str.363.915,@object  # @.str.363.915
.L.str.363.915:
	.asciz	"Do HTTP \"raw\"; no transfer decoding"
	.size	.L.str.363.915, 36

	.type	.L.str.364.916,@object  # @.str.364.916
.L.str.364.916:
	.asciz	"-e, --referer <URL>"
	.size	.L.str.364.916, 20

	.type	.L.str.365.917,@object  # @.str.365.917
.L.str.365.917:
	.asciz	"Referrer URL"
	.size	.L.str.365.917, 13

	.type	.L.str.366.918,@object  # @.str.366.918
.L.str.366.918:
	.asciz	"-J, --remote-header-name"
	.size	.L.str.366.918, 25

	.type	.L.str.367.919,@object  # @.str.367.919
.L.str.367.919:
	.asciz	"Use the header-provided filename"
	.size	.L.str.367.919, 33

	.type	.L.str.368.920,@object  # @.str.368.920
.L.str.368.920:
	.asciz	"-O, --remote-name"
	.size	.L.str.368.920, 18

	.type	.L.str.369.921,@object  # @.str.369.921
.L.str.369.921:
	.asciz	"Write output to a file named as the remote file"
	.size	.L.str.369.921, 48

	.type	.L.str.370.922,@object  # @.str.370.922
.L.str.370.922:
	.asciz	"    --remote-name-all"
	.size	.L.str.370.922, 22

	.type	.L.str.371.923,@object  # @.str.371.923
.L.str.371.923:
	.asciz	"Use the remote file name for all URLs"
	.size	.L.str.371.923, 38

	.type	.L.str.372.924,@object  # @.str.372.924
.L.str.372.924:
	.asciz	"-R, --remote-time"
	.size	.L.str.372.924, 18

	.type	.L.str.373.925,@object  # @.str.373.925
.L.str.373.925:
	.asciz	"Set the remote file's time on the local output"
	.size	.L.str.373.925, 47

	.type	.L.str.374.926,@object  # @.str.374.926
.L.str.374.926:
	.asciz	"-X, --request <command>"
	.size	.L.str.374.926, 24

	.type	.L.str.375.927,@object  # @.str.375.927
.L.str.375.927:
	.asciz	"Specify request command to use"
	.size	.L.str.375.927, 31

	.type	.L.str.376.928,@object  # @.str.376.928
.L.str.376.928:
	.asciz	"    --request-target <path>"
	.size	.L.str.376.928, 28

	.type	.L.str.377.929,@object  # @.str.377.929
.L.str.377.929:
	.asciz	"Specify the target for this request"
	.size	.L.str.377.929, 36

	.type	.L.str.378.930,@object  # @.str.378.930
.L.str.378.930:
	.asciz	"    --resolve <[+]host:port:addr[,addr]...>"
	.size	.L.str.378.930, 44

	.type	.L.str.379.931,@object  # @.str.379.931
.L.str.379.931:
	.asciz	"Resolve the host+port to this address"
	.size	.L.str.379.931, 38

	.type	.L.str.380.932,@object  # @.str.380.932
.L.str.380.932:
	.asciz	"    --retry <num>"
	.size	.L.str.380.932, 18

	.type	.L.str.381.933,@object  # @.str.381.933
.L.str.381.933:
	.asciz	"Retry request if transient problems occur"
	.size	.L.str.381.933, 42

	.type	.L.str.382.934,@object  # @.str.382.934
.L.str.382.934:
	.asciz	"    --retry-all-errors"
	.size	.L.str.382.934, 23

	.type	.L.str.383.935,@object  # @.str.383.935
.L.str.383.935:
	.asciz	"Retry all errors (use with --retry)"
	.size	.L.str.383.935, 36

	.type	.L.str.384.936,@object  # @.str.384.936
.L.str.384.936:
	.asciz	"    --retry-connrefused"
	.size	.L.str.384.936, 24

	.type	.L.str.385.937,@object  # @.str.385.937
.L.str.385.937:
	.asciz	"Retry on connection refused (use with --retry)"
	.size	.L.str.385.937, 47

	.type	.L.str.386.938,@object  # @.str.386.938
.L.str.386.938:
	.asciz	"    --retry-delay <seconds>"
	.size	.L.str.386.938, 28

	.type	.L.str.387.939,@object  # @.str.387.939
.L.str.387.939:
	.asciz	"Wait time between retries"
	.size	.L.str.387.939, 26

	.type	.L.str.388.940,@object  # @.str.388.940
.L.str.388.940:
	.asciz	"    --retry-max-time <seconds>"
	.size	.L.str.388.940, 31

	.type	.L.str.389.941,@object  # @.str.389.941
.L.str.389.941:
	.asciz	"Retry only within this period"
	.size	.L.str.389.941, 30

	.type	.L.str.390.942,@object  # @.str.390.942
.L.str.390.942:
	.asciz	"    --sasl-authzid <identity>"
	.size	.L.str.390.942, 30

	.type	.L.str.391.943,@object  # @.str.391.943
.L.str.391.943:
	.asciz	"Identity for SASL PLAIN authentication"
	.size	.L.str.391.943, 39

	.type	.L.str.392.944,@object  # @.str.392.944
.L.str.392.944:
	.asciz	"    --sasl-ir"
	.size	.L.str.392.944, 14

	.type	.L.str.393.945,@object  # @.str.393.945
.L.str.393.945:
	.asciz	"Enable initial response in SASL authentication"
	.size	.L.str.393.945, 47

	.type	.L.str.394.946,@object  # @.str.394.946
.L.str.394.946:
	.asciz	"    --service-name <name>"
	.size	.L.str.394.946, 26

	.type	.L.str.395.947,@object  # @.str.395.947
.L.str.395.947:
	.asciz	"SPNEGO service name"
	.size	.L.str.395.947, 20

	.type	.L.str.396.948,@object  # @.str.396.948
.L.str.396.948:
	.asciz	"-S, --show-error"
	.size	.L.str.396.948, 17

	.type	.L.str.397.949,@object  # @.str.397.949
.L.str.397.949:
	.asciz	"Show error even when -s is used"
	.size	.L.str.397.949, 32

	.type	.L.str.398.950,@object  # @.str.398.950
.L.str.398.950:
	.asciz	"-s, --silent"
	.size	.L.str.398.950, 13

	.type	.L.str.399.951,@object  # @.str.399.951
.L.str.399.951:
	.asciz	"Silent mode"
	.size	.L.str.399.951, 12

	.type	.L.str.400.952,@object  # @.str.400.952
.L.str.400.952:
	.asciz	"    --socks4 <host[:port]>"
	.size	.L.str.400.952, 27

	.type	.L.str.401.953,@object  # @.str.401.953
.L.str.401.953:
	.asciz	"SOCKS4 proxy on given host + port"
	.size	.L.str.401.953, 34

	.type	.L.str.402.954,@object  # @.str.402.954
.L.str.402.954:
	.asciz	"    --socks4a <host[:port]>"
	.size	.L.str.402.954, 28

	.type	.L.str.403.955,@object  # @.str.403.955
.L.str.403.955:
	.asciz	"SOCKS4a proxy on given host + port"
	.size	.L.str.403.955, 35

	.type	.L.str.404.956,@object  # @.str.404.956
.L.str.404.956:
	.asciz	"    --socks5 <host[:port]>"
	.size	.L.str.404.956, 27

	.type	.L.str.405.957,@object  # @.str.405.957
.L.str.405.957:
	.asciz	"SOCKS5 proxy on given host + port"
	.size	.L.str.405.957, 34

	.type	.L.str.406.958,@object  # @.str.406.958
.L.str.406.958:
	.asciz	"    --socks5-basic"
	.size	.L.str.406.958, 19

	.type	.L.str.407.959,@object  # @.str.407.959
.L.str.407.959:
	.asciz	"Enable username/password auth for SOCKS5 proxies"
	.size	.L.str.407.959, 49

	.type	.L.str.408.960,@object  # @.str.408.960
.L.str.408.960:
	.asciz	"    --socks5-gssapi"
	.size	.L.str.408.960, 20

	.type	.L.str.409.961,@object  # @.str.409.961
.L.str.409.961:
	.asciz	"Enable GSS-API auth for SOCKS5 proxies"
	.size	.L.str.409.961, 39

	.type	.L.str.410.962,@object  # @.str.410.962
.L.str.410.962:
	.asciz	"    --socks5-gssapi-nec"
	.size	.L.str.410.962, 24

	.type	.L.str.411.963,@object  # @.str.411.963
.L.str.411.963:
	.asciz	"Compatibility with NEC SOCKS5 server"
	.size	.L.str.411.963, 37

	.type	.L.str.412.964,@object  # @.str.412.964
.L.str.412.964:
	.asciz	"    --socks5-gssapi-service <name>"
	.size	.L.str.412.964, 35

	.type	.L.str.413.965,@object  # @.str.413.965
.L.str.413.965:
	.asciz	"SOCKS5 proxy service name for GSS-API"
	.size	.L.str.413.965, 38

	.type	.L.str.414.966,@object  # @.str.414.966
.L.str.414.966:
	.asciz	"    --socks5-hostname <host[:port]>"
	.size	.L.str.414.966, 36

	.type	.L.str.415.967,@object  # @.str.415.967
.L.str.415.967:
	.asciz	"SOCKS5 proxy, pass host name to proxy"
	.size	.L.str.415.967, 38

	.type	.L.str.416.968,@object  # @.str.416.968
.L.str.416.968:
	.asciz	"-Y, --speed-limit <speed>"
	.size	.L.str.416.968, 26

	.type	.L.str.417.969,@object  # @.str.417.969
.L.str.417.969:
	.asciz	"Stop transfers slower than this"
	.size	.L.str.417.969, 32

	.type	.L.str.418.970,@object  # @.str.418.970
.L.str.418.970:
	.asciz	"-y, --speed-time <seconds>"
	.size	.L.str.418.970, 27

	.type	.L.str.419.971,@object  # @.str.419.971
.L.str.419.971:
	.asciz	"Trigger 'speed-limit' abort after this time"
	.size	.L.str.419.971, 44

	.type	.L.str.420.972,@object  # @.str.420.972
.L.str.420.972:
	.asciz	"    --ssl"
	.size	.L.str.420.972, 10

	.type	.L.str.421.973,@object  # @.str.421.973
.L.str.421.973:
	.asciz	"Try SSL/TLS"
	.size	.L.str.421.973, 12

	.type	.L.str.422.974,@object  # @.str.422.974
.L.str.422.974:
	.asciz	"    --ssl-allow-beast"
	.size	.L.str.422.974, 22

	.type	.L.str.423.975,@object  # @.str.423.975
.L.str.423.975:
	.asciz	"Allow security flaw to improve interop"
	.size	.L.str.423.975, 39

	.type	.L.str.424.976,@object  # @.str.424.976
.L.str.424.976:
	.asciz	"    --ssl-auto-client-cert"
	.size	.L.str.424.976, 27

	.type	.L.str.425.977,@object  # @.str.425.977
.L.str.425.977:
	.asciz	"Use auto client certificate (Schannel)"
	.size	.L.str.425.977, 39

	.type	.L.str.426.978,@object  # @.str.426.978
.L.str.426.978:
	.asciz	"    --ssl-no-revoke"
	.size	.L.str.426.978, 20

	.type	.L.str.427.979,@object  # @.str.427.979
.L.str.427.979:
	.asciz	"Disable cert revocation checks (Schannel)"
	.size	.L.str.427.979, 42

	.type	.L.str.428.980,@object  # @.str.428.980
.L.str.428.980:
	.asciz	"    --ssl-reqd"
	.size	.L.str.428.980, 15

	.type	.L.str.429.981,@object  # @.str.429.981
.L.str.429.981:
	.asciz	"Require SSL/TLS"
	.size	.L.str.429.981, 16

	.type	.L.str.430.982,@object  # @.str.430.982
.L.str.430.982:
	.asciz	"    --ssl-revoke-best-effort"
	.size	.L.str.430.982, 29

	.type	.L.str.431.983,@object  # @.str.431.983
.L.str.431.983:
	.asciz	"Ignore missing/offline cert CRL dist points"
	.size	.L.str.431.983, 44

	.type	.L.str.432.984,@object  # @.str.432.984
.L.str.432.984:
	.asciz	"-2, --sslv2"
	.size	.L.str.432.984, 12

	.type	.L.str.433.985,@object  # @.str.433.985
.L.str.433.985:
	.asciz	"Use SSLv2"
	.size	.L.str.433.985, 10

	.type	.L.str.434.986,@object  # @.str.434.986
.L.str.434.986:
	.asciz	"-3, --sslv3"
	.size	.L.str.434.986, 12

	.type	.L.str.435.987,@object  # @.str.435.987
.L.str.435.987:
	.asciz	"Use SSLv3"
	.size	.L.str.435.987, 10

	.type	.L.str.436.988,@object  # @.str.436.988
.L.str.436.988:
	.asciz	"    --stderr <file>"
	.size	.L.str.436.988, 20

	.type	.L.str.437.989,@object  # @.str.437.989
.L.str.437.989:
	.asciz	"Where to redirect stderr"
	.size	.L.str.437.989, 25

	.type	.L.str.438.990,@object  # @.str.438.990
.L.str.438.990:
	.asciz	"    --styled-output"
	.size	.L.str.438.990, 20

	.type	.L.str.439.991,@object  # @.str.439.991
.L.str.439.991:
	.asciz	"Enable styled output for HTTP headers"
	.size	.L.str.439.991, 38

	.type	.L.str.440.992,@object  # @.str.440.992
.L.str.440.992:
	.asciz	"    --suppress-connect-headers"
	.size	.L.str.440.992, 31

	.type	.L.str.441.993,@object  # @.str.441.993
.L.str.441.993:
	.asciz	"Suppress proxy CONNECT response headers"
	.size	.L.str.441.993, 40

	.type	.L.str.442.994,@object  # @.str.442.994
.L.str.442.994:
	.asciz	"    --tcp-fastopen"
	.size	.L.str.442.994, 19

	.type	.L.str.443.995,@object  # @.str.443.995
.L.str.443.995:
	.asciz	"Use TCP Fast Open"
	.size	.L.str.443.995, 18

	.type	.L.str.444.996,@object  # @.str.444.996
.L.str.444.996:
	.asciz	"    --tcp-nodelay"
	.size	.L.str.444.996, 18

	.type	.L.str.445.997,@object  # @.str.445.997
.L.str.445.997:
	.asciz	"Use the TCP_NODELAY option"
	.size	.L.str.445.997, 27

	.type	.L.str.446.998,@object  # @.str.446.998
.L.str.446.998:
	.asciz	"-t, --telnet-option <opt=val>"
	.size	.L.str.446.998, 30

	.type	.L.str.447.999,@object  # @.str.447.999
.L.str.447.999:
	.asciz	"Set telnet option"
	.size	.L.str.447.999, 18

	.type	.L.str.448.1000,@object # @.str.448.1000
.L.str.448.1000:
	.asciz	"    --tftp-blksize <value>"
	.size	.L.str.448.1000, 27

	.type	.L.str.449.1001,@object # @.str.449.1001
.L.str.449.1001:
	.asciz	"Set TFTP BLKSIZE option"
	.size	.L.str.449.1001, 24

	.type	.L.str.450.1002,@object # @.str.450.1002
.L.str.450.1002:
	.asciz	"    --tftp-no-options"
	.size	.L.str.450.1002, 22

	.type	.L.str.451.1003,@object # @.str.451.1003
.L.str.451.1003:
	.asciz	"Do not send any TFTP options"
	.size	.L.str.451.1003, 29

	.type	.L.str.452.1004,@object # @.str.452.1004
.L.str.452.1004:
	.asciz	"-z, --time-cond <time>"
	.size	.L.str.452.1004, 23

	.type	.L.str.453.1005,@object # @.str.453.1005
.L.str.453.1005:
	.asciz	"Transfer based on a time condition"
	.size	.L.str.453.1005, 35

	.type	.L.str.454.1006,@object # @.str.454.1006
.L.str.454.1006:
	.asciz	"    --tls-max <VERSION>"
	.size	.L.str.454.1006, 24

	.type	.L.str.455.1007,@object # @.str.455.1007
.L.str.455.1007:
	.asciz	"Set maximum allowed TLS version"
	.size	.L.str.455.1007, 32

	.type	.L.str.456.1008,@object # @.str.456.1008
.L.str.456.1008:
	.asciz	"    --tls13-ciphers <ciphersuite list>"
	.size	.L.str.456.1008, 39

	.type	.L.str.457.1009,@object # @.str.457.1009
.L.str.457.1009:
	.asciz	"TLS 1.3 cipher suites to use"
	.size	.L.str.457.1009, 29

	.type	.L.str.458.1010,@object # @.str.458.1010
.L.str.458.1010:
	.asciz	"    --tlsauthtype <type>"
	.size	.L.str.458.1010, 25

	.type	.L.str.459.1011,@object # @.str.459.1011
.L.str.459.1011:
	.asciz	"TLS authentication type"
	.size	.L.str.459.1011, 24

	.type	.L.str.460.1012,@object # @.str.460.1012
.L.str.460.1012:
	.asciz	"    --tlspassword <string>"
	.size	.L.str.460.1012, 27

	.type	.L.str.461.1013,@object # @.str.461.1013
.L.str.461.1013:
	.asciz	"TLS password"
	.size	.L.str.461.1013, 13

	.type	.L.str.462.1014,@object # @.str.462.1014
.L.str.462.1014:
	.asciz	"    --tlsuser <name>"
	.size	.L.str.462.1014, 21

	.type	.L.str.463.1015,@object # @.str.463.1015
.L.str.463.1015:
	.asciz	"TLS user name"
	.size	.L.str.463.1015, 14

	.type	.L.str.464.1016,@object # @.str.464.1016
.L.str.464.1016:
	.asciz	"-1, --tlsv1"
	.size	.L.str.464.1016, 12

	.type	.L.str.465.1017,@object # @.str.465.1017
.L.str.465.1017:
	.asciz	"Use TLSv1.0 or greater"
	.size	.L.str.465.1017, 23

	.type	.L.str.466.1018,@object # @.str.466.1018
.L.str.466.1018:
	.asciz	"    --tlsv1.0"
	.size	.L.str.466.1018, 14

	.type	.L.str.467.1019,@object # @.str.467.1019
.L.str.467.1019:
	.asciz	"    --tlsv1.1"
	.size	.L.str.467.1019, 14

	.type	.L.str.468.1020,@object # @.str.468.1020
.L.str.468.1020:
	.asciz	"Use TLSv1.1 or greater"
	.size	.L.str.468.1020, 23

	.type	.L.str.469.1021,@object # @.str.469.1021
.L.str.469.1021:
	.asciz	"    --tlsv1.2"
	.size	.L.str.469.1021, 14

	.type	.L.str.470.1022,@object # @.str.470.1022
.L.str.470.1022:
	.asciz	"Use TLSv1.2 or greater"
	.size	.L.str.470.1022, 23

	.type	.L.str.471.1023,@object # @.str.471.1023
.L.str.471.1023:
	.asciz	"    --tlsv1.3"
	.size	.L.str.471.1023, 14

	.type	.L.str.472.1024,@object # @.str.472.1024
.L.str.472.1024:
	.asciz	"Use TLSv1.3 or greater"
	.size	.L.str.472.1024, 23

	.type	.L.str.473.1025,@object # @.str.473.1025
.L.str.473.1025:
	.asciz	"    --tr-encoding"
	.size	.L.str.473.1025, 18

	.type	.L.str.474.1026,@object # @.str.474.1026
.L.str.474.1026:
	.asciz	"Request compressed transfer encoding"
	.size	.L.str.474.1026, 37

	.type	.L.str.475.1027,@object # @.str.475.1027
.L.str.475.1027:
	.asciz	"    --trace <file>"
	.size	.L.str.475.1027, 19

	.type	.L.str.476.1028,@object # @.str.476.1028
.L.str.476.1028:
	.asciz	"Write a debug trace to FILE"
	.size	.L.str.476.1028, 28

	.type	.L.str.477.1029,@object # @.str.477.1029
.L.str.477.1029:
	.asciz	"    --trace-ascii <file>"
	.size	.L.str.477.1029, 25

	.type	.L.str.478.1030,@object # @.str.478.1030
.L.str.478.1030:
	.asciz	"Like --trace, but without hex output"
	.size	.L.str.478.1030, 37

	.type	.L.str.479.1031,@object # @.str.479.1031
.L.str.479.1031:
	.asciz	"    --trace-time"
	.size	.L.str.479.1031, 17

	.type	.L.str.480.1032,@object # @.str.480.1032
.L.str.480.1032:
	.asciz	"Add time stamps to trace/verbose output"
	.size	.L.str.480.1032, 40

	.type	.L.str.481.1033,@object # @.str.481.1033
.L.str.481.1033:
	.asciz	"    --unix-socket <path>"
	.size	.L.str.481.1033, 25

	.type	.L.str.482.1034,@object # @.str.482.1034
.L.str.482.1034:
	.asciz	"Connect through this Unix domain socket"
	.size	.L.str.482.1034, 40

	.type	.L.str.483.1035,@object # @.str.483.1035
.L.str.483.1035:
	.asciz	"-T, --upload-file <file>"
	.size	.L.str.483.1035, 25

	.type	.L.str.484.1036,@object # @.str.484.1036
.L.str.484.1036:
	.asciz	"Transfer local FILE to destination"
	.size	.L.str.484.1036, 35

	.type	.L.str.485.1037,@object # @.str.485.1037
.L.str.485.1037:
	.asciz	"    --url <url>"
	.size	.L.str.485.1037, 16

	.type	.L.str.486.1038,@object # @.str.486.1038
.L.str.486.1038:
	.asciz	"URL to work with"
	.size	.L.str.486.1038, 17

	.type	.L.str.487.1039,@object # @.str.487.1039
.L.str.487.1039:
	.asciz	"-B, --use-ascii"
	.size	.L.str.487.1039, 16

	.type	.L.str.488.1040,@object # @.str.488.1040
.L.str.488.1040:
	.asciz	"Use ASCII/text transfer"
	.size	.L.str.488.1040, 24

	.type	.L.str.489.1041,@object # @.str.489.1041
.L.str.489.1041:
	.asciz	"-u, --user <user:password>"
	.size	.L.str.489.1041, 27

	.type	.L.str.490.1042,@object # @.str.490.1042
.L.str.490.1042:
	.asciz	"Server user and password"
	.size	.L.str.490.1042, 25

	.type	.L.str.491.1043,@object # @.str.491.1043
.L.str.491.1043:
	.asciz	"-A, --user-agent <name>"
	.size	.L.str.491.1043, 24

	.type	.L.str.492.1044,@object # @.str.492.1044
.L.str.492.1044:
	.asciz	"Send User-Agent <name> to server"
	.size	.L.str.492.1044, 33

	.type	.L.str.493.1045,@object # @.str.493.1045
.L.str.493.1045:
	.asciz	"-v, --verbose"
	.size	.L.str.493.1045, 14

	.type	.L.str.494.1046,@object # @.str.494.1046
.L.str.494.1046:
	.asciz	"Make the operation more talkative"
	.size	.L.str.494.1046, 34

	.type	.L.str.495.1047,@object # @.str.495.1047
.L.str.495.1047:
	.asciz	"-V, --version"
	.size	.L.str.495.1047, 14

	.type	.L.str.496.1048,@object # @.str.496.1048
.L.str.496.1048:
	.asciz	"Show version number and quit"
	.size	.L.str.496.1048, 29

	.type	.L.str.497.1049,@object # @.str.497.1049
.L.str.497.1049:
	.asciz	"-w, --write-out <format>"
	.size	.L.str.497.1049, 25

	.type	.L.str.498.1050,@object # @.str.498.1050
.L.str.498.1050:
	.asciz	"Use output FORMAT after completion"
	.size	.L.str.498.1050, 35

	.type	.L.str.499.1051,@object # @.str.499.1051
.L.str.499.1051:
	.asciz	"    --xattr"
	.size	.L.str.499.1051, 12

	.type	.L.str.500.1052,@object # @.str.500.1052
.L.str.500.1052:
	.asciz	"Store metadata in extended file attributes"
	.size	.L.str.500.1052, 43

	.type	.L.str.5.1053,@object   # @.str.5.1053
.L.str.5.1053:
	.asciz	"curl 7.80.0-DEV (x86_64-pc-linux-gnu) %s\n"
	.size	.L.str.5.1053, 42

	.type	.L.str.6.1054,@object   # @.str.6.1054
.L.str.6.1054:
	.asciz	"Release-Date: %s\n"
	.size	.L.str.6.1054, 18

	.type	.L.str.7.1055,@object   # @.str.7.1055
.L.str.7.1055:
	.asciz	"[unreleased]"
	.size	.L.str.7.1055, 13

	.type	.L.str.8.1056,@object   # @.str.8.1056
.L.str.8.1056:
	.asciz	"Protocols: "
	.size	.L.str.8.1056, 12

	.type	.L.str.9.1057,@object   # @.str.9.1057
.L.str.9.1057:
	.asciz	"%s "
	.size	.L.str.9.1057, 4

	.type	.L.str.11.1058,@object  # @.str.11.1058
.L.str.11.1058:
	.asciz	"Features:"
	.size	.L.str.11.1058, 10

	.type	feats,@object           # @feats
	.section	.rodata,"a",@progbits
	.p2align	4
feats:
	.quad	.L.str.547
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.548
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.549
	.long	8192                    # 0x2000
	.zero	4
	.quad	.L.str.550
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.551
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.552
	.long	512                     # 0x200
	.zero	4
	.quad	.L.str.553
	.long	134217728               # 0x8000000
	.zero	4
	.quad	.L.str.554
	.long	2048                    # 0x800
	.zero	4
	.quad	.L.str.555
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.556
	.long	262144                  # 0x40000
	.zero	4
	.quad	.L.str.557
	.long	256                     # 0x100
	.zero	4
	.quad	.L.str.558
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.559
	.long	32768                   # 0x8000
	.zero	4
	.quad	.L.str.560
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.561
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.562
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.563
	.long	67108864                # 0x4000000
	.zero	4
	.quad	.L.str.564
	.long	4096                    # 0x1000
	.zero	4
	.quad	.L.str.565
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.566
	.long	65536                   # 0x10000
	.zero	4
	.quad	.L.str.567
	.long	33554432                # 0x2000000
	.zero	4
	.quad	.L.str.568
	.long	524288                  # 0x80000
	.zero	4
	.quad	.L.str.569
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.570
	.long	4194304                 # 0x400000
	.zero	4
	.quad	.L.str.571
	.long	1048576                 # 0x100000
	.zero	4
	.quad	.L.str.572
	.long	16777216                # 0x1000000
	.zero	4
	.quad	.L.str.573
	.long	268435456               # 0x10000000
	.zero	4
	.quad	.L.str.574
	.long	536870912               # 0x20000000
	.zero	4
	.size	feats, 448

	.type	.L.str.12.1059,@object  # @.str.12.1059
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.12.1059:
	.asciz	" %s"
	.size	.L.str.12.1059, 4

	.type	.L.str.13.1060,@object  # @.str.13.1060
.L.str.13.1060:
	.asciz	"7.80.0-DEV"
	.size	.L.str.13.1060, 11

	.type	.L.str.14.1061,@object  # @.str.14.1061
.L.str.14.1061:
	.asciz	"WARNING: curl and libcurl versions do not match. Functionality may be affected.\n"
	.size	.L.str.14.1061, 81

	.type	.L.str.547,@object      # @.str.547
.L.str.547:
	.asciz	"AsynchDNS"
	.size	.L.str.547, 10

	.type	.L.str.548,@object      # @.str.548
.L.str.548:
	.asciz	"Debug"
	.size	.L.str.548, 6

	.type	.L.str.549,@object      # @.str.549
.L.str.549:
	.asciz	"TrackMemory"
	.size	.L.str.549, 12

	.type	.L.str.550,@object      # @.str.550
.L.str.550:
	.asciz	"IDN"
	.size	.L.str.550, 4

	.type	.L.str.551,@object      # @.str.551
.L.str.551:
	.asciz	"IPv6"
	.size	.L.str.551, 5

	.type	.L.str.552,@object      # @.str.552
.L.str.552:
	.asciz	"Largefile"
	.size	.L.str.552, 10

	.type	.L.str.553,@object      # @.str.553
.L.str.553:
	.asciz	"Unicode"
	.size	.L.str.553, 8

	.type	.L.str.554,@object      # @.str.554
.L.str.554:
	.asciz	"SSPI"
	.size	.L.str.554, 5

	.type	.L.str.555,@object      # @.str.555
.L.str.555:
	.asciz	"GSS-API"
	.size	.L.str.555, 8

	.type	.L.str.556,@object      # @.str.556
.L.str.556:
	.asciz	"Kerberos"
	.size	.L.str.556, 9

	.type	.L.str.557,@object      # @.str.557
.L.str.557:
	.asciz	"SPNEGO"
	.size	.L.str.557, 7

	.type	.L.str.558,@object      # @.str.558
.L.str.558:
	.asciz	"NTLM"
	.size	.L.str.558, 5

	.type	.L.str.559,@object      # @.str.559
.L.str.559:
	.asciz	"NTLM_WB"
	.size	.L.str.559, 8

	.type	.L.str.560,@object      # @.str.560
.L.str.560:
	.asciz	"SSL"
	.size	.L.str.560, 4

	.type	.L.str.561,@object      # @.str.561
.L.str.561:
	.asciz	"libz"
	.size	.L.str.561, 5

	.type	.L.str.562,@object      # @.str.562
.L.str.562:
	.asciz	"brotli"
	.size	.L.str.562, 7

	.type	.L.str.563,@object      # @.str.563
.L.str.563:
	.asciz	"zstd"
	.size	.L.str.563, 5

	.type	.L.str.564,@object      # @.str.564
.L.str.564:
	.asciz	"CharConv"
	.size	.L.str.564, 9

	.type	.L.str.565,@object      # @.str.565
.L.str.565:
	.asciz	"TLS-SRP"
	.size	.L.str.565, 8

	.type	.L.str.566,@object      # @.str.566
.L.str.566:
	.asciz	"HTTP2"
	.size	.L.str.566, 6

	.type	.L.str.567,@object      # @.str.567
.L.str.567:
	.asciz	"HTTP3"
	.size	.L.str.567, 6

	.type	.L.str.568,@object      # @.str.568
.L.str.568:
	.asciz	"UnixSockets"
	.size	.L.str.568, 12

	.type	.L.str.569,@object      # @.str.569
.L.str.569:
	.asciz	"HTTPS-proxy"
	.size	.L.str.569, 12

	.type	.L.str.570,@object      # @.str.570
.L.str.570:
	.asciz	"MultiSSL"
	.size	.L.str.570, 9

	.type	.L.str.571,@object      # @.str.571
.L.str.571:
	.asciz	"PSL"
	.size	.L.str.571, 4

	.type	.L.str.572,@object      # @.str.572
.L.str.572:
	.asciz	"alt-svc"
	.size	.L.str.572, 8

	.type	.L.str.573,@object      # @.str.573
.L.str.573:
	.asciz	"HSTS"
	.size	.L.str.573, 5

	.type	.L.str.574,@object      # @.str.574
.L.str.574:
	.asciz	"gsasl"
	.size	.L.str.574, 6

	.type	.L.str.15.1062,@object  # @.str.15.1062
.L.str.15.1062:
	.asciz	"Build-time engines:"
	.size	.L.str.15.1062, 20

	.type	.L.str.16.1063,@object  # @.str.16.1063
.L.str.16.1063:
	.asciz	"  %s\n"
	.size	.L.str.16.1063, 6

	.type	.L.str.17.1064,@object  # @.str.17.1064
.L.str.17.1064:
	.asciz	"  <none>"
	.size	.L.str.17.1064, 9

	.type	.L.str.22.1091,@object  # @.str.22.1091
.L.str.22.1091:
	.asciz	"GET"
	.size	.L.str.22.1091, 4

	.type	.L.str.23.1092,@object  # @.str.23.1092
.L.str.23.1092:
	.asciz	"HEAD"
	.size	.L.str.23.1092, 5

	.type	.L.str.24.1093,@object  # @.str.24.1093
.L.str.24.1093:
	.asciz	"POST"
	.size	.L.str.24.1093, 5

	.type	.L.str.25.1094,@object  # @.str.25.1094
.L.str.25.1094:
	.asciz	"Unnecessary use of -X or --request, %s is already inferred.\n"
	.size	.L.str.25.1094, 61

	.type	.L.str.26.1095,@object  # @.str.26.1095
.L.str.26.1095:
	.asciz	"head"
	.size	.L.str.26.1095, 5

	.type	.L.str.27.1096,@object  # @.str.27.1096
.L.str.27.1096:
	.asciz	"Setting custom HTTP method to HEAD with -X/--request may not work the way you want. Consider using -I/--head instead.\n"
	.size	.L.str.27.1096, 119

	.type	.L.str.1135,@object     # @.str.1135
.L.str.1135:
	.asciz	"Note: "
	.size	.L.str.1135, 7

	.type	hugehelpgz,@object      # @hugehelpgz
	.section	.rodata,"a",@progbits
	.p2align	4
hugehelpgz:
	.asciz	"\037\213\b\001\000\000\000\000\002\003\355\275y{\333F\226/\374\177>\005\206\375\364\2254MP\273\027\265\222\211\"\313\261:\262\245\021\345$=I\036? \tI\210I\200\r\200Z\322\323\357g\177\317ZU@\025)Q\211;=s\357,\216-\001\205\252S\247N\235\365w\242\350\241\377\371@\377\377\001\376\007\376\373Y\024\235\225\305\317\351\260\016?\373\341\303\177G\374\277\360\316\217\360\337\317\026\216\275\036\331\027\376\373\303Z\364\320\013\377\035\255\322\013\037\344\013\373\370\367\017\037\026\177\344G\234\025\376\261\216\357\375\370\001\377\n?\371\354\263w\007o\217\364\325\341\254\034GqT\227I^]\246e\224D\357\317O>\373\254\377\327w\247g\375\343~\343\261\037\212i\235\025y\005\323\207\207\252\237>\373\354\325Q\377\360\374\370\354\342\370\364]\343\311(\253\"\030*\252\213b\034]\026\245\031?\313\257\242QR'\321eYL\"\374E\001\317Uiy\223\226\275\350\270\216\252\331tZ\224u\245\303\325\327i\225F\323\262\250\213a1\256\366\242W\307\207\027\335\350\365\361\311\021\374yqF\177\364\273\321\327\247go\216\316\365\277\360\203\350\315\005\376\226\376\323\357\352p\307o\017\360\207\370\037|\346\344\025\375\023\377\003\377|\373\237\0270\364\331\351\3316\377\t?:\277x{\306\177\322?\372\360\217\376\341\231\031\256O3\350\277\375\212\376\350\343\237\374\003\232\323\305\321\311\273\243\013\\\345\005<\327\213.\256\323hXL&I>b\n\215\322*\273\312\323\221Yl\021\335\026\345\307\3506\253\257\213Y\035\315\2000Q\226\327i\231\f\221\362\275\317\032T..\201\242\025\320o0\253\306E2\202\037\340+\227\2631\320;\033~\254\242q\366\221\210ww\257\204\355\362\240\311\f\b\233\307\346\303\3310\301\017\0205\243\331\024G\353\022\351\242iQ\301K\375\376\tL=\317S\232G\325\205\177\024\037\263\024\376r\231\215\323\210\367\327\f\207\214T\246\325l\222F\270\326IQ\246\275\350\240\212\356\213\031\254m<\206\rO\243A:.n\273\270\301Q>\233\f\340\025\230\376e\232\3243x\225\036\323\341&\t\254\002\336-\243\353\024VYM\263\374\337\232\224\000bN\213\333\264LG\321\340>\202e\017\230\r\221\365\242\004>h\0300.\323qR\303s\346S=\330\3064\325\341\344\325\325\3555zy\224\326I6\256\200\360x,\344\031\334G<\001QT\335\347urG\237\027\016\215G\3514\315Gi^\367\242\277\026\263\025\370\366e\0064Hd(\3702\354\372\260\314\246\016\361\213\034v9:\177}\030m\277|\361\314\3562\f\020\r\223\034V\234\016\263\313\373h2\033\327\331\024\350\215\307\017\371j\232\300QA\272\321\017h\355\267eV\343)\243\337\301\fS{\226\220\255\340;\003\340&\2400\356\314\337f\005=\214\233\200\013J*\230\310\336gV\256t\256\353z\272\267\276^eu\332\373{\221\247\335\372\266\350\326\327e\232\376\243\007\274\3341\317\302l\356e\272W)\234\343\364o\2634\307\357\300\354\222\361\364:\201M\206\363?\304\303\016\214\203s\235U\370\355\037~\n|\366\222\276\n\177\366\322\273d\002K\306\217\255#\257\375\260\031onl\374\324\253\357\352\316#\337\330\330p\336\301\207W\221\022\321\030\230\t'\360KZ\026\325\332#\307J\342_Z\337~\227V\304Ov\305QR\002O\027F\230\245p\226\006p\234\225>p\002\341i\220x\t\234\341\034^\310\323\273\332\221\001i2\274\216\n\330\2232\264\025\356\224\222rx\235\335\000M^\276|\026\303\037/\177Z\277)\306@\242\235\237\326q\377\377\236t\007\335\341?z\327\365d\334\231\313VI\016\377?)fymX\t8\262v\244\3258\313\341\004#\343#\207\341\t\206\343kO{=\274F\n\000o%B\206:\203\265\301\2539\t0\032\213\277\226\301\203E9Bi\337\232\2069\320\3167#\275q\360\0074\261Iv\007#\340?\361k0q\036-\302\031\323g\364}{\240a\352\215\245\323G\355\342#\330\276)\2745C9\313\227\025\f\003\342\342\nv\006v\003\271\0317\353>z\007L\303\242\312a\372qZ\327\017o\224\345\334\275\315\000\363\316{\003\270mo\253\365\370w \270\355\321\201\031\374\375\037\016\357\335\342o\263\374\246\370\bd\242K6iR\024%\325dZ\233+\f\231\022~4H\006\343\373\350:\271Iq\315S\340V\244\002\\%c\022\f\":F\305l\000\342\007\305\006\023'\271)\262\021>\252\303U\327)\212<\3740]\\r\347\323\201\313j\274\003AX&\343\252\210\242\253\002\317\n\211hbv\330\230\353\004o:\270\324\314i(S\222\326\264[\311\270\3137\032\276#\264\212V\376\317J7Z\371\217\025\342\211\225\177_\261{\r\n\333M6J\231-\216\317n\236E\277\300i\203i\215\322;eJ]\033\274\035\201XN\246\360\255iZ\016\201\203\223+\340Y\270\236u8\034\037_\341e\201\b\215\362d\002\247\342\004g\224\345\201\355\374\3412}\261\261\267\267\375\307\255\335\264\276\336\370i\335n\342\361%\021^\231P\247\201\227\276\336$0\000\374=\275\314\356\272\252U\361\311K\200\341`\007QT\350pW\263\264\002Z\336^'ud\006\340\275\235dW\327ut\233\340\205\004\372\025\r\201w?\\C\227\t\334'\270\213t\321\203\204\262T\277\227-1\212W4H*<\2729\210\210\0324\207\031\376\353\032t\003\242\202L\224.\323\327\270\241\270;\346\202\203m\352\312F\2337*8v \240\fo\240\314\355ux\2354\307\244\"\375\201T\006\230\274\263X Z\362\021\025\225\226:D\257\215\n`3\230-\be\\\031\212Z\242\n\2619\214\211?\314j\274qH\323\205\371\002QH\031\003\201\355\254\237\256Px6\272I\306\031h\254\251y\213\356\374!jLc81\303\242,\321*\300\035\034\260(\235\244\240j\270\344\314\360z\003)\003\272\013\311\021\3201H\366\323\302iv8\366p\230N\353*\264&\335p\230N\231\"\345]U\214\350j\024\003\322\306T\327\001\355\254*\254\"\215\274\001\302\214h>\301\211\342\303\025\237U\022\320\270\221\254\212\363w\361\n\003z\232\301\341\253fO\361\363h\b\300\275>\252\256AA\253\344lg\023\340\231\033\334\337i\232\216z\321\351%\312\326\022&]\323\257\361n\001\272\215\360(\026\346p\361T\234;\202\3449X\020(\347\306\315\213\210N\"\310p\234\336 \215\210\023\007i}\233\246f\270*\205\333\0177\215\265C\020\207\254\337\"yO\337_\234\275\277p\016\"\216S\027\343\021\263\374mV\001\2672\361A\225B1\207\327A:L\341\242\035\261\361\002\033Q\325 \013\371H\341\\t8\230\017\355u9\033\222R\200\034\244{_\221p\305m\240A@\216\240\3553\206\251\215i\375]\221\352\2164\215\213n\024\307\360!\024\310\260\317\361)\376\273L' \177c:xrA\366p!\326\364\272\202\271\002\375t\347t8\326\022qN\306\336\013\\\364]d\307*\233d\343\244\204\235\312a\033+\313\004ESqe\376\203[\247\244\213C\326\230NZ|<BY\217\204\206}\001V\200W\f\261\243\316\f$r\t\342 \037ud2 bs<\226\314\261\025^\264F\211\345M\301\263\0301a\370\f\313\027\"\270\006\013R\353H{\347\277\003e\3631J\310\364n:\316\206Y=6\332FR\341E\211\206\027\036\306Q:BK\b~\022\322B`Mg\347\247\027\247\207\247'M\303X\215\326\210t\334bf\315\0018\202\250\246\303\356\301\205C&\003\\\036\0230c\243\nt\246\t\tL\320I\314\352Pi\313\2063\240<\b\220\fxr\222\334\273\252$\321\026-\032K_4\210\341?'H'\224rc\260\314fS4$a\333\230\243\340\304\3412`m\270\216\004\365o\373>\232\322\360\237sdQ\234,S8\022\306\344\223\331\323\033\310\354\243\316\007\305V\205\037i\371\"\3605\274\301p\315\314\257\343{\326\202IC)gy\3163\213\336fC\320\277\341V\211\276\203\253\271\270\205}\235YSRE\250\030)9\034c\340\260\367\357\016\243d\nDFM\231d\025\332\315\316\232.\316V\373k2g\263;\254\037\276F\021y\241\374\177\246\227%k\001\260jR\202A\232$\037\253\326$\210\037P\025\004z|\207\217#\347\033S\035\247xq\322\267\223`W\004\314\2435\314y\n\3269\f#\2445\317\343-\354?\335d0\272\251i\252\206\325\\\025\371\006\3666Q\201\320\224L\215\313\223\206\301\205\240\351\271\321{\331\2156{\033\370\307f7\332\242\221\266#6de\223\230\031\235\263\337\020\001\252\032\351e8\347\3608>\030\177\235\357U\366\001\313gc\340\0316\316\364 \211HF\325\275\003L\222\243\207\242\023\245\370,+\221\255\341\340$<j\223\320\3653\207\350\370-\270\376F\031\256\251\300{\233N\026K<\030\277\313\033\341\214\337\030\031\275I\336\376\321\017\225\360\333\275\350\225,\205\310\214\027/=\000\332<\250\310Q\247\232\r\332\004G\327\301 \355\260\337\254.\246`P\337^#G\263\323\006\306YG\217\r\216\247\243LAg\317\252\353\016\356c\322\336?\034\241\307_\245\357\303\022\360\006iX\257\321\352}Z\2579\212\365\351\331\266O3w)\254T\340\375=-\246\333\221j\025\254\031\251\016\222\320N\233]j\r\267`\317\320\035\347\177\037\2752 \304\340\232\202k\361-\b\245\344\n\3374\007\234.\306i\231M\340\214\300\265\306z\003]\206<\2736\241\321\364\230\220\256\004\227B\302J\207e\013^+\2324\316\264\372g\336\206\323\017\341p\231W\234\203\320?<\363Ox\277\377\3060\310\026l\367\324\252s\316\233\350\246\363\336\304\037\256\216\312\004D\351\356\232hXH\366\306\220\316 o\2772B\322\016\362\366+\363\354&q:3\026\255_\327\340\216\021\222Y\357\247\206\021\344.\027\265\003\ro|\245\311\020\225\310\031\264\301\210%Z\303}\267\350\230\211\223\365\002\314N\034\203V\003\237\"\247\004\036\221t\234\247\254\236\223\301\201\302\312\272ToP\341\255p\261m\356#\205\206\024\020\234\235\261\255\360\007(\232*RPA\t$/\304H4\221\212\237r\0248\243\217\322ry(\227g.\234\215\024yC?2\334B\243\363\026\210\376\361\365\371Q\277\037\275=\2728:o(!yQN\310$\031e\325t\234\334\243\255\002\322\363\252D\305g\222\242sc4#c\034D2,_\034\271h\017\223\367\327^\341tM\212C\b/C\303\201\350_%\345\265\353h\220\244\347\363<\301\350\202\343\205\022\003\017\241\361\300\244\227u7\202\375`\017x{N:[\353\004\036\334\327\342\237\344\251\360\027\214\306F\033\223G\362\330\224\350\nl6\342\341\253\331%Y\242\321\352\307n\364\266\033}\335\215\320\251\277F\357mnl\355\260%kx\354\265\343K\330\374\210B\202\037\302\301{\321\346[\376\311\316\213\335\347\317\344\207-\315V\347O\346\215\232\0078o\324\364\262\034t(\260\013\305\330F\203\f&\177\311\246\271\370i\232\221\023x\031\230\000X\301l\022{\273j\234H2@\376Gm\225t\264\320\327\214c\007\336\200\271%\203\261\2300-\272\203\376lUpx\366\266\230\241\272\211\017\200\366\210/0O\033'|v'\367qc\024\230\032\374s\n\254\304\323\351\265]\034d\274{\234\210\202\205\224\220\263\323>EH\300$\203\201\3766\003\026\002\246\304\027\321\356p\254~\340=\272\210\305\034\223O\212iD\267\241kC\261\033\312\274\023\255~\261\326%s\312XV\216U%\266\216s*\257):C\376)\274\tA\325\204s\005\037\261\321\021\244\037\331rv\233\254n<\005z\026\226thk7\210\324\3363\217h\350N\241`\234![\324\031$e\307\032\223|.\361t\224\351\025\331\013LY\\\345\037\234U\352\000\361\000\037\311*\216\243\\\202\002\212\007F]\260\344\220\023n\t0\213\343\232\205c\202\252<\253>\370d\\\241IZ\001\355\321}<\2250\325)\305\004\215\225t*:*\211`Q\233r2\003\353[\370p\002\333\005\207\355-\022\n\225o\\\226\252\265\304\025\031\236y\253\313&\243QF\226\314\030\3353\263\224\034\350B\324\211\273\215(<\256\321L\001]\212\034\t1~\253C\n\343$\322o\311\247`\035#\327\265\330%\343\313\372\271Iah\253|\t\3546\372\002\305\001A\236\034:\256\025O\255\013\264\305'\257\256\365Q\307+\224\240_\001te\f\030\215\324iQ\224,\310\306\005\360q\207=\2562m\2345\316\022)\316QT\2536\231I\013\275\252\007\247\346\334\342D#\275\366\225\362\354\252(\362\225\232\317\"\205\tZ\224\257\210}\304\013cV6!\225\211\370\204\267\206.\177\033\326\b\270q\357\3331\t\033\376s\266\210\035 '\264\216\370&\302\343\227\303\n\023\374\305\311\215s\2140\b\225\243\223\255K\341\277AQ\214\323\304.\r\357\2024Gn\227\035\005q05\262\026\264\335(\271J2\303or2F\221>\234\027\362<n\025\372\357Df\315*>>\260*\220:\225u\320\220\317\3238\211\310\313\213\016S\022\274\344\376\204\021;\275\350Mq\213\366e\227\335\323\031\006p+x\002l\"\320\351\201\232\344:\243\2379\021\016\340\360[\246\222Y\205\331\312K>\022\321*\211\264!RkZ\333U\030\202\334&\225s\270R\212\256<\357m\276\354m\364@\203No2\2604\341\3238\r\373\016\251Huqu5f\207\335zqIB\251Dv\267r{\312.|\244\215\0348\"L\300H\354\331(\\\034'\003P\301\201\214\361,\317\356\342\252\030~\204m\331\237&\365\365\027-\355j\025o\222\265(:d\257\250\231\002\336\242:J\364\036F\001n\006\375\022\230\214\006\353\2520m\rGQt\343p\200\303\203\256\205(zW\324\351\036\376\033\204XMD\227{\025f\304\342\030\265\333\304\267\330\370\373\362\321H]\345\312L\321\312\227+\335\350\2327\236\006\3445\002\217^\201\211\237\327\355\341\256\351\242\306{\206\2435\304&b-\233\000J\357\263\326kG|\316\366\332)#\234\377\021&6\377\207\326\207\021\215\252\031\241j\177\341\300\362\315\3566\360\215\273\225\343:\256n\206\321>\271\247\361(\004\267\020\214\021bSab>\240Ld\035\201\334\207\024R\304\211\367\350\302\f\350\333\346;`\177fh}\324\244R\245w\031\233\306:\334\020DR*\212\003\211;\362%\r\332\303\241p\353E\007\227\244\361\230[pdt`\316b\340\301d\004\362\204\216\344N\232;;\2222\250\017f\270\233\030\266\0009=)F\344\003\367\366\260oB\226\235\2163\310*\006\260\201\005\362\253\372z\315\006\345\324\035\000\023a\343\252\315\347\224VA\373\377\363\254\252\311\223/\267?\257\004f6I'Ey\357M\344\370\222\331N6*\253\370n\324\2306*\377U\267\021\263\"\225\311\030\203mzP\230\222\343R\022\t\030H\000r\234\240\300\311-Y\351Cxq\360\262\226\346s\331x\370\177\214\252.\311\327\317vz\233\r\276\316\3571\221&,\216\320\"\255\254=\232]\315J\322W%\367FSnP\303\272.(o\005n\346t|\331\rx\035\365^!\371\013\326\016\r\225\247\242\013\243w5\302\f\215h8N\262\211\330\332b\322\367<7\tGa\310=0\300 PY\3415\317\036\031Q\301\331\333q\235\016?\252\034T\375\265-\3350#\207\"M\3655\272\275\0130\2461\220\fF\345lH\266&\nEP\001\312$RY\nw\002\230\226\243\270.\263ipv\344\251a\367LC\335\255\304qDq!\216\024\r[\324l\2638\321\266\213.2\320=T\307\030\211\267\037v\020l\301l\210:s<\312\256R\314t\302{\261\036\203\232\02581\360\253\364\252\250Q\265\361\030\217\375\227\206'\324\211\346*x\031+\367\360y1\350\231\363\311\213\320\336u\030mHv\031\352\240\252\002\253\355\200\342\005\325\355\3726\033\246\352}5\371\017\343\314\2775&x\302\361=\326\3601\220x\233\241\005p|)\327\034\236_\276Z\2222\243\250)\246\031\250#'tby\336\364\272\330D\326\026\242\343zI\276\034\217N$\026\257R\212/\263&2C\205\026\363\322\226>\316Bl~\033\266{oz;z\314\241\356\247)\033=d!\335\335\353H]\345\tV1\205+\2343\237\340\023`\017\246\036s\254\242q\210>\2705M\321H%I\305$\324\221\320D\261+r\201\307\t_\022`)a\346\211\344\3275\316\001:\365L\232WV\333[Pe\001\276\323\032\016\215S\324\344\351\n\354\262\336\311\022u\310)\026\242\341\3605H\023\275\034'W|\026\263\253\366\261\317\013\311\265\253\n\270\201\310\363\310>\256*Z\005\316\035\317H\0359\205\345\365\373o\326\226\335V\246WLK\3470\224\322<\272\364\022e\\y|[\201%zu\263\003:\024'\177\224\233?\354\351_\267~\330\003[\031\270\363\207=\234+\034\235\237~\372\351\013\237=\243\203\357\372\321\267;\224\374A)\202m\211-\271#z\373{\253#\273S\277j\36486\370@\315b\221JV\203\004\257\357E\307\271*`W\257'\276/2\347]\242(\301\254\276ba\335\234\224\b\342\340dx\331\013f\342hI`8\201\351\237L\257\361\f\300G}\345\230\256\211\252\230\225\230o4,\306c\316D\210V\3713\361\260\030\245k<\353\332~\234T\225\254}\365\027\223\254\2565S\211,\247|D\223\t\256C\266\355\221\013\271\234\345<1\334\2136\003\343\336\020\345A\237\033\027\263Q\264*\203\267\247\257\337\224\371\353\214C\002q\341\374\037\222d\206u;\360\327\275d\362\313^\n\272O\274\265\227V\035\225o\235\217\351=\360.\360B\335YRuy\276\333T\311I\310=FqA\325\203<u_\261Xlr\235q\003afJ\373\316Aq\202\t?=\243t\340\223\232w\304\327VK\213\234\221\007\233(\330\036\016\003\370&\220\257\306vFn\037\024\210%\246z\241\303\314\030\253\240.\350\330\310\033\236K\276\346\034uP\266\341\020S\276AX3[\255f\030J\250\214f\200\327B{v\254<`\212\206\325\021\326>\351\3457#\226\334\303\244&\214\365\233\213\353)\267\037\275\351\262\007X\000iY\263\301\346\331j\027'\375\020\2274\223<\361}T\320\222Z\263\222\ntK8\211\236n\264a\232bF(KN\276\361P\357A{\001\r$\223|rx\340\216K)G\355\213\316\371\375j\265\306\212\317\200\214\231\263\243\267\344AK\200!\337i\260D\323\3071\300\335H\251\263\246\037\345n3\317\322\3248E4\243\354\2526\007\327\367SI\f\233U\r\367\265*\363\343\232\254|\364\2549cz[O\323B\335\361*\317~\021\0338\315o\262\262\310I\360Q\240\177 \026 \250\005+\207\357\317O>\034\036|\370\352\375\273W'G+\355\364\211K\016]\341e^\241\347C\255\n\036\231\323\205\310\320\247\0247\372\033\311P!xk\270\301\fM\305^\303Z\3273(~C\235`P\216\337J\242\207\343\246r\262\335fu\001{$d\244\240\273&\362G0\237\300vW\326\030\036E+8\022\360o,\223\034\226\365J7J3:q\232\212\214\262\234B\003^>\003\306\371\023\346\353^z\227\322\221\226\267\016g%\211\211\357\300\206\301\013\347\225&\006\350C\240C\266\257\205bL*\000\371r\311\363~vp\361&dO;\311[\302\212\344\033\250j9 \357\372\375\210\2520\306\331\240L\360\233\370c\374)\260uk\270\263o\016\373\177\330\334DG\302\f\350\262\n\257\344\025\234\314I\257*\326$\237\213\255\210\344\006Tt\342#e\35299\036\2464\005\344\005(\371c\337'\260\232\235\366\231\255&\311\020\376\212\256\3125\223\225fN\230\256\252\317F,\345\341P]\212/\025\362\366\341\262\t\t\304\016\203d\370\3616)G\034\227\000\216\031d\343\254\276g\277Z[\317\340\004c$ \234\243\253,G\007\005y\031\262\332u\251\221eU\033\263\310|\333S\177k>G4M\313\273*\006]!\245\354\023U\367\240\303OBv%]\356\3217\351\375\360\032\305\235\221\224\354_L\321\301\304\026l\246\241\274T\242\261|E\371:\032\277\257\306;\016\261R5D2}\311\337\304>\374<\317\323\261l\337\305\242\r0\317\302\224%u\2535\334s\316\220Oj\275\354\2640\347y\357\331\206\371Uo\356g\274\323T\332Mo\3569\207eh\223q\217e\213\377l\354&\n\237\266\206sMs\275\303d\035+\240T\026%\371\253\313\002\366\272\261\237\253\254\305\264\217\211Hs\2070kOt\234\315u|-\253T\312-~x@\246\324\203\016/|\201D\377>\310\306_\177\353;\231S\376E(\f\336\270\375\337\3525\217\2230\221%1\244\330\332\344\020\231\357\220\240\264H\216\244\354u\242\325\264w\005\343up\234\315=\374s\213\376\334\356\254I\025\236\273\237\250\"\264/8N1\260\032C\227Cg\363\244\031\033\272'\274u\276r\250d\230\260\237\365&eG/\254\f\223')6\242Gu\370\241L\257\223\352:\232\325\314\331p\030\332\303M\307\231\r\037\310\247{\352\201\262\273\310\201\335qq\253\317\304R#\027\3225`7\311\037\214\217\271\331\345\023\324}\261\200\017\344\346%P\f}Kc\3327t\354\315\002\231\237\206\355\262K\tJ\311\277\351\222\026\225\256\342\f\364\266>\367\360yQ\251k\324'Y,\307\201\365\260\200\345\216\016\212\220+\225\235\355\237\376\344\321\254\326\311{\261n\017\302\003\307\017h\021cxiV=\342\3649w\004\277c\302k\234m\344\222\266\315\337\367\016\313\035:g\266\317\003\235\213\033x5\371\230\364\242\323\303\376\031~b\212\031Vk\230~\325\032.\275\253\323\274j\024\250\316\335@\r\273j\316h#5\212r\263\250\342\"\342C\354}h\n\244\034\255\031wtW\271\314\344WT\263+\264\305*ud\231/\0005|\315F\226mb/`=b\345\024ityaG\305\334/\252#\315(#\201\213\001\002:\013o\212\032\220\227R;:\317\307=d\215\022\317\023Ev3\344\t\324\357\331j\307\361\214d\371:\237an\246\257<\240\016\210\267\"\022pi6\265\f\267\244?ag\263\351O\240\221\300\372I\243}\374\363\301\333\203\023\345\360yI7a\031/\336\353\250y\221xW71o\017\345s7z\205e\337G\357\276&\216:\333\334\242\340\2761\235F\364\221\252g*=\360\256\362\262\313\361\356\352\222\270G\217\022U\036\215~\367\313\333P\024\347\305\377f\031\272\224\205\177\324\225w\361\277\037\323{ql\303\337hpg\017\315\223\321\276C\375\037\214\207\341\247\247\251\004\341-\r\270\250\311\345f\223\203i\251t\307q\t?\025\372\343\271Lr\243\350\305\\\225FI\342\355M\035\026c\357\262o\270\003\310J\332\222\013\236Ld\226\211b\233\264O\255\261TH\251\265\252\001\276\311/R\372\022M\215\365\317^d\355\210\220Q\005Lc\2747\031y\347\r\325\032\036z\220\305e\246V\217\324\271\266\207\323L2\361\342K\271\027\361\2532,\3635\332\367\035\207$\235\320V\250{\232\317fv\203\244S\336!-\205\267\264aP\0249\3767\307X\302\277\005\270\321a/\303\201T1$Am\322\340\2606S\312\347\307\367\2172\223U\003Sk\3301\221=\033\262\315 p\333\324\230&\310\274\213Q\260l\370\221\253\252.\333f\234)&\344B\330\300\026\220\205\216\021:\344ITO\200\003\214o?\350\273\201\271~xu|\036\255\242]\323v\035\250~\263\236\326\303\365\351\307l\035L\370\321`\315\230\246\3649\344Bc\356\253\275O\006\277\027\260\261\016\000\006\3470\226\277\304\016\211\241)\366\316Yo\024\262O9Bx_\314\332g\225K2\305=\306n1u\201\313\255f\325\377.V\200&\004\343\0017\347\b\275\266\201d\177\320\327{\353\235\310\324\274\002\225\271\264\333d4\000\213]\316*\343vN\314~\365B\222\332\331N\243t\202q@'\313\365\201\310\244h\253:?v\"\247f\262Q:)\3763\r\352\312\355\002\212\2039\303\243t\234M2\262h\335)x[\321\234\322\217\376\224\264\0229\301_\303\224\310\317\310e\242a_DsB\246\226yA>\2209K\363l\031\353h\322C\317B-\232~\034V\233\233\355\033\264\262\034%^\221\3040\346\373\363\343h\025\321-\236\357nn\255\271\031\203*\000\374\013\371\236\334}\356\001DUZ\024#;\364(\305\340L/:\320(\320 \205Iz\024\267e\306<{\260\021\215\251\200\265\000\300\003\265\320\316\235\265DV\2239\3765\\\027C\177\220\362\322U\201\2036\217\020KD\257I\n\302\314\302\366\006\312\234:x\221\344\2445$vPC}W!h\216\352\0076\210q@%\n\017\371Or\3355\305\247l\017\356\275\370b\007\251T\364\261\274M\364q\357\036\207\327\327\365\022\242[H\275\270\354O\303\022\025\364\237}\024\367\031\351\356&1\317\367\300\353\305\037S\245h\313g\201Dp.<\222~\234\253O\022/\034\037@N\345\240\305R20\344\247$\021\370$\t\370\200'\357\320\273\261+\243\fY]\215\342\241D8\337\360*\271PF\nyZ\352\034\271\313\340\270\254\236H\341\317\331\353\357\235:2\317\203A\356\275?\233\214\0340|0\0039\223L~v\276Qf\322\232MRGRw\366\351w\355\320\240\224w\177\361#\377\232e,\374\253\276\236M\006\260\237y\375E'\342\264\227K\241\347\002\3538\323T\032\365\3306\250\306\263S@\003\233w\r\233\307\021\002O\325{\017\354\371\343\333\277\376\370r{'y\236\f\237]\276HvG\273\317_n\275\330M\236\357\\&\3176\323\315\227\227[\333\243\321e\372b\364<\351\364\310J\324\251\373\242V\343\244I\324\177s\020oF\327\351\235\036\260f\246\023\342,\321r\346/V\021\216\260\022\006\235E\244\0013\025\225\254\234/m\274\262{\032\t\301u\265\017\377\t:<\336&\303k*$\227\007\373\034C\357F\362\027\364\275;c|]\026\263\351Y1\316\206\367\213\206s\037k\374\342\210ExV\245\377\n6\033\321\232\304\001\353\270\360\377\313[mV\330?h\266\305\303lz\215\2117\373\224\030\216\2614\376A\330\\\353\313a\257\204U\364mQ\3462\305\003P\027\240\024#d\236\217\324~\210\005\211*\362\354\276\221_\365\244\256|6e\313\205\0020\374\273\366\031\306\311\01332*\001l\326\373\363\223\2756\221\f!)FW\245\353\243bX\255W\325X\tAhG\2777#\be\216\016_\2759\212\341\317\376A|p\324\337\332}\026\037\036\276}\361\220\037\260\230\220\270MGqUy\351\245X6\312yfG\222!M\367s\f[\207\225\236\3722\355\235\311\2740\251\235\335\200\372\230\310E\363g\327_\206f@Q\032\000\002\002VY\232\f\215\205D\325\202\354\255@\026\371\263\226\213\311\f\026\316[Q\247e\022\331'\255\007O\221\020\214qg\322\255\252E\025\367\254\3766c\322\b+\301\037p\341*z\321\033N\301j+\034\002\00667\255{\016k\316s\220F\263\334\306\341\"\377\272Q\310\013\033\225,S\206j\000\325\253,\213\262\027`\n\313\006\261w?,f\013\260y\360\307\224\232j\351\376tFY|4\276!'\002hA\331\225&\247\314M\222\257\261\362HSO\260hW\234\007\232=V\261\276\246i'-\3340\007>\254\371\n\346.G&\007\320|\243\221\240\216\200v\304em\253\236jf\214n\037BYk\257\347t\332\300X\310\b\364/\241\262\274\220\006W8\031\0164\240\257\333\324\246\344AarH\361\203\353\000\324\033\254\030Ct\307qa\025i\001\022\300|\310\236w?\343\241\262%N\034\265\343\037\320Y\031hv\211\325\252d\373\202.@\251\252c\234\255\214P\344\004s\214\213\0045\204S\025Rs\201\023\305y\362\034\333G\301\340\2115\214\316\244\262\265v\225\037\353\267\324\fz)\274\302E\232I\231\352'\362\242=+\231G\354\373\354Lm\2363\001\255\3213\333\034\026\030\251}\300:\023\354\036\222SI*\336y\336{\214\356\362\371Z7\230\200e\006\263\271\342\210\2453.*\2155\302\0062\360\033C6\0308\270\326p\374\fo\317\245Q)\305!a\201\352\250\214\333\370\f`r?\376\bZ\341\217\235\366\354~\004\341\364#\360\342\217\\l\374\343\r\032\373\030\357\250\306\030&es\252\351}eH>\202\335\n'.\317\243(\327B\300\356\315&\271\330\244\314\253$\005\004\323v\345\017+\016guC\256\3002eE\214\324\211\314Q%\024\316\216\034\r\234}\340\337\251\247\030\n\342\002\357\302\272\020\260\316}z}_\341\035$\3631\252\032N1\230F\246\302\220\367\030\037!s\033\005bC\224\302|V\342\025\023\004\226\3543\2572N%\207\223\377\357}\322I\"/\334\202\003\213\267\210X\f\232\023\343\312\202n\024p4Ra\002\327\263\350Z\320\013f\243\227qLP\270S\206\257E\026\241<\236{\254\352\236\216=\371+i\363\212\375\207\007\036\021Tos\301\270\354\027\344\215\033RF\220$\237I}x\300\372\307{\333SPq>\2373\b\240\247\246v\332\017S\251\200\365j\013r#\315aUr]\343\277q\312)Wg\213z\260\306\3459U E\306\246+:\254a\023\3762\212X\3205\326E`\313\\\"/\264\230\266\216\317\274g\nr\344\256\f\215\217\345\2458#\211S\360\006\373\351p\"\016\246c\302\240\3252W\322>=Bn\256Q:>\305\2501\275\361\315\351\333\243\260'\035o\204\264n\277\277e\337\377\376\325\327\037\016O\337\275>\376\372\301Q\242U\325A\333\331L\275\347\333\275\215\265\366W\266\355W\226\235\340\316\032\034\227<\226t\310=2\300\256\322zz;\313F\\4&:\340u\241\t\213\350Kj\017\263\273\246yK<\304\301\331\331\253\203\213\2039\037}\326z\272\363\276\177t~v~\2128`?\036L\021 \215\243\327\257@\245\353\314\031\344\371\032\312\251H395\f_\246\354\364\211z\310\321\345PX#o,\242\353\373\377\231\227\211q\n+\3314MS=j\343(\275K\207\263Z\317\0011\021B\f\266w\nk}c*1\027\027\016\341\234H@\215\345\002a\\\002\211\251n\311\314V\334w\276\213\204\302k\204x\311S\362\304\336\037\340\210\306\252\345Fb\376\307\336C\265\321\274E\372\207e\207\243\373v\332G\222a+\340!\2344\222\\\320}\375\224\3028\271B&\374\034\201\244\2602\013\377\265\276\331\333\350\370\223G\351 \2209\022]E\351X\027\305\203\363c\271\006\372\353\024\306\017N%>\365\256GL\270/UH\202\214\314\013\002\334\001\206\033\217\033\230\313\2350\231s\302:O\333\324\016%Z\210\bs\365?\223NNV\277\341\002\373s\021l\201\262\335\3453,\234\333\371\021\371w\354v\211qb\250\007\357_\n\362{2\026\220\033\317\253\3636\271\313&\263ID\213a-[\236\324\300\025:\0039\017\f\347\264R9\316\235\300\215\006\367\277\272\r\004m`\222\325U\313)\004\232H\202\3117\212f\303\367\227\213\017\332\200\tU\365\321\3115O\313\254\030\2313\211\nl\226\317`\0279bQ\353o<74\225\273\365\2518R\263\307\237\367\266\267\020\275\3165\242\005M\025M\365lb\300*z\377\034\247P\265\200\031\032\333\273\265\021\344\207\307\275\274\335\333\334Y\316\251H\245+\223\344\216\206\350\205\330\256\210\366\337\234\366/6\367\316N\317\341O\374\373\026\375}\313\263\263_KF\276V\f3\254(\352tb\3579\003\241y\201r_9(\240I9\237\322\244\335^\344'\006g\265\352\223\202\354\243\230Am\247\013#\263H\2150\273.@\333\301\264\320\346\257\206c\260vRL\366\032\245\034Z\304\237\204L5)A.\031\377\26153:*\032\321\204\371$\004\271\247\b\022\355\341(\223\336u\261*~\351\273\323\213(\271\274T\230#\252\236B\215}\235\0348\032\210\256\002\360\004tw^\234\364\327\321\303\312\371\257\375w\307\335F\224\306\315M[CcP\300\316\333\264st\000\203c\332\213:\264\241\035\306\345\352\320\276v\270L\207lE\232/\302\024\337\373\370\027\344\217B\2547T\375:h\250\341\302hQ\035\031x\213\007\246q\341\3578,1\355 \rY\253\364\035;\264\031\033&F\0019~J\231\003D\036\332\276\331\025f\310\264\353\327\355D<W$\\O\360\333\216\343]\251\275\202\037JC/\325\244\323\tU\205\257\343\230\000\377$\301{\326\304>\265NX\017\022\241R\013x\247\230\341\0240m\017\307\355\024\360b\220\362\264\316\346\326\363\336\006\374/\354\213xn\b\277\335\242t\233'\323\2736K\262\370(\312\253N\357\321\327(n\244\271B\223\221\374D\317x9{\332u\251\222\310\021i{;;\333{\372o8O{/\340\007K\006T\260du|\303vP\374\006%!W\314\366\032Y\215/\033.\347C1\221\351n\212\341\354\355\027\227\227\240\r\267\357\340Cyd\375\\\232\236\2302\304& w\224\324M\031\311\303\365B\365\303\215'\330\002c\326'h!\017-o\001zI\3651\233N\321\246\244\036\007xLL\230\232\262%\030\210WR\207\251\254W\303\331\203\364\322\017\266r\366\264\013\t(hf#\204\377\313\023\226hx\267Z\300,\301;\350\006\244\215-\0357~\320\376\361\177\035Y\004r\003\361\315\305z\241\232\312\250\023\037F1\201\242:\t]E\313mO\326\024\336\234\214\356\270\316\260I\205\357\273\231MT\236\231\022o<\220\265T\365\2735s\254\215\257g9\352\344\244 z\005e\n\375\301hq\263\372\237\025\243\234\247\205\000\245\036\257u\034F;\033\033\313\235\264\222 \312\261}\206s\222\206|\222\260gP\374sR\262\357~.\020\320\232q\\a\331\031\205)\211!\r\236\240n0{\311(1[\032\022\265\305\032a\366P\272\202A\355\2610\025=\214B\033\234\367\204\024Q\032E\032XxjE\226\307\f\211#\017R\240\034\033E\310\021`\246`\177K\255\365\340\214\331\200\337\f\242'K\222\021\030\315\346\353\344\034\375\bFQ\216\201\031\216\255\350\226\343d\3534\017\225\2766\342\020\362\234\343){\227\326\222\025\306s\227\224\025\251\210\205I\370\020\312\344\0171^?\272C8A\203Q\371\321\377\335\205\303\327Qg<O?,\206tB\026<?x\321\004`\301\244.\024\361Z)\023\223\035\207\264\006MJ\013Ux;@\033\230\037W\216\f\224\216L\024D\277\030\273\267\t\261\232\371D\250\\\314In\216\007\226\235-\346a\320\245,\017!\317\303\335\271R;\210\033\004#h\210\302$\274\275.\306\354\353\360<q\n\255\002\332#\216\203\265\005\024b\270\241\262\205F\204\017t\330\024\261\373{\212Js\323\365\212t@\270\f\212J\370\005\221F\200\305\222\222\356\002\2014\325\266EF\355\024\241\210\272\256\207\246\200\260?\300&\240\343\240o\236x\207\006e\300\322\353\314\301\006\202Sx\215jKV\317\222y\244kf.?(\023\255\206\026\b*\021\333\376\032\2119\344|\230\230\234-\363\214\370\307\275\031\017\310\257\036s[\273\205\316\000\227\307\366Q\004\374\367\0032\363,\221\200\264\0131J\320\rr\277j\0353\217\251\352\317q \301\210\303\337@\252\361\275\035\321\201V0\3550l\363\020\363\211v\266d\247\017\006\020\177s\257\023i+)Vrh\\\255\277%]\227\034\030\242\276\263hj\017\207\335\0137?\377\366\340\344\375\321\346\237#\374\327\026\377k\253\023\344$\020\240+\237\257D\325\375dP\214\r'\t-4\260\333\025\265F\353E%P\323\276M*IvVIHQe\027r\242&\\\034\025\260\024]\276\230\233\200N\367\245\312\234\312\025\027\"\325\370\352#\326u\3432$\313\262@\340\237\340\312Mg>~[\262\271\021\335\355^\020\250V\312\324\\\013\264fz\267=\334@t9\215{\322\236\304'\204\220\245\231a\366\204b\267\215\242\321\240\256->\025\305\274\021\242\346xG\317\006\340\306\026i\2054]\312r\213&^Vh\016\272\365*\334<kn\242\203\356\036m\213\223\232Q-\nX]\230\240\026\227s\024\316TL\342\200\253\026\b\273b\352\3708\361\242\004t\340\004\214'Z\265\274\017_\277\037\247kj\231\231\333x\375m\361\013\314=\321+-t\247\313\035\035\304\031\342[\334\n@\006\025q\205G\303=A\255\366\250i\312\273\302\343\237\306\365\355^\330J\020\340\346B\222\003\r\233q\n\254\257\330{:\337\374\213\322\205Nu(\346\356\n\303\317\333\032\031d\013F\363\234\233}lV\317\325\372y-\240j$\320\030\b\224\301\ts\202\336d\273\334\263\305\nBDe\ffF\375 \245\310|\036\217\2173gR[V\031N/\240\223\b\233\"@\026\232\343\203\230\007\251\210/\270\254\037\033\261\355\031rX\255\r)\341A\354$u\357i^\357\220\031UV\334\237\212:|\231\022\217\001\250H\201S\220\330\260\"\351\317m\237\324t$}t\370\035\322\n\034\230\356\252\020\021D\303#\277Z\206\r!\357\265\231\311\r\0215TFQ!\003\214\366\300-?\220\271\316M\326|\370-\270\357\037\030\303\361\271\322\r\023\2172/a\254\201\036\007\022\354g\305\261\262\230\333\215\266P\022\3726b\260}\254\351C\342\212\304z\363\204Z\231\240\347\310\251K\316\200\361\312\3415\201\237\220\253*U\377\353\234\2200\017+:\241\016\204;\215\327)<\241\242\250=\337\340p\224\177vMy\"\343\312^\007f\215\366^ \373\233\214\245\271\370-\f\307r\351M\f\301\024ynh\353!G\337+\034^^\314\035\316\225\210\n\225\327\346\254CQ\350q3\311v\233\200\370\347\345O\320\257\274\361|w\003\257=\004\327\345{\200W$\301\311\200\314\221M\023<?w\025\267\266\375#\272N\020n\202\232\020c<\023\bvY{\311\366\016\247-\355\216\263\257\332\31505\355\353\217gs|2&Z\354\343\237\236\006K\b\202\230\330\212Qh\001P\324\352\023u\253\013M\270HM{J\005!\b\234,O\233*\351\264\344jD\21202\306\312\227\340\260x.!\224\367\254L\255\340\344)O\206\300\305l.\035\232\373\f\321\207?\004\001k\300\245a\"\001\017\266fPl<\333\331Y(\301k2b1\247nX\303\211\025\267\037*\242\242\271\376\356)\357\355\r\336x\376\374y\024_0\2330\233\373i\277yz\273\300W\213L\354r\355\" \273a9\276\024\354\315\267\212\002~\203i\370\321\311k\016J\035\236\343\337P\313e7$AeP\227l.\341x\373m\033\317`\365\264\277\276\375rc-PU\203\315k\034\204\364\235\215@F\310\203\024\203\031\003\201X\275Y\204g\211O\342C\013`\330\264\311\251\\\307,\030\234\342d\251\023r1\036\316Sl\207\030Dy:\311\250\2246a\330Y\325\264\020\236\245Y\003C\217$\334\362o\220\206\002\277\025b_R\3765%4\375\376\\\312\224,\323\2371\"\375\004\354\347\315\227\275\347\r\276\233\225\330\345r\337\244\221S\005Cx\223\244F\336vx\321X\217\rC\362h\342c\222>=\375\376\211'\211\270\006\313D\030)\313(\031\242EH\032gA]\304_\354lmu\243\335\336\246\013\252\003\207\313\003-\224\004x'\326d\221\030\260\231\270\305\333\tB\354\264M\363\357\267vw7_\356\235\305\273[\233\b\265\303\375~Lf\251[$\032e#FZ\034\023Zt\310\200\350\024\3234\257\252qT}\340z\363\365\352\003\273\031:\202\216\223\005\364X\2633*\331\201\373\265\244U{\304/B\274\t\345\374\252%\212\354\270zt\270\306\333\245\273(M\347\035\360e\304\327\303z=\377f\312r\262\2031d\210nlY\026\373N\0247\262\331-o\221OL\260\374\350\313z\243(+Q=\r\027nb\247Q\337\235H\244m\001\346,}\254\370[\274\357\313\"\222\266\232\004\240/(N\252a\226\261\273k\216\227Kk\027\b\263\236\020\216\262\2043\307l_\224e\227\341|\372\313G\3504\3648\272G@\345zp\252\330\215O\372B\031\207F\325\266\327Q\237\025\220\364\000V\255t\330$\314\224\252@\t\031d\017*S\345\016;\326igtpI\212\376\262\253p9\265\343\310H\002^\007\356nMY\200\221\254C\253\257mF\254\264x'\253\001\351/\324\t\200Owq\205\324}D\374\311\240\002\240\301VI;\337\262\3140\220R\246\365\254\224\212C\254\b\301\2431\n\3008\r\351\226\257Lu\"\333\360\bj\357\321\206\032t;Ms\352f\006+:\210\270\254\2321\325\013\251\375\024\020%\317\000r\322#\326\357\342\333\333\333\030\257Z\314B\226\202\342^\324\252\032v}\262~>\203\223\022^\016\262\232\220+\204\271\350%A\220\220\371\220{C\2432\201{\327\256\206\200q\207u\212\000?\330\312p/\212\337D\235CY\360\005<\262\327X\013?\033\354\202\330y\342\365\255\361\002\356\363n\252KC\03510\361\236\303<\214\363MKO0\201\213;^\022\347\375\312\023.T\375\322xp\037q\314\313\344v\341\031\0274'\347\224\333\316\311\230eo\331\216z\337\332\372\026\277/+6\270\267p\004lJ\210\025\363\345\303\235]\252\205K\307et\260'Z\321Y\"\345\314\276\372eR\343\377u\226\013\005\333\355j$Y\204\004\2779>\313H\324\256\021Drj9\232\347\020]\233\025\205nun\324\204\"I!\242%P\225\226x\242\251\3724\326v\322\276\221V\260\302t\370\3651U\257\3015\224\353e\314K\240f\316V\310^e\266j\337i\006\325H\215\327\022|S\236\304\325\207\246#\266\352\213\211\255\314\r\323\213>\255\000\212I\245\0264n\253W\biO&\265\266\277K\375\222\006\371~\233M\\<\263V\224\302\320.m\264\364&|\005\216S%s\206\303\205\375E\352\332\340Z CM\001P\032\335\301\265\245\201\226?\205\207\303\224\244\350s\256}\3722\2220\020\226u\27293$Ui\362\f,\201d\b\017\307\311[\016\365\230\345\206\t\372\245\006)\020\362\337\332\304\373\374a\352-I\274\007\250\307]6\265.\352s'\364E\231\265\354}6!\260\2408E\016\375\3747\333u\342F\235}x8\316\216\311{\215&\024\332\303\t_\247\200\020\260\177\315\254Lg\017?\027\036N\261=\304\317\347\255\317\334\001\017.\216W\307\313\2434qn\274\247qO'\343c\325\017\311\351\361\221~\030\310\213\252\366\254u\233\324BDp\272\3630\275\222w9\233\273\307\272w\330=3\270w\377\323\327g\253Ei\211\022\353\262\334p\225r'_*\260\244\312TP\034\346\314\216\000\305F]\312\354\032\223-\213\203\023\207[\245\215\035X\246\224\233\330p\001\247\032\336l\261\345 uV\035`?\377\262v\257Z{\t\322\354n`i\213.\353\360\253\237\363\177\351*[\376m\303<Ox\227\336\243P\343\"-!\240\036h\263\035Q7\032\332\302\346\213\206\266`\337\231\257'p\357\3655\374\224\224A\270\025\322\3642\203Ha\357Yu\305\004\233\3608\331\023\335F\310\211\022\206\310\t\026\r\312\342\266\"\333C\275\363\t;\222\257=\244'\240\317\230\273Z!\357\276\271x{\302\215H\031u\b\313\337+qZ\017&\031Z\357u\315\362\\\256\b\017\031\211\222\231\304\2311\r\245\177\210\325\340\340\013;\006\317\023\f\233CNw&\325\3665n\005>\022\360\301\030\315\021}>cj[fh\207\212\260\351\225Kh\310IS\375\365\320\202\026\251\303\250\210\241F(\271$\323YImGY\327\017\226\224j\272\211:\350MVW\303J\320\376\2368~\363Zk\347>\021\3620U\013\323f\002\223\301\350h\375\241\017\025\007o\037\224\2205e[\337V\266\333\251\232U\204\277L\210\313\324\356\264Q\343\037\310\334\240`(EC\215s\210i\223a\374\257\341{`\357\317$-\257\234\306$!e9i\370\002\377O\314:\005\t\346\031'\001\320/V\342\221\210\326Q\222\003!\360\304\372\351\310\343\361\347\343bV\335\257D\322vZ\272\265\326\214\245E\333\t[<\313?\252\263\000\013q\253\210\332\306\266\206[q\276\366\177\334\261\347%\032\260\207\344Q\016\222FfR\310G\"W\222\311\0231\243\342\375\311\355`\264\353[#ouNm\265\275z9U%:+\270_\245\375\205\305\032\323\316\037\227E1H\312\025\257\304\204&N]\371p\372#\366\240c\254\335\212\320/\371\335\036\307\333\234_\004\222\037\307#\263J7\376OU\226\270G]\353\3031N\034\276\354A#\210\003\250\0326\254\212U\023\230\241N\331\321\272M\234\354a\374'\316\221\367\003t!!b\205\206s\004I\"Iu\321\222v\364(\352\260R\f\377Z\302\206n\276\206\377\254\213b\374\371p2B\032,5\320\343\374\026~4\315\221j]\377\322\346=r/\337EQ\177\333\345\205\344\277\\\000<H|\254U\025\374\317\213\256m\345\0268;\r\027@:N\257x\267\366O\216\276=:\361\356\365\257\373\375\365\217i9H\313\242Z\303\204\233\210\2363)\377\316ewk\2412%\b\340y\020\261~\214?)\215\016\251\344\177b\"0%\006s)@\221\004\000\274\tQ1\212^\021\207re%\212o\273\b\357\215)\241\226E\257\344\233\025WM\"\225\030\367\233\257\265\323o\342\203~\374\352\350\344\350\353\203\213#\356\277\307\220\367aMT\024\222o\204,\246UY\235q{c\tZ+p\005\230\256R\307\026\036\016\316\366x\"S\365V\220\214A\345\251\242\3679\226\226f\006\336\205W\357\372'-e\033]\355\177\233`\237\347\345SE\324\362O\007w\247\363\220k\217\332:\316\361\350)\252\026)\177\257\350\311Vg0\007A)7\277\n\340V\342|\252\341u:\021\003\b3E)\035\221\341[\0046\226\345\372 e\344=rm\3401\013\325\275\335b\027P\314\n\302\374n\002\037\352\t\370\000\347q\302*M\332\246\271\330r\352u\325V\321L\3331\223i\300I\r\364#nN,\006;N\362\251\016`boE\037A\037/mn\270\204\361W\367?\343]}\254td\361\350\020\242k\332\241\311@l\225Hg\320E\211\274V*6\273\207b\2738\375\253\3378\326`z\304\351\324k\261\265\372Z[\361\031\245A\021@\250\341\252m\246~tv~A\0379\301\277H.\\\025\302V\227&\277\230p\234R\362\220\311\311\325B\030\256\271\222\326hr\344i\337\274\362\332\032K05^\215S\020\364[\232\004\327\215i2\302)\376R\275\337\013`F\030\243A\274\0228,\276\031\225\331\3255l\005L\245\327Z*\332!\324y\302\317=@\345Y]\302R\367I\013\326\034 \006\212\341\342U\264B\270\"\227\034\017\211gfI\315oW\233R\337K\017\013V\313\265\313dB\335Z\310\256\034\260&)6b A\025\t\257B\224W)\333\026\260\244\2207\332\220\311\351\035Zj\031\306\022e*L\031\352&.\374V\204\270J$\226\r\2316XpN\320\331\006\303\360\365a\243e\315\361\331\315\263f>\025m\037)dy[MK\271\262\031\276M\323E\177\244IHD\346\361\276\377\212&\207\337\241\027H\230 \254\355\225v\205gV\036\244\360\275\f\201\355\216\035];\220\307\005\f\210\367!\272\017Ql\340\273\234\240Go\021\324\020\374\016\031\202t\306\263\256\344\"QqMQ\372X;C\203\343\253O&\325\315\322\261)g\013\026\347\003\331'\253\233_!/\372\337\232\224YF\376\031y!g\272\213\f\215\226\223\025 \035\374\250dCZ\300\004DD\234\035\364\277u\204\203\303H\266\003\002\354\207\0273\325\37658V\360\320T7\217940\021\357\320x\244]th\002\273}\334h\302\303/\3431\241:\354yg\2053\000\350|\3705'4\317\345N\013\274\340\235\026\335\316\360q\231wZ\264,.\345\223\342\036\024\377\220<\235\365a\277\026\261\276\013\201\345\323[+\033,\206\233M:\n`,\252W\204Q\177\374P\227A$k\024!\227j\3300\020\026\252\020\3445rq\324.=!\321@\264\r#gU)f^\023\352\366\222\364\373\333\203jnE\n:\2517\250-\305Y\036\373\265\205np\265ntsA\274\0252U$\206\210f\204B\275`\310\215\304D\022\200\036\222\344\021\333\352\bn\336\001V6\240\300\255H\276b\\\317tY&L\270\212\225`\317\373\247H\370\210)\220\023x\tzV$\364\373\024\226\013\321d\371\276\271u\321pT?kuD\032\345UL\236\210K\204c\3347\177\365L\333W\357\372-\311]\245\\\251\316\215\276\341\367\006\312\202\274\331e1\273\202kl?\350,\245O\030\322[\365<\341\362\377\264\244\370\t\372o\235\331\255\262\245\210^\331\020<0\337\3338O\016.bR5\365\240\023\320q\205!M(p\243\203\206\302\334\253\2023+%5Kw\206o\0225\255\2577\226U\367y\210\351\315N\214s\2104\364\300?|F?\354\265?\344A\004\374m\006\206\230\323bl\226\217\260)*\322B[\\b\307\005\333U8\322DtXI\354\003\0047S\234\267\267\003\234df\274/\264{\004\037\r\b?\256\000N\231\306\372\026\237\271I\362Q\324\267\035\342/\277{7\263[\267\021z\347'\205\021E\261\256\265\355\201\244'\312wB\230\026\246m\273\223x\246\245\3444\023\363\356\357\233,\334\244\367\346Fo\263\267\325\333~\032\243\331\323\260\210\321\364c\377\032\214\366\354\2230\332\263\177\031F{\366/\306hB\357\255dcgo'\335\331\332\333\333}\266\371\233\262\333N\233\335\236\375\253\260\233\030\327\206\331R\217\335\372\222\354\250\335\r\2207\364-\216\270K\255\234\226\333\270\315a\346\264\351\225\204\002\035\362\370,2\237wx\306\302c\213\353\"\030k\2530L\003\004\340\322\234\312BW\205P\260\201x{\373H\257\230\037\377\"\210W\222&p\031\333I\375+\260\251R|\363\345Vo\363\031\306\3447\273\366\357[\217\341\326\346@\217f6\303km\373D\030o\030?\314h\305\365\242\336\252\260EkQ\237\\\236U\253)&Z\246\006^\355U\361\206\204_\214\376\276\230\272\022.\257\3004\247\"?q\365O\370\267B`.\233Q\377\314_6\034\213P7\303\326\232?vI\035\344G?\315\242\315\350\237z\3058\362>\330\023_\004\227\354\365?i.\r\226Z\274Ys\202\031\224\034P\004\256-F\023S\200\276\312\255\3673\321\360fa\006\207\212\005\207\254-{')\232\352Y5a\r\033\355!\325\252ib>\2647\"\321r?\025M\027\340\243\244\260=\270y\360\367\322\242\217i~5\245&\267\235\007\260\315\266<\236\246\2121\367\331\264\242\022D\306\332eO7}\025$\350\233\3426\275\231\203\200\336h\016\325\350\211\213s\303\230ve\032cd\371u\212\025\344#\251\004\310\375$y47\313\202\222gT(\303\"n\262\244\315\\r\3535\017\331\357.?\1773~\177\266\325\340\367W\344\025\231M\246\202e\367\000\254VD>\302\357\b3\213s\034\004\305E\335\342\006\267\302\024A\314\351\204\300X\020\006\267J_\223\316\273\334\034\271\351wl:\275\302%\352\230\317G\300\216A,\373FY<\227<_\247.|\234i\365\302\331\005\334a\0008GJ\021\275\026\357\004F)S\357H\177\215\231\364\272J\220,\004h\375\2733\217\263\275\334e\355\221\265\213\326Y\341T\337\273\3022\275\342\254\307E\345\245\255\016\002\324R\317\346\274\220;\031O\346\364>\372:Ar\221\277\"I'^\210\254*0&-\356\003\372\273[\332]\245Ln\020\217\260\017\250\343+\256\027U\350\372\205\220N\301\336\262\0045\313^\347o\255\023l\371\222`\222\364f\334Nc\220I\357\007O\240\3203\035+\272\253V%\016\313\373)\372\332\370e\271sp\335\334Dj!t\334\373\312i6I\352,f\002b\3278\260xT\275E\rj\304~3S\016\337\016\315\320\bU\253}09k\200uW)\024\254\370]\030`_S=[^\364\264b\322ym\265\247\343\273[z\277xq\227\343\344\006h\262\330\341\231\326\311U,\220\254s\330\332\361u\312\tf\2348*\2620A9\022\227\232\032*0\271(\r\275 ?U\357\036]$WNjT+o\032{Q\2449'H\303\242\340\020O@\210\304\357\200\214\261\007\346\215.w9\3556iS`\245\3603\275\020\016\363\260(\005\f\0313\234A\372PNweP'\233\t\260\234>\246=c<\350\2041\267^\025sY\032 9\020P\243\264\312\314l\242\003Wf\373q}\330\210\3126\245\245\007\203\253\320\016\n\262%\262\223(\206\031A\023}\372\374/\234\002\321\333\346\303\005\2243\272\b\272\222\334\304\r\216g\232'a\363\035\224S\334&\322$\372\333\034\212\337\243\320n5\033p\013\033\203<\2754;\273,\212\377xB-\372\263fN\264C\254\307\362<>\\q\02220:\255O3\206\033|\002\002\341 \017QC\223\212\206\324\202\361\n7a\314\2462so\3274\251\344d@-\035\235\267W\241k\026T\013\246|\305i1\215J\310nS] \334\2379\360,\217\331\021\242\036\235\263\337hK\250(`sc\303b\371\317\001\360\227\335Q\034\177\022\323Yn@\374\215No!\374\t\3714\311X0\265\243/\370I\003\247ou\"\366\306q\023\r\002\364\007\352\035\321\034\253\275\306;\355\324J\226E\031\367\311Q\236\217\276\272\267\241,\n\bq\326\006\315\212S|x\376\275\020\264\311b\220\376\177s\320_`C\300\000\301Q\tV;\013\302i\231\325\232\256kv\331\327\350@H\t!\223\325\322\245\231\303\333\307\255\336\256A\357X\262\247g\023\301\277Y\024\371\274\311?\b\357\031\023\210g[\336#\356'\2125\212\315\031\b\232\222\273gJ!\212Z|\334\357/\250I\267\321u\\\364>\017\253O\243\247\034>\365\001\241\331\262\264IA\214VJ\231\352\344\313\342\333\020\214\332.1\007\034d,\324f.\n:\350l\364\237\221\tx%\225m3C(K\324\352\027F\255\f\\\266\217\034F\027\006i\342\370\344\na[R\016\013\017oz\273\2606\303\350\251\030\350\026\254EO\357\302\304fl\023\025\321\346\020\f\353\254t\222\231;\327\031\354j\336\241k\337\336\026\362Qo\261\263\261\223Y\341\337\212\342F\260\207\246\0335\016\234E<\304\211Y\000\330\"\237[em\230\203$\013\316\237\234\027\243\224\352\244r\322\030\231j\311\004#\206\334\370\000\251\374Y\240\020\2126B\260\260\003\335\f\245v%\271'\214-\363i\342n\257\265\fP\361\252 7\240\3601\222pXf\323\232A\002\346E|[\275\030\256\306\305 \031\013b\240\224\231h\312B\243W\"\212Od\317@KoXr\274\327\245\274\275\273\305\020{\346\023\334V(\276\354\312\351U\000N\252\322\251\2343\345\371^\b\312w4K\233E;+\222\201*\216B*\0341\275\260%\3233\b\274\210\235\t\305%\324\215\256\331I\2033L\235\311i1\250C\253\254\342\243\025\373iN\251j\213\274'\013(\363\2004\265R-$:\315\317`\005\352 Y\324\037\226\234!M\211\211zj<(F\367\363Z\304z\307D\234\007\"_\b\031\336\002\347\232\213\304\357\261\232\262\n\204\360\350T[|E\312G\271\326\213\216s\311\213\222\252`\256\t\313\335b\262\000\003T\222:M\335T\021\\rh\201i\r(\206\024\215\351/\2117\374\214\t\214\007ID_\260\034%H\244`\n8'\356(\215\"tMN)\345\233\007\2743UM\322\275\241~\b\024\034\235JV\313\023\003\246A\376c\372`\320qJ;\300\344\337\332\n\037-V.i\3325&iP\372\221\243\267;|\254 \267\n\365\035:Z\306~#\260\310\254\004\342\001\341\250\013\245\013\312\000\013iU\311=\211\275\r\013.\247\035\230%\365\0268\270\315Ca\366&\335\240B\027 f\271\255\346v\237\310\216_s\370]\030>\\\355\201\344\3074\035\354u\\\260OBR\346T\034\247\365\220\305)e\272\216\322d\314&\"\316\315\307ka\305\240z\324\321\b\034\006\017MF\217\006\345\013;\305F\341\323\201\347A\216\003\235\206\020\n\363#O\206f\360\353%\214&h\260?[\255\370\2574\226\334\316\0170\375$\005>\034\251d&^\252\222\313T;\377\212\322S\f\201t\344\356gY\225\007\260\327X\327@\335\302(\302(\261DI\251\306\331T\263\210\272Q*US\330s\224vc\026\007\020u\265\362A{T\216\321?\272\332\032}gc\223&\273\263\361|\355)GgIu\272y\332\232\312\363\270Jc*\364{\034\036\033y\334\360%\251\016\024\0006\024\005\360\002\201gW\327\330\031\315S\306\355;\224cE9\222\2741\t\275\312\020_BxzN}A\201\202u\333wI*6%K\226\002(\367\306\033\244\352\301\353,\317\252k\254\017\305\264\320\253\324o\354\013z\203H5\260\274\251q5\226\332\361F\013\314\t\377\222\033\005\331e\206\0304#\t[\262p\341\272%\334%<j\026M\342]\277O<\320\347xLt\201j\217\267N\214\333\256\"7\235\366A\310m\340\005\212\336\203\222J&\341g\337c\326\315K\363\3435\202\017\306b\356\345\331\312p\302\222\006\375\316V\313 \303Zh\311w#\007\357\347\374\2179\025\350\004\024\031\035\277=\300\212\242\276m \353\224M+\036\226q\321\221\375\033\354\236e\2560.\372l@\352\221\001\007\332v\215\341\007\354\371\020\235\200E\300\325\270_\256\004\240\263V\366W\234\316\330]\323h~\345\317X\024\216P\371\374M\331Q\256o\016g\364k\305\245\364\337j\026#1\234uJ1\305\306\272\325\210[\361\240\265\020\253\205\375\314\031\225S8\356K\236\023O\206R,\206C\202\020$\311\005\277\274\272\n\226L\001\t\220\215p\315\227\240\240\221\221\201\312\375\374\342\365\2078\312\341\203\316\210Z\244.%\266\002\037vH\263\357\002\257\204Y\2138\213\031\013}\277\3643\023\300\273L\200\323\356%\313|\214 \031\"\344\322\211'\327\307Zo\315\260\0041\242bp5'\"\025\321}i\221\f\004\237`\344\340\023\264\003j.Z\201\030=\252.\022\322\202\310476\356\242\221\265C\b\344\214\200s\273N\024g\230\2106\320\345\326\366\213\027A\2178\343\264\002c#\241<\350_6u\210k+\365\003c/\224\004\277\352GZ(cv\202\027\224\bZ2\324P\260\001\025\302\2622\225\032B.\177\225\006[\202,\300\000\306\240A\021v\001W\22109V\346\000\272\255D\232\264;H\r\202:\036\257\354\256\3256\201k\365\363\350K\302D\301\017\264\206#\330\304\253\264\366\361y\234\252\356\005\203\207\274+\202/\024\355+N\313(\273\324\223o:\334\177I\333\261/\264\027\274\255/\203-{\244\264\234\372\307\3245\030\350\366z!h\000j\303!a\f&0\327\272\216C\275\002\367\315\240X.)\350\f8\225\020%*\021\264(t\340i\317\177\202\357:t\362\367\336M\212\024\314|&\261\255\352w\023E\022\023!\n\342X\307\270T\213\305H\234u\205\376\006\234%\001\347+U1\314]\2273\204\266e\367\036}\312W\353\361\262\3506W\214i\3673\332/\242\262\364\267b_\221\364\\cm<\320\024\223\034g\350\030\256\262_XQ\225rh\215\026\222+\026.n\004\222\004\216\312Y\333@~\363\204\277\3058H\344\232C\325\266L\257fxu2\002\22160\324'\246\331Tk\001\274\n&xk\215\327\234\003\271\352Y\316I#\324\fb6\370\231\242\260\205,\235\301\213, Fz\351yAR*\202\241xFB\265\b\"\000\030\220\027]\272\177v\022hH\237\"\242P\353t\357TSs/U\357\244\"\220]c\244\253`:,.U\300\0308\374\221T\214\211\001\373u\037\302\251aK\343g\343:C\3217\367v\343\032\003\220\024\331D\004Z\323\f\353\212\026\273\002\262\023i\277\"\0077\324[\311z\fIT\36311\235\333\214\fA\255\257L@b\376<\275\232\323#\f\237\245\366$\036\002\235\\\277\257#\231\317\347_6\206\013\\\301\353\202\366=\274\312\026\023\201\222\244L\305su]\244\262s9\271\322\254\330\250\264\307m\260@t\376\224\351N\377Kq\235\343?p|\034\376\363\315`\212\357\372\334\271:\223\305[HjM\035\241\326\360\036\366\b\374\310\217\230\320\341\241\2765\316\253\\\201\027\224\205\231\271\030\030\320=\220\b4\177\341\035\f\250\335\177\276\177=\273J\265\003v\347Q\253F?';:\331sE\030\017\352\371&\277\263\253:p&2\032q\203pC\200\025\326l\273L3\001\255\265\330\221\013Vp\233\016>\377\022\275\343w\324\333\234Ud\244\334:\265:\217\026\350|E9\177X\007\264\306\031\362\262(\026\216\250\336_\242\211S\317\310U~6s\217\371\201\356\227\3065\031\002\211\244\354\004\366W\350M\363yWa]\262j\001i\370\030\032\230\377?\233\327\361\0178\305\324;w\301j0{L\337Y\247\314\"\315I\210V\272\254\265\377y\205\374\237\232\t\371\267Y!\262mTx\352,\326\021\322\003\025\315\376\301\211\377\330\241\251w\361_?v\354\354\177\244\315\371s\226\377\031W\360c\247C=W'\276\255\276\324\246\243\226\217\214\310\337v>\355|\271\361\341\316\312R\337\265\260\211\331\245\323\244\214\351\212w\220\320\216t\r\240\236\245\026eI\334{>6\373\004\356\004\332\337\3258\251\256\335V\356\006\217F\367'\245NE#\377~2\257{\367\321\177\302\027L\t\231t|f$2-\306\3169[K\254\007,F\314\352\271\351+U:\311@\321\247\320\307\230\315\340u\274%\250,\266\232&\350\363E\257\202X\310\274L\246\315<V\247\215[\301A\313\352\363\016hI\177&g\177\232\377\031yn\006\033h\017\360]<\271\207\311\257,\263s\346P\217F\232\035\324N\303\344\363,\210\374|V\365\231\317\273\036\264\322G/h\342Jd2\335>?\375\346\317:\300\217\235\357c\376)\201\302\355E\247\337 \323/'\330\026}\340K\376\0131\373\242a\311t\320\227@EJ\357\t\327\203\214\375\351\024\001O\024\007\255f\0344\3227\007\0059&j\277\365+\265\236\374\233\360\027\245=\213n\334LW\325\254-\025\226p\036\216\002m\314-V9\377\215\3644BeG\223k\345\017+4\034\006?\351\356\244\210\032\203\352\3779\024d\224\274\n\251Q\277,\306#\211w\002\347\363\016\253\341\204:\b\022Bb\240\362\331\220\035&\211\020\342At\022\267\022f}\230\310d\220\222\213K\261\272b\361\236\007\334D\355cCy\261\202\324\205\r\034\337\240zh\"5\232\317L\272`\022^,\235c\325.\374\323\026\375A\274\355\372X\"\032\230\354W\317{\341{I\214\2157\367\214a\237\310\343\341\341]\264cMm\251\204\374\013\306\3372\343\373\320I\211\364\220\r\177\366\302-\2212\256_\343\334h\270\025$m\230\341\207\031Y4\340\r\030q>\035\257\303C+\213Y\003\020\276*&\330\302o\264\307\311\r\026+5sk\345-\260Z\270W\221\351\221\351}\212\244\261\364\360$\263E\016\303\352\2128Z\360c\tGs\330\007\233 \032\034/?\016h#{\004\304e\316\204\203\210\255v4\003\3657`\260}\243\331\241\257\f\306\266*%\250\311\211X\371|me~\023%\243u7\001\2625\267\241\"`Q\030\232\335\274\023\314\331\212\322\23063\334\r\247R\340Y4\271r:\233\fk\314,\356\006:\271sO\265\347\250\351\201\343\211\241.jK..\022\307\303\261H%_\371|\225\357+\353_s\276\275\022\375\030\306\006\213\370]\307p\020\236}\350\215h\037\2033_P`N^\331_\247\037\265T\351y\003\321(\260U\364\337/\361q\265$V\242^\017\004Q5i\343Fx\300\030\310\241\302\b\212\314K~\036\265\271\331%\311\277*?\307\234G\223\270\034\245\201>\253#S\277\".=\334\220\027\203L|\371\243\242\321\316\216\221;\341z\227\000\2167\\\311q4\372\2751kdn\361\221\000\320\233\274\312\347\370\035I\276\t\264b\226\016G\321\213\030\237\263~~\345\373fnXW\364\302\230r\306\003\350\032\270\262AR\245\317v\370\223L\244J\217\275\365\310\252m\334ZP\373 \020\032\032*g`|\325\\\352\207\267)(\222W5\201\215<\177\346L\272\367\2005\334\026\244\262\306\366\232\f\307z\347\022}\037\f\261/\2134\016\307\207\216\221{\b\376\254\254\323\376\360B\246vL'}\237'\301\214\3750_cP\341rV\322\355#\217\261\222\240\240#\242\247\277=x\367\376\340\344\267j\024\372\210\370H\023\363R~\244\346b2\302\253\341QQ\023w\206\016\306Z\0137\332\302N\n\226\345\005\001S\316\274\360*!Q\266k6\020\272\006\271\0303\335\302\220\322\\5%\231\nN\275QR}d\037IG\337\347p\020\327\360\032\034\275\300\2012\230u&=UAN\344\336l\370\375\212\313K'h\322\216X\036\036\316G\017\373'\227*\271\244\354L\312^Y\f\212\272\263\b\327\307\017\273n\266JwiL{A\305u\301\240\205\373\262\346\360n\221o\301\305lT=\235\260f\372G\347\264\rg\007\375\276\001\314\223LH\317\236\244\340(j\271JdM\24055H*\374.f\0238\362\240\263\2170\313\264\037*\273%\251\256\272 \347\341pE\345k\254=\225]N4i\300)\242\354\006\335Z\235\376\361\305Qt\360\376\342MG\372X\264\240P)\n\001:{\252\225\023\nz\023L]!\347\237\375\346\223\266?\260U\235\367\273\333e\200\r\026q\301no\267\315\005\363\033\346R\367Gj\203\272\246{#'U\272\243b\366\352:\347$\013 0yA\023b\b\257\223\206\366\025\261\311\016\324%\326\300n\213\177\234\243\322\300\021I92\230Z\001\025Z\023\255\261\216\205\322\273\336\333\326\353^\357^\023\034\262\311\324\341ZI\n<\240\007\303\266\206}\312~5\032\274\316mI\311\315V\311\227D=_\027\345\270\207\232\315\362\267$\277i\237\377\033>\270\207\\\350\313>^y\201+\001\030\225\301\224c'\024\235\246\371\022jc;\326\005\243\255b\246\217z\303/(\336K\343\005\320A\274n8!<<\207\267}\353\225.\315\341\355hN\203\f\\\002e\n\033\034\222\303\357^E\226%5\025YK,I\245\211\346\365\264\241\243lr\352{\024\361\036\245\351\324\264q\316\bW!\253$\304M]\275'\276\227\317h\240,\002-\254\355uqK\361\365\315\347\333/@I\272\247\346\311\r4t\356\264\026\034\356\302\t\261k\221\210@gF\025\232t\344,\024\f:\037[\031\210\250\2367\242\030U\030#\2658\211\261\347\034\026P\264\373\307\377u\324\215\316\217.\316\273Q\377\342\364|N;\230\232!Y\221f\232\355\304\307\277\321&\201\352iX\202RR\333$\236\327\004\250A-b\033\270@\027.\214\267\375\021\034\202\274\210\3135\367\025\315\026\254g\214\317\330\216\335\222\2653\207C\244\000\243j\364(\356(\\c\007\216\033y\370m\233\225\007\370\027\364\322\265\006\236[ULR\016\304\220SN\005!5_\347^X!\354S\r\307\320.\257\264[\242\311\276\2449\2344\352\206\260\242\263ZyD\007\025G\304\350k\001Q\006\004\334\304?\266X\220\315\037\203\031\361W\f`6\374\341A>\013\336\200\233m\001\212\340\242A\251\211YW\212\356H\031\210\232.Fz\244\255\225\356Eg\n\351\231U!m\222\360\203\260\376\325\036\\\341\347\256\240\202\264\256\256\026\310\346\034\\d\274l\313\024\206A\300\223\026\252\3524\b\230\376)\340\245\243\350}\316\020\310\354\261\314)\365fd(\207\370\347\230\324H\227\377\250 \303\021\027\355w\020\241`\005e\261\350u-\203I\374\224\253q[+\245\"So\241g\356\266IB\022\345\322\033!W3\336g\023\267U\200VC\325N\271\200\252\316\3621V9\265@6\205\222O\321\025\220\375\036\241\314\273\235\007\\\234\324\006w7\261\022\233\204\232\213;\306\n\3369\362\000jpMx\225,\317\020_\273(\327\261\354\035\333\211D\240Hh\216y\300'\247\272;\311Y\030\272\027(\n\227\206y\006i\230\266\251\027\205*\r\270\310\230\3413\233\032\270\234?\n\202\351\205\303\032\376J5\027aCh\300\346\"P\245\313\tN\315cN\026h\363cUZ\317\246\276:t|f\207\224\026\\Hj\211\360;\223DPK\263\001VC\362\252\304Q_\362\224\240y\200\211z\013\367\256zQ\007A\033;4U\201\226\3404\021\363.\020\2451[\377\370i\361'\303\326\322\376\254\276\317\263;\022\007^7v\213\243\265hV\212e\205h\177\215\331q\227H\330\177w\240v|\003\263\322\346w[\343/L\356{\370\\oTL@\020x\337\230P!\265\247Z\30761N\265\242i\206|\244\365,vV\022\376\255\264\353\030\035\364\360\214\364~\020\\\035\347\212\370-z6\250\270}\225Y\207\033;S\325\006\2450\021\001\237\267\261\263\005\305\230%i\013f\336\271\257\216\034\254{7\241\216\306\324$\2206\274\271\274Fw\037\013{\035\016_\373\323\237\254D\352S\"\027w}\337\345&R\034\243\345\346\264\235\275\037(\234\361S\374\003\374\363\247\216\236j\306\252\027C\302\351zB\333\3235\275JX\266\343f]\034\236\361A,9\201\203\326\211\202\210\254\037\274\f\270\2513\363\211\241\245\363NW\323sP\261&\t\220\200\025p\205.AF\230\003\271\253&\007\377\200\260\356\201I\314q\270\2059u\245+\027\327\t\326\322A\005\250\000t\322\256deV}\304\305I\311\253\223\355F\363\371\314\301\376\020\310d\203\377\361\260\372v\006\234Nw\313\374vsg\214\367\372\340S.,\235\367\360g\201:\022\275\333\004<*\210\210/\217\225i\270Q\003g~6\001|\223\350\f\354\022\303\245\016\3429\003\252\340\205\276\326\266\241\016\323\222\342\236\326\317Hp\036\031*:\243\022\346\200\271\256\202\235\247\225\301\230#\241\n\370gA\323Npt\254\365@\3300\034\305\250\210\001\360\277tq`\321\354m\216\256\322\312\267?i\362\223P\013\263\307\350\017eZ/\347\f\334\332\360\235\201\325\307\214\267+\316\246\017c\340+\226?riCR\232;\263\232]]\021\314\250\237.[W\016\200\202\264\317\205\333\211\210\320\000\320\247\257\211\f\265=\370\346B\026a\035\034K,\253\345\225i\254\363l\213u4\275\023/-\335\210\370j\2014\367Q\343\350\314\322g\237\367\236\357\3646\332B\236\023\3279\307\2125\2539\325j\362\nz\260\301@\227\326\016\331\245\264\373\340~\r\245\201\256w!:\333\272\304%Q\264\267<C\271\254\260\234bj\257\033W)\335\351my\334V\215\343\341p\030\223\272\265\317Z\340\272\350`a\375\264\237\n\013\034\036\036\212\272xq\335\322\333\f\254\274(\255\3012\356\352zV\343Qd\321\254w\234\301\375h\365\\*\200M\2726\207\331\357\231P\246\214\373\307/\312\330\026\257\310\365\223\271x\377:\303*\340+6\243\320g\223LRF\023\371V{\354'\210\214\006\371eZ\215\337\340\266W\313\355\273\274\331\334\372gs\267>,\356\321\342\246\035\216V\017\251\027\023v\306$\201px\215\331\245\b\256\t\324\251H\230\022\021\372\375\223\365\213\223\276W\203s\217\221$\212\0305\343\025\274\025\324\206P\024\ns\274\371\013A4\332Yn*\bM$'Os\202\030C\235\214\316.\345\350W\321\273\203\013,\n\254%\323\354\262\030\373\001\263[\003\262Gq\343dh\033\217\253\341\305lR)\207\377\212m^r3\341-\271\262\333\254\322\336\333\315\340\33629\203\373{.\027\254l\2329p\024h\030\027W\031\341p\360\306\323\315\252Q\365\266\024;`RG\002O\331\352#\306G\033\257o\263E\322\275U\301\"|,\006\024\265\331\020\254\307!\226\372\275\346bi\267\200 k\364\037\261]\322+? Jj\244\254\361\311\373&\\\271Tx\247Y\325\3765\232\377W\236f\365\235\302v\215\272M\f\024\267\3558\272k\211dnWS\356r\031lJ\333m\267y-\375\226\210\rTi\362\025aaDk\270\257A\2653\bq-\360\351fca\312W\304 \375m\006R\3436lQ\263\311ta\273\222\362\341e\203#5\311\375\210\013\253\tL\377\261\242`\250\205\307w\332\024%\324\023\316\006\314\273v\266\234\316\241\2402^\236\004\255n\361|\336\034\035\274\232\013\212\306\235\244\334-\244\272\030*]m\231\224\344\323\263\331ihX\316\361\347\251\377}\220r'\344\231\270\367\022\332\034e|\306\302K\t\017\016\217\333\374\216\300s=znv\226xw\321.\343\002\327e\033\211\"\247?\276\355'=m\333\206\232.\242\311U\372y1\036u\226\035\351\270=\330B@\305+:\231\343bP\\^.\310\315\340VATY\313\007\240\203|\201\357\rp?\b\004\260\354H\366\255\340\023{\372\204\023\016Us[\375#\004\361d F\022Ik\341\206\275\300F\177\377\307\017?\005z\026cT\001\353\226)q\217\202\260u\225\216/m{X\034e\322sR\3479\356\003\343\006J\335,^\261 X`\307\3111\035\000S0c\032\3045Be\301\f2L\342t\253Y\3710\035\233@\312\222\342\030\221l\003e5\177\377\341\247\177\300\377t\234\353\357\032\216\360}\234\336\247\003\020\235\225b\221\305\223*\332\237\300\351\317\346\240\324\275\301\327`\026\362\236i\212uU\224@\352\211`]\b\320G\323\241H\225\212\236S\016\333}`}\256\323\216AL\231h4\003s\007\b1\374\310\2565\364\364_e\264\217\374|0\301X\252\374M\003\000s\037\210\333\003~\356.\260\247\215\272p\3049\316W\340A\361d\310jX\360\231\022\bd\031\240\237\264>L\324\306\013a\265\332\236\211\030\225MF\006\354\311m|BU\363\t\226\361\247c\276\fB\315\027\255y'7\025\b\\l\374EP\020\022\216$\324\026q\007\006\375\375\244\\\222\323\t\350\"60u\365\243\276L\214\304\207/S\236\036\n\333\026\003\264\206\303`q\364lww7\342pq\3249\346\006\274\347G\207\247o\337\036\275{u\364\312\234`\235\275a\027\3576\304\214\363Q\264\271\273\021o\355nD\300\233\211)\200N\306\210\334\023]\317@\333\306fG5\3026)\200g\224\2475\272\267\002\211_\275Nd\332\n\330\314\016Qb\211c\2676\360S\275\3505h~\227\305]\304\332<\0301\251\237\321\321|\035\337\336\346\267\177\347\024\254\371\247{wccI\004\214\335\227M\357\013\214M\335Q\265\232>\214A\324g\327\327\233\2033|8:;?\375\376\257\026\237\340fS\323\356\005\327\001\026\n\332t\356\3476\231\232R\327o\2427>\321\020\253%\n\302\251G\335\204\371\242\254\244\f\266}\006)f\204\363\270\313\270\313s\226\217\030\236\276\021\216\251\313Y\303\367\242\341\227\336b\310\271i\231M\2222\033\3377\032\233i\272?%\006\230v6\230*\226\004*H\251s3\245\3302,'\363\rS\353\tl\320\330\252e\301L\233~7\243/\316\003\225\217^\037\237\034\255E\257\323Z\352}\265\302\006u\271\177#\355\331\364\375\020\024\216`\"4[\320\244Hj\3550o6Q\r\365\027\315\253\326|\022a\246P\321\211\302@\365\\K\202z\274\332\3440\234\267\024\375p\002FVM\307(\277B\340\211\343\324\226\271\323a\005S\323\3665\340\266t\260\336%\367\352x\221\006\027\277Q\322c\312#\377w\375\313\005\030\277Gw`\007*U\210\313\207\343\331(\325L`\265I\032\354\031\262n\210Im\366\024\326\250\241__\0252\004j\261\327j\352|\264b}*\004\025\231q\267IQ\215\260\334-i\026\274\361c\327\322\310\221\334\240\\\226]\005\302\217V@\330\244\205\"\327\230\355\255f\213u\245b\372\216\237\031\337\007tO\371\272+w\333\026\235\371Fa@-\305\213\342[\023H;\216\327\245\204IZ\227\331\360c\206\266xU\317HANrw\226\246\211\352\250 J\207\215\023TD\320\257\206m8t6\274\032s\332\214\322\213\350\002\334\3015\320\037\020d\013b}\241\227\374V\260\205W\340<\222\351\324\213\316\323\t\026\324Q\225\212,Y\310\003\342\026\224\260`b\234Nl\302PW<\013\255\330\241\374<\306\366\247\360X\204\375\030\314\366y2`\214\006\000\"\371\346{\300\376Q\347\r(\200{\035\323\253T\022r\323\026\347\220\r\232{ml\031.\210\355\272Z\205\251)W\365\213\202L\371h\227P\324\256\375\342y\234\322\367\361!}<~C\343\375\271cB>\355_\301\304?\013\245\203\212\241\315\\B8\355\"\372\023\013\377N\230\317\243\321\272\331tN\007\017\030:\214\214Rb\316\027\030\033\243\270\270\214\251\300\b\256\244\217\230\251\352\234:\202\004#X\377\321(\224\373\312\360\000\250k\t\343k\235\"o\346\236\204\b\351\365<\275\345\342\r\204\314\225zB\317\351L\325\205]\266\212h\321d\336O8\bC\001\250\331T[\325<X\241@\235h\320\354\320\fN\020k_\232*\344\252\276GA.\300\227\201\3348\2304\203\226\313\242\330\332 \232\023\275DH\022\000\205\240\237s\256\356\227q\b\027\223vO`\202\223\221K-N\2435\210/\rw\344\356\256{\267:5\300\004Q\253\035\350\255\004'\276j\325\005\323\331$7\f/!\t\301\201\320@\315\266X\317\003\237\246\004$\224\025d\243\200\342\356U\036\3551\354H\212\316\0069mN7\371\320\247\3155\303\247J\377\211e_]\307w\307\211\275\251@\364G\241\240\031\307\361\345\373\\|\204b\312C\264>8\177w\374\356\353=\333\212\206\004\243\323q\276\321r\231z\273\021\367$\343\361\334\226\204Q\314\002\234\275\363e\312\321S\366\003hq\242 %p\037\333b,\235\342\332\236\307\023*H\301r\037G\215E\206\036\023\343\024.\357p_\032*\374@\234U\364\033\006\262M*\276E\032\r\356\271\2774\242e\240\267+\343\204%K\017\343\221\b\370\322\230P\303d\306G\215\261\205\345\247\266\372\321\220`qH\220q;4\017\244UND\031\nV\252Qj\371M\030\373k\234\332\312\337\345\\l$\243_\243\351\034\277\003\311\260\027\375\245H\227\360\224\301\353\357A\363\211\017\256H\344\335\247U\f\317'U\272\016&\342\306r\003\361\365\265\034D\334\001*}X:\021'W\004\374\203A\216\024\177\310\210z\2169\020_\263\2028\236F\373h\315\\\025\345\375\027\036\2128V\271\3413\302y\030\373'\375\305\026\277\210\264w\006\351E\332\337\311k\353x\025q\027H[\264\344\244d\263\006\315)M\230\026\225M\320~\302T-\371X\240\256\336\b\364\252g\372\247\033\031\337\201\211v\350\203\366{\316-\332\326\372\345\373\264<\323\031\315&\242\004\306\327%\323G\3464\237\016-\221\b\310\357fRx\007\003g\245\242!.]\220A\333\b\243\27267\220p:\033LF\273\321>\374\341i\375T\335\322?\004\315\037\3458j0\214L\350\364\347\336\336\202\275\277K\264\311\002L\377*\253\031\370w\016\330\244\353\275DRmn\275\210\260\230\364\355\253]\020\305\351\360c5\233(\307pi\b\311\036\017\321\013&>\316\206\b\344\320md:\\j\246\203\343\0132z\f\345\322q\356j \344\f4\200\217\243\007\rL\315\245\351k\211\231\356\0167\207;/7\2666\236\355l$\273\311`\343rkc{\347\305\356\316p{k3y\021U\313U\255=o\306\030\257\361\200\355\033\344\274\240\261F8\264\256\334T\314\3007\375\013\033q4\201E\345\333K\037\346\216\264\237)\\\307\354]@t\363;)8\247\261\260GK*f.\251\231\254}\232L\275\366\272\350\276\243\232{\\\273\333PB\240\343h<s\223r\257\264b\341\354\310A\207\026`V\333\242G\266\237\003N.m:\226D\235\216\203?\270\372KZ\026R*\274F+\275)\262Q$\b\213\353\212t\353\211\030\253l\020\346\037\302\334\302\220D\032\003x\367\270\210U\310wg9\233\034Q\032\fh\233]\224\245'\325y\214\000\251>\214\240\343\217\030\200W\2644\233#\363\321\036=\241\217\r\346\00458\031\336\336\350\275\234\323Q\210\262\235M\023h\\X.\030\224\244\007\242\303\007I\207X\276\232H\345\255\006\237\\\307'\244I=\363\034v\b\240\313\237\222\330M\026\226\366s*9\231.`};\240a\032\202\020\331\3025x\030mwp\356\024U\005IO\200\223\236\005#_\256l\346\024\2039s\277\007:\031\330\313\211\375\301\305m~U\242w?&\034\246PFE\210\337\335\254\254g\317z\033\335\006U$#qaR\326C<\301\333\2708\332\267\321\225'7{\033\341\ro\000gKVnc\247\341M\327u\302\352{\346\235\006\307\201\301AT\004\237t\007z\312\372\360\333O/*\227!6%\245\004\377\265\325>\b\360\353\307\034\204\000U6\237\266\240\315e\027\344\254\210\366\323!\215\024\307\313\312\364\320\373i\217~\373dz\003A\r\2122F\327\022\260\242g\351\207\030\204<aYUa#*J\246\304\263\207\3514\256\221X\005+\233\211\375\267\214/\211\376\211\344x?\245\343\205j\\\3554,\217hr\354\370\n\315\216\3212\030\254V\362b\004\224\247\322OU\210w\204\376\251\3446\001\263\231\273\001\353\034Cm\247Xf\214\n\035\240Q\017\fc\210\361\231\203~H\031t\243(\232\0239Q6\021\377C\013q~y\276\361\366\352q\335\271\303\257>\266O\267\207\006\235q\\L\301\217\230J\275\307\035\277\215npv\310\306\356\361l\340\265\277\f0\355\223N\353V\020Q\2329B3\22189\337\336\006N\245\202\331pe\f\357\204\371\233\354\224\177\322\360\013\004\275b~w\037\234\310\214\317J\303\361\357\225\350\311\034m\257I9a{\346\225'F\240\220\374K6t\360%\360v\317\f5\207\017\275\013vN\377\370\307r\342\034\276\333T\361\351\336\221./\266\317\215\360\246w\357\315\021\257\333aN5~\255v\226\366\3354-\263\t\301\337\367\242W6\317\035\353yA\312\264\2512\232\205\323\301C}0\032ga[j\006l\3520\331g\032\026m\253\372\034\022\322\3143I\020\303\n\024\311\231!\322o\273\271\244F\351\305\202\362p\020\312|\221\374\370\250\244\251#\n>\203=\300\017\306u\334\277\031vE\2436\224\362\032\275P\300F0\3551E\205Z\001Q?\0276\2134=\tw\321\2753\270\370\332\357}\220|\254tIRg\315E\371\r\032=\340,k\271C\2719\027Bx\376\347\373\343C\327B6\311(\355\326\2756\373\243+\360i\334?\006\351*%\207Z\036\324\330[\262i\274\273\r4\330\247\234\365\355_}\326\267zf\250\337\370\254o/{\326\345\016\n\237\364y\247\276=;G\nHT\275\231\365\0323<d,\006c\314vm\b\332D\232;\031\301\177\314-\021\251\310@^>a\374,\221\325\266P?\200\261\227\r\021P}L\220\363\224\253\300\246\246XC\345\214\2221\242\203)\031\371\233\275;\215\250\004\234meJD\006\353EJ\236[\323\301\201\331\326\035\343\t*#\366ZG[\230\317u\345\365\264\036\334\327\001\024\023\272|\221\f\253l\202\301U\017\204\\\353FX\376AD@\364\007\223=@\355\202\2570\244&\250\002\036\016\303/\251\326bi\245\223\364\300\t\"\372\267Z\375aF)f\030\321\332\3508\301auYPxP\021\251\333\276\373\373\351\362wi\220Q\026\233r\0312\257\004\377\333\216\rI\t`\321\326lsg\302\005\"\275\245i<e\213\211\322\036n\337k^\034R\344\230\277 \001>\016\221\030\305\033]9\350\301-\212\217Y\352\001.\215\250m(\273\272l\243\257\206\334\322\356\\\275^/\200\266y\223\245\267\r\225Gf\326\245\036\t\031\247\031\200}~\203\024\202!\007\330\370c\016\n\301\342}\311\226\023y\356\007\0351\360\221w\252\n\301Eq\267*\333k\267\213\001\251\362>\242\256\361\316\315\200\323\341\202\365\254\342fQY\b\216\201\302^\370\231\246<\224{Q\365aP\037\206\030\212$}G\033\271R$,P\214 \233j'S9\251\356JpN\247\340/\007A\177\2255\23455V2@\364\232\217\024\027\223\324!\323\004\253\355\375\261\360U\026M\334\226\3462\364\025\255L\006\257\334vi\036\230\242U\213q`\356\017\335\013m1k\035\214\353\t\207\251\230a\3528\211?\301\347\023H>\217\225\224\205\220\372\275*]\007\236\257\326\253j\214\337\253\br~n\254\223\365\177\332\366f\001\310<Z?$f\344\275%or\016X\233\227\371v\034&\270\200\306m\247\365\375\334\343\350\013/\016\315\355\310\b\233\303\205\352b\331l\263y\3158\266\031*6 +\347A\021\210\274qr\372`WL\301>7\260W\354\342!\207=\306 \232\002\250\332\363\320 \235\245a\201\362\236u\332\334\336\336\366\026E\020~urhs\270S86'Y>\273\213\034\030]\355\357lR\267\242o\317_w\215\363Y\312`0\371\240\362\325\3574chcl\376uxp\366\341\335\321\305\207\363\203\357\220\204\354\360\005u\001sF\312\242\300<\273\267\344\223\315rB\260\rgA\013,\267\316\023\346\262\0275\350\3651-\363t\334+\312+<\013\353\257\344\016\b\016\267.\351\276\350\375\277)/\321\335\2754\317\273[\267$\347\217\362\312\016\340\360\372\016\211\364\351\315\316\002]\242n\370 Pd\214o\230W\311K\355f\205\243\214\302\254\231n\000I\2224\375\302\300\177\022X\f&\264/}\366a\266\217]\275x\327=\323\330x\026\233\006\216\343\344y\346\273u\340\303\316d\341\t\371\331\257\"\335\263_A\272\235'\220\356\331\247'\335N\220t\316d\343\237\221t?\317\362\2171,\033\025\245XT\2549\256\005\267\t<\245\256\330\226U\364\232\002K\260I\253\321C\317\244p\363j\310\214\315\020\245\254\032\242\027\024M\320\216\314F\207\355hOp\022d\211\217\224=\244\260\300ur\343T\303KyyR\261iL \342\221\016\314xdX\374\341\213\304\213\373)\016\b\272O\t:\016%\302$\343[\252P\320IF\255\tJ2\317uz\277\342)d\303q\201\342t\364\004#9\2643Q<\320\257>6Tg\305\317\000\367\233\337\346Kwh\177\020\377\354\266I\217\343\217i:M\306\004\312\211i\312\373s\212|\0325]Z\307No\270(b|Y0\273L(\254\213\341T\270\r\202\235\303m\232\261\231\004\271\250\0066e\202?\241\375\01601\377&\303\032\240v\317,\363>\277N\350\347\215\246\244\314&\370Da\224\bT\032\357\253:\235x\214\253\215\277\330\020\2728<\373\360\315\321\321\331\361\253\223#9\226\346G\357.\276=A\310\273\341GL*\223\244\222\366\261\222\254\017\276\331\272@\233!:\226\016\216\277\007\363\345,~\377\275\327U\330AP\360\263l,\240B\034\347\205\335\300\271\005=\277\261.\201\005\244\271\321\272\370E5\203\235\232\231g\033\221\326S-y\036Z,\271\265lu\312\346\213\2467\345czO\375K\242}\374\363\213\240%uVf7h\031\300\263\234V\200\217\366L\272\201\324\034\340 \2244N\203\006\375\251\224\023DQ'\032\217\006\004\222\367\242WG\347\335\350\354\350-C1\034\275\373\232\333f\2607\n\313\250\200\256>6\203Cgx\227\002\341U\005j\317\357\216\350l\210\n\353\022rPW\270\205\276\007zl\037\376\bm\002\330\256o\002\033!\272\270I\251\027C\024\351\314{\001\244\366\223\273\225\364\344\255\240\374h*\207N%y\227\032\201\366\337t\361\024Q\333?K\346\020\200\033eqi\037;\315yD5z\224\215\bK\223\274\353E\211y\335\bb\371\377\255\367\252\352z=\033}(\253d\245}?;\277\036\341\257\243\225\236yT\376\216?\017\346\235\350\265\314\256$-n;\235\2469Z\376\343lP\202\316n\033\367\246\371\025\365\223\3708\25467\375\236\217&\371\315\324)\236}s\330\377\303\346&\025\234\256b\351\336\363\335\315\255\265\220\305\340\245\373_\336\223O~\352l \345\265J\255\274\031z\224bA\023\201OqR\031\325yy\030|\006\200\257\303\263\337\353\030~5e\272\334\357\2441\353\236 |\267mHg]Y\325\000U\347+\035\230S\210\025H\007\366b\2302\247\016\363\017\036%'\t\321P\3379%\356\240\276\243\236\277\021u@*\204\207\374\275O;\3718\\\017\312\343O|9\210\366\3070\255\361\034\320\306#\312m\213\276I\313AZ\026U\013\007\203h)\310gX\177\r\343h\221F\373ZD\246\020\342{\360\315+\204\310\201\307\253J.S\374/\334L\227\324%:K\306+\330\\\274}H\205\217W\200\241\372\222\364H\210k\204Q\207=\017i.ZI\213B\304BEW^\303u3\\\023\313{\336v\374\263\2059l\022c\226<\234\333\310O?6\366o\343.z\325\265\206\323}w/l}\177?T\316v\300@{\255\f<JnD\314\216\021{-\004w\213\035\377\350{c\231\350'\205\335jz\227|4f\277\322a$\236:\202\375\270-\261YRn\033\231p\337\2719\b\361\332R\t6|\314]\032L9U\251s\3422\034\353\315\302\367\376\355\263\305\245\244\210\232\220\214\005\210-e\236\243\322\020v\270XG\230B\206\373\351\374\324\340|\017\255\201<\275\253\177-\333\261\375'\304\b\200\\\376\032\2264\005\331T\177\333\033.\253\003\266\240}\250X=&\r`\037\b\225z \363\252\351\t\346ur\227Mf\023\213\336\023E\364.J\000\002\027uSDb$x\333\241\216-\230-\\\036I1j\264\251\340\340Z\354\3124\306`\233\024A\222y\233xNF\252\265\347\256\306\302\310+#\016\237\020[\231y\"S\310\274\270\274\021$\234g\254\016`\210\333lT_S\237q\265\315+\001\212\304@\\\026\002\246\t\272\350\231\t\210\246\021g\235\240'\236\266\201\242v\353l\005\030\324\341\004\004\301%v\020\367c\220\n!\3233\307\234\364\254\225\217\334\362\363\033\021\236\334F\204Z\232rV\001\210\231\217\331\270\b\006\rA\324O\370\365\267+\032\tA\004\315\253D~\315\340\271+W\374\320\327\372\220\337\037\027\343\222\034\207\344\205\3632\340\321\325\217\335\b\324\372\257\273\321\005h\351k\244\327onl\355P\343\240\021+\233~\2776v-m~D\242\341\323=[\272\202x\003\337t\243\355\tm\365\346\327\241sJ5\200h\355k\306|\374W<\326\264\017\314\355\0063E\032B9Y\005m\375\026\031`\212f\351(\325\356\211\023\212\212\f\261\251\237@\256\342\001\210Ms\246j\214\017\214\357\273~0\211\212\025\320\210\323\b\211;)\204\310\032F\342\232\375g\335{\325|)c\304\302&\320|\t\310\234\346\233\033O}\363\355b\365i\334\245\027\252:\016\364\363\242\f\200\263\323\263\3555\267\023\221\300w2\2229\241\222\031lO\003\226\305\250<\276O\006\2339\222\023\rd9}\221b\246\026\\!\245;\206\274pVh\321\345_ya\026\024\223\344\b\020\370\342\230\260~\232m\244\261\017\2617\313\210\023\252\003\231q\222*d\237\244\210\256\306\336\t\214\333\346Yb\250\006\2174\367\314\353\205\020\304\210\267L?\343\206'\203`\243\b\310&zw\322\277p\340RQ\007\b(\360\\\224\347\300\2539\271\316'\307\375\213^\250-/\030\213}\304\251`\nh\242\005m\241 \330s\216\004\307\334\263\322\305\034m\017\007\263\3743\027\323J!\256\306\332\253\331 vz\301\260\202|?\031\024X\201\003j\310G\337A\263\312\\ED\222.A\215`\3330J\251\251\032\371\201\361\331Gs\026\222\302M\310\200\203;\345\360^\263\262\036\0237\f\337-JU\361\371\320r^\225\246\354\0256\323\236\327\351-\316F\\\031S5{\3710~%\312O\356\373\216\272\376\274\235d\267y\243@2\376\236K\363(\335\240;\257;\202\037\\\023\220\340\367\307\257N\332P\326T\306i\226\212\310\013z\001\360\236xq\357Y\236\375\215\322\254\311\330\271\314D\227\271\26697\230\200-\355\352\220\016\265h\004\234)\021,\200]^\231\023\t\026nx1\277~\252UrBm\361\244\025\000\334\375\353\004S\344irhL;\305\003M\210k\220\b\fn\264\372\372\374\364m|q\272Fx\0034r4?s\261R\245\312A\324\025\247\367j\205\375O,T\030MO\337\362\372]\347\254\366\241\216\000|9L\320\3060i\001\266\004k\200\r&\252\373Hp\244*)\336\365\341\307\304M\r\214e\200\302\021\372\206\261P\352\002DAR\226\305\255\336\347\202\206\007S\307\r/\357\347\003Hq\273\000A\364^\332\207\353\354\024^\217\361\366\306\322 C\233\273M\344U-\222\216\353r\206\210T\341\340\325\t\212s,\253\266/t\245\233\f\346@\243\363\316\306\035\350\330p\346\307\237<!#\215\370\320\262\034\217mi\265t+\312\260\323\026\234>M8\245\366\b\027\234wq\357\273\023\024\372<CH\314\321lH\273\217i\021Y}\037\r\270i\225\302s\342\320\266\246\234]\236m\3451\342\307\bs\214|\323h\020\214\245f\236\024\377\226\037\005C\357\321\2524T\360$*6o\245\266\225\222\335\205]}\360\\Pv\325WI\005\242\2639\336\332S\030\302\335\275(\236\221\b\333\263\035\017\227\tq\315\264\020\332\341\220\306\246\207\271\343\270\201\200\312I\212\316\256\212\244\246\316/WX\"\217\001\030\254B\017\310\350\004\364\020\214\023\341\315\257\037\215V\025;\312\340\206\234\310\257\366\f\272\025\212\366\326p\333\337\177o\257v\3648\254u}h\002\027Tb$\355\337e\302\036\b\216\2626\006C\251\232\276g\201?\353\342*%\361\317W\224\233\017H\230\247\307\201\n\013\272x4\221\317\024,6\311UY\227\3515FA\2451\346,\016\264C1li\300>M\3456]\023\334E\031/\246a\231\212\227N\233\336{\351<\bC\315\007\224\202(\211s&m\253\226\326\216\t$\202o\345\335\026\004\211\213\025\260\334l\242`w\3630\235\326\346\336\375\2232m\317M\372@.\b\345\242\030\226\307\220\036\246\217\027\004\324|\305j\247MVb\003\211*\320'd\342\372\035\003\255X`Xf\224f\246\247\005\273\234'\311]L\217U\363r\027\245G%Q[z\205G.\325H\333\270ldJR\001&\242\301v\003\024\313T\3564;b\267\240>\020xUFmf\226zv\003\314f{c\263\213\177na'\247\022\377\266m\312\234\033\007\205\036'\317\037\261\364\366\335]\000P\263Yc\036/\230\253%$%\027\314\274\260\204\026&\013\330k\020\256\205\360h\332\255\006d\307]\374_\332D$\213\200|\303*\357\346\325\23066\031\256H\0212\006\306@\260\246A\220\355\341\201\235\002w#\r\275\223\314\277\320Lu\376\327v8\365R\340l]\270\024\324g\255B\353$\241\324\266\207b ~\306\376#\353O\252\322\261\340\177\316\252es\021O\036\2107\020\004w\254d\331\227\277x\261\207\343\267\007l;S\237\3665\343\376#\327\002\016a(+z\337h&\000\btu\264\257\343\306\335\030d\n\256>\306\221\274\3415\377\316@\362\031s%\234O@\327\025*\024\032\221\223\271\265f\021\035\324\030\215K+\201\332\302\274~\\v\233)\210\n\304\020\324\262^\353#\032\323d'\026\365\363\223\034>\016\316`\306\236W\307\354.\217\321Q\310\022# \320\255\355\027;]\001\005\335\335x\271%\371\024\307G\027\257\261\031\016\234\204\266C\035\177\026\247Iy\rV\037\"q\307\330\375:\336\330\b\245\364\375\223\303&M^[\301n\273\237\377\373J\224M\222\307\003\236o\267L\034\264\341b\334\311\371\315\316\230c\255\307:\321\026\222\232\333\326\310\243\362\362<\003\216\225v\314M\322aW\331f\254\357\327\030\224\r?4\033L0\0262\212\324d\f\342\371U\002VT\246\330\306\200\225\350\234E\364\323Z>X\262\340\375\373\245C\333\024\273\323\2227\302o\213\276\250G\000\215X\016\247\002\242\303\377F\325\246Q\231\263\265\033\330\036R\200\226\330\236\346\356Xu\223]\347<w\0161\006j\311\360\364\322\264\236B1\232i\233b\277%\301pKz\213\032\363\230\267b\262\275\250\225v\230b\337\271\310\223\334\353\240\260xO\240\231dS\f\005\301\001\2665\260\301\333\206b\354 \232\020\362\231D\032X\265\350X\023C\350\022\215j\024Kn\304\326\031\337C\215 O\340\371\341\331Etq\352\372\256\030\302\216@U\300\304.\203\267h\273Y\246\372}X\035\240\372\005n\217\201wK\223Z\001\200\b\242^\324\216!\262\211`*\261\034C\201\313\203xzU\250\333\274\024t\030\210\035N\333\303\311\334$\343l\344P%\344\252g\033@\237\3004\231+,\345RR\031\347A\244\340\034\250\354_\216\223\253@\354\307\311\300q\201\020\271\224\2367\223z\245x\373\031\006\365\245\235\2418,\256\235R\3562\004\243\341\3163\205\275\003Z\373\372\244S\326b\357\306Y\001\355\250n\034>\377\320-\202\333}9\3474=$~,N\216\b\237\224\336U\031\324\345~\357\352\374@\335\021\177\355\243-\260+\232s\260\316\323i\2324\312h\2337\253\361\\:\347\326\323g\347\362\023\035\177\361\0053X\217\021\230\\\220\243&\366\267\347\257\377\252\333\265\326U;\330\003\322\347\3574\361\366m\210\\\220d\211\bD\203\242t\376\341\003\005qk\306h\025sr\340\251\2768\311\266{\273\344\255~}\270\273\275\265\271\326\213V[W\373\332\203\313T\3023\251\323\273)2\364\352\321\367g\357Z\213$\332yYW\013\326h\r\206\306'\270\352\0051L\003yM\257\313\fM\357\016\322\243sR\344#0_O\261\255L\332\351E\017\257\356\261\247\245y'\345`a,u,Z\227\314\333.\215\235\373\211\301o\351\207\324:\322`\317]\317\004\363.\252C9\020\017.\201>\343\036\311\273\230\2424\030 \330\247\000\361\027\363Ju\243\267\377yq\321464\323\200^_\325\24099\245\245\211\275\347\374\323\264\202\236BQI\023o\353\216\311LY\255`Ab\311\034\002\336v\003\016\024\223:`z\217q\273\204$ov\241#\221J7Ez\207EDh}?\363m\307\003^\212\030\312\245k\250h(\234\b\334uB\374\030\341'!\264\362\315J\3606\347\220\2778\265\330\221\217G\230\302\376\022\307\2478?\017\362v%2\241\376\266\375\376`\340?\253\335H\277\215\311sP\276\355\2703!\372\306\331\330}\0218\033\357N/\216\366\304\266\266\220\341\222;&\245\007X.\236\013d\r\365n\343\235\356\006$\022\325X\342!\346\020a\335\312\033\267\235\367\b\2514\263\020q\274\341>\3703!\004\023\350.\353\356\036\007\261\272J^\252\336#\316\211s,\346\306\326\347k\2336J\336k\0356qna\000h\016\3249\205\200l\016\217\205#W\027\227Z\336\354\000\022Oe|\342\273K\214cWL\311.g\037\247\204\f\241.4T)\334\274`\214\272\300\327\363\373y\316\273nDz\237)\335e\276f\367\037\345*\223odw\303\201U\305%\315\357\213\203\217\307\233&r\227\021L\242\264\347\370\235mdg\307\266]\202.\364\342L\272\362&\327\244\\\226\214\b\222\214\2439\345)oe\257\351\371,\327\307\330\324\342T\031\355X\007\347\276\300|5\233{\347K\330\232\220w\"\267\251\004\006\231\361\310\311\346\343FS\230e\200p\223\321\317\305@\374\342\250\327\207\220\320/\251\266t\006d\030\3158J\207\023\222*E\252<\245P|t\305m\350\251\216H\361\337|\030\256-\004\202s\2671\031\242\203\032\006\027,On\323b\2139\201\2003\331\335\366\354\n\r\216\301\273\324\323\227\322\265\207\260\177\311\360^\025%\253UH\343\020\333\001\330\007\262\321I`JQ\026\304l\373g\347\371\030^\332\\&S\307\274\265\325{\271,b\221DR\265\317JC\210\245u\202\233\275\b\374\205\223\277S0\031g\025g9\264Juu\020\023<ng\270\274\325\007\324\241g\3005\rh`&e~\212\236\361\034\256-v$W\276>\315\241J\334r\364\007.+\005t2t\001-\027\007\336z\336\264\201\f\212\326\234>\027\202\225\372\316\200m\255\366\317\336\035}}\272\366\220\233\266Yai2\234\023-\253\220\\fR\201\276\356\367\343\203\263\343\210\352H\340\277sZ(\366\250\035h\374\255\000<T\232\253L\016Q\274\224Y\210\310Mb\200\347h\3706E\316\216\327\351S\370IZ\320\234\300\216\252\375\255\256i\2245O\314\251\3253\240_\342mac\251\341\372M\364\335a\351\234v\304i9\013I\017\344\026\003c\354;\331\327\340z;\310\271\022\317\242ho\205C~i^\314\256\256Y\211k\032b\344\227\320\230\260i\024\013\223\364.gzG\345_\231b\334\216\305\234\034\230'J\035q\225K\236w\311\251Xi4\247\325\340\222\007\301B\300\0015\366\226\224)\003\f\304S\362v=\246+\022t\f\362\211J4\207\340\026\314\027\232g\246.\207\244\217qR}\bz\370\242\ri[\201\006\001J )\027yWG\351\202\002/\301P\271[\205\237\002~\345i\002\223[M\006U1\236\325dc\243C\030\3130\327l.=\215\352\246\324G!\257\236\230\270T\nb\242l\034+\026\231\210\233\304c\321PS\312\301\273Qd}\237\025t\333\033\3241\260\340e\332,\022\262\027Q(\203vn\035\207\346\235\f\360\300\201\322\247\037\343\357$\224\270f\356\326\345\231\311\314\233\027\376t\214S\273\277Mo\356fo\327\347#\235|k\350oSN\336d\256\241\rn\360M\013\203\315\001(\351\321\023\336\361\302\034\fC(-\314G\217HB\331\237\242\2328\337p\341\230\236FL\363\271\345N\246\335\211\336#(l\tj\177\350)\264&s\241\032J;\207\236\234\224\325\017\362\027<\247\337e9\350\212\325\232\036\240,\0175\317AQ\271R\201\002\n\002\326\246\317\342U\317\341:O\362\332\234\337\372~\352\325W\016\215\214\2451\250eV\036\275\317\263\273\236I31X\317n\364]\220\314\003\263\363\202\250D^Z\350\352\356\032\315\355\262\236\256n\256\321\027\0053G\2225C\375\270$\3557:4\337\246(<bH\013\3368\213\032\246\232i\205\214\325\027\001A\246\r\212\246\330\027\210\n\365AT\256b\315\204\2514\313\005\021\005\2507\036\305\230\253\034]\225\205\257\026 \220\002\322`\215K\332\322\374&+\213\234\372\r\334$eFI'\2357\247o\217:\346\202\302\223t\231\t\276\265\327\362\303\335\322\2007&\0025f\370\221\bH\bQ\204N\235\032l\013\260\212%'\205\023\376\022e3\312{\013\265\375\326\254\006j\375]\210\023\213R\2749\007\207]\245\344\353\226\264\001\353jn\253\004\223{\354\273\272\322\274\364W*4D\352\025%.er\333\313\310\003\333\231\367ufm\376\204\035\235\007\177\212pXl\263\232\252\252 \220\246[/\224\330jdk\204j^\251\365#`\377X\337\355\003\313(\206\f\032lb\363\255\246c\252a\346N\007e\032mn?\233\256\364:\3228PV\"\330\243\227\207\320uQQ\272s\332`\331\034+\243\323q\037(nTdr_\264H\315cYKI\365<Ry,\241\350c\222\256Iya\0302R\326\2444\216\332\274\005\035\210TU%K\223\026\246\325\254\274!@\210\033\306\374\344\354\177\273\037\262\017\001i\340\314\020\263\262K\201P\215\276\346Y\230\tjV\035!\274\261\005\340\325(\025\025\265o\251\301\330\266\177\211\223j\230e\332\302\036\235\346)&\273\207\001\020\315~\230\346\310#n\254+IW\224p\310\211GT\207-\001!`^/\271I\213%\347\340Y\335\336\336n\366\032\201d&B\214p\246UMw;<\263\325[pi.\266\324\003'\354Q\037\t\236\332\343E\303\265\177\005'|Q\033\217\355\026Bg^\304\311x\232\317\351\336\361\212-lb\226\203\223\263w\204\351\214\215\006\363\2123s\360gXO\223\263!.\356@\317'K\241c2\023\265\034\322\005\222\344\304\272<r*\377\371RS;\262\275\034\370\252\375\2666JM\314\330\215w\rvy\241@\345^\001\233\305\261V\027\203\211#K\202\255$&\021\255\025Lgy\305\214I\2754\220\022\274\227O\3636\214\254\216\026*`\366\260\221\027\0264\353\242ao{\013X\345]\227\277:\230\241\\l}A\030\205\025Y~\002\277'9\t\214\261\2110\ti2\001\315*\327\n(\202\031\2552\257\032`\226\210\234n\364\022l\025F\361g\360\376p\207\017\0253\323\353\006nI\302\t\234\340#\262Y\206\240\244D\314\330@\217\022vd\203)\370X&Zt\200\315pQj\021v4c*\331\021\260[\340\r\325X\276o\3731B\263\033\231\223\006\2632\004\f\226\350\350N\213Z\213\365d\351\225s\221J,\\\241E\251\fU3\367\274K`Vq\351\257l+!\342\345T\347\324\334\312'0\273\214\2708\315\321\005\376\231\307S\254\271\022^\0010\224\305\t\222\304-S\352tqx\346\266R\016u\245\264\271\233\332\212\b~0Y\004F\377\351(n\027\342\020\335\374\360\t\004\267\003>H\363\374Q\"\377\235/\361\3375\005\276%\234\207\242\022\0206\017\nz\034\036k\220\316\336\371\030/\322\334x@\231h\017\211\372v\207\202\266\023\346\023\313\371\374\361b^\ro\021\347\276\224\317=!/\347\341\323\210y\374\344\264,\2560a\005\335\335\236\250?5\336T\256\221D\2241m\317JoE\364\226\212T\355o2\231Q\254\311+(\262'2ah3\204\313I\312\\\372\\\271i\272pa\230#\317\200\313q\345{S\253\214\300*\202\256\023:\314\206\210\214\037>\367<\273\307Y\034u\363\017s\223d|\242\3159jQ\206\320\216\236\300U\255o\304\005\243\365>\035\243\231\271\255\352\032\2525\301\334\237{\214!G\"\033\005\261\307Tt\340\214W*\205\351\300\303\256\240\200\307\257\250k\027\265aF\320\3479\302\203\032\033j:\007\3730\261w\202\213UL\275\277\034\341\314I\020\322;=\354rE\013\222\020R\256gp\fPc\344F\"\022\353F\253\222\356\030\234\2603c\217\305\2507\027\006>&R\370;(\213\217)K5\362I\020\230+\233NR\206\006W\374\310\244\273{~\024:\333\n\tf\025\201\214^'0.m\037\314\347x\210\271\216\377\304\213\312\354\272{Q\005\266ty\216\266#/\215\212\322bM\212\031D\373|J\356\356\251R\267\035\0308\3044\264X}\026#S\237~)E\221HdN?u\300G\022\3562\214\bk\201\026\355\030]0^o\362\203\221\035\217\373M\310\233Y\345\246\265G\377\036a\302,f\001\244e\233\255\244\2513\265}\244TS2\367\013\366j\340A5\320\217\330\205\315\325\267\271\rr\233\370\350\007\241\355V\3508Zm&\215%9uP\\}\211\246\005\312\034@\211\362\362P\tf\234o\036\234\224@\334s\261Nj~\204\245n\351\370\262\225 \345C\232\f\2231\031\261\\QC3b\257\b\376\264k\377\272\367b\203\001\217\320T\356\331'\274VL5\355\031>\004\3775\317\315iC\207\231M\333\230y\320\214\0255\313\200B\016\315`\005\313\310\321\230\230\rWW\362\342\003\375\225=\202+\357N?\234\235\237~\377\327\2255\233\353V\246+~*s\324\370\254u\244\36278\317R\370Q\235$\224eC\240\022\261\337\331\025&C\333\016\314\334\241\036\356\272F\330\250\345\317+\017\330q0\277;\313\036\334\227\275\235\306\301\255\307\223\370v\360@\004\374\342\344-\350\017X\360+\230\006\330\006]\336\246\213\236c2\330l\212\026\030r|\267\242\275\026\344B<\230\212\022\016Cr(r:\035g\301\022\\\255\fI\357\322\341\214*d\321\362C\000\253'D\276x\375\277\262\210\230\t\321\b\236\302\017\332tn\223\225\351\352\205+8\261/\364;/\005\221\352\344P\311\2043\223]\345l\017\274\315\206eQ\025\227R\177i\0354\307\307\375\3506\035(<H\317\0171Ru&\206\340\313,\255q7\264\222\f\261f\361\235T\260\r\311\354\207!\207c\272\324\243i\3523\377\230\325\033s#;y\"\204g$VcV\242`E\363A\374\317\0371@\341\025\254\232\272\007Q&\270O\021f\032\026%\345\323\341q\324\364el\342>+\251\362\232\272Y\370}\237n\257\271w\212\356\202\325\246\251\276W\332\n3B\232\336\325\316n\004\201\347e?,\276\006gF\203Zv\025\202\272\020\354%B\001\263\352*\315F\264\215R$H\213\r8\317/\017\200\262\205\271\317A\375\364\272\315\212Q\327\312\\\240;\224\323<K\tV\3776I\013x\n~\325Qk.\321\234,\247Mc\303BS\213\314+Fp\234\240a\003m^\017AJ\235\bT\300\270\031\031\374\357\021m\273\374C\022,\\\221P\340\017\266\342A\n\352u\031\355\327\250\303>P^*m\232\334\264\357\257\370\365\350\202T`N\272:\305\002\302(\332\362Z\254j\023\224\240\310\221\221x \025\033xb\213\374\347Y>\f:\316\304z\267I7\254\300HmR\243J\002\301v\250\370\217\266&\216\375\314\f\304\f0)D&(\025,)n\255Z\260=5\361\247\324\250-\035\332\341\220\300\034\021\304\004\353+Z\303={\276\273\361{\247\26669\2413y\375\341e\357\253\335\313x\247\267\371\227\277\275\355<\340Mb;\037\221\231\242}\370\343\213E\211\032\272#\254a\331\000>\006\373E\367\344,p\247\022\304k\340\016&\357\250\313\227n|\312\270D\330\240=\326\362\227\270\350\232i\321f\004iB\373(\300\217\362\2543\237\312&\005\240\036\376\376\374\204\361\246\344\311b\032\222\300\306\021\331\304\353\234MA\022\324\331\330\221h\017AW6\362T\2513\23739\215\361\023\316\223&]\233\200_\310\271L\035\367\004\2660\2161\335\025\310E\251\314\024oe\360\275G\247\231\231R\3066\037\3329\323d=\022\341\344\177\025\237ZN\353\324\223i\007\266\1779=\311\343\026\022\216\177\021,\000\3721c\203\304\\(6\277\301\345\363f\203K\227\343\202`\257\337\225\210r\243Q\206B\036r\201\302\252z\204\351\265\006\022\261Tw\307\337\377\341;\315~\370\211\262\376ST\030\314v\250\246P5\224\221\277\315\n\311w\2248\374\274\206\342\344\373X\371\303\212D\2145\250&E\007\242y\313\274u\247K\274\250\274p\213\261Zt\263\313\224\260[\234\372Lih\240\310\331\212\372\220R|\337S\275(\357<%\253\265\307\300HY>'\264\333A\206\000~\370;\b\305n}[\374\303\r\257v\320g\326\301%|\370\303&\326\335w>\363\357\200\031\225\371\263\2445v\337\242\356H\346\223\210d\324EK\370\037=\374\363\207\315x\367'\373\331?l~\370\303V'\b\251`\321\317\234D\370\212J/\244\"QR\304l\005\bI$\177'1\310\3252\276\005\216U\263\013\201&\374\262\310*\006\bQ\221\345)*(\300\324\322\244\356\253\265\005\032\364\351!'\025T\330$j\304\252\213h0\210\234\020\365g\001\025F\004\031\371\273\314M\ro\232TFA;\241\331\253\020\244[\326\363\245\374\2149\302& *2\267@\tf\322S\350gz$P\263#\305\266*B\271I\311\000T\260\206T'z\220P\031XT\345\244\232C\020\227\024n\255 \023\212\210\263 \002\314p8\256\324\266\t\315\374SA\373\030ZLI/Y\013\357\334\321=\2105n>c:B\250CU\257\313*Z\211W\242U\307g5J\252\353\265\340\255b\242\204V\256I\227[RgY\240\005\372\027r\374\205\034\342\026\030&\032\024\243\214\322\226\357\r\312\210A\362\321/\370\025.\353\243\364f=\237\215\307{\217\240=P\332<\337~\374\224\235\254\222\206H\274\016\217\355=jPxp\311B\216b~\001\301o!\325~\275\230Zr\326\372\273\255P>\312\343/\344\326?\261\026=pG{0\275\366\312v\364R\364\353\214\307\3518\316&\023\340#\277\316\202\253\fF\\\247\244O;q\207\000t\231fI\005\233kH>\201\334\273\002M\311\360\215\250\236QD\013tA\002\237q\273I\302\325\n_\217\375\030H\212\275\316A.\rS\035\215j\030o\023F.\266\300\240\b\217f\303%l\375\264\207#\037\034^*\242.\334\241AA\031\023t\025(\252\211\033?\377\275Q\334\037P\007\375\r\216\342\377Z\304\234\233\0139w>\227\376W\327\371\232\272\331\364\343\223\344\256\0315k5\355q\037\f\326z2\033&\325G&\335\250\260\274\350\260\"\353\202\315\251,jV\206\320\304e1\256\032\265\331\002\307\206Y9\206[\370\223U\206|\221\344\201\242\272*\220\257\367\351Ya>\002\t|/`2?\226Wp\027676\346q\312\345\022@2\215\275X\324\006\273\361\340\374\374x\001S \264@\273?,\035\204\365*J\374NJ\311\245\3665\2252\275B<a\364\264 \226 \350+yZ\376\2179\311\277\335\341]\320\223\034\375~\321\376\364\272L*\277\207V\277\377&\342>Z\360\024?cTF\247!\320\357\355\261\2415p\002\270t\260y\260\036\021_\252\257\343\244\212=\221q\321\306\370\303@\n\326\365c\212s\216\210\327\260\273\353\275\336:\232G\353\360\037-\316\020\007Jk8\312\320\306\217\021\2320\346\371\215\357\235\322\211\352o3\320(q\250IZ\022vd:ix\311<\207\017\347\373U\202~K\026d\243\211\037G\306q\021Y\255\241[\002\026M\236\300\211J\243\0201\221\006\360\177`\211\256\223\367x\264\200\355v\266Zl\227\301Q\034Mg\003j\035v\r$\b\340k\020\3535\023\355\331.gK\315\034D\r\020pW6.\375X\365\274\004\374\2215Nn \354\031\366\331NS6\3343\325\0250\342\200\025n\024{\240\321\310\031\347c*s\024\330\244^\313,\244?\031\366u\203]\305>j\354\376\304nD\204i\311f\253\327\234\220\3420\317v(\\\202t\253\256\223\255\335g2m\355\343@n\210\025\376\325\372:\307S1h\347Y8\024\322\307g\377\274\022\254'U\3778\007Q1\255\215j^\3356\343\352LS?5\243\267z\005\240n\377\250H\200rI\211D\311\255Ps\330\027\314\245\017\306\013k\212\374{\000\030\\\033\212\273\341\f,\340\245Yme\262\246\232r\270\234f\n_\360J[\224/L\033/\nu:U\264\366,Z<*K\004\317\373B=.\025\317\314`Pq~\326=%\273z\247\fXa\035\371@B\032\236m\366\274\267\375\262\267\261\247\375\336\272\321\327\371\fw\004\027\375u\377\233\254\366_\330\331\306\027\336\365\371\241\333b|\t/\006\036{\216\217\001\273\215j\017\237M\370k\376\244vv\002\223\352.\373\321\266aIz52\332 \031~$\216\"l\032\3230\361\367\306\024hH&\370\377\245,\323\326\353\346\240\016\323\315\315\027\203\335\315\027/\237_\356\354\354n\215\206+\017]O\f\365\032N\005\270h7D\236\242[\200\372\372mmo\256?\353\355\364\266Le%\303\252\325T*\022H\266\242\252\235,\027\314Z\363\023\n(\330\252%D\261\335t\201V(\275\247\235\t^\3441N\302D\207q\263\006\331\337fY\r\2123\nE\fxkc^jy@k\320\356Z\276\204\325\342z\007\032\220\320P2\222\275\370D\225U5HL\0200o\212[\344\211.\025b\005\320\\\031\326\235\263\313\244p\306v\264\225\0370d/\307\2121S\311]\360b\255Q\232\301\"\236\b\347<q'\0222S\032\b\346K\337\301\314\b.\310J<\212:(h:K\027O\bNp\327\376}[;R\237t]d\034\253\300{\307{\363y\263\007\227\214\371dN\335\376\3559u\353\377q\352\357\306\251[\277%\247n\376:N}\031\342\324\355\307p*0\305\030\365\216\006\247\356,\305\251\314\252\304\253s\231\025W\345\242W\301b\302I\002\217g\211\2441\250\207Y\304\347\341\237\311\020\333\237Jtm.\315\020[m\343\267L9\247\347\007M\255\202\t\375Dn\340=TG~j\333r\322\223\307\232\036\375\323\303o\372\222\030$\272\241\352\216\354\223\244,FF\306\367,\022\2521\201y\334uM&\r&D\346r\254\023\356\327A\304\344\000\215\f=\247e\202;\027\211\016\345\366\225\325\372\272$p\026zL\314 \322\232\027\316Nf\365\206:\310MK\223^\033pI\231\337j\034\323V\321[\202I\333\000\207\336\370\236W\"\231\335q\265\263A[\036\003o\347\2041\242\231\234f\f\256*K\271_{\265\003C\266\003`\374\213\004\177#\377\330\305\017S\276.\377\363\232\376\315i\357\214\202\357\354\3630Hh\225\370\354\026b \304w\205\007\367Nk\306\344e\302p\013\271\312\235\373\202F\336\231\223,\226Fn\023\"\205\030\264\237\221\240\264\273\005]\356m\345\027\233c\257q\231\371\346\306\013\337\201\370\276\222\236&\266a\016\345\353\023^\302\300\202\250\204>\212\321\372\220\023d\224\262a;`\377\207_\340\216 |\350\312\311$5\006\324{\316\017\367r'\320\025\250\t}_\332.\n\177\334\331\300=\325A\340\000\025\343B\320-\377\270\235\374\356~*\0257\206\005\3710)hC|\027IT\n\377c~\274\\N\361n\323\323\362\207\256[\2163H\312\200\307Ut\033\005SU\340PS\247\223\260\223\203&c~\bCE~\177o\223\300\301\211\311\354\253\352z-\006\222q\227\253\177\346\240u\231\257\320gFer\353\370Y\030\037\373\222\2623L\375\000\374\036\023m\253@\262s5,\021\037M:H\323HS\354\374\002\232\331U\252\020\232f\325\n\337I\230\235\275Pe\276\365F\233r.\324\300\030\344\023_\357JQ\214i\2343M\260D\344:\233\266U\217\370\363\342\363xM\316Vq\223Vd\0253,\n\034\365kr\362\311\245\214v(\325\322R\246(\245\201\314\201|\345\2140\026\264\350\020\004Z]r)\034:\223\"LN\226V\201\234\367PL\377\325}\342\177x(\271\211x\274.b\225\245\373*\206\277x\020\267\303\b\354K\361\317\241\260\"8\030\356\2158\274N'i\324\214\247\352\261\003=)\347}\307T\231\334x1\354\345d\220\346\005\262<:\204\341\217>\274\177\327\177\177\026{-;\316/\216^am\304\305\351\341\351I\264\272\271\266pc\314V\230\276C6.\304\202\306\314b\025\211\347\217\366\235\360o\313\205,N\261+\270\b+\362=\312(n\2468\025\271x]\360\b\203:M9\243\324\305\364Y^V\272\333\311%\250\227V(> \004wv\333\212\036\216FJ\261e\215j1o0p+u\2114oP\223aIO*r\243e\203\002rV\026~\206\037\275\002\024\3103\276\366d\"\224\316F\255\3459\225\031\036\300\337:\233@0I~\227\037z\231!Go\235I\341px\265PO\230\371\327RW\340RI\236\220\322\207\347\231\325<g1s\362\272\232D\304\\\204.\356J\227\267F\356\255\005\273\363U\263\273\203\333\270\217\341\244h\"]\302\037\302y\275nM\253-:\237\367\236\355\366\266\260\202\350t\2149R\242\216Qt\206>\220H\336\036fMXZ\311\210>|\023B*3\002\236^\377\006P\2230\231\323&T\346\236-\236\302*\236\366=q|r$\326I\377\020\224k\334!3\036\227p):\347\316Fo#\352\277\375JZ\365|\325\017\250Od\003\351\353\215d%\\\034\314\356O\370_\255\341\247R9\273\342\310sb+I\273\002e\303YOX\001\033\\\362\323\216.\363\311\347-\036\251\226\001\203\337\362\216\360\203\207W\0202P\221\347\363\273\340\000S$S\357\362\366M\177\3268])\202\013QHe\234^\222\246N\310a]\372%e\302\231\322\251\021\327'\266w\020\031\200\300\230\034\343\307\264(X\201-[\351\032P\274\361=%\312dw,5~I\313\302O\314$\225J\341\330\321qp\003b\226\362L\315\017\361\253\336i\376\023\254\r\341\316D\350\233\271d\324\230!\323T:G\272\214\021\333\354\236A\322<\207\002i\343#\264.m\225\255\311M\270D\274r\003\031/\352\265\177\013\305Q\364*\315\357\265 \306\2269\241\203\243\240\330JV[\320P*\341\203Sn\246\350O\2519\347\220L\374\334\220A\312k\\Z\254R\207\025M\006\244\357\351\210\013\311\260F!3\262\262\253\331\340g\351\206\206\216\244R\310 n\020\330Ux\200#\312 w\362\320p\224\244\2309)\364\226\305hJA\330\250T\217\346\234\313#\276\304\223\310\265V-u\201i\311\265\203\246\240\026\037\237;\226\336\001U\367O\370\037\177\r\315\372` \263\212(|\234\004\036\275>\357\003\216\360X<6\311\307%>\360>WD~e\362\251i\337\252p\013=\265E\304@E3\"C,\356@L>\271\304*dDAE\274RI\321\326>\223Z\020;-j\356x\211\005\313\250\257\225\350j\236\316\323\033\272\306\270\300a9[\016\2653)\213\262\235\001]]3d\025pE\0259#M\313\314\233\"\033-\352p\024lh\355\225:\230\022i\362SY0!\037\255\304\264^\244\234\235\034C\2729G\211\305y\240\322\031gI\005n9\032\217\3034\320,\323\266s\177\322\305\344rU\267\002\376^\262\270\324\275\335L\215\251UU{\017\334aw\367Z}\266\340\376B\371K\350\216\260\335YM\334\323*\330\325jSiN>\361\332\261\346\032\2067E\006\\\335Cz\2378\365\270\2571C`r\013i\256\271\306\310|\330\253\275n\022\224\201y\363Q\fBj\372\204]\260D0\377\246\2021[\2118Bg\b\3330Km\317]WG4\177\341\"\301F=0\027\003.\212\034l\2076.Tm\350\333\223s\233++(\026\355\227\356\317\274\">\336-\331\250\367\214IEc\222\205\235K\371\273\363-\266\367\275m\303\024ai\242\313\317\311i4\222\337\233\2446\b\rx*\351\332\240\017\341\304\262\264z\332\336\363B\376\t;\037\002\322\036\265\352\177\365\347\303\004\363M\302\365J}\021]\261>\205w\244Vd:~rJ\nzJ\306\237;\203\303\003F\034\256\021\035\361\316\020a)\222\264\312s\207\t&4Q\224\201?\"\177\2454'\"\216\245^\357\321\256\305\306\340R\3558\237n\364\320'\242\033\215\275N%\037\353\2662\360\251\304\263\202\336lJ\267\021\244\321\270\223|Y+\343\242\220$\231C3\0303\256\357\247i\264\217\177.\240\233y\360\323\220\316\f\217\351j\356O9\361\355)$|\230a\350\234\341\237?\310\221\377i.\001\216\272B\204O\267\376O\271\322lz\215v\330~\b\177\307\331dy\354\323,Q\006?:|\365\346(\206?\373\007\361\301Q\177k\367Y|x\370\366\305'Zx9\266]\t\026,\\\036\3734\013\227\301\313\364g\352\265\364Ty\372\340b\371FY\254\316\031\305\340\225\340\0204/]\253\307=A/\020h\003_1\220o\341\273mwDC3x\022y\345\253\277\323-N*\204\277\025\\\374\024\355\363\177\327\277\f\261\237v\023;B5W\312\245p\213\024\326YLn\323\347\336\355_\213\257z\326\232\202\0201.\036z\227L?\037\223\355\213\376\212\324\371`e\220\370C\350<\230\350q\223\020p\237\323\t\354\r\222D\346\213'F\3527\365\250\020\363\370\310R\214\231\201\266\361\230K\205\243\303\323w\357\216\016\333\031TTgH\360'\004\321%\256\206`q\231\264/6\031\004<\003\370\327\255`\001\321\257\005RHZT1\277y(\367\001\356\263\336a\212\230W\263R\200\334\310}\2463\240\351&\243\321\272TSsT\f?<\357\344p3\033\304\250\211\213Kn\262;I\312\217\230\207\345\024\210\023\320\033\265\356\033\215B\340\271\024\013U\364\f\n\203\360\204HT\345\365\036\246\332\353\353yz\213\237a\234tD\300\365\373js\377E\0162\013\034\000\355\325\204;J\003\317Q\353>\201\240\361h\365\206\231\251\221\f\357\325\004\2306\t\203T\231\234\344\331<\330x\2466m\003\272I\252\306\000\272\265\311\234D\220>6\231$\217\035\t\314\335vG3\352z\201\373\212\025\303\345\325\214\221\275\260\202\202\016k\034\210(E\214p\325\025g\003\245\265\000yq#\204\370\032u\344\320\260\034\340,\237z]\354\271\225\007C\020\177\031\267\373*\243\207\317\335S\3568\201n\307\252\036e\371\243\375$\326Q\"\365\352\234\bd\231u\235\374\232m^0o\251\210X:u\331\225\201\235\357\343\327\2304\024\277\003\022\356E\177)\322\216\223`0_4?fh\314\016\211\017\256\210\337\341|N\313\254\372\rG\177\003Ra\357q\303-@v'\270\316\326\365\220\345\024\323H\347)$\037Q\302\352C\237F+1\243\177\022U\344cz\377(\263\302<\367I\326hF\307\242\007\347\207\021eE|\252\205G\373\360\307\302%\177\262\325>aa^_\257\207\302YF\203|\260\003\036\335\347^\206\262\243[.\324&-p\226\253P\006r\003C\023\221\244\223_\255\\:\375\324~[\375\362A\225\262\001\317\330\316t7Xg\217\337,\004\220\373-\225}\002Xk\250\372\364\211\006\341\037\243e=n\033\b!n\301\016,+\240\275\215h\303\2645\266\307\247\375\242jU{\324\351\251Or\326\233\225\246\377\f\301\366\370B\3110\027\316\253\2254U\262\363\013%1\r\336)\223tb\006\363\352$\3777\026J6*%\3214\302\312\274P\261\244\003\234\317\225\222\213\n%\235:\311\005e\222\334SsQ\241\344\023+%\347\024J.]'\371\033\027J\376\323k\375\374#\366\204\212?\177\220_S\367G\243!\037eC\201e\333\177\260\255g3\207\332\311\006\224q\330\214\262\316\002\037\330BX\374I1\325\366|;\325u9\033\300\311\275\357,uK\273\371{\333!YXU\343\230\226\212\340\214\236\307\315\312\377\326s\237\346*h\177\344\223H\177\372\310\254.\342\3418\003\tA\376\352\305\313n=\374\t\327\336\376\322\257$\300\363\347!\002\324\343js\333\372\321\345/3\204\017\f\371\324\371&\354\033\\MIO\240\267(\226\236V\352\2155\2315*\300\002\211\035\204\372\353R\215T7\204UP\265\245\242\353`\263\267\315p\367\232\232$\363\364\372\254\320\004\250e\263\272\bo\222q6\322\347{\3219\272 fSn\002J7\r\214\035\311\357C\3035{f\202Lx\177~\342gp\352VP\335E\225\256\217\212a\265\216\273\250\037\276\256'\343\317\036\352\034\2548\205\230\3532\343L`-\027#\366\310\034\370^\370\275\327)\205\n\311aA\360\277x!P^T\000\3421q\232\r:\205\342\376\3360.Z\215\335/\323\232\356R\331\214\326\216\233\372\020\306\216c\316j_\316\302bs2K\376\351\225\">\363\303\332>\034\034\365?ln\275\370\360\365\341\333\017\3757\007\250\366<J\302:#\242b\375\030\027\201\373\350'\021\"\356\007\372\347g\237F\200\302GL\005\323>\227'-\\\262y\370S-\331|\240iD\375\346\253&k-\25094\326K\217}\252\265\322\340\325\004M\323O\265\314\233\315y\253\333\354\362\no6?\331\372`\350\337v]\357\273Mk{\277\001\315\356m\244\003<\356\340m7\212\366\n\223\351\354\201\327\2070\233\203\225\207(i\271\367\213\302A\366\373g\307\2616=\343\036\002\334/\202\013\204\264\221\312\2739j&\345<\207<#\265\006\242H\256\2738L i\307~f\341\202\225\223uD\367\267\333Bd`bst\321\264/Tm\241j\212\006\035\231\277\027u\342\367\321^\307#\321)\026SUu:\241@ZI\240\260\330\311\261rM\246kl2b]:\252\267\227W^\342\036\007D\330\270\203=\303\336\212\244V`(\310\266\357&\263.\247LcI\326\306d\343\241\037\322\031q\316i\305#N\213\252\312\006pi_\311\205Y\245\\{\302p\207HK\322$,\026n\233D\264R\n\2039!+\230\035\337u7\031\016\317\f\227D\2032K/\243I\301\244'\203\260}\353\216\021e\035K\032\260\230\263\302\266zT\342Kun\266|\270L1\033\372&\225m\025o\303\334\352\303\322\264\225\246z}j\212a\360\363\361\213Q\315M~\251B\324\302\330\366\376\025.}\303\317{\323\307z9\235\250\371\323+\331\347\327u7\213{\275n\002\341\212\356Kl\032\377\256\360{\360\264\213\243\213R\275\210\206x5\301\370\022>\247\233\256\372\336S)m\301w\243\304\333Vx#+\330\372nBL\340\250~\2023\360u@\354\212=\277\272\033\314\013'[\331\266M\304\230p\030\032\235v\366yok\263\367|\355\263p\365\277\310e\223\327}\223%f\263\355\267\230\242\366S\363R\315\350\344\205p\244\336\365\373~\221w^\246\303\342*\317~Abc\327\206V\005c\243\312\276\231#\214\211\343\276\370\224nRx\253Q\r\rB\253\330\312,L\215\240\312\212\264\221\366\255\r#>\363m\026\244\201\240\302\317k\r\260|I<\n\350'\025\3057\r\"\333\207\204{\017\340\341\bv\311\222\266\234i\350\3662\251\023\260\376\236,\t[aQr~`\260\310\230:\336\355\025h\204eF\177\270\333\325\001f\036h\327\004\2312\232d\002\303\231r+)\234\226=\222|`\251\204\312\3537\224\210\2418H\025,\205i\213o\367\260\273\021\242\216\230\0061\350@@$\023\303\023m\326\262-\353\315\0249q]\322\022\022\255~j^\221\334\034\321c-\001\201'-c\006\366?6\243`p\f\263']\224>,\321%\030\023OU\312\266\027{/\203\314\261\035?\001\226\302S\240\024>1\226\202sS\340\265\343\337\023T\037\202\236h\256\004\271\005a\2208\035\373Z\303\005OR\263`\321\221 *\037\271\316\031\244\306Z\000Q\237&\200\260tH9\272f\377d\266\344_\302\340o\204\323\036\005\377 /n\202\340\337w.\373/\002\267\275\027\bb\330\027|U/\330\271\0225|\032\261\3241\3436e\";\261\322\022_\236#=\245\035\244zw\340\262\030\244\365-j\240Dj\335#G\300\030a\013*N\250H\f\317)W4\240\270\342\006\246\306\303\247yn\336\331\246\235\n\256\351\336\b8\244\213S\033\331\300\265\320\322\typ\363I\233\215\037X&\202j\305\217\210\233P\260\252)\236\225i\033Y\225\315\246c\026\232&\224\2057W:\262\267S~\233L\341g\230}E\3354Gi(\341\264\265\257\255\024D\332\372fW\347\332\212\023\220k^\260\n\345\234tC\020\017\256\346\033J\356\201\313\304\322\3759\027\340$\277Utc\215E\250I\203i\321\320\236\277\224CI\312V\323\031Jw\260\357U\226\356\r\372\212t\225\225\017\304\262\234\370\201$\260\205\274%\033\363\253\002\364nE\210#n$\020\035H\265Y\355c\351~\377\360l-:k\305\230\271\177\320A\363z\342[O:\353\315\217Gj\277V\323\232\222r\370~sq\335Z\313\001\341\b00\253\330\361\256x\301\340\007\"\331P\367\020\215\320jdu\354\025\2111.\261\326/;\310\331\264\030\202\027\304\213\210\257\265&\360J\232\247\241f\b\367\244\336\310\221\031\365\332\355\216\235\030\262L.+l\337\364y\375\367\320\3172 |\035D\337\247\276\334d*\r\213\351=\222\003\036\254\252\353-\020y[\275\027d\270\201\n\023\350/\312I\300\334\373\266=\232\330&\275\265e\371\232\031\2176\037\376\036U\013\260\351\343\377D\336\345VO\373b\340{\334J\314\372\232\032\370\245\371\210\323Q\007\031\320\252\2747N\201\246Hy\3150i\021\275\026\204\351\003\243\347?\351\2532\000\203\007P\312\354WG\257O\317\217\232PC5\241\335SFh{v\324\262\207\001\3758\2275C/Nt\366\335+3\271\214\304=MJG\354\352\036\266\225)T\273\326z(\3108\333U\247G\231\270\234?\255\350\201\324P\273\252\020\r\320\f\353Y\032\244l\021T\271X\377\330\026\007{\345\364\"\363\021\373\025d*I\031\247\257\204\256\232k\254\f\246\3005+\001\350A\303\363`\312\271\272\334\306H\362\n\\:\006R\335\340\263\253\325Z\327\231\251!\233Lx\345O+\221\240\026\220\250&\315\004\305\274g\311\2609\214v5r\313CI\376\272\350^\000\377\304\326\\J\277K\366\235\025ST\234\030\341\017{\323\315\312\324\331*|2\324\201:\313g\210K\201\361\310\313\306\002q\210j\301\322\251\275F\300\n\310\252\217@\221\177\207\025\022F\363mVq\273,'\257E\262\325u\226D\224\202\300\270\002\327\275R\242+\375\243k\304\2564\366\233\021\277\224L\022P\230\211\314\024)\305\343Y\335\3475J1\026\270\303\242\244\253\037\231\337\036\265\212\320:_\356\276DB\373\210\202\271&b\323\221\221\266\273\334\264\233\327\320\2305\371\\\321\302J\021\241\306\273\303\351\2563\255{\237T?\357\247\316\343\230\324\364W\274\351\252\177\366\242\3679\025o\b\023\312\205\224\345\260k\260\315\210I\020\020I,\377\234S(\002\271\225\231C\247\330\264\177\026)\366\032\304l \023\237]8\260\034\032\0333\257\322\3618\346\376\323\3304\027\215+F;\243\232\007\027\304\317\273\303\b\264\255G\260\025\212\206*\245\311\032DG\034\033\353\217\"\352\374M\245\253\3475\307%zq\357\004\t\215\316d\326\032\302 \022\250\311\362\203zN\252\264\256\254\256\220\220<\244=\263\035S\347\017\207t\302N\235\367\221tV\033\013\327\347#\326\232\367i>\351\035\251{\300\"_\204[\024\331\273\036\324\203\262&}\204\336d\307@\3058[\222\205\005\354\360\341*\255\361\367\253\333kD\216\360pS\204\274#X\256\346$\fL\027\250>NN\306vo\303\273\250\207\327W\3454\272\002my\372\000U\345Q\217\254\374\356\361+=sFGD\207Fx\2706)\225c\315P\326\260U\312\363\357\302\30356\204\307\320\201\351\000\216`\260I\302G\354\n\004\237~\306/V\272\236\024#\304vI\037\246\305\204\252\352\205\030\n\213S9\f\305\343\f2\336l\037\340\265m~K9\013\016Oo\272K\310\243bX;+\300\007\3460,\335]\201\225!B\n\271I\026\257\214\037\3646\031~\3107\242\267\303\363W\026\332a\232A{\203\271\241tE\255\021\247\276\202l\235>L\035ia\274`\203\345+\036\025\3069\234\276Y9L?\320\334\270\373\354\207\305\004\031\013\326\344\375\004u_+\200\245;a\"\330\213\240\237\323\357\331\330\235\303\366\366{\221\301P\236\0260k\205\027f\257\2163Ezn\016A\202\356\311\311G\20421z\326\207\334\217\372\271|\314\217\353v\363\232\332\r\214\335\235\216|\2605\007sM?hN\2447\273\307\212\360\311\002\021\336\300^r\005\371\0026l\254\341\221R<<\034*9\213\245\270\364\200m\310\360O)\3021\262(d\303\277*\321T\275\243\262\315AU\214g\350HI\352k\336\241K\235\347\334\375\314k_o\367v\024\036\303\341\230g\205\303\347o\253<m\247\310z\210\335\2242\300w\363\357\020\375l[\312\214R\f\340\310\371\302\244\366\207\205\225t\242\236\307\270\345\344\001\206\205\007\354\252\030\374\325\254\312\023v\302\200s(?o\006\215\203\275\340L\363\223\301\351X\342\302\356\226\367vfsx\375\276\365\226\220\247\353D9\310;\200\256\024\2377Tf.%s\321g5v\344\232\347I\020\027\002+\217\235WG'GD\317N\240\277\335eQ8\336.\2349\350\232\013\240\f\234\024\034\3036\324\214:\243D\022\252|\240\212+t\212\250\311C\315 Fi\351\021\021\263*\370\233\021'\310s\253?L\206\020\305\233\354\bnu\311v\262<\236\346W`\340\264m\036\257J\001\025n\343\342\343l\310\364j\024\013w=%\377\333%\021f}g\325\365b7v\331\345\267@\210\355\323\177\202\365\371\221\272g\bJs-:\227\f\0204\216\356kZ6\f\260\232\365@\377\341zl44\260\347w(\237fM\023j\024\214\177}\263\207\255%\324\243\343XsT{\"\335\203\361\323m\317\3409~\270\362\243[\024\"\263n\200\333\344\3367\3606\342\235\227/\033*\\\345t_\336\335\330\240\265yhu\360\213\370%\275\330|\255JacG\363\337\213\3617\201\317\321\2258\367\255\227\370\271\300[\3640\223\261\270\274D\3176>\251P\325\267I9\362\227\273\321\2157\347-\227\222n(;\037\367\023\335/\253\377\276\306\330\f\355\2016aF\233/_vqf\273/_\316\305\002t>s[X\2071\276n\231\246\202\317D\341\357\340o>\217\336\235^\0349\256T:\264\234\371\340xB(\225d\212\331\317\354NB\333\336w\321\020N\200\t\022t\245>\312i\004\217\367-%\272`\213=\t\346\376[t\226\224\225_\025\210~\nu\314\210\357\253('\306glB\021bE\313\277\263A6F\330\332\260\213\006\373L\226\201\2146\364\205\215\262\253\254v\001\326W\201\r\327\310\243\311I\353\022\256^\251\260\344\237+\254V\320\233\265\342\271^\322\361HM\032y<\246\007\345\030\223s\347\216\342\217\t\265\346\341O\317\017X\223g\234\022\351\024\254\003\307qK\260V\034\202\030G\177\216\f\342uD\341@\346(\235j\251R\336\034\007\016\331ev5+\303\3451\177\265\320\021\332\000=\271M\024\262\202z\326\253\300Q\177\221BDP{zoW\320\031y\tJ\365\214\020csA\f\256\270\201\243\205\352\220h\0042\"j!\211\220\300O\222_\031\333\370%>I\316\325\353\002\301\344AZ\242t\364\201D\005\202\231\304\"o\321\b\314\271q\221\3406\252\243\224\323\225X\251\342\336\000\272\267^V\036n\265\3542vf\2640\267tz\034\357\033\013P\370\b\243\266\256\365\"\337\257\205'\221w\253\322\275J\357j\370g:r\035\202Q\377\370\277\216~\357\260>\023ok+\336\331y \216_&\267\006\232\346;n\300#\361u\203\305\232\214\305\347\007\264\343`*\245\201\020\317^\006}\304\344rwP\216\271d\222@E8\202\300l1\2418\0049\0021\f\305\020\357~\224\224z\260\340\244`\256\313\023\342v\311\324\350\315g\r\bFi\206\216\211\003e\264\377\376\374d\016\254O\237\370\0027\260s\236R/\204\022\344\351\025({N\373\t\325\372\211\210\342\364\f\371p\361\226\327S\2157\236\315\005r\261x.\307\211\354\300\254\304,.\332?\237i\305\377\336l\251d\313X0\214\216\236\356\250\363g\214.v\234\006=q\352'?()\270\265\n>j\303\005\315\350d%\207\036\354\304\233\f!g\341\215v\301\271\2245qc*\364\217\234\310\374\366$L\315\232\250\231\232$'\361\304=\327%-6\031\303\341\351\232\b\005\256sT\344+\224\b\207z\230\206\264\032;\373\273W\204*Y;\312\254\227@UM\305\351,Q\025\272p !c|\362\224\001\027\277<7\236\177\200dF7W\234 p\013\327\333;l\354\234\265\277\360\216`\320S~\031\007\234B\3327\315\331\236\232*\320\351\200\234:c\210\203GO\236\250R\301\bjl5\352CFT\212_ep\217W\fLNv\025c\002\251\360\"WN\352\345\344q\320\233\252\311\314;&\002\017'`~\217%\323\356\326h\223\211\365\b\021\331\264+0K\003\270\225\003\324Q\274pJ\r\2658\336\\@\347{I\250h\200rqH3\360\216\024&_\336\226x)\262sQ\261\233\0052j\b\003\233\374-Y\000\226\177\323y\013*=\367\215UQ\341\205{\3200\034\233\027\202\347\034J\345\242$Ux\302\321C8)1\372cl;e\257\336\247`|\231\376\330\352\003\370l\216\277M\364\034;\r\264z\235D\021&9hbT\254\220\247w\330Mr\376p\276\005\366\335\301\371\273\343w_\357\201\034H\313!*\322?\317F\331\220\304\242\364\250q\363\243@cO%\210\205J\217W\344.\3650\b\000\nj~q5s\330gH:!G/)\345\345Zh\215\221\255\350\325\311\211\337q\215\2130\330\351A\020\\4\204\251\331\300\324\fP\301P\2666\004<E<\276\363\253!\250T\2072\340i\2073*:+kl?uY\243\216\272\344%~\372\227`\027pr\3148\212\214=\363X\037\275(\205\232\343\375M zIU\241\002\022\340l\326\362\341\274V\234\230\355U\267\200R\"6X\205\327\214/wn\323R\334&\006%\fn\211^\324/\340\371@M)A\3409\260\355\264\023\\\317b\262\220\361\316\345|\211\346z\375<\035:H\203\324\350s\367\032\325Fn\353\304 \227;\270Eq\234\027\356HK\253WM\242\207\034[\260K\233s~\276\265H\r{\331\250Pk\223\267} J,I\226\0047\302\005aO\212\343Q\247@\266\223U\303\242\024\303ui\355\245a\261%j\034\240.\356\236\373\272\250\005]\353\207C\345\315C\177+./\375\274\243\013\035\334t\353Jnl.\366\\\201\335\323\322\270\266*E\b\2126\244'\303\221\ft\013\233\235\274\026\013s\350\017\347`9\314\277;$\242\237\3457\305GV\313$\275$\220\206\231\315-qfO0SU\346\3167\255SD\b\213\221@\275A%1\267j\273\324OOn\027\257\264k\252\216\030\243\023\304\002\224\230\236\032rIRa\006\337\202\213.\300\236-Kt\310m\0353\224T\302\031\t\303\353\242\bj\033\366\352#\275\212\3605\347\250=\246\307\201M\344\360\212oL\347\024Q\332\235FN\315K\231'\344\251\024\241\024:\376]K\215\250\033`\214.Q\202w4\347o\333\222\001\342\033\262\267\363f\\\226\346\t\243\243\270\372\343\326\306\274\273\211\255\r\005\336\301\343h\374:|\177\333\232@\274\367fSqm%\325<\372\207\363~\244C\217\253\n$\025{S\030QQ*\007\254\303\225\256\210\300\001B\037\313\262\367\334\334k\216$\236\221\205\347\016\277\340\254\202\350A,\227\034W\242c\246Y\325\211\034L$89\263-\363/\223\252\206\271\004\204\2379P\232w\231\330F@\211\210Z\220\302>0\254He\366\t%R\225A\324\305/=\361\006\242\340j\214M\312\212\207\034\036\234\372\035K\030m\037\305\366<\250^\277\311\002\031\346\266%l\207G\351D\2538\314\232\032\007>t\224\305\201`\354\373\312\253\276!\343 B\037,\350W\263qR\n\332\305\345l\034\262\232I\002\221\320\305\223\237U\325L;\352Zx]\351\3432\206\031Q\315\355\030\223%\347\2340\n\366\320~\250\376\316F9\317\255L\257pJr\016\247\310A%j\251x\251\266\206\353\234\236]\034\237\276\353G\377\336Y~/\033[\323\371w\2606\277\217t\274%+\334\233\235\370\276\357\332\361\347\347\346\212+\3071\300\206\2403\3015\243oJ\217\na\206\026\240\236g\354\270\210\207\256\313\207\357<kq\266F\237s\0231\304k\303\374\244\275\221\267\254\217\236\036\\\345\333C\324\333\312\317$\374\372\350bMp_\314\374\310Y,\312fb\364aEz\341\356\003`\374\214\223<X\305\217\006\311!\220\003\357#\275\231\324eh\270R\341\256\317\336_\320\200\030\026\2758\352z\315\203\250\377\020\225\343\326\351\360:/\306\305\025n\t\251q\337\245\203W\007\337\242^\205N\333\263\363\323\263\327\307\357^u\243\303\323\263\277v\243\267\247\337\036\005\312\260\260q\231\307\221\357\3205G\306\f]\353\354)\342\026\243\315\353\364\300\315\244\000\332u\2437G\007\257\272^'\315>\257\nWg\226L}\022\331x$]\211\303\353,\022\200a\t?m4/\273P\332\316N\231\300\017\224\206\222\332\352\2327\202\202M\325\177Z\212n\266{\016\020s\267\001\342F\342\216\275\367\311\275\200.\244x\273Ud\313\\\332\346_a\273FU%\311+N\024\017\033\311\247$\352j\333\367\357\371\307\252kx\300C\227\300\230)\247Bk\033X\r\220\305\307\352SZ\244h\312a\021?\"\341o\253\177\265)#\364\020\352\271\273\364\344&\265;\324=616\3659\272t\241J\233\246\373\0254\r\357b\304\307@\222\344\022S\300P}\314\216\020\267\276G\305\263\252\350:\005/\374L\013M\206C\330zI\3322\033\277\275qg\303T\250SUQ,\315!\t\277\300#\335\352\3539\202\321\r|\030\200+S\264vr\f\307!\200\n;*pF\234]\226\351U\205c\371\037>;=\333\016~\031\177\361\320\247\275=;?\2728o\346)m=\013\344)\255\036\277=\300\373\337~\326~\027\177\365\300w\375\252\036\007\037z#\364\275\376\3339\364\305_,\370\332\233\243\2233\177\225\337\236\277\376ks\225\333;\201\257\376\223}\334\337s\n\314\305\321\022\356\354\357\243w'\260\217\213jn\340\304V\305\030t\261\375\037\376D\300\023T\212\272\007\367O\371C\027\377\374\251\327\353}\341w\331$\337\236%4>\211\351\326-\217\013\225\024S\r5F\035\247IV\"\036D\350\246GR\332*x\243\002\013\300;K\211\325jM\020m\234z\330d\3449\320\270\0059}\266\304@\006k\347\366\206\317\365\326\222\265\217\314\364C\316*\006\2218\224\344\0372\200\351*C\006ZO\353\341:.\262j\350\265V;\365\235\217\202\277\351\300\227pB\237S\370h\021T\034cI}a\241N\351JnS\371\252\215\236\033\034\207o\243\021^GZ\305\357\333]t-(\013c\352\030u\263\274l\270\330\324\263\353\356\271v\n\f`\030KgJ\365\240\340B\203e6\016\302\317\312\277\257\240\216Oo\007q\205\224i\321\262\fu\264&al\250\242\274g\352%\f\367\310\022z\321w\331x4LJJ3\366\357u\341\022:\307UA_\265\007G;\266\207y>T\264l\366\0033j\202\367\254\341\037\2451^\263\315^\323\315\255\325x]\274\343\307\034\263\351\315\016y+\237u\371_\317\270\331Gm\264\n\"+\333gl\316\034\237)\374G\317\337(.QR\203L\330\314TgyG\230\023\0209}\327\363\355\261;\226&\260R9\225V\3708\032_\321\352f4\311\362Y\235\256y\325\222\001\312r\023\016r\314\245\2718\277\306\005\314\264\234\345\224\320\207\271E\343qj\213\344\344\362\304\\\240q\341{\036\351\226\005\3768\316\031l\001Q)*\251\257\362e\277\005\216\242%\027^\n-s\214![B\256!#\216n\351\330\027Xa\257\356\004\242\001zw\002\261\262)\325\220z\241CI\361\020\3600`#\335)\330Te'\\3\334l?\fJ\004i\254\253\237\026\241\341\2005\330\000\371\\\370!S,e\277\206\305\222\224\304\200D\301\357,\370\320\313\007>\304$4\246\341\255\036[\027a\007\306y\266\363\3008\224\322\004\334\352\000\364\264\206x\276\333\333x|\211\230uq\241\373|$?\241M\226\314\347b\236\\Y\336\314g.r\356\363\275\235\235\355\275\315-\334\245\r\260A\227\354\330\2150\250\r\205\000\366\t\303\0211\205*\333.@L\351\244v\271\270@nD\333 \213\236\205\272\270JI\226\260u\300\303.$\250d\300u\252q:\272\002\033i2I\313\016\236Az\225z\373\276\222\024,\201H\367\320\200d\244\201mZ\277\232^)\242S9\\\3532P\217I\313\265\346\002&\367\206\3549\212\207*\316J\020\026{4\233\216\031\303\233s\177\2359\206\032\004\2306\356\354\216\300\210\013\246\bR\354\205L\263\025\272\371'\370\311A\212\236\"4\324A\006\370\201\302\261\030a\030T\315`\256x\f\007cD\264C\374\030,\362\223\356\307\275\350l\234b\263_\323*' N\330\330\242\302\311\371\001X\352V\255N\361b2\005}G2\025\275b{\3325\2529\365C\275\343\344\343\275#\202\261\210x\214\036\177t\354q\334\224\342\000\327\354@\203;\236\302\201\021\345\251\245\243\220\267#\2625\301H}3\n\207\236-\311=\212\277\366T*96]\r\320(\373\241\254\326\034{\211\225\221\333O\223\224\243\360b5\313\331\246s\tz\022\211B\315\016@\261\221\353\260\\ \366\246\270EE,\024\013R\234\244r\226JiJ\342.\222Bx\377\r\027\304\224*-\276\020\217s\b\346\237:\3343(\001h\004\240\bQ\215\013\\\231\230\2024\273\242fq\354\326\201uT\251\260>\372Cx\256\255\341\020\006M'B\347\256\230\f\264@\243\r\315\330\025\350\261{\t\035\004\004$\236\261\264}\302\002\272\243\236v{\001\023\322\"\245Z\024\026_\245a\264\213\347\335?V\364\251\312\274D\243\230\222j\263\211\270{\266\350\276g\332\270{\2674R\036\337\346\376lR\220\r\013\202O\354l\354\240R\003\357\316\362\221\001\322\341\fel\0237\003\255\300\323!\210&#\315\375\340\340\001y\232\264/8\2070D\342\362\221`'L\035h0c+\332K\025\354\224x\340\323\253R\2021\201\210\022\336\205\206\270\342\016\331\244/\275q\214\323D\325\2059\301\3331\332\271\273\263\271\326\036&\000\341\264\221\370\245*\013 \230A\236Vs\304\314;\241E\2703\016B\\\350\374\235YF\2538\013\244\377\356\335\335\032\223VX7U\261\035_\372\2325\236\367\345\257\357\346\365\272,\336\372f\023R\227\207\303R\021\320dp\233\333^\n\307\231\254\366\017\353\370X\205@?F\304S\265n\217\020\"\347\374\350\365\373\376\321+j\232\347\347g\345\274\311|\270\352\202}\230z\2777.t\227\365D\033\b\335\210\363t\203G\021\322Y\271a\371_\007R\314\343\216\3221\210\244}.\326\360Z\267\274e\244\f:<\240\256\244S\275\177\222\t\034eNv@\203Gn\020J_\341\271\221'2HU\024*\250\351\363%\242&U\233\340\253\234\334O\036j\355\b\356\201&\260\r\205\000\354\250:\360T\340x\\\025p\331\\O\f|\027\343\263Vkm\005.dTQ\006s\312p\211hg\n\251\t\276\256*\304I\322\027\220C\242\005S\320\267\202~I\313\242\035SU/\264\312q\235:\316\374wO\006w\370a\367\211<\266\271\025\322\261'\311\035G^\347\261\231\344v\250\375\\\262w\202|\001\026O\205\353r\f\013\211\n\206\261)?\271\222\232+\b-(\241 A\342a\210c\025\013Zebk\370c2\233\023e2\372\274\337p\b\365\202\022\271\233.$S\3361\316&YM\366z6\324{\366\322\330\264\245\274\351\335l:N\312\003t\233\r]e\332\004UF\2414Pg0\333E\240.\003NE\306\fE\325\202\000spE\024\213Irw\262\264\0030HV\214\b\277\205\276=\017dZf\263\202Y\rw\331d6\241\327\273\034\243\230\240\177E7\225J\366j\345\324P\274\017\3051\035\206\232-\006\265\367\345X\376k\360\275\341\321\355\r\303\373\233\033\277\005\373G\373\371l\362E \2357q\257\031\021{\304\370Rve\2039\314\320\350\222d\036\230+X\273&\005GN\023\322\321f\241\260\345.g\n\331\2022\003f\323\236\227\226- \256t&\344}\370\374\206\324bH\204\tswd\0235\220\314\266\255\227\006I\322\016\345oK\312\263\177\226\361\330\367\360\026`\326\350r)$\325?\202\306\342\273\227\034\355\266\260\250\257;\033/\272\321\316\326\313.\226\017\342\037[\370\3076>\262\013\032\350\002\345\253\027\354\255\245@y\311\240\2309*X\022 7\013'\320\3250G\254\310\375\354q\252\205\344\363Lj\227f\220\302\177\353k\340*$\267\322R\007\035\0253N\361\364\fl\370\f\335?\310\260p\017gc\266\331P\260T\310\266\354J\254\334\226\264zD\202\373C7\230^\227Z\237\347\3442\362A%\023DB\260\356u\021\n\347j~\252\350\013\351\035\220\236\261\336\235\013\333\\\325R\367\033\321%\033(&i\234\320Ze\027\t\332\242\026\231\300\370\262\222H;O\266\364\031\004\2325\232\347\275g\317\020?\3171\247\320\326\327\302/\034\236\274@\361\001zo\367B\216-\027^\021e?\t#J\333I\265\02516)\346\263\214]\274)\003\207\217Uz\347_\r!\375\360\367\220\207\321\363_)\372\252\204\2330]\377\222\215\242}m \367E\020\347\035\217\030<\t\254P\261\005\255\217G\2532\302Z\027\214c\212\305\367\017\372'\321\331\311\301\361;x'\366\203D\246[C\227j\236[\026A\253\241\203\371\016\177\310\007\\\037\221\212\320\200;\210gZ\2512\277F\303\332\005Z\341 e\234N\252%\237p\270\216\305Q\036Z\r\322\316T\205\340\faFli\002\2539\303R_\013S!\252\035\022\202\025,0)\334M,\254\0242\251\356\340\224\357\013\246\224FIp\261+\225\247w\f\212\273\256EC%\210\032\223N~\005\022\2220\362y$\030\224\241\314\3109p\235\370\330\002\023\260\006`@7!bY\306m\260\034\376\1776I\346\006\204}\016FY\340qp\326V\006\217\250\344\325\224\207\331\262\346\234Y\263\311aOZBV.9\363\355\226\255\374\310\366|Kw\347\3436\272\363\003\372\374u\3333\325\237\f\367D@t\027\216\001\205\274\307\364\304\272\324[=\245\332\240\361Ew\264'u\371S\252\366\361\330W\327\305m\034j.`jb\305\324\257\350i\314\311\345<)Go\3021l\201\024\310\356*\271\n \300g\214\266X=\024J\270\032\027\203d,\255m\304\363\244IO\r\b\b\255/\t\324+\303=\037\357ui\357\226\3577dib\226\274d\257\335\274@$\337+\302\027\236\244u\243\330\317!\244w\225\323\247\340\263\177\233e)\241(\245\030\225 \221\2134\3261#\032\223\305\017\317\023\251\356]\345\260\013\004\370\367\226\266*:\304\325M@\213\242v\000N\037\031-\037Q\350\023*w\257>\372\340&\335hZ\324\254\363 \n\357Mj\256!\230\016hh\311x\275\252G\250Z\316\3621\316\023GR\247r\233!\352\020n?\263es\017\270\224c^\302\277S:\344\367gp\251\205\227\f\257\227h\331`\326eQ\237\253\345\370\341\006\267\034\216\353\240\250\250\370\026\210\004\237\227\016\314\213x%\346.+\017b\3157s#\250\241\312\316\203 \363\374\206\217\333I\371\363\334\262#\n#\315\3037\215\263\bg\210\3262v\225\233\007k\356\205\317\033\355\2434\312mb\334\221\335\3464\324s\343\321}B0\320i\252\260U,\270\330\354\\\325p\037\210\254\3009\231\t\326\364p\f\026B \332\313\23277\233\351\266\025\332j\206\226\355x\206_\266\301\022\352\023\2420\266\301\336:\0060\237z\270\3316C\332\251\321t\340i\267\252\351\315\231\035:Iy\230T\232\2609\321o\0046\322\351H\037\036~(\t\365N1\005\013\215\231\251\366\256`\267\204\276\341\366\332\301\314\245\334\313h\305\270,%e0\213\260\271)\300I\225\212\225\306\224r\t\235\004\200\027\370\245U\205\224\247\327\326\032\231\237E\243\257\350\357m\221\310^\343Y\240\316S;\033/\237-k\236\3546\340\032d\310\344I\242\"y\234\254\230\203\344\362\200\254\340N)\325\307\252\331\177gNNESF,T\025\2268\347\246}\332\277\320IO\036w\324\223\306Y\307e\372\022\373n\356\214\377\337\351\377\227=\375\311\257;\376/Z\026\022u]\213\007I\3455C\360\213\271\320\262\305\017\257\233\006I-7\202\024\370pc\214@\316/\347)\020\241w\3156+\360\353\302\221\275\030\225v\265\264\231?=\026TfMW\240\242M3R\b@\007Eg\327\327\375~|pv\034=\3400\301W\2349fK\253y\r\252\232\177\376\252}k\225g5\327\b\326J{\363\016\252\250Q\205\255KW\233\224\354]\355GI\005\026\350BF\241M\017x\251B\210\374N\260\355\233/\237m\302\231\276\347\224#yy\247\267\275\276\323\333A\211.\251\314\344`\225\341\347\346\357\300#\357\216\016#.\355\245>C-\237L\304\226\034\336$\302(|\324<\307\250G\0165\346\311!\223\233\211\240\260f\273^\350\202s\364\341\230\034\2228\004{\"\0278\223\372MXa\363eog>+\250\257b\216\267\303F\\=\247\206\334\034\352\036\303\000\314pb\374\017\227\177\033\345\275e\235'Y\275\310Gb\250\301\242@\034#\363\026$\376\220v\000\200\271\r\245\023;8\234\241\314\370\201\237\351\350\001\327 ~\214\307*\323d,\263r\276\343\377\022\251\307\211\302~\345\251\355\241\250S0\316\211IR\017\265W\023\334\273\331\024\356\214'\271y\202\364b\377\322\247\347\270\340\255\021\331F5H2\225>\013\256\013)\271j\353<\201\273b\316`\210u`\357\004e\363v\341\020\246ei4\013C\0346\363B\207\025\304\274\265\366u\022\272\"\353B\256\226\007\357\257\337\352J\221K\355S\336):\344SL\002\331\251h\225j]\322f{05\347\003\3669i\356\304\374k\275Gu\fmu\264\363\256\253\205\375\355\376\267\330\002v\373\037e\023ps]\262\t\274\000\217\343\017\370\177&\301\3770\223\3009\262\215\216\224{\317766~\023\373\340\327\210\202Xj\323[f\272`\326\004\001/\306\367='\206\310UU\217\223\003>\277\375\337!\007\036u\374\177\037\357\037\237\366\245\216\273z\225\376\327\037\366\005\356\350U,P\302\202\016\370\257\232\376kVwDp)&\335\361\331\267\317\272\230!\324\367q\250O^\035\234\365\236\"Q~sA\362W\212_L\323t\024s\312\312>\375#\220\r\226\030\fc:\021\230\311\342\247\360\321\313\240\315\345\002w\216\345f\225\357i,\362\321\232\250\347\374m\342B\311\275D\311q\205\355G\264\263\231\373\f\327K\006\223\227\357\355R8\333\206{\325lo`\260\222\204SZ\377\356\367\202C\351\355\215\215\346\204\037\310\346\363\0268/Yu\341f\2713h\354\021\246\177q\nK[\200\272\364\347\364L\246\210\371Ds\267\216/\233\033\026\250\342\3566r\214\335)\231$\260\315H\203\216\334\005Vr\377\377\352\347\376;\257?\020I\302~\022e\201f\220\255x\022I4\253l\265JBX\025D5O\035\023\211\226\326\303\236\341\035j\2104\304j\321\222\323\346\340r\350R\341\251\300\017\307s\\o\232g:\007\347\343\177\022o\306\025\246\266\240\257!\036\244\211W\006\356\203\334\252\377\322\b\315\244\344\332\033\344E`\303\372\036\213\323n\005\347\245}\035\366O\266i\343.N\372n\243\351\212r\331\b\353\354\253\243\203\376E\317#\"g<\005Y\222\357\250\376\tP\363\036\033~\t\206\032N\216\347\246\243\243\037%a\000\213:-\375\224b\330\035)\3053e\200\304\275T\316S\2141\021\017?\323t\251-\300Zu\347?F\370;i1\204\203(\2618\305\312\240\361\004*2\te[R\0014\211iX\217\357)Aji^i\356\366\262\205\256m\003\227\323\242\212x8\306\324\333\030\016R\035p_4;\35561\\\t\220\206e>\003S\360P\021\016\005\n\251\257\314\326\342\\\2335S\362\310\365!\271\345\266{\220\342]\2518\t&\221\343\001\245\n\r\333s\221r\222\320\347\206\335\244W\031\345\217p)\004\370\226\331\315\233\335\000\233\350\202\301}\006\262\226\322\232\237\367\236?\0076\347b\373\244\t\370J F\370\\\226+}B\327\243N\243'\272\244\213\251\230\344N#\361{\245\031\327\226]'>z\021-\257R\022\267\375=\f\314t\332\217\032\003a\027\003\314\351\316jO\246\n\304F\302\215\235\207\367\021,g,\256p\334O\203S\374$.m\361\325\222\231?\354\037\f\r\324k\024\203=\3679\232\020i\021%\313\003\311\221\255X[ \0265;\331%!\2166\f\002\226E\303\353\024\324\303\336S\204F\233\367\\\021\362\333\013\rC\224eS\335v|\002\003\317\216B]\251\t\331\210`\225\030\216\350\234\333v\343\322\327\341\3020\260\003\266\255\023z01\343\311\263DLo>\373l\253\245\257A\t\027L\003\371\310B\253\026\2170VI\244\210\215hn\2548\276\254\247faO!.\276\347c\f-\022\304\033!\252\342\366\200\\\257jD\355*<Q\374(\376\315\256r<\356\r\t\360 \377J\022:\326\231K\355\335hF\331\364\223\214\322\212\326\213\313KB\221\203\323Q\227\331`\026\2109QsG\013\205\303\337\264\337`\234\256\247\021\267M\227e\013F}b\317a\330\013\302,\241\213l!\317\372\205e\300\221\265ti\346N@t\324\037\317\276\276\236E\314\334\020\211\312\245\242MK\332\233\345?\264\352\030e\310S\214r\004\361\274I\307\004>\230\346\303\362\236y\247\344\023:z@\177\177\340\3344\220\3026A/\\\363-\371D\265m\366s\221\013\247v\361{\320)f\373K!\306\200\364&\213.\375\3404\222\326\300\363,\315R\300\253\323\355\307'Q\267\016\353V\227G\271\331\362\316g\377\244y4\325o\006T\0039\256\3608\226\303n\266\272\222N\031\350>Du\246Rj\344\352!\210\336V\316\206j\232\360\201\307\322S\034\217\362\207n\263Q\352\225\315\333\336}8\002s'\225<b\020\373\331\346\363gkO\240$|\360\221\327:31\002,\302\363\b\023*\354\213\377\334\352\271TU\246\254L\005A\333j\310G\310\210H\037\325K\221A\007\263lLe5z#\320\001\362S\032\333tf7g\274\255\023`\003'\336\304\177\327\343\352fSfJ\177\3575\377\345f\216\331\001~=_l\377\306|\261\375D\276x\276\373\354\305\223\370b\373\267\342\013g[~\037\276p\030\363i|\241Y\312\301>\234\347\212\024B%\177\b\205\302\345\234\362\216\007\327\306]\003\030\277\021\035!\001\377\262\305g'\377\310t\234\000\267\254\304+\032\031P\364G\007w\205\223\315\177\377z\202\177\266\343\205\211,88\365]\375\364lt\336}\247$\241\311\000\367\240S\305A\270\030\256\032\222\"scZ+\255\006\305\030\311\231\243(\270\037\247\242\250\341\316!\227\243+\276\0357\246z\303\252]N\320\223\320=X\001\215\311\220\302R\201\235\212\360\"\330G-\320x\342_\276\312\244\261\240\370xI\355\360Y\273D\n\244\004\325\020\250\357PH\032*\353\211\247&|S\317\310\327\240,\313\335\226\"\304\0229:\2740\030\273\234\337\213\005\374\036\240-A\362\312\"4A\300y]\212\311t\203\037\000\254\300\352\351Zv\300\251=z\205\323\035\315&S\355\000\207\2259\031\325\211($\315|\210$\20511%4\0347S\216\023\367\203\202J\035\327\266\025\223\227h\213\002\217\372~\017fW\212Lm \306\232\347\212j\207\260cG\252e\202\371\275\337`\240\006\343\"\033.o^\314\331k\207\036\361\235l\306R\242\241M\350.\221\331\216J\322\242\315<.\027\326\303i|\231`\003J\017\260H\352\f\345\334\\\034\236E\257Q\030\236\302\223\321*\\\332\317w6\267\227\276\263\335\357-\353!h6\332\241\241\362\"T\376}1+\tc\234\030\005&\376\341\335\351\253\243\223\203\277\032\214\364\276\333R>M\252\373\017U\nS\252\303m\345m?y\301\227\227j\374\005\255bL8w\243\007\367:\027\335a\f\305\275u\034\350\274DZ`)\236{\341\341\244!,W\206~\031\021\242YMXu\215\276\201\004\323\204\277\310\237\262+B\312e\243\215M\035\244&\245%\035\347i\035\3132\367\341\277\237\337$c\017\3318\251*s&\3155\202o\2323\337S \311td\236\004\021\261\347\335\024\027\177=;\372|\037/\241/\0209\242j\334IT\352\344Q\344\373W\307\375\263\223\323\303\317\367\277Go\003h/\367\316\273\346g\221\002\241\373\200\374G\337}8z\367\355\347\3737I\331\305\365\361\333XV\231\337de\221\243\347?\202_fx\214\226\334\221Z\326tSonl\bY\346\003K\327h\037\017\306\037\253\354\2274\202\371\214g~\317\360\013\006F\007\352\342\337\242\257N\276\301\366\257&\350M-\267@\210\177\261\273\271\245(E\202\0229\000\022|\3640Z~\321\026l- V\333oBCpT4\317];\n\224\254XN\356E /^;]'\034\2309\230\216D1\027*`\377d\205\256A\360\315\215\255\235\250\0167\016[\3025Gc\202\336$\214\036\336?\2474\200pl\nn\237G\324\323\023\242\030\336\017\370Z\262\tB\311\242F(Q.'\2065N\257\320M\257\355\230\005T\256\355;\305H\352\020\2754\204\"\03218\355\224|7&\364\305S3]!\264\351\317|@Q\335\272\026\221\035C\363){e\351\252;\265\371r\253\267\371\fs%6\027\371dv\232\331\024\277\220|\303\346C\024N\337\307\277\006\233\263\020t\f{\246)\352\3424-4\b\005\223b\304\032+v\0171\251\026\3416a&\341\001\016\022h(\004\2668w<\203\257\023\b\356\b`\022\346\363\356\343Xx\267\240j\002\264\371B\223\215\022\267\205\b=\304m(*\037\301\237\313\304\325\311\310\211\325\030b2m\230a\232\225Z\204\210\rE\036=\333r4\200&.XC\332\270\033\017-\257L\334\2744\241\325\t.d\215\261)\330\342\r\000L\212\371\332\270\356aL\034A\256z\272\334\331\233\334\242F\000\355\255\016V\303\367\321y\242\305\330\215\021\004Xn\204\335\214V\3435\003\002NH9\314\030\201n\035\246\355\270\301\234\344\220\262\362\207p\004~l\235!\261TXRM\237\247\360\267\006\313\323[w0k7\231\001\177\357\036\303\277D\235\357`\370\215M\330\270i\264\265\261\265\031mn\355m\276\330\333\330X\242#\003\214\022\377&\303\320\311]\234\033Q\217+\004\007\212\366\277=:\357\037\237\276\373\"\350\231\223_\342vep*\f\256\231\r'c @\335\315\334\005&\313\361\2216\213\f\207\351\264&\355\\\236f{\217\362h0\007\237\235C\210+$N#\363\267\255\310?\303\374\233\355\371`2Np\001\2773\342\r\346\236]0\345n\2701n\310\032S\315\202\315\223*\372\317\367\307\2071\207#Il\256\303\2514\251;\336\204\302\245\005N6\354l\312\225\252\330\364\201\301\246]\212\266\207\303\304\222\306\213\360\360\315\246\203\270a\236\333\f=\267\351?\267\025zn\313\177n;\364\234\263\001\376\001\321\313L\030\r?\265\210\205\275\307\267\255\313p!/;a \303D\306\365\330u\006q\275\220\333=\367\020\270\225\302\342H\025\030f\256\t[\302y\252\027\261\016\007\006U+L\f\037\335\334\216\207\331\364\032\025\225}\371\313\f\233\254b \320W\203O\372n\373\032\351\\IoE\364Ze\233\327\264\343\302~\333\250\214Zp\t\330\f,\023\271\215\310qq\315\337\247\256\36729\031\2364mI\343m\007\367\222q6\322\347\245\345\031p\b|Z\006n\314\324\266;+\302\032\325\373\363\023\317T2\233\217\224\357U\351:\334\017\325:E\373\344\263\327\365d\374\200\346\310eF\330cDZ\377\2158/\346\326\205\2543;\352\343\353\240\013\001\323\024\360\fm\242.C\n\220\201\033N\250\0371'P\333n&\370\002\302\266\245^F\203\351[R\242\312\312\270\201!\202Un\356\003z)e\311AE\364w71\032\214\r\313\371pp\324\377\260\271\365\342\303\327\207o?\364\337\034l\355>{\370V\302\324\035B\372\330\307?\277\360A\026\211P\355\222)\264\227\021}\206w\230\027\305\035\333\354U\265(I*\352\364\317\317:]I\000\206/\304\360\357\210\234FQ\264\273\261\273#\265F<G\202\355\n$\252\320/mYW\351\352*\030\264j.\220\353\023\272\202(=\337\276p\033\r\362<{\255\334\215\242\374(y^\022I'\221\325^lS\204\031~\2274V\263f!\230\355\272\246\301\2459G\002\b\366u>\303M\241\201t\034\031\346\tLd\b\204\303,\335\256b\247%k\315v\354\263E\020\342\250\310<D\373O\376\000\0053\fp\2336\272\233\207m\243\310\325\316Zz\232\361#\246\251e#\272\2720\032\220\316\2112\251\245b\323\370Uf/OZ\263\316\351\355\310\231\003\303\320=\201\322.\241i\220`)1\222X\253\036\037E`\245\360\002\022k\362u\223\310\226\312\016\231\355\201DR{\247\354\177$\341\033\224G\235'\2505\274\306\202\323&.\203\243]\2226\251W\231t\276]\000\310@x\f\322\244\030G\021\327\327g\001Ly\f\315\351W*n\247*9\262\255\21435\365\004Aq\354\247\267\177@\261\366A(\277\301\261\177\223^\212C\200b\216a\372\252\246\016\354\017\3419\3428 \0011\231U\003\177\252\004\266\032\231\241e\222\030\203G\310\346\2674x\202\347\2327l\311m\337\366\265H\324o\237\266\355\233\377\263\266}\363\177\317\266o\376&\333\276\365\264m\337\372\237\265\355[\377{\266}\3537\331\366\355\247m\373\366'\330\366\1775?\213\355\376\247f\224V\377\032\365\037,)\364\022\343\357\305(\253\236\266\231\333\277\256\207\210\365I\204\223\341<(\245\204\332\314Wuk[\357d7\325\232\017\202(\231\376\205\262\2474\206S;\222\324\002'\357\353\005\355\364\231\354\n[\264<\201`K\2267h\266[3\331\315\311-\263\331n\326I3?\337\315\026\350<\220\361\346\224w\317\311w\013\347\263\265\374J\356\251-\343\024\344\325\310\257_$\216vc-\210/B\355\020G\f\367\217\231\312G\362\256Mq\341\343\340#\345\233~\365\006\033^as\245.\246+U+\372\031\013\304J}2\202m\244\270\251\331\322G\304\256yy\305\366Y\223z\3110\215\223j\230e\341\004A\315\017K\250\027VD\317G\230Y\202\364\300\243\216\227\005\365\b\300\305\203D\272*4\256\333\rD^P\356\020\303\300^Sc<j\326\233\345\230\335-\225X\022\363\347hF\243\035\333{\317c\324\211;\0307\322\250\021u\254K\004\325@^U\260\373E9\206\360\177\300\220\367\332=\034\0377I?x;\202d\220\226s\214\227\220\3361\226\227\357\234\020w\3105\326x\321\263\007\375\303\343\343\006\362\027\022\217\362\223\030y\271\302\316\243i\031n\346FGo\002B\201\202\360 \2372nwA]\004\311\310\313a\232\031\366\344\270\236M\222\274\372\277.\207\322e\340qq\365\330,\3120\326\204\f\307\302\306M\003\363\217\f\256\303\353\311M\252R\305\375S\250\343SU\303\f\220\266\324\177\212\007\007\302jr\031\325\264\230t\t\257\013\036e\232\374\353\303l[\202\264\366CN\340\222\231Cm\255\214\210\366\317\224M\256hzP2\211h\232#\233\b\233\304H\247G\210'R\240;\177D\251\3469d\036%\343\200\225\377\357\224\001\277\301\351\367\023\252]vv\231r\226gw\261 f\357O\223\372\372\213\260\356q\310\232{\244\220&D\225\367\3602P~\202y\361<F\327$\305\003]I\377\b\344\325\347i\215N\262e\211\343N\225\377\023\343\204\227M\262lf%]P\247\221)\202@\304\024\007\017\236O\"\263E\\h\246\025`\002\335X\322_\370\\\031\365\371\375\371\t\005\002|\"\224\342\320\347\367\350V\315\332\371\n\360v\327I?K\246(\224\003\352\2533\001\002\371\213\336\235^\034\2614\246~\250\030\217\343\222r\274b\251\323\357\272&\217\216}\244\003\256\243(\b\374\201.h\254N\247T*\3747a\366k\335Hs\025t\250=K\300\311\237\273\316\362\217f^%\037\031\3735\255\264\340\242G\"\340\245\257m\252\344\200\005\211E\302\375\377\020\371i\234}L\307\367\002m@\201\r\332\330\bs\266\024,\317\353o\230\215\0338\030\022\354S\334\240U0\231\331\376\341c~\366\376\002\265\357\t\036\252@\323\370y\347\376=7\231vkJP\252\256&\332\f\016Sh\326\324\204\003\351\227\345\356IJ\202)S\"\260\017\306\224\211T\247\032\311r\276\321\353`\337\035\323rN\300O\326\274\3060\367\f\253jy\317|\035?\217SmM\215J3)q\322?\343\204n\252.\033\322\360\220\345\244\\S\004\2754\334\343\341(\2446H\245S\232\027\210\202-\f\220\364\257\230N\214QQ\003\031\205\322\327?\320*\373\3618)\327\303\016\306\036\r\020W\020\324\230^t\204O\373\003\375\211F\230&Yi\350\204\245`lS\266\371J8O\362\275\n\001\354\354Ikk4]\r\bA\007\257\261\001,\276\243\2125|\333\013\025\2723I\312+\362\214u\311\032\347p/\316\342\336\220D??\231\215\353l\352\035\"\034\245\022\314da\r\\[#zL\340Z\370S\235\036W\316\340\274\343\000\022\032\313W|\021\205^\260\327\033OJ\375F9\225\n\013[\3549\307\2253\265\222\006\202\273\217\2169\340\272\272\335\355\255\255\2105\033\206\356\341tA\204\317L\023\252n\345\033\007[$%\034>\007*\317\251\365\301\315\302&I\321\240\030\335\333Q\201]J\024R Z\004M#\222\220\256\300\221zh\025\002\303C7\006u\320\313\221\ts\372+6\235\231\225\324\364\t\253r\363\373\3506\271_6\203\354b~\322\326\234\347;\331\344\352\207\315xscc\343\247\336\024\231\215\323D\341\317^#\353z\316\345\353\260_\347\357\370\237\315.\376\271\365\217\316\003Az|\177\037\376\360\302|rj\321\306@6c8\355\264\036^\267KrH\270\003\361\257a\177$\007\0038\335\353\327'\232\243\f\013C\256Vk\\\370<,\362\313\354\212\345eP\303SU\030\347\201\337\343b}<\034\303\353t\"\302tU\353j:\270`Xo'\220j\326\271\324_\301J\244\375\263\275\001)92\211\256f\350T\031$r\325(r\341\2342D\220\230iI\367[5\033\304\242n\321\214(\033\025\017\362\253\343C\020W\230\221\013\177b->\374\007\021\332\332b\204*\364\251\370\207\316\236\311%HlIBC\177\355r\177\347\333\254JC5r\rU\327\224\204\354\354\3666x\211HC\311\270\0254\020\362\253j\nK\022\316~3S\351F\334H\226qE\365\267N\235\312\003\t\340z\255I\035\331}\273K'\265hU\f\000\222\317\036\365Q\311e\236\220\"\317\256\351/\034\027xA\310u&\330\006Q|\332\345n\212\250\276\304!\325E\023\305\347b%E\2470uA\327\3512\324z6\234\2413\207\030\030\241\026\271\343\033z\361\231\270\001\004B\204Q`CH\264m\373\222\3100Q\212P\256\337\303U?\351E_\245\267I\231\376\333\262j9\374\271P\002|%\315\374\330\370\b\301\235 \253\256i9\026\373\231T\331\356a\300\202\031\233v\003W\2549\020 Qc\277%\324\220\362\303)m\213\024\n#^\220\313\311\253A^\356\316\2371\007\340\363\203NC\332x K3\244\030]GM\373V\256 \274\362\300nd\225\0079\3636\313\267\267\204\242\313\006\f\276\362\221O\326\317\217\016^\275=\262\304<\320\316\210qr\205\023\nfP\210\315\246\022\226.e|\345\200^\341\304\026SZ\341\242Rj\374\246u\252\212H/\257\3018\311?\232\022E\036\t\216\351\254d\3503\373C\251\265 \335\2425\334\337f\250\332O\222\362\243\026_J\r\245\273\267xO\233\234\217(~C\307\212\237\363\301(9\331\215\201\216\264\036s\3161\303P\024\252I(\357\251\224i2\255\357\215BE\376\3226\211W;\2355\323\205\326\363}O\n\305\236\225E`w\323\024\225q\333VRr\341M\376\037A\244\222\002\3216\037\220\274\221V:\032\204\326\224\252\336\\m\255\232\242\243`\265\023u\326~g\237\305A\324a\266\332\330x\376\200*`\272z\202>\000\177\356i\226\313<\315\300\264\274l4\347\242\274\030\261F\360\304\211]as\202BY{\275\350\324zGrv\367\324\345P\033\236\341\337\245~&\031\207\b\212[Qe\324\267\266\n\315N\033\3342%\361\006\003\276\222\364\300\304\253\266\344E\004n/\243Y\262\227\215\214\007}\274\222\f\3011\260\002\347\314\332\216\355pY\026y\327k\021\200\371x\354\233\307\362\224\311\264\200+y0NM\244\220\337\323\323\354~\031\217^\3502\324\372R\234\252\331\f\340\321.c\320xK\202\273Ld\241t,\3108A\252r\035\033\327\331(u\375\221\322\366\001\316\244g\244!\243\321\261\002\nS\327S\314A\306\302\035[\321\207\212w\232\263\223\2520\235B`\177\374>E#\356\034\210\236M\0343\022\002\335cY\016\337\214Xu\004w\211\355\321Z)\341+\277\266\207W\252-\334\334~\206p\264n2\246=\367\303\030\224Yz\211\2262\255H\312\231</n\2320\356\b\352\235\b\177\226\221'\227o\243k\005\235\3436\314\b\362C\213H\024\331\"X*\204\322RcC\310]9\n\005\226\017\210\204\202_\344\013M\364\346\2115\213\303\3358\221J\337\244%\250UE\025}\273\253\025A\212\016\310:\256\351\213K\302\217\247\356\205\237\245j\236\344\275\276\356*\273.\227\362\221\203\237\000\373\301?\375\032#\007\037\212\242\267\244\373\240o\035\366rP'\324\2771\262\023\217.2\364'\366\314\375\020\004\025\250\005\333\313t\246m\345!\242}R]\243\212\217\232'y\226\202v\260j&\357.N\336\nh\247\025s\242\322YO\214\210\235$\324\365\335!\206\246Q0\254-\222\255+\351\275\245\340\227\250\017H\210\032\210\371!\023V\264\367\344\237\203{\007\004\315\242n\301\250\031\250<t\276\314+A\021\303m\347\243W\305m\036\237 nVtR\\\001\251\336\005]\205\357\317\336E\253\250\251 n\244\264-\301'\327\304\026\257X\033\224\331t\243\243\357\017\336\236\235\034\375\310\231\261\336r\360\307_:7\021E\3061\375\004\346q?W3\020\321h\361-\317\216cm\377A2k\220\345\350I\240\373(-qf\310H\036\002\246\234\210n\364N\353'\272\264\343x\004_eW\024\310o\245\245\213eK>\034\257s\020\336+\006:\264J\307\354\215\237{C\2220\240m\304jm/EA\252\267\007\346>\023{\227y\204\357\005\321\277\214\330\337\213:\361,\332\353\374\316\032\307\214\226\274W\245 \321\027\007I\032q\220\326`om\267`\r\224H\373s\3078\"\214:`H\220\034r\231\023\322\306U\000b:'1\307>L\364\t\256\200T\341(\035\336\030\035J1\021K\277\030\201\321q\3001S\002\246\362\207#\322\257|\261\"\3516\035Q.Q\364w\330\022A\013\007g\017\002de\177%\222\007\365\311\266\374\242\367$SC\355#\315\272\343\252I\270\204\341:d\317.\234\2651w\035\342L\220\266\006\323\230\271\314\365\337u\256\332\0277\031S\314\221\"\007\331\210-\177\252\311\231\243^q\201\rzq\310\024\t\242\241\264\321?(\241\300w\301\327\246\235\027\216\274RbH\255@G5\356\341\334\203\257\341\t\313\310|ykb7\231\f\370\240h\027\342\204\350\316\201\001\023)\257A=\013\277\"1e\305\236\372\335c\234\224\351\350\000.\231*^\351\224K\361\037\352\377\274l\304N\017\326\222\bf\r\034\235\336\374f\272n\226\203_Z\023\214w~+\002\241\362m\375W\222\245\340F\312\005\b\205\235\366b\337j\202\230\246\277e\024\\\253z\001e\236\225s:-&Q\221\224v\f\362\353\373\232\000\333ur\317\002\3518t\217ncI\000\034\273{\311S\305\b\004\f\377Q\213Hp\360\364.\035\316\352 $\007\031\030\002\224\317\323Z\245S\254.\2213\005!\337\353\254I\352\017&\037\030l\362PN\217\316\271L9\232a\223\345\202\237\207\343U\216B\337~\315\356z\347\323\302\332C\365\344W\236\024\362\276\\\\\222\313\350\340\006\016&9\223\364U\245\277W.\230\214\353\270\272\031\206+n\005\234\305@\227\036\300\303\375\233\341\236\332\372\300\226*\335\274\305\036T\367\371\360\372\325\273~xh\346i\336m\3621%\364<\334\313\330\241\205\256sil\003J\317\201\363\273\360p\215\027\214\317\025/Z\226B\242\207Q\354+N\220 x\231\371\n\245\331Y\214\332\001W\311\220\345\374\034\330\0010\3078k\220\312\202\257\311/5\217P\263\0244\262\352\rvx\235\224\207E~\023\236U\253\226\226=L\316w\207\360v2\254\251\031\004\365n\321,\363\360p\253\030.\216\216\276:|u|\270\326\236\311+B\324\342m\242\357\362&\031\246s\246@\217\0321\305\252\342\234ON\b\264\202\032\275\223\200\372\310\036J\f;\245\023\214\201\033\365\202\3733\240\266\213\237\213\303\303\215P\243FU\205\313\371<\317\355U\225 B/\236;\232/\310\324\250\177\320?\361\001\317E8\201\360\250\321\316\244\314|/\246\251\206\244\342D\037\236\037\274\005>\343p\273_\353L\304\201\037\323,\274\255\226\246x\341Oh\307<n\\\304\341Eo\2047\375\213\276\376G\347D'2\255\032\260\201\3728\360\334\026\377g}\313\274`\260E\224@\275\300k\333\362\332\366\242\327\002\357\365\331'\271@\002x\265\304\372\201\205\315\201^\275k\016`B\311\370\233X\241ID\tsL\262\200;\364\354\346\231\304\322Qh\340F\322\217\214\352\357\275\2416sxQ\256+\300\357\2428\177/O\222\362*\rd{x\2642K\265\3318p\201\216\361u\216jw%\270M?*\347\2117X\353\326\327_y\323\000n\375\005e\267\021`\243\324\225]\2537Y\022]\375\222M\t\221\004k$\326\250\376\335dc\207?\307\0232\202o1%\336b\304\276\337?y4!4\304\277\270T\201,O\371\3172\033\203/|\370\356\253\360lh\264Q\212`J\332\212\3626\313\301>\036\301\r9\236\362\r9\177\3543\220D\372\037B\367\270VI~6\033\214\201\372\375\331\345ev\027\235dU-B2\311\rhmV-\270%\232\347S\352\032,\222\223\350uQg\312\037\202I^\306\3636\357.\255|\223\267\177\366\356\350\353S\375\3172\024\355\363\252\351?\246\f\n\270\b\201\324\360\356\267\235`\310\337\253\343t\025\3261<M\222\027\334\254\253Ka\336>Q\f\364\351\020x_\037[U\363\177\026\316U\252\263\347hG\347g\321j\237q\216\3179_\353L\274\017k\001\212\330\317\314!4\354{\260\355\000\336\223o\351z\f\277\310W\265\\\240\346V]\270\256\367y\206\341\25498+\374K#\212a\372\342\f\n\215s\327\247T\304j\356Xw\222\254X5/\2519j\343/U=jH\240\226\bb\031D\217\265d\017\213\231\3604\036\222=\236\035g\r8\262\224\214\375t\213\366\023\201+c\344;\332gK\351\213\200o\205\207P\220A\327\246\"\303\232b\250\311%*k\211\211\231\215X\252\373\365^\245\000z\211\0370\022\207\246\0042\251\264\000>\202\241|\274\352\030\250\231\343\262pzG!\337J3\035@A\f+\216l\310W<W,%\374\370\316\220\232\274\\Q\207\347\323\021xU\215\336Q\212\263\232\322lB\312\370\354\257\017\244f\211I\364\245fJw\330\370,\330\013\250\305^f8C\225\000\360 '\330Q\355\"\356\032\f\032w\302v\241\241A\244*T\323\367\242_Q\317]5\033TuV\317\374\003-\t\006\004\323H\341Y\334\t\213\245H~\026,u\251\273DP\316R\0370\254\333\270\270mk`\007\350\371\264\263k\342d\300\000\177\374\273\376\362\003\022\353\037J,\231v\342\241\372\221{\353\217D\224\23717\226)\203\240\3154\334\037{F\037\322!\020S\214lVX\233\347_A\036\3741\357R\373\310\022&rE1\031Dh\245m\374\261\024\fc\260\311%n\313?\017\033\310&\035_\351\334@\027\207\221\222rd\274a\003EieVm\357=!\251J[M}\225\214\017\233\351\367\307\277s\252\375?\374\233\377\364\342h\217\246\364\307\270\272\237\f\212\261\234:\244=\020P\177\306<By\017\261\003\f\332\r6,'\177BT\f\031]\007\013Q\341\364\3751RpN\220\n\344g\277\265\301%\361\307\005\203\272!\3729\214b\274\000!HU\024\0260\315\017\004\035\302\257\036\362\217\342\013\374\221\244b:\235\264LAr7\000\224\024\2052\274\321\026\002A\343\315\223\366`R]9\323\346m\231`\226\342U\332k\364\001y\276\333\333\360\354\323\364\016\366\026o);\004\210\263\264\304fb\366\227\262\b\233L\263\332\006\234\n\377\317\234\217\252<\372\220R\177\301\354&]<\f\316\n\265\323I\"\271\334\234\274m$\201\302\364S=\032pi\357\241\341P\215\320\036e\222\372\212\256\371\354\322\030R5\226\227\243\036\212#?\260G\205\006KE?\fdpq4\034\305y\\t\027\017gr\301L\220\374\030\203\000\224\2707\343\020\002\206X\213\t\306\217\002\271FQ\340\226\242\304\226\277t\355|\330\361\024;\231dp3\362\246.\036\216k&\237\2056\265\236~\000\246.\357?P5\305\205\023\337\244\037\020e\031kn6\305q\350p\216\013vS<\264\f\311.\222|~\027\003\267\321\352f\267\267\343M\f\275\306\037,\2177Y\334\024\271\322\003\304R\334[\007\323\220\202\035\027[\377C\221('xn\262\375i\267a\242\230=j\017\316\361\203'f\363Eo\213{\017\214\263\2442\023\344\025\220$\240\365R\237\200k\017\312 \n\304\2579\352}Y\364\346P\206+r\332\224\231O\020^\263\237\006\321\366\3570aW%\235\200|\020k|Z\210\027\332P\374\017\234\332\306>o\315\333g\003\363\310\227 \376,\262\330\217\234\336\216\353\211\214\350Qd\266%>\277\273\021\340\377\237+\372\254\3216\242\277\364O\337E\305\340g$.\353\212X|c.\223\217i\240\222\221Jp>dSG\360\035\237\341\216S\371\264\210a\256\323\301\234;\275\\H8<\274#C\001\242#\207n\003D!V%U\034\274\307g7;~\\=\362\235>\315\363\267\3652@\030^\023\367H\2275\361\n\350GN.-\341\327\362B\334\231>\260&\247\r\330\203SQ\200'WO\"\026\221_h\002\213\231\n\317\204M\236\007\311+\311y\215;w+0\013X\362\007\323?\027\024$C\001\320\016mc]\354I\241s\221i\204\315\232(`\345\264\016\313vp\016\032\032\265G_\346a\204b+x\352\220d\361\034\024\264w\025\363@\022\312 \306\244Y?\252\350\277\310u\\k=\007[\203\263A\223zVq\300':\356\223Z\351\333PQ\250\036\243\265#\333svD?]\271;b\177\310\222\020\265\261\313\002\353\221,\243<\205/\202{\002\274N\332\233\303\235\224G\243\247\\\365\002\212b\232\262z\202\333\214\036\276\250\364\016\212\304\252 ;4\242\372\253_\322\262\020m2\372\225\252\035I\371\017U5FI\234]\336\003Y\253\271H\264\255\225bV\276\254\325q[\257po\330i\212I\261\341\036\266m\221\200j\"}\336f\304\3105f\264\360^\264a\334\200\017\020\2561\022\016b\323\300\232\233\272\033:\354\312A\037HQ\345\304-\251\t4\307\004\007\245\343\256\311W\361\t\352j\343@\217\310\3107_\250H\251\220\0329e\327\325B`wb\304\035\212\351\027U4\317\327\351\310\3075I\220W\373G\322\017\261\303\fc}\f\353\031z)(\027>\371\354Q\2479\272\245$C\362`\\\021\034{\321:\016\240\363\004(\207\200\246\215\343\020\235\363\317\366Ln\263IMS\033i\t\376}\026\334.T0\315\r|auN\377\036\3765\227\025^\271\341;\267q\255>F\031\1779\177\031z\351:\313\230w\351~\262;\267\251\300~\022\365\333\210\266U\323\023S\232b\222c\250c,\200\316\3322Jf\210)\245\220\253\301\224t\024\344\027\253\330\026\202\022\325\"l\307\rc\251\037~-\324d\240m\254\301t]\305\224\013\242\036\2241\330\370\341\303\b\326\313\305\232\224\037Q\324\230\3553\001B\222P\345\326 \242\377\222\007E\237\177P\363u[\234P\213\ta\033,n\\\347v%\272o\217\324O0\n\221\336)\272\2046\320\n\256J2$\242E\253R\030\031\263 \032\362\201i\314\375\242i\f\306\233\313\237\fS\222\b\351x8\027\177\321\025\371\341Ok\265mx\261\362\345\306&j\245\353\277\352\026\302\255=\262\234\211\253J0\227\363\312\356\026?\3438s\340V\256f%'\242=l\334\252\313\337\214\207Mq\220LSJ\337\300\024\2459\2632\304\246m\326ii\305\363o4+\036\3551s\372\265\032S[G\342F\323\252\273<J\215X\254$5\364\240\207\305\330<%i3tGH\337G\375\237\327\\\360\204\361-\354a\035\021\324\f9\325n\311\251f\003Ga\220\250(P^J\205~\352\003g\357\211\272\262Y\363]Bsx\266\035^\003\315\350\023\257a\276\033\277\3278\347\213\207\223\"X\366\374\213\032b\332\t\232\376\223\230\005\020qt\355\001W\017\275\240\325\200\214\271\323\274L\203$\303{\362C2\235\212>\3610\313G\334\306\005ab\350\030q\303\234\272(>\332\"928\243Y\376 \313\217\365\334\254\367\373o\326\323z\250z\315\272-\300\260@,\017\fG\272\025\026_\023\363\233@\344#x\237\210\320t\302}\202ebWB\375H\323\227J\223^\345\236Tw\367k\017\237l\273\270\340R\320\247\214i\322\263\351\357\262\237N\006#%\225?<\341):oY\201|x\306\217\236\360\343f,qW\n\036\030-\026\347L\001Ei\237\210\t\332W~FY\360\216\327\f<\316\267Mc3\250\324`UR\256uU<8\273D\332\200\341\265\340\004K\207\312?NE9\260\316C\303\241\n\314@\n7\230\t:g/\214\305\370\020\2611=t<6\026\346\203W\022\\gS%\017\362\005\261\t\263iW\017F7z4+PhXIk\233\210\321^b\262\034\3772\021S\3576\251\036\232\0359\311zm*p\002sC\243\240\264\354G]\347\231\300\336\233\304.\227Z\225\225\317\217\270\360\202\356*\232*\315\374\361\307\347\023\034xN\216G\335\270}p\350.\033\244\217v\233R\221\244F\007M\236}KDp\020~\\\025\017k\201\264\003N\005!\226[p\344\006LC<8\2652\315\303\261\024\330\303\360\211\021\373\244i\256\370T6\216T\252\031\240\262\244\3070\021\232\327\201\263\312\276\254\306\316\242\021l\355\367\224\022\006\036\021\177\206\221\362\331\304\033)\313G\351]\303M\341\000\247u\243\215\230\036x\320\356y\225\306\204:\204\\\016\303Rn`\242GU\342b\316\207\036:\246\224\304Rf \213#\035\226\220\331\036\263J\033\353\236O/\"\267\255@&\277\f\352\337\361Cn \212^\223\033\030\353\224n\210\017\306#\223\341#\336A\355\320\272\367\030\257y\365;W\347\335F+\177\374\273q\334\374\343\307|\345\001|\240\273\004\344P\250L\266JH\023\260\375\3259Z\337\004\t\257\t\377\332\026F\202\024\nTR\203iE%\257|aO\322:\021\204\251\2343\336G\222>\027\341\\2\320\2551\023\314\366\007\n\024\027\013*\f}\315D\024\356FW=\346\263\036U\f\351`({\272$\323\321\227\020\032N\323Q\242\210\363Q\274\241'$3\360wfT\201\255\013a{i)\272\251\030\323\324C\263Z\273PL\\\002f.\tG\314\3674gU5[\036\310\22265\212\013Z\005\332\347A\036x}|rd\352c\376\277\365\036\276\\\016\275J\f\306\375q@\234\004\030\350\033t\266\353\217\033\250@G\357\276=>?}\367\366\350\335\305gn\222M\240oq\345\247\371e\230\336pK\200$\3347\035\210'\377\352\271\3039\017i\244\032\363\216\247\350\222\035avS\217c\333\334\366<\343\326\311w\330\331\220J\313\020\225\3413Ce\216\f\3310sc\022\226\374\357\005\324&\217\202\253\321\346\004\244\347q\267\365\244\262R\223e\231#/\235faw\246\211\272\327 \314Y\305\017\352\026\205\275\374i\037m\220/~\330C\326\372\311\357\342S9\323\260\305\370\212\333\201G\301\220\223\342F\037\316\316O\277\377\353o\374\t'\241\370\007\254\244\321\301\177\372\315\277\326\034\276+\031ot\272\003z6\203m1\306]d\321\267\034\327\225\311\360'\315\245j2h\342\267\302\3531L\222M\001\357\n\024\030b}u\031\017\214\312\212\fA\016NN~S*\300E\226\027v1\261\261<\344\351\007\272)\275;\225\331\354\223\321\023W)\230*\t\006\241\265\323 N\254Z\347\212\226\352\013/\021\027\275\277\350p%\323\230\n^\230\234\2148A5\274\205A\260\305\f`\256\257A9\n\023\3611\006\021\217\b\344h\231U\037\251\300\031\217()\276\n\274\206\246\f\315I@#-PEV\205f\207\312A\302*\003F\f8~\2244P\023\244a#\2472W\006\033.\204%\326U\354#|\200?]W\351\3702\\R\034\024\027\002\313Vi\231\260r+nV\212`,\024\214\364\375\260\232\020\355&\316\335\221\177L^\266@1\\^\256{\373\371\310\307\"\300v\036.L\203\334\346\361\035K\036`I\336\247\3063\362\233\307\fg\241\317d\252Q\215\305Au$! 6\256pk\003\205\267\316\304\027Mt\356L\003\311N\360\030F\233\030\021\324\035\317\314\223\254\020\236#\353\233\n\272\234\206\302\366\301<X\367\310\310Y0\370Zd\\\031\304\025\033\325\303Xi\344G`(x\212\212\002I\"\252\0173\205+\202CC\320\025\003E\360\321p8\334\201\343\242\nu\032\031`\231FZ\317)H\2633\222\310\255\244}\2431\215\2208$\r\271aw\027K\\\030o'\204\317\305\351\026\334\265[\323-\220E$\303]\\%\211\310i\274#\367\242\316\336\336f'\354\215\245K\024\021 \367\3666\360!\316\277\206o3@\f}\307.\351\020\366\356C\277\177\362\341\253\203\303o\216\336\275\212\366\235\022\255/|-\375\241\372\326\216\326\206u,\360\253D\225\262\266\364\302k\337\026}6\206\241\"T*\201CU\337\231\222h\326\213\360B\214\340P\245)5nI\322\203@d\031\234\"NR\r\246\270\270\240\206\362\361H/\221F\217U\364:}$\f$\305\214\214\002M\325\005\303\002\267 \261\213N\004\027\031\347b\3217\371j\255\223{Gx\205q(\303\225[f\272|\246\242U\\w\354\254{m\017\b\223\224U5\356FW\371\254\036\003\217^U\0373/#\036L\327\021\375\026\306I\260\212\277\033\345\025\374\023\214\374\234\336.g\025\375\276\032\302f\345)\341ab\265U\034\364\213p\027\316\333b|\t/\233\251\377\347\311\351\327\257\216\317\243\375&\316v\200\373\202\354\327,{\355\032\350\316\272u\243x}~\255:\232H\326\240\235@k3P\210\215fC8\227\177\033\027WU\300\257\305<n\006\350\032\004%\266\347x'\360\317\221\224\024QX9Ed\260P\324\313\311\346\310F\321*\260\312uz\267\326\213^\025h+\245N\237\240*5X\311\004\253<\300Z,\257\377MB\3278\025\234\366\242\357\250\273*\021oP\300\037\330\230*P\226\t\274\364\315\321_as\320\006b\320\371\271\033\303\250Yi\355Q\275Eg3\210\003\256\346\005\273\360\360s\253.\204\317\251\330}\007z\203C\025\311\033Lj)F\272&\\\030:\210\276\216\304\365\356\f\240\202\032S2\276\377%5\235:\201S/Q\001\204\001\021H\204]k\274yy\352)5\214SJCpL\n\253 \025u\367;\354\341t\235\224\037\305\321rk\t\3155Uc\0378\374\226\270\204\232X\351\026\354i'\332.ah\244t\322\276*\3602\241\037rs\332n\364\256\337\017@\374\340\361\202\307`\037YS\205?/N\017OO\340/G\257\217\277\267\326,\203\3416\200B\250g\321\363\256\253=s\001[\b~]:q}f\357yU\317\t<2\273s\261\216]I\307#\233\"R\313q\310I\256v.5\267.\342{\344\352\17729\2700\244K0\377@\207ST\034\276[\023\247s\032\334*\356\"\325\227\004\274\220\2222\317Uty\324@\024n)2\250\301\330\021\233k\022\002\210N@YG\350&\253\366\032\366*P*\210\370$x-\370\037\312<\343\364\0161\004.Hn\260\277\201\215\031I\017\232\372\236^\334\003\361\2455-\345j\336\247\321c.4\260\237\366\212\374\261Z\264\332Y4\006z2\3766\313n\022B\353Ap\237\230_j\215\221<i\220\2449\312\356S\006\331m\215q\375\244Ab\265k>\373\354\350\373\343\213\350\360\364\225=`\027d]\023\007\300\205\225\003\017\302\233\266\231:'\305\242\013\262R\344\236\254d w\314\\\343\326]\016j\033\245\320J\371\225\311\325\241\203\211m7\222\222{\304\231as\306\270Bl\226\332\306\f,\260<Ij\f\371\023>.\303\362d\265\316\307-G\333\324B\341\006\273\023\243\213\240\303\353\230J\006Le{^4\024\272\200\265i\2060\337\331\222\364\206$\033s,C\212|\262_\034\357\322\266q&\300\332\307\224\2247\342SQ\335\203\266|G\352\001\372\023\005\021\337\276\271\243\325\023\006w\037%\207:i\325_n#)\212\234'7uV\022\330L\374Y \003\333|TQ\370\244\271gz7\035g\303\fs\037\r\2728\356\032\321\213\2728\005\200\214\255\332\241\367\346\250 \0022\334.\320m\220 \002(Al%9\303.\351\016\204\001\210,\354\312\256\350\375\352m\020\364\034W\272\260\201$\256\271\202\240[\321~\242\365\221\224\364\211P\265\342\256\317Z_1\237\021\020y\347;n\252\000\177\b\2773H\037\361\225\347m~q\262\020\350;\346\311\027\342\263O\021\331I\034B`a\215e\305\362\023J\267#\257;Q\177\250\263\007S\300\365o\276\224\317\202Lfk\030AZ3\303\205<\026\377\bk\320\b\002T\377\255o\370\3105|\2559F\007\222lV2,\233UL\265\305+/\270\304\272\207^\364\266\360:\344\024\227\265 5b\365\030S\007T\364+\321\303\354\200\304\370zS\242\b \017U>\027\254\324\322as\303\320\201\2265\255\tP\024\t\361\035\265N\271MH\270\030l*\353\211\323\215B\215\307/\302\245,\366\204\003Z\\\216\307\300\002r\225u\311Im\204'\247\204Q`\0021\004>\013\245\3141~\276\243T[\214Yg=\233v=\267\304)g\007\375\276\362\311\241\317\022\222\352B\210\313\002J\347[j2F+5s\223e\335+\206s\f/\367\266AD\306v\254\031\036\215\241j=\036r\311Jd&\3146\225\375\344\356\270\233\242\034s&\262\035X\364\267\274\252\356\257Y\364\267\201E\357\230o\361\247\266\266\236K\311>\210\004\372\226\375\230|\215W\f\017\306\\\237\023px\330\303\353|j\327.\013\314\"\034\017=U,}<\341\247\016Jt.\335b\035\301\234\254[\235\206\363\235g&6\260\276\245\311~\007$\243\307\351\204{D\247\b\356l\303d\f\362tY&\324,o\234\334\007\320\354%J\313.88\237Wi\216\336&R\023\304\255\201\216\021\334\321\342\322\204I\345\253\036\334#F\242\352v\001w\270I\305\346sC7\263\023h\3261\240\254C:\025&\232\272 Un\224\026\221\371\236\340\322\321\0367Y\032\237\241\254\223\246`\275\350\224BK\215\336\235l\331%68\337d\334\227\316\016\353\2544Sw]\304\254E\354\326\260l\032\235\037]\234SR\032\n\000\317\036K\3125\203)-\322\314\352'V@p\203\000\263\337\374O}\317\024A1\301m\366I\263u\301\326\226\315\335\236\342\216\340\305g\252}{\222\210\253\245\375\352\371\300\207\270\206\241(CW\261\251\277\022\305@k\257\03478}\321\225\240\334\327jg#\320$9\031\200P\025-O #\270l\237\366\213\364\316\n\355\220\370\022csH1\337\342\330b\031\363\035aX\b\315\232\222\205\341-8[\334\272c\330\257\301ab\177f\236\374\336\332\rpD\324\2778=\327\306\221\376\375Li\232\370\204A\323\355\372\340\244\f\\\212\343\232\366P\316WY\002\234#\322\211\254\355[\201I\322\266bz.\235\227\370\230\235\362\371e\\ \344#A\b\302\256dR\024\246%\003\036/\362!:\265m\343X\302\313\"\215\311\214?\246T`n\253&I\330\t\307w\206^W\316\242\324\346Wrq\252\021a\365o\347\326?;=\277\210\314\245O_\246\037\265\016\020\326[R\034\312\326\326{A6\261\025\352\326\020pd\021r\260`\277\252\2553\024\347\032\3353\363\200\344\255\322\273\275\031\340\f\264\260\317\217\372\027L1\374\2337o\2062\223\037z\006\214\341\f\314\226G\307\036\216\037h\350\276\275\355\324h\220\324\024>\241\003N?\350\310G:\240\230\361\201h4\237\334\336q$\005\336S2\3001\243\350\215\351\207\261\262\n]\026\314\024\374\234\035g\3278\211UUp\246\202?\326\364dR\333Z,\267\315\234\376U2\262\025\026\274t\367^\000]+\313g\334\270$)\307\330C\031dH)\350$\267y\250u\236\363\r\271\177\320\3438\264\327t2\222\023lu}tA\233k\242\027\235\245%\265\304\002^\375\017;\032\037\022\f+\343\265I\206E\226\303\306\322O\b\004\316\366]\364\226\373\322\276\\\301R\300|o?\262#|\005\266=\rad3\236e\351\351>\342\021.\365\231\206\fw\206\342\313\340@H\205@\324pbP\221\203\261r\224\264cSq\352\346_\021m\r\036x\233\270I3Ib\2079\321\260\215\271\277\032\263\223\3422i\2230H\b\3177\201\013\336U\376wv\355P\227\b\030d\306\262\262\3074\001f\270Gz\254eL\006\216\224\363\215\347b\022\243M\234\337\333\022\324\036g_\261S\215\373\311\313o\304\255|-N\233Ir\347]\361\223\331D*\237\234/\275\020\017\007\227\366)\266\266\225\242\205Z\322N\026\347\210\na\214'\306o\311\200@\367\\\n\315\352\256\272\032\n\005\231\022\227\203<\307\277R\220R?\314[\246?\223\"\331\343\313\206\221Nx\225\371,ql\374\235\227\342\276\022\367\bf\240\345\330T\260\2253\263\273i\034\231X\336#\325\320n\221\017\b\267~\377M\364\366\325.&\037_\245\345\264\304\202\023\345\341\323o\234\301\266\254WT\256\330LN/\365\206\310\357\021T\353\252+\331\003\f\265D\000\303\002F\316JK\b\206\310\371\310\266\025`\345\375\224|\373Wh\027\004N\324.\013\315C>\367\250\304\372\257\221z\336\212\244\355\356\272^\005\354?%\241\000r\375\243\216\342<\373\314<\213\376$\n! ~\375\2027D\371U\003Ac\003\254\3618\264w^y\331t\246P\217S\303\232\264\250lz\355\036\316g|G\237a\315Vc?U\b\246.\370\241\236u\346\375\303\203y\245\360\304\355\316G6\345\314\300\222\213\253<\373%u\362\326\251\027WCOz\266%\002\343&\031g\"\024\033m8\237m\013\327\336exD9G\020\013\n1\037-m\000\021>\333\021\235K\225c\274y\221\020c\352\337\321\026\323\317\344\332\223\255$\177\036\252\232\"\241\0211\254Lo\263\\\212\362\274\327\237\315qKV|g\036\021/9\317?7'\301i~\242]/\272n\177\033=H\342?I\265\033k\240c\347\245\371\374\270\270\212\\4\337g\314R\257)\264f\255\203<\272p\260\214\354\323/\2057\364\2764\306\352\2747\236o\270\312\352\b3\215\030#n\356\013\314\031\307cD]\035\3633\266[\205}l\253!t/\\\365):~\345<\270m\027\230\214Q\033\270gGU\025\255\342[\016H\367s\346\214w\005\307\344\210\376\3363\314\016\207\006\212\333\302p{{\377\374\331\202g\345\322\254\314U\357\274\367\274q\314\325\022\320jJ9d\321*\302W\375\207:\005Kl\025Q\375\207;\325\027nI&\273\003\031\273 \0376\272\331\3324Z\"\2143\002o7\250\020\263\334\n\r\266\375\004\343n\344v\025Aq/\016(\307}\272\321:\001\325\365\214\215m\263\"\247n\337\276\266e\005\227\334\370\\\027{\210)Ml\221\233F\246\3442/\013v\027\"\210\343j\022.\231\224Z7\3473\242\325`\0260\"\254\247\303\217zZ\314\030\201\267v\fi\221\361\316\316\217.\346\032\376/\230c\336f\025\207\022\341\030\234_\364\317\242\303~\3727I\360w\004\343\213g\341\247\373\342\327;\246\236^\260\017\215\227\236\313aP\237?\273\277pj$\t\307\215]}\361\302\272i\256g\371G\243,J\247\001\335b\347\215\227z0\034/\250I\345\355\212\177B\034\217\022\016\005\351\332\310\253~\271an_\001%\376HyE\302y\23268\315r\364@\330G\234\0216\033\227@[\335`$\036\347qf\240>\206$'\302\264Y\256\336\266\226\013\315\274\264\255\034\217\360\354!\315\226\363\tH\353 DL\321\263\355\b;:B\013\"\330\ff<<\211gc\275\334\225(\323C>\300\365\355H\246\356\300\006\032\227_\033&_\034\200r=p\242\307B\037`\323\353\347\201U-\360\001\276d\376\245\254\020\207Y\214\245\210\t\036\354IL\356\251\265kB\2260\366\353\301yQ\n\322\330\323\036\260\027\310\275\016Bcg&K\227c\346\306\236\026\352\004L\351\357\277\347\243\205\031\"n\370\2248V\242\240\334M\f7\213b|e:N\261M\020\333\270$\035C\331~@J\016\326c\326Z\315MioH\234\240\201\01638x\177\361\346\364\274\037\255#\270\334\305\371\361W\357/\340\237:\322\253$\317@\363\350\327i\016\302\340J\327F9\263\310DE\251H\250\230\254R\214m\362#G'\260\316\241\260^\221\254\205\212\247i\306\321\305\233\203w\337\364\265M\364w\337}\327\216\352\223\215R\245\237}\326?:\212\016N\372\247\372\300e=]\335\\\003\365\373*\255\341/\237}\366\377\003!'6\036kD\003"
	.size	hugehelpgz, 56333

	.type	.L.str.1101,@object     # @.str.1101
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1101:
	.asciz	"1.2.11"
	.size	.L.str.1101, 7

	.type	.L.str.1104,@object     # @.str.1104
.L.str.1104:
	.asciz	"dict"
	.size	.L.str.1104, 5

	.type	get_libcurl_info.possibly_built_in,@object # @get_libcurl_info.possibly_built_in
	.section	.rodata,"a",@progbits
	.p2align	4
get_libcurl_info.possibly_built_in:
	.quad	.L.str.1104
	.quad	512                     # 0x200
	.quad	.L.str.1.1105
	.quad	1024                    # 0x400
	.quad	.L.str.2.1106
	.quad	4                       # 0x4
	.quad	.L.str.3.1107
	.quad	8                       # 0x8
	.quad	.L.str.4.1108
	.quad	33554432                # 0x2000000
	.quad	.L.str.5.1109
	.quad	536870912               # 0x20000000
	.quad	.L.str.6.1110
	.quad	1                       # 0x1
	.quad	.L.str.7.1111
	.quad	2                       # 0x2
	.quad	.L.str.8.1112
	.quad	4096                    # 0x1000
	.quad	.L.str.9.1113
	.quad	8192                    # 0x2000
	.quad	.L.str.10.1114
	.quad	128                     # 0x80
	.quad	.L.str.11.1115
	.quad	256                     # 0x100
	.quad	.L.str.12.1116
	.quad	268435456               # 0x10000000
	.quad	.L.str.13.1117
	.quad	16384                   # 0x4000
	.quad	.L.str.14.1118
	.quad	32768                   # 0x8000
	.quad	.L.str.15.1119
	.quad	524288                  # 0x80000
	.quad	.L.str.16.1120
	.quad	8388608                 # 0x800000
	.quad	.L.str.17.1121
	.quad	262144                  # 0x40000
	.quad	.L.str.18.1122
	.quad	16                      # 0x10
	.quad	.L.str.19.1123
	.quad	32                      # 0x20
	.quad	.L.str.20.1124
	.quad	67108864                # 0x4000000
	.quad	.L.str.21.1125
	.quad	134217728               # 0x8000000
	.quad	.L.str.22.1126
	.quad	65536                   # 0x10000
	.quad	.L.str.23.1127
	.quad	131072                  # 0x20000
	.quad	.L.str.24.1128
	.quad	64                      # 0x40
	.quad	.L.str.25.1129
	.quad	2048                    # 0x800
	.zero	16
	.size	get_libcurl_info.possibly_built_in, 432

	.type	.L.str.1.1105,@object   # @.str.1.1105
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1.1105:
	.asciz	"file"
	.size	.L.str.1.1105, 5

	.type	.L.str.2.1106,@object   # @.str.2.1106
.L.str.2.1106:
	.asciz	"ftp"
	.size	.L.str.2.1106, 4

	.type	.L.str.3.1107,@object   # @.str.3.1107
.L.str.3.1107:
	.asciz	"ftps"
	.size	.L.str.3.1107, 5

	.type	.L.str.4.1108,@object   # @.str.4.1108
.L.str.4.1108:
	.asciz	"gopher"
	.size	.L.str.4.1108, 7

	.type	.L.str.5.1109,@object   # @.str.5.1109
.L.str.5.1109:
	.asciz	"gophers"
	.size	.L.str.5.1109, 8

	.type	.L.str.6.1110,@object   # @.str.6.1110
.L.str.6.1110:
	.asciz	"http"
	.size	.L.str.6.1110, 5

	.type	.L.str.7.1111,@object   # @.str.7.1111
.L.str.7.1111:
	.asciz	"https"
	.size	.L.str.7.1111, 6

	.type	.L.str.8.1112,@object   # @.str.8.1112
.L.str.8.1112:
	.asciz	"imap"
	.size	.L.str.8.1112, 5

	.type	.L.str.9.1113,@object   # @.str.9.1113
.L.str.9.1113:
	.asciz	"imaps"
	.size	.L.str.9.1113, 6

	.type	.L.str.10.1114,@object  # @.str.10.1114
.L.str.10.1114:
	.asciz	"ldap"
	.size	.L.str.10.1114, 5

	.type	.L.str.11.1115,@object  # @.str.11.1115
.L.str.11.1115:
	.asciz	"ldaps"
	.size	.L.str.11.1115, 6

	.type	.L.str.12.1116,@object  # @.str.12.1116
.L.str.12.1116:
	.asciz	"mqtt"
	.size	.L.str.12.1116, 5

	.type	.L.str.13.1117,@object  # @.str.13.1117
.L.str.13.1117:
	.asciz	"pop3"
	.size	.L.str.13.1117, 5

	.type	.L.str.14.1118,@object  # @.str.14.1118
.L.str.14.1118:
	.asciz	"pop3s"
	.size	.L.str.14.1118, 6

	.type	.L.str.15.1119,@object  # @.str.15.1119
.L.str.15.1119:
	.asciz	"rtmp"
	.size	.L.str.15.1119, 5

	.type	.L.str.16.1120,@object  # @.str.16.1120
.L.str.16.1120:
	.asciz	"rtmps"
	.size	.L.str.16.1120, 6

	.type	.L.str.17.1121,@object  # @.str.17.1121
.L.str.17.1121:
	.asciz	"rtsp"
	.size	.L.str.17.1121, 5

	.type	.L.str.18.1122,@object  # @.str.18.1122
.L.str.18.1122:
	.asciz	"scp"
	.size	.L.str.18.1122, 4

	.type	.L.str.19.1123,@object  # @.str.19.1123
.L.str.19.1123:
	.asciz	"sftp"
	.size	.L.str.19.1123, 5

	.type	.L.str.20.1124,@object  # @.str.20.1124
.L.str.20.1124:
	.asciz	"smb"
	.size	.L.str.20.1124, 4

	.type	.L.str.21.1125,@object  # @.str.21.1125
.L.str.21.1125:
	.asciz	"smbs"
	.size	.L.str.21.1125, 5

	.type	.L.str.22.1126,@object  # @.str.22.1126
.L.str.22.1126:
	.asciz	"smtp"
	.size	.L.str.22.1126, 5

	.type	.L.str.23.1127,@object  # @.str.23.1127
.L.str.23.1127:
	.asciz	"smtps"
	.size	.L.str.23.1127, 6

	.type	.L.str.24.1128,@object  # @.str.24.1128
.L.str.24.1128:
	.asciz	"telnet"
	.size	.L.str.24.1128, 7

	.type	.L.str.25.1129,@object  # @.str.25.1129
.L.str.25.1129:
	.asciz	"tftp"
	.size	.L.str.25.1129, 5

	.type	.L.str.1130,@object     # @.str.1130
.L.str.1130:
	.asciz	"error retrieving curl library information\n"
	.size	.L.str.1130, 43

	.type	.L.str.1.1131,@object   # @.str.1.1131
.L.str.1.1131:
	.asciz	"error initializing curl library\n"
	.size	.L.str.1.1131, 33

	.type	.L.str.2.1132,@object   # @.str.2.1132
.L.str.2.1132:
	.asciz	"error initializing curl\n"
	.size	.L.str.2.1132, 25

	.type	.L.str.1148,@object     # @.str.1148
.L.str.1148:
	.zero	1
	.size	.L.str.1148, 1

	.type	.L.str.1.1149,@object   # @.str.1.1149
.L.str.1.1149:
	.asciz	"-q"
	.size	.L.str.1.1149, 3

	.type	.L.str.2.1150,@object   # @.str.2.1150
.L.str.2.1150:
	.asciz	"--disable"
	.size	.L.str.2.1150, 10

	.type	.L.str.4.1151,@object   # @.str.4.1151
.L.str.4.1151:
	.asciz	"Transfer aborted due to critical error in another transfer"
	.size	.L.str.4.1151, 59

	.type	all_added,@object       # @all_added
	.local	all_added
	.comm	all_added,8,8
	.type	.L.str.3.1152,@object   # @.str.3.1152
.L.str.3.1152:
	.asciz	"out of memory\n"
	.size	.L.str.3.1152, 15

	.type	.L.str.232.1153,@object # @.str.232.1153
.L.str.232.1153:
	.asciz	"%s\n"
	.size	.L.str.232.1153, 4

	.type	.L.str.21.1154,@object  # @.str.21.1154
.L.str.21.1154:
	.asciz	"Can't open '%s'!\n"
	.size	.L.str.21.1154, 18

	.type	.L.str.233.1155,@object # @.str.233.1155
.L.str.233.1155:
	.asciz	"CURLOPT_INFILESIZE_LARGE"
	.size	.L.str.233.1155, 25

	.type	.L.str.117.1682,@object # @.str.117.1682
.L.str.117.1682:
	.asciz	"CURLOPT_SSL_VERIFYPEER"
	.size	.L.str.117.1682, 23

	.type	setopt_nv_CURLNONZERODEFAULTS,@object # @setopt_nv_CURLNONZERODEFAULTS
	.section	.rodata,"a",@progbits
	.p2align	4
setopt_nv_CURLNONZERODEFAULTS:
	.quad	.L.str.117.1682
	.quad	1                       # 0x1
	.quad	.L.str.118.1691
	.quad	1                       # 0x1
	.quad	.L.str.119.1692
	.quad	1                       # 0x1
	.quad	.L.str.120.1693
	.quad	1                       # 0x1
	.quad	.L.str.121.1694
	.quad	1                       # 0x1
	.quad	.L.str.122.1695
	.quad	1                       # 0x1
	.quad	.L.str.123.1696
	.quad	1                       # 0x1
	.quad	.L.str.124.1697
	.quad	1                       # 0x1
	.zero	16
	.size	setopt_nv_CURLNONZERODEFAULTS, 144

	.type	.L.str.87.1683,@object  # @.str.87.1683
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.87.1683:
	.asciz	"%ldL"
	.size	.L.str.87.1683, 5

	.type	.L.str.88.1684,@object  # @.str.88.1684
.L.str.88.1684:
	.asciz	"functionpointer"
	.size	.L.str.88.1684, 16

	.type	.L.str.89.1685,@object  # @.str.89.1685
.L.str.89.1685:
	.asciz	"objectpointer"
	.size	.L.str.89.1685, 14

	.type	.L.str.90.1686,@object  # @.str.90.1686
.L.str.90.1686:
	.asciz	"(curl_off_t)%ld"
	.size	.L.str.90.1686, 16

	.type	.L.str.91.1687,@object  # @.str.91.1687
.L.str.91.1687:
	.asciz	"blobpointer"
	.size	.L.str.91.1687, 12

	.type	.L.str.92.1688,@object  # @.str.92.1688
.L.str.92.1688:
	.asciz	"%s set to a %s"
	.size	.L.str.92.1688, 15

	.type	.L.str.93.1689,@object  # @.str.93.1689
.L.str.93.1689:
	.asciz	"curl_easy_setopt(hnd, %s, \"%s\");"
	.size	.L.str.93.1689, 33

	.type	.L.str.94.1690,@object  # @.str.94.1690
.L.str.94.1690:
	.asciz	"curl_easy_setopt(hnd, %s, %s);"
	.size	.L.str.94.1690, 31

	.type	.L.str.125.1671,@object # @.str.125.1671
.L.str.125.1671:
	.asciz	"\\n"
	.size	.L.str.125.1671, 3

	.type	.L.str.126.1672,@object # @.str.126.1672
.L.str.126.1672:
	.asciz	"\\r"
	.size	.L.str.126.1672, 3

	.type	.L.str.127.1673,@object # @.str.127.1673
.L.str.127.1673:
	.asciz	"\\t"
	.size	.L.str.127.1673, 3

	.type	.L.str.128.1674,@object # @.str.128.1674
.L.str.128.1674:
	.asciz	"\\\\"
	.size	.L.str.128.1674, 3

	.type	.L.str.129.1675,@object # @.str.129.1675
.L.str.129.1675:
	.asciz	"\\\""
	.size	.L.str.129.1675, 3

	.type	.L.str.130.1676,@object # @.str.130.1676
.L.str.130.1676:
	.asciz	"\\x%02x"
	.size	.L.str.130.1676, 7

	.type	.L.str.118.1691,@object # @.str.118.1691
.L.str.118.1691:
	.asciz	"CURLOPT_SSL_VERIFYHOST"
	.size	.L.str.118.1691, 23

	.type	.L.str.119.1692,@object # @.str.119.1692
.L.str.119.1692:
	.asciz	"CURLOPT_SSL_ENABLE_NPN"
	.size	.L.str.119.1692, 23

	.type	.L.str.120.1693,@object # @.str.120.1693
.L.str.120.1693:
	.asciz	"CURLOPT_SSL_ENABLE_ALPN"
	.size	.L.str.120.1693, 24

	.type	.L.str.121.1694,@object # @.str.121.1694
.L.str.121.1694:
	.asciz	"CURLOPT_TCP_NODELAY"
	.size	.L.str.121.1694, 20

	.type	.L.str.122.1695,@object # @.str.122.1695
.L.str.122.1695:
	.asciz	"CURLOPT_PROXY_SSL_VERIFYPEER"
	.size	.L.str.122.1695, 29

	.type	.L.str.123.1696,@object # @.str.123.1696
.L.str.123.1696:
	.asciz	"CURLOPT_PROXY_SSL_VERIFYHOST"
	.size	.L.str.123.1696, 29

	.type	.L.str.124.1697,@object # @.str.124.1697
.L.str.124.1697:
	.asciz	"CURLOPT_SOCKS5_AUTH"
	.size	.L.str.124.1697, 20

	.type	.L.str.2.1406,@object   # @.str.2.1406
.L.str.2.1406:
	.asciz	"-"
	.size	.L.str.2.1406, 2

	.type	.L.str.3.1407,@object   # @.str.3.1407
.L.str.3.1407:
	.asciz	"."
	.size	.L.str.3.1407, 2

	.type	.L.str.5.1156,@object   # @.str.5.1156
.L.str.5.1156:
	.asciz	"no URL specified!\n"
	.size	.L.str.5.1156, 19

	.type	.L.str.6.1157,@object   # @.str.6.1157
.L.str.6.1157:
	.asciz	"CURL_CA_BUNDLE"
	.size	.L.str.6.1157, 15

	.type	.L.str.7.1158,@object   # @.str.7.1158
.L.str.7.1158:
	.asciz	"SSL_CERT_DIR"
	.size	.L.str.7.1158, 13

	.type	.L.str.8.1159,@object   # @.str.8.1159
.L.str.8.1159:
	.asciz	"SSL_CERT_FILE"
	.size	.L.str.8.1159, 14

	.type	.L.str.102.1160,@object # @.str.102.1160
.L.str.102.1160:
	.asciz	"SSL_CERT_DIR environment variable"
	.size	.L.str.102.1160, 34

	.type	.L.str.103.1161,@object # @.str.103.1161
.L.str.103.1161:
	.asciz	"--capath"
	.size	.L.str.103.1161, 9

	.type	.L.str.9.1162,@object   # @.str.9.1162
.L.str.9.1162:
	.asciz	"-"
	.size	.L.str.9.1162, 2

	.type	transfersl,@object      # @transfersl
	.local	transfersl
	.comm	transfersl,8,8
	.type	.L.str.10.1163,@object  # @.str.10.1163
.L.str.10.1163:
	.asciz	"wb"
	.size	.L.str.10.1163, 3

	.type	.L.str.11.1164,@object  # @.str.11.1164
.L.str.11.1164:
	.asciz	"ab"
	.size	.L.str.11.1164, 3

	.type	.L.str.12.1165,@object  # @.str.12.1165
.L.str.12.1165:
	.asciz	"Failed to open %s\n"
	.size	.L.str.12.1165, 19

	.type	.L.str.13.1166,@object  # @.str.13.1166
.L.str.13.1166:
	.asciz	"r"
	.size	.L.str.13.1166, 2

	.type	.L.str.14.1167,@object  # @.str.14.1167
.L.str.14.1167:
	.asciz	"If-None-Match: %s"
	.size	.L.str.14.1167, 18

	.type	.L.str.15.1168,@object  # @.str.15.1168
.L.str.15.1168:
	.asciz	"If-None-Match: \"\""
	.size	.L.str.15.1168, 18

	.type	.L.str.16.1169,@object  # @.str.16.1169
.L.str.16.1169:
	.asciz	"Failed to allocate memory for custom etag header\n"
	.size	.L.str.16.1169, 50

	.type	.L.str.17.1170,@object  # @.str.17.1170
.L.str.17.1170:
	.asciz	"Failed to extract a sensible file name from the URL to use for storage!\n"
	.size	.L.str.17.1170, 73

	.type	.L.str.18.1171,@object  # @.str.18.1171
.L.str.18.1171:
	.asciz	"Remote file name has no length!\n"
	.size	.L.str.18.1171, 33

	.type	.L.str.19.1172,@object  # @.str.19.1172
.L.str.19.1172:
	.asciz	"bad output glob!\n"
	.size	.L.str.19.1172, 18

	.type	.L.str.20.1173,@object  # @.str.20.1173
.L.str.20.1173:
	.asciz	"%s/%s"
	.size	.L.str.20.1173, 6

	.type	.L.str.22.1174,@object  # @.str.22.1174
.L.str.22.1174:
	.asciz	"Using --anyauth or --proxy-anyauth with upload from stdin involves a big risk of it not working. Use a temporary file or a fixed auth type instead!\n"
	.size	.L.str.22.1174, 149

	.type	.L.str.23.1175,@object  # @.str.23.1175
.L.str.23.1175:
	.asciz	"."
	.size	.L.str.23.1175, 2

	.type	.L.str.24.1176,@object  # @.str.24.1176
.L.str.24.1176:
	.asciz	"fcntl failed on fd=%d: %s\n"
	.size	.L.str.24.1176, 27

	.type	.L.str.26.1177,@object  # @.str.26.1177
.L.str.26.1177:
	.asciz	"<stdout>"
	.size	.L.str.26.1177, 9

	.type	.L.str.25.1178,@object  # @.str.25.1178
.L.str.25.1178:
	.asciz	"\n[%lu/%lu]: %s --> %s"
	.size	.L.str.25.1178, 22

	.type	.L.str.27.1179,@object  # @.str.27.1179
.L.str.27.1179:
	.asciz	"%s%s"
	.size	.L.str.27.1179, 5

	.type	.L.str.28.1180,@object  # @.str.28.1180
.L.str.28.1180:
	.asciz	"--_curl_--"
	.size	.L.str.28.1180, 11

	.type	.L.str.29.1181,@object  # @.str.29.1181
.L.str.29.1181:
	.asciz	"://"
	.size	.L.str.29.1181, 4

	.type	.L.str.30.1182,@object  # @.str.30.1182
.L.str.30.1182:
	.asciz	"%s%c%s"
	.size	.L.str.30.1182, 7

	.type	.L.str.31.1183,@object  # @.str.31.1183
.L.str.31.1183:
	.asciz	"%s/?%s"
	.size	.L.str.31.1183, 7

	.type	.L.str.32.1184,@object  # @.str.32.1184
.L.str.32.1184:
	.asciz	"CURLOPT_TCP_NODELAY"
	.size	.L.str.32.1184, 20

	.type	.L.str.33.1185,@object  # @.str.33.1185
.L.str.33.1185:
	.asciz	"CURLOPT_TCP_FASTOPEN"
	.size	.L.str.33.1185, 21

	.type	.L.str.34.1186,@object  # @.str.34.1186
.L.str.34.1186:
	.asciz	"CURLOPT_WRITEDATA"
	.size	.L.str.34.1186, 18

	.type	.L.str.35.1187,@object  # @.str.35.1187
.L.str.35.1187:
	.asciz	"CURLOPT_INTERLEAVEDATA"
	.size	.L.str.35.1187, 23

	.type	.L.str.36.1188,@object  # @.str.36.1188
.L.str.36.1188:
	.asciz	"CURLOPT_WRITEFUNCTION"
	.size	.L.str.36.1188, 22

	.type	.L.str.37.1189,@object  # @.str.37.1189
.L.str.37.1189:
	.asciz	"CURLOPT_READDATA"
	.size	.L.str.37.1189, 17

	.type	.L.str.38.1190,@object  # @.str.38.1190
.L.str.38.1190:
	.asciz	"CURLOPT_READFUNCTION"
	.size	.L.str.38.1190, 21

	.type	.L.str.39.1191,@object  # @.str.39.1191
.L.str.39.1191:
	.asciz	"CURLOPT_SEEKDATA"
	.size	.L.str.39.1191, 17

	.type	.L.str.40.1192,@object  # @.str.40.1192
.L.str.40.1192:
	.asciz	"CURLOPT_SEEKFUNCTION"
	.size	.L.str.40.1192, 21

	.type	.L.str.41.1193,@object  # @.str.41.1193
.L.str.41.1193:
	.asciz	"CURLOPT_BUFFERSIZE"
	.size	.L.str.41.1193, 19

	.type	.L.str.42.1194,@object  # @.str.42.1194
.L.str.42.1194:
	.asciz	"CURLOPT_URL"
	.size	.L.str.42.1194, 12

	.type	.L.str.43.1195,@object  # @.str.43.1195
.L.str.43.1195:
	.asciz	"CURLOPT_NOPROGRESS"
	.size	.L.str.43.1195, 19

	.type	.L.str.44.1196,@object  # @.str.44.1196
.L.str.44.1196:
	.asciz	"CURLOPT_NOBODY"
	.size	.L.str.44.1196, 15

	.type	.L.str.45.1197,@object  # @.str.45.1197
.L.str.45.1197:
	.asciz	"CURLOPT_XOAUTH2_BEARER"
	.size	.L.str.45.1197, 23

	.type	.L.str.46.1198,@object  # @.str.46.1198
.L.str.46.1198:
	.asciz	"CURLOPT_PROXY"
	.size	.L.str.46.1198, 14

	.type	.L.str.47.1199,@object  # @.str.47.1199
.L.str.47.1199:
	.asciz	"CURLOPT_PROXYTYPE"
	.size	.L.str.47.1199, 18

	.type	.L.str.48.1200,@object  # @.str.48.1200
.L.str.48.1200:
	.asciz	"CURLOPT_PROXYUSERPWD"
	.size	.L.str.48.1200, 21

	.type	.L.str.49.1201,@object  # @.str.49.1201
.L.str.49.1201:
	.asciz	"CURLOPT_HTTPPROXYTUNNEL"
	.size	.L.str.49.1201, 24

	.type	.L.str.50.1202,@object  # @.str.50.1202
.L.str.50.1202:
	.asciz	"CURLOPT_PRE_PROXY"
	.size	.L.str.50.1202, 18

	.type	.L.str.51.1203,@object  # @.str.51.1203
.L.str.51.1203:
	.asciz	"CURLOPT_PROXYAUTH"
	.size	.L.str.51.1203, 18

	.type	.L.str.52.1204,@object  # @.str.52.1204
.L.str.52.1204:
	.asciz	"CURLOPT_NOPROXY"
	.size	.L.str.52.1204, 16

	.type	.L.str.53.1205,@object  # @.str.53.1205
.L.str.53.1205:
	.asciz	"CURLOPT_SUPPRESS_CONNECT_HEADERS"
	.size	.L.str.53.1205, 33

	.type	.L.str.54.1206,@object  # @.str.54.1206
.L.str.54.1206:
	.asciz	"CURLOPT_FAILONERROR"
	.size	.L.str.54.1206, 20

	.type	.L.str.55.1207,@object  # @.str.55.1207
.L.str.55.1207:
	.asciz	"CURLOPT_REQUEST_TARGET"
	.size	.L.str.55.1207, 23

	.type	.L.str.56.1208,@object  # @.str.56.1208
.L.str.56.1208:
	.asciz	"CURLOPT_UPLOAD"
	.size	.L.str.56.1208, 15

	.type	.L.str.57.1209,@object  # @.str.57.1209
.L.str.57.1209:
	.asciz	"CURLOPT_DIRLISTONLY"
	.size	.L.str.57.1209, 20

	.type	.L.str.58.1210,@object  # @.str.58.1210
.L.str.58.1210:
	.asciz	"CURLOPT_APPEND"
	.size	.L.str.58.1210, 15

	.type	.L.str.59.1211,@object  # @.str.59.1211
.L.str.59.1211:
	.asciz	"CURLOPT_NETRC"
	.size	.L.str.59.1211, 14

	.type	.L.str.60.1212,@object  # @.str.60.1212
.L.str.60.1212:
	.asciz	"CURLOPT_NETRC_FILE"
	.size	.L.str.60.1212, 19

	.type	.L.str.61.1213,@object  # @.str.61.1213
.L.str.61.1213:
	.asciz	"CURLOPT_TRANSFERTEXT"
	.size	.L.str.61.1213, 21

	.type	.L.str.62.1214,@object  # @.str.62.1214
.L.str.62.1214:
	.asciz	"CURLOPT_LOGIN_OPTIONS"
	.size	.L.str.62.1214, 22

	.type	.L.str.63.1215,@object  # @.str.63.1215
.L.str.63.1215:
	.asciz	"CURLOPT_USERPWD"
	.size	.L.str.63.1215, 16

	.type	.L.str.64.1216,@object  # @.str.64.1216
.L.str.64.1216:
	.asciz	"CURLOPT_RANGE"
	.size	.L.str.64.1216, 14

	.type	.L.str.65.1217,@object  # @.str.65.1217
.L.str.65.1217:
	.asciz	"CURLOPT_ERRORBUFFER"
	.size	.L.str.65.1217, 20

	.type	.L.str.66.1218,@object  # @.str.66.1218
.L.str.66.1218:
	.asciz	"CURLOPT_TIMEOUT_MS"
	.size	.L.str.66.1218, 19

	.type	.L.str.67.1219,@object  # @.str.67.1219
.L.str.67.1219:
	.asciz	"CURLOPT_POSTFIELDS"
	.size	.L.str.67.1219, 19

	.type	.L.str.68.1220,@object  # @.str.68.1220
.L.str.68.1220:
	.asciz	"CURLOPT_POSTFIELDSIZE_LARGE"
	.size	.L.str.68.1220, 28

	.type	.L.str.69.1221,@object  # @.str.69.1221
.L.str.69.1221:
	.asciz	"CURLOPT_MIMEPOST"
	.size	.L.str.69.1221, 17

	.type	.L.str.70.1222,@object  # @.str.70.1222
.L.str.70.1222:
	.asciz	"CURLOPT_HTTPAUTH"
	.size	.L.str.70.1222, 17

	.type	.L.str.71.1223,@object  # @.str.71.1223
.L.str.71.1223:
	.asciz	"CURLOPT_HTTPHEADER"
	.size	.L.str.71.1223, 19

	.type	.L.str.72.1224,@object  # @.str.72.1224
.L.str.72.1224:
	.asciz	"CURLOPT_REFERER"
	.size	.L.str.72.1224, 16

	.type	.L.str.73.1225,@object  # @.str.73.1225
.L.str.73.1225:
	.asciz	"CURLOPT_USERAGENT"
	.size	.L.str.73.1225, 18

	.type	.L.str.74.1226,@object  # @.str.74.1226
.L.str.74.1226:
	.asciz	"CURLOPT_FOLLOWLOCATION"
	.size	.L.str.74.1226, 23

	.type	.L.str.75.1227,@object  # @.str.75.1227
.L.str.75.1227:
	.asciz	"CURLOPT_UNRESTRICTED_AUTH"
	.size	.L.str.75.1227, 26

	.type	.L.str.76.1228,@object  # @.str.76.1228
.L.str.76.1228:
	.asciz	"CURLOPT_AUTOREFERER"
	.size	.L.str.76.1228, 20

	.type	.L.str.77.1229,@object  # @.str.77.1229
.L.str.77.1229:
	.asciz	"CURLOPT_PROXYHEADER"
	.size	.L.str.77.1229, 20

	.type	.L.str.78.1230,@object  # @.str.78.1230
.L.str.78.1230:
	.asciz	"CURLOPT_HEADEROPT"
	.size	.L.str.78.1230, 18

	.type	.L.str.79.1231,@object  # @.str.79.1231
.L.str.79.1231:
	.asciz	"CURLOPT_MAXREDIRS"
	.size	.L.str.79.1231, 18

	.type	.L.str.80.1232,@object  # @.str.80.1232
.L.str.80.1232:
	.asciz	"CURLOPT_HTTP_VERSION"
	.size	.L.str.80.1232, 21

	.type	.L.str.81.1233,@object  # @.str.81.1233
.L.str.81.1233:
	.asciz	"CURLOPT_POSTREDIR"
	.size	.L.str.81.1233, 18

	.type	.L.str.82.1234,@object  # @.str.82.1234
.L.str.82.1234:
	.asciz	"CURLOPT_ACCEPT_ENCODING"
	.size	.L.str.82.1234, 24

	.type	.L.str.83.1235,@object  # @.str.83.1235
.L.str.83.1235:
	.asciz	"CURLOPT_TRANSFER_ENCODING"
	.size	.L.str.83.1235, 26

	.type	.L.str.84.1236,@object  # @.str.84.1236
.L.str.84.1236:
	.asciz	"CURLOPT_HTTP09_ALLOWED"
	.size	.L.str.84.1236, 23

	.type	.L.str.85.1237,@object  # @.str.85.1237
.L.str.85.1237:
	.asciz	"HTTP/0.9 is not supported in this build!\n"
	.size	.L.str.85.1237, 42

	.type	.L.str.86.1238,@object  # @.str.86.1238
.L.str.86.1238:
	.asciz	"CURLOPT_FTPPORT"
	.size	.L.str.86.1238, 16

	.type	.L.str.87.1239,@object  # @.str.87.1239
.L.str.87.1239:
	.asciz	"CURLOPT_LOW_SPEED_LIMIT"
	.size	.L.str.87.1239, 24

	.type	.L.str.88.1240,@object  # @.str.88.1240
.L.str.88.1240:
	.asciz	"CURLOPT_LOW_SPEED_TIME"
	.size	.L.str.88.1240, 23

	.type	.L.str.89.1241,@object  # @.str.89.1241
.L.str.89.1241:
	.asciz	"CURLOPT_MAX_SEND_SPEED_LARGE"
	.size	.L.str.89.1241, 29

	.type	.L.str.90.1242,@object  # @.str.90.1242
.L.str.90.1242:
	.asciz	"CURLOPT_MAX_RECV_SPEED_LARGE"
	.size	.L.str.90.1242, 29

	.type	.L.str.91.1243,@object  # @.str.91.1243
.L.str.91.1243:
	.asciz	"CURLOPT_RESUME_FROM_LARGE"
	.size	.L.str.91.1243, 26

	.type	.L.str.92.1244,@object  # @.str.92.1244
.L.str.92.1244:
	.asciz	"CURLOPT_KEYPASSWD"
	.size	.L.str.92.1244, 18

	.type	.L.str.93.1245,@object  # @.str.93.1245
.L.str.93.1245:
	.asciz	"CURLOPT_PROXY_KEYPASSWD"
	.size	.L.str.93.1245, 24

	.type	.L.str.94.1246,@object  # @.str.94.1246
.L.str.94.1246:
	.asciz	"CURLOPT_SSH_PRIVATE_KEYFILE"
	.size	.L.str.94.1246, 28

	.type	.L.str.95.1247,@object  # @.str.95.1247
.L.str.95.1247:
	.asciz	"CURLOPT_SSH_PUBLIC_KEYFILE"
	.size	.L.str.95.1247, 27

	.type	.L.str.96.1248,@object  # @.str.96.1248
.L.str.96.1248:
	.asciz	"CURLOPT_SSH_HOST_PUBLIC_KEY_MD5"
	.size	.L.str.96.1248, 32

	.type	.L.str.97.1249,@object  # @.str.97.1249
.L.str.97.1249:
	.asciz	"CURLOPT_SSH_COMPRESSION"
	.size	.L.str.97.1249, 24

	.type	.L.str.98.1250,@object  # @.str.98.1250
.L.str.98.1250:
	.asciz	"CURLOPT_CAINFO"
	.size	.L.str.98.1250, 15

	.type	.L.str.99.1251,@object  # @.str.99.1251
.L.str.99.1251:
	.asciz	"CURLOPT_PROXY_CAINFO"
	.size	.L.str.99.1251, 21

	.type	.L.str.100.1252,@object # @.str.100.1252
.L.str.100.1252:
	.asciz	"CURLOPT_CAPATH"
	.size	.L.str.100.1252, 15

	.type	.L.str.101.1253,@object # @.str.101.1253
.L.str.101.1253:
	.asciz	"ignoring %s, not supported by libcurl\n"
	.size	.L.str.101.1253, 39

	.type	.L.str.104.1254,@object # @.str.104.1254
.L.str.104.1254:
	.asciz	"CURLOPT_PROXY_CAPATH"
	.size	.L.str.104.1254, 21

	.type	.L.str.105.1255,@object # @.str.105.1255
.L.str.105.1255:
	.asciz	"ignoring --proxy-capath, not supported by libcurl\n"
	.size	.L.str.105.1255, 51

	.type	.L.str.106.1256,@object # @.str.106.1256
.L.str.106.1256:
	.asciz	"CURLOPT_CRLFILE"
	.size	.L.str.106.1256, 16

	.type	.L.str.107.1257,@object # @.str.107.1257
.L.str.107.1257:
	.asciz	"CURLOPT_PROXY_CRLFILE"
	.size	.L.str.107.1257, 22

	.type	.L.str.108.1258,@object # @.str.108.1258
.L.str.108.1258:
	.asciz	"CURLOPT_PINNEDPUBLICKEY"
	.size	.L.str.108.1258, 24

	.type	.L.str.109.1259,@object # @.str.109.1259
.L.str.109.1259:
	.asciz	"CURLOPT_SSL_EC_CURVES"
	.size	.L.str.109.1259, 22

	.type	.L.str.231.1260,@object # @.str.231.1260
.L.str.231.1260:
	.asciz	"pkcs11:"
	.size	.L.str.231.1260, 8

	.type	.L.str.110.1261,@object # @.str.110.1261
.L.str.110.1261:
	.asciz	"ENG"
	.size	.L.str.110.1261, 4

	.type	.L.str.111.1262,@object # @.str.111.1262
.L.str.111.1262:
	.asciz	"CURLOPT_SSLCERT"
	.size	.L.str.111.1262, 16

	.type	.L.str.112.1263,@object # @.str.112.1263
.L.str.112.1263:
	.asciz	"CURLOPT_PROXY_SSLCERT"
	.size	.L.str.112.1263, 22

	.type	.L.str.113.1264,@object # @.str.113.1264
.L.str.113.1264:
	.asciz	"CURLOPT_SSLCERTTYPE"
	.size	.L.str.113.1264, 20

	.type	.L.str.114.1265,@object # @.str.114.1265
.L.str.114.1265:
	.asciz	"CURLOPT_PROXY_SSLCERTTYPE"
	.size	.L.str.114.1265, 26

	.type	.L.str.115.1266,@object # @.str.115.1266
.L.str.115.1266:
	.asciz	"CURLOPT_SSLKEY"
	.size	.L.str.115.1266, 15

	.type	.L.str.116.1267,@object # @.str.116.1267
.L.str.116.1267:
	.asciz	"CURLOPT_PROXY_SSLKEY"
	.size	.L.str.116.1267, 21

	.type	.L.str.117.1268,@object # @.str.117.1268
.L.str.117.1268:
	.asciz	"CURLOPT_SSLKEYTYPE"
	.size	.L.str.117.1268, 19

	.type	.L.str.118.1269,@object # @.str.118.1269
.L.str.118.1269:
	.asciz	"CURLOPT_PROXY_SSLKEYTYPE"
	.size	.L.str.118.1269, 25

	.type	.L.str.119.1270,@object # @.str.119.1270
.L.str.119.1270:
	.asciz	"CURLOPT_AWS_SIGV4"
	.size	.L.str.119.1270, 18

	.type	.L.str.120.1271,@object # @.str.120.1271
.L.str.120.1271:
	.asciz	"CURLOPT_SSL_VERIFYPEER"
	.size	.L.str.120.1271, 23

	.type	.L.str.121.1272,@object # @.str.121.1272
.L.str.121.1272:
	.asciz	"CURLOPT_SSL_VERIFYHOST"
	.size	.L.str.121.1272, 23

	.type	.L.str.122.1273,@object # @.str.122.1273
.L.str.122.1273:
	.asciz	"CURLOPT_DOH_SSL_VERIFYPEER"
	.size	.L.str.122.1273, 27

	.type	.L.str.123.1274,@object # @.str.123.1274
.L.str.123.1274:
	.asciz	"CURLOPT_DOH_SSL_VERIFYHOST"
	.size	.L.str.123.1274, 27

	.type	.L.str.124.1275,@object # @.str.124.1275
.L.str.124.1275:
	.asciz	"CURLOPT_PROXY_SSL_VERIFYPEER"
	.size	.L.str.124.1275, 29

	.type	.L.str.125.1276,@object # @.str.125.1276
.L.str.125.1276:
	.asciz	"CURLOPT_PROXY_SSL_VERIFYHOST"
	.size	.L.str.125.1276, 29

	.type	.L.str.126.1277,@object # @.str.126.1277
.L.str.126.1277:
	.asciz	"CURLOPT_SSL_VERIFYSTATUS"
	.size	.L.str.126.1277, 25

	.type	.L.str.127.1278,@object # @.str.127.1278
.L.str.127.1278:
	.asciz	"CURLOPT_DOH_SSL_VERIFYSTATUS"
	.size	.L.str.127.1278, 29

	.type	.L.str.128.1279,@object # @.str.128.1279
.L.str.128.1279:
	.asciz	"CURLOPT_SSL_FALSESTART"
	.size	.L.str.128.1279, 23

	.type	.L.str.129.1280,@object # @.str.129.1280
.L.str.129.1280:
	.asciz	"CURLOPT_SSLVERSION"
	.size	.L.str.129.1280, 19

	.type	.L.str.130.1281,@object # @.str.130.1281
.L.str.130.1281:
	.asciz	"CURLOPT_PROXY_SSLVERSION"
	.size	.L.str.130.1281, 25

	.type	.L.str.131.1282,@object # @.str.131.1282
.L.str.131.1282:
	.asciz	"CURLOPT_SSL_OPTIONS"
	.size	.L.str.131.1282, 20

	.type	.L.str.132.1283,@object # @.str.132.1283
.L.str.132.1283:
	.asciz	"CURLOPT_PROXY_SSL_OPTIONS"
	.size	.L.str.132.1283, 26

	.type	.L.str.133.1284,@object # @.str.133.1284
.L.str.133.1284:
	.asciz	"CURLOPT_PATH_AS_IS"
	.size	.L.str.133.1284, 19

	.type	.L.str.134.1285,@object # @.str.134.1285
.L.str.134.1285:
	.asciz	"%s/.ssh/known_hosts"
	.size	.L.str.134.1285, 20

	.type	.L.str.135.1286,@object # @.str.135.1286
.L.str.135.1286:
	.asciz	"CURLOPT_SSH_KNOWNHOSTS"
	.size	.L.str.135.1286, 23

	.type	.L.str.136.1287,@object # @.str.136.1287
.L.str.136.1287:
	.asciz	"No home dir, couldn't find known_hosts file!"
	.size	.L.str.136.1287, 45

	.type	.L.str.137.1288,@object # @.str.137.1288
.L.str.137.1288:
	.asciz	"CURLOPT_FILETIME"
	.size	.L.str.137.1288, 17

	.type	.L.str.138.1289,@object # @.str.138.1289
.L.str.138.1289:
	.asciz	"CURLOPT_CRLF"
	.size	.L.str.138.1289, 13

	.type	.L.str.139.1290,@object # @.str.139.1290
.L.str.139.1290:
	.asciz	"CURLOPT_QUOTE"
	.size	.L.str.139.1290, 14

	.type	.L.str.140.1291,@object # @.str.140.1291
.L.str.140.1291:
	.asciz	"CURLOPT_POSTQUOTE"
	.size	.L.str.140.1291, 18

	.type	.L.str.141.1292,@object # @.str.141.1292
.L.str.141.1292:
	.asciz	"CURLOPT_PREQUOTE"
	.size	.L.str.141.1292, 17

	.type	.L.str.142.1293,@object # @.str.142.1293
.L.str.142.1293:
	.asciz	"%s"
	.size	.L.str.142.1293, 3

	.type	.L.str.143.1294,@object # @.str.143.1294
.L.str.143.1294:
	.asciz	";%s"
	.size	.L.str.143.1294, 4

	.type	.L.str.144.1295,@object # @.str.144.1295
.L.str.144.1295:
	.asciz	"CURLOPT_COOKIE"
	.size	.L.str.144.1295, 15

	.type	.L.str.145.1296,@object # @.str.145.1296
.L.str.145.1296:
	.asciz	"CURLOPT_COOKIEFILE"
	.size	.L.str.145.1296, 19

	.type	.L.str.146.1297,@object # @.str.146.1297
.L.str.146.1297:
	.asciz	"CURLOPT_COOKIEJAR"
	.size	.L.str.146.1297, 18

	.type	.L.str.147.1298,@object # @.str.147.1298
.L.str.147.1298:
	.asciz	"CURLOPT_COOKIESESSION"
	.size	.L.str.147.1298, 22

	.type	.L.str.148.1299,@object # @.str.148.1299
.L.str.148.1299:
	.asciz	"CURLOPT_TIMECONDITION"
	.size	.L.str.148.1299, 22

	.type	.L.str.149.1300,@object # @.str.149.1300
.L.str.149.1300:
	.asciz	"CURLOPT_TIMEVALUE_LARGE"
	.size	.L.str.149.1300, 24

	.type	.L.str.150.1301,@object # @.str.150.1301
.L.str.150.1301:
	.asciz	"CURLOPT_CUSTOMREQUEST"
	.size	.L.str.150.1301, 22

	.type	.L.str.151.1302,@object # @.str.151.1302
.L.str.151.1302:
	.asciz	"CURLOPT_STDERR"
	.size	.L.str.151.1302, 15

	.type	.L.str.152.1303,@object # @.str.152.1303
.L.str.152.1303:
	.asciz	"CURLOPT_INTERFACE"
	.size	.L.str.152.1303, 18

	.type	.L.str.153.1304,@object # @.str.153.1304
.L.str.153.1304:
	.asciz	"CURLOPT_KRBLEVEL"
	.size	.L.str.153.1304, 17

	.type	.L.str.154.1305,@object # @.str.154.1305
.L.str.154.1305:
	.asciz	"CURLOPT_XFERINFOFUNCTION"
	.size	.L.str.154.1305, 25

	.type	.L.str.155.1306,@object # @.str.155.1306
.L.str.155.1306:
	.asciz	"CURLOPT_XFERINFODATA"
	.size	.L.str.155.1306, 21

	.type	.L.str.156.1307,@object # @.str.156.1307
.L.str.156.1307:
	.asciz	"CURLOPT_DNS_SERVERS"
	.size	.L.str.156.1307, 20

	.type	.L.str.157.1308,@object # @.str.157.1308
.L.str.157.1308:
	.asciz	"CURLOPT_DNS_INTERFACE"
	.size	.L.str.157.1308, 22

	.type	.L.str.158.1309,@object # @.str.158.1309
.L.str.158.1309:
	.asciz	"CURLOPT_DNS_LOCAL_IP4"
	.size	.L.str.158.1309, 22

	.type	.L.str.159.1310,@object # @.str.159.1310
.L.str.159.1310:
	.asciz	"CURLOPT_DNS_LOCAL_IP6"
	.size	.L.str.159.1310, 22

	.type	.L.str.160.1311,@object # @.str.160.1311
.L.str.160.1311:
	.asciz	"CURLOPT_TELNETOPTIONS"
	.size	.L.str.160.1311, 22

	.type	.L.str.161.1312,@object # @.str.161.1312
.L.str.161.1312:
	.asciz	"CURLOPT_RANDOM_FILE"
	.size	.L.str.161.1312, 20

	.type	.L.str.162.1313,@object # @.str.162.1313
.L.str.162.1313:
	.asciz	"CURLOPT_EGDSOCKET"
	.size	.L.str.162.1313, 18

	.type	.L.str.163.1314,@object # @.str.163.1314
.L.str.163.1314:
	.asciz	"CURLOPT_CONNECTTIMEOUT_MS"
	.size	.L.str.163.1314, 26

	.type	.L.str.164.1315,@object # @.str.164.1315
.L.str.164.1315:
	.asciz	"CURLOPT_DOH_URL"
	.size	.L.str.164.1315, 16

	.type	.L.str.165.1316,@object # @.str.165.1316
.L.str.165.1316:
	.asciz	"CURLOPT_SSL_CIPHER_LIST"
	.size	.L.str.165.1316, 24

	.type	.L.str.166.1317,@object # @.str.166.1317
.L.str.166.1317:
	.asciz	"CURLOPT_PROXY_SSL_CIPHER_LIST"
	.size	.L.str.166.1317, 30

	.type	.L.str.167.1318,@object # @.str.167.1318
.L.str.167.1318:
	.asciz	"CURLOPT_TLS13_CIPHERS"
	.size	.L.str.167.1318, 22

	.type	.L.str.168.1319,@object # @.str.168.1319
.L.str.168.1319:
	.asciz	"CURLOPT_PROXY_TLS13_CIPHERS"
	.size	.L.str.168.1319, 28

	.type	.L.str.169.1320,@object # @.str.169.1320
.L.str.169.1320:
	.asciz	"CURLOPT_FTP_USE_EPSV"
	.size	.L.str.169.1320, 21

	.type	.L.str.170.1321,@object # @.str.170.1321
.L.str.170.1321:
	.asciz	"CURLOPT_FTP_USE_EPRT"
	.size	.L.str.170.1321, 21

	.type	.L.str.171.1322,@object # @.str.171.1322
.L.str.171.1322:
	.asciz	"CURLOPT_DEBUGFUNCTION"
	.size	.L.str.171.1322, 22

	.type	.L.str.172.1323,@object # @.str.172.1323
.L.str.172.1323:
	.asciz	"CURLOPT_DEBUGDATA"
	.size	.L.str.172.1323, 18

	.type	.L.str.173.1324,@object # @.str.173.1324
.L.str.173.1324:
	.asciz	"CURLOPT_VERBOSE"
	.size	.L.str.173.1324, 16

	.type	.L.str.174.1325,@object # @.str.174.1325
.L.str.174.1325:
	.asciz	"CURLOPT_SSLENGINE"
	.size	.L.str.174.1325, 18

	.type	.L.str.175.1326,@object # @.str.175.1326
.L.str.175.1326:
	.asciz	"CURLOPT_FTP_CREATE_MISSING_DIRS"
	.size	.L.str.175.1326, 32

	.type	.L.str.176.1327,@object # @.str.176.1327
.L.str.176.1327:
	.asciz	"CURLOPT_MAXFILESIZE_LARGE"
	.size	.L.str.176.1327, 26

	.type	.L.str.177.1328,@object # @.str.177.1328
.L.str.177.1328:
	.asciz	"CURLOPT_IPRESOLVE"
	.size	.L.str.177.1328, 18

	.type	.L.str.178.1329,@object # @.str.178.1329
.L.str.178.1329:
	.asciz	"CURLOPT_USE_SSL"
	.size	.L.str.178.1329, 16

	.type	.L.str.179.1330,@object # @.str.179.1330
.L.str.179.1330:
	.asciz	"CURLOPT_FTP_SSL_CCC"
	.size	.L.str.179.1330, 20

	.type	.L.str.180.1331,@object # @.str.180.1331
.L.str.180.1331:
	.asciz	"CURLOPT_SOCKS5_GSSAPI_NEC"
	.size	.L.str.180.1331, 26

	.type	.L.str.181.1332,@object # @.str.181.1332
.L.str.181.1332:
	.asciz	"CURLOPT_SOCKS5_AUTH"
	.size	.L.str.181.1332, 20

	.type	.L.str.182.1333,@object # @.str.182.1333
.L.str.182.1333:
	.asciz	"CURLOPT_PROXY_SERVICE_NAME"
	.size	.L.str.182.1333, 27

	.type	.L.str.183.1334,@object # @.str.183.1334
.L.str.183.1334:
	.asciz	"CURLOPT_SERVICE_NAME"
	.size	.L.str.183.1334, 21

	.type	.L.str.184.1335,@object # @.str.184.1335
.L.str.184.1335:
	.asciz	"CURLOPT_FTP_ACCOUNT"
	.size	.L.str.184.1335, 20

	.type	.L.str.185.1336,@object # @.str.185.1336
.L.str.185.1336:
	.asciz	"CURLOPT_IGNORE_CONTENT_LENGTH"
	.size	.L.str.185.1336, 30

	.type	.L.str.186.1337,@object # @.str.186.1337
.L.str.186.1337:
	.asciz	"CURLOPT_FTP_SKIP_PASV_IP"
	.size	.L.str.186.1337, 25

	.type	.L.str.187.1338,@object # @.str.187.1338
.L.str.187.1338:
	.asciz	"CURLOPT_FTP_FILEMETHOD"
	.size	.L.str.187.1338, 23

	.type	.L.str.188.1339,@object # @.str.188.1339
.L.str.188.1339:
	.asciz	"CURLOPT_LOCALPORT"
	.size	.L.str.188.1339, 18

	.type	.L.str.189.1340,@object # @.str.189.1340
.L.str.189.1340:
	.asciz	"CURLOPT_LOCALPORTRANGE"
	.size	.L.str.189.1340, 23

	.type	.L.str.190.1341,@object # @.str.190.1341
.L.str.190.1341:
	.asciz	"CURLOPT_FTP_ALTERNATIVE_TO_USER"
	.size	.L.str.190.1341, 32

	.type	.L.str.191.1342,@object # @.str.191.1342
.L.str.191.1342:
	.asciz	"CURLOPT_SSL_SESSIONID_CACHE"
	.size	.L.str.191.1342, 28

	.type	.L.str.192.1343,@object # @.str.192.1343
.L.str.192.1343:
	.asciz	"CURLOPT_HTTP_CONTENT_DECODING"
	.size	.L.str.192.1343, 30

	.type	.L.str.193.1344,@object # @.str.193.1344
.L.str.193.1344:
	.asciz	"CURLOPT_HTTP_TRANSFER_DECODING"
	.size	.L.str.193.1344, 31

	.type	.L.str.194.1345,@object # @.str.194.1345
.L.str.194.1345:
	.asciz	"CURLOPT_TCP_KEEPALIVE"
	.size	.L.str.194.1345, 22

	.type	.L.str.195.1346,@object # @.str.195.1346
.L.str.195.1346:
	.asciz	"CURLOPT_TCP_KEEPIDLE"
	.size	.L.str.195.1346, 21

	.type	.L.str.196.1347,@object # @.str.196.1347
.L.str.196.1347:
	.asciz	"CURLOPT_TCP_KEEPINTVL"
	.size	.L.str.196.1347, 22

	.type	.L.str.197.1348,@object # @.str.197.1348
.L.str.197.1348:
	.asciz	"CURLOPT_TFTP_BLKSIZE"
	.size	.L.str.197.1348, 21

	.type	.L.str.198.1349,@object # @.str.198.1349
.L.str.198.1349:
	.asciz	"CURLOPT_MAIL_FROM"
	.size	.L.str.198.1349, 18

	.type	.L.str.199.1350,@object # @.str.199.1350
.L.str.199.1350:
	.asciz	"CURLOPT_MAIL_RCPT"
	.size	.L.str.199.1350, 18

	.type	.L.str.200.1351,@object # @.str.200.1351
.L.str.200.1351:
	.asciz	"CURLOPT_MAIL_RCPT_ALLLOWFAILS"
	.size	.L.str.200.1351, 30

	.type	.L.str.201.1352,@object # @.str.201.1352
.L.str.201.1352:
	.asciz	"CURLOPT_FTP_USE_PRET"
	.size	.L.str.201.1352, 21

	.type	.L.str.202.1353,@object # @.str.202.1353
.L.str.202.1353:
	.asciz	"CURLOPT_NEW_FILE_PERMS"
	.size	.L.str.202.1353, 23

	.type	.L.str.203.1354,@object # @.str.203.1354
.L.str.203.1354:
	.asciz	"CURLOPT_PROTOCOLS"
	.size	.L.str.203.1354, 18

	.type	.L.str.204.1355,@object # @.str.204.1355
.L.str.204.1355:
	.asciz	"CURLOPT_REDIR_PROTOCOLS"
	.size	.L.str.204.1355, 24

	.type	.L.str.205.1356,@object # @.str.205.1356
.L.str.205.1356:
	.asciz	"CURLOPT_HEADERFUNCTION"
	.size	.L.str.205.1356, 23

	.type	.L.str.206.1357,@object # @.str.206.1357
.L.str.206.1357:
	.asciz	"CURLOPT_HEADERDATA"
	.size	.L.str.206.1357, 19

	.type	.L.str.207.1358,@object # @.str.207.1358
.L.str.207.1358:
	.asciz	"CURLOPT_RESOLVE"
	.size	.L.str.207.1358, 16

	.type	.L.str.208.1359,@object # @.str.208.1359
.L.str.208.1359:
	.asciz	"CURLOPT_CONNECT_TO"
	.size	.L.str.208.1359, 19

	.type	.L.str.209.1360,@object # @.str.209.1360
.L.str.209.1360:
	.asciz	"CURLOPT_TLSAUTH_USERNAME"
	.size	.L.str.209.1360, 25

	.type	.L.str.210.1361,@object # @.str.210.1361
.L.str.210.1361:
	.asciz	"CURLOPT_TLSAUTH_PASSWORD"
	.size	.L.str.210.1361, 25

	.type	.L.str.211.1362,@object # @.str.211.1362
.L.str.211.1362:
	.asciz	"CURLOPT_TLSAUTH_TYPE"
	.size	.L.str.211.1362, 21

	.type	.L.str.212.1363,@object # @.str.212.1363
.L.str.212.1363:
	.asciz	"CURLOPT_PROXY_TLSAUTH_USERNAME"
	.size	.L.str.212.1363, 31

	.type	.L.str.213.1364,@object # @.str.213.1364
.L.str.213.1364:
	.asciz	"CURLOPT_PROXY_TLSAUTH_PASSWORD"
	.size	.L.str.213.1364, 31

	.type	.L.str.214.1365,@object # @.str.214.1365
.L.str.214.1365:
	.asciz	"CURLOPT_PROXY_TLSAUTH_TYPE"
	.size	.L.str.214.1365, 27

	.type	.L.str.215.1366,@object # @.str.215.1366
.L.str.215.1366:
	.asciz	"CURLOPT_GSSAPI_DELEGATION"
	.size	.L.str.215.1366, 26

	.type	.L.str.216.1367,@object # @.str.216.1367
.L.str.216.1367:
	.asciz	"CURLOPT_MAIL_AUTH"
	.size	.L.str.216.1367, 18

	.type	.L.str.217.1368,@object # @.str.217.1368
.L.str.217.1368:
	.asciz	"CURLOPT_SASL_AUTHZID"
	.size	.L.str.217.1368, 21

	.type	.L.str.218.1369,@object # @.str.218.1369
.L.str.218.1369:
	.asciz	"CURLOPT_SASL_IR"
	.size	.L.str.218.1369, 16

	.type	.L.str.219.1370,@object # @.str.219.1370
.L.str.219.1370:
	.asciz	"CURLOPT_SSL_ENABLE_NPN"
	.size	.L.str.219.1370, 23

	.type	.L.str.220.1371,@object # @.str.220.1371
.L.str.220.1371:
	.asciz	"CURLOPT_SSL_ENABLE_ALPN"
	.size	.L.str.220.1371, 24

	.type	.L.str.221.1372,@object # @.str.221.1372
.L.str.221.1372:
	.asciz	"CURLOPT_ABSTRACT_UNIX_SOCKET"
	.size	.L.str.221.1372, 29

	.type	.L.str.222.1373,@object # @.str.222.1373
.L.str.222.1373:
	.asciz	"CURLOPT_UNIX_SOCKET_PATH"
	.size	.L.str.222.1373, 25

	.type	.L.str.223.1374,@object # @.str.223.1374
.L.str.223.1374:
	.asciz	"CURLOPT_DEFAULT_PROTOCOL"
	.size	.L.str.223.1374, 25

	.type	.L.str.224.1375,@object # @.str.224.1375
.L.str.224.1375:
	.asciz	"CURLOPT_EXPECT_100_TIMEOUT_MS"
	.size	.L.str.224.1375, 30

	.type	.L.str.225.1376,@object # @.str.225.1376
.L.str.225.1376:
	.asciz	"CURLOPT_TFTP_NO_OPTIONS"
	.size	.L.str.225.1376, 24

	.type	.L.str.226.1377,@object # @.str.226.1377
.L.str.226.1377:
	.asciz	"CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS"
	.size	.L.str.226.1377, 34

	.type	.L.str.227.1378,@object # @.str.227.1378
.L.str.227.1378:
	.asciz	"CURLOPT_HAPROXYPROTOCOL"
	.size	.L.str.227.1378, 24

	.type	.L.str.228.1379,@object # @.str.228.1379
.L.str.228.1379:
	.asciz	"CURLOPT_DISALLOW_USERNAME_IN_URL"
	.size	.L.str.228.1379, 33

	.type	.L.str.229.1380,@object # @.str.229.1380
.L.str.229.1380:
	.asciz	"CURLOPT_ALTSVC"
	.size	.L.str.229.1380, 15

	.type	.L.str.230.1381,@object # @.str.230.1381
.L.str.230.1381:
	.asciz	"CURLOPT_HSTS"
	.size	.L.str.230.1381, 13

	.type	.L.str.77.1636,@object  # @.str.77.1636
.L.str.77.1636:
	.asciz	"curl_easy_setopt(hnd, %s, "
	.size	.L.str.77.1636, 27

	.type	.L.str.79.1637,@object  # @.str.79.1637
.L.str.79.1637:
	.asciz	" |"
	.size	.L.str.79.1637, 3

	.type	.L.str.80.1638,@object  # @.str.80.1638
.L.str.80.1638:
	.asciz	");"
	.size	.L.str.80.1638, 3

	.type	.L.str.78.1639,@object  # @.str.78.1639
.L.str.78.1639:
	.asciz	"%s(long)%s%s"
	.size	.L.str.78.1639, 13

	.type	.L.str.81.1640,@object  # @.str.81.1640
.L.str.81.1640:
	.asciz	"%*s"
	.size	.L.str.81.1640, 4

	.type	.L.str.82.1641,@object  # @.str.82.1641
.L.str.82.1641:
	.zero	1
	.size	.L.str.82.1641, 1

	.type	.L.str.83.1642,@object  # @.str.83.1642
.L.str.83.1642:
	.asciz	"%s%ldL);"
	.size	.L.str.83.1642, 9

	.type	.L.str.86.1679,@object  # @.str.86.1679
.L.str.86.1679:
	.asciz	"curl_easy_setopt(hnd, %s, slist%d);"
	.size	.L.str.86.1679, 36

	.type	.L.str.114.1668,@object # @.str.114.1668
.L.str.114.1668:
	.asciz	"struct curl_slist *slist%d;"
	.size	.L.str.114.1668, 28

	.type	.L.str.113.1667,@object # @.str.113.1667
.L.str.113.1667:
	.asciz	"slist%d = NULL;"
	.size	.L.str.113.1667, 16

	.type	.L.str.115.1669,@object # @.str.115.1669
.L.str.115.1669:
	.asciz	"curl_slist_free_all(slist%d);"
	.size	.L.str.115.1669, 30

	.type	.L.str.116.1670,@object # @.str.116.1670
.L.str.116.1670:
	.asciz	"slist%d = curl_slist_append(slist%d, \"%s\");"
	.size	.L.str.116.1670, 44

	.type	.L.str.85.1648,@object  # @.str.85.1648
.L.str.85.1648:
	.asciz	"curl_easy_setopt(hnd, %s, mime%d);"
	.size	.L.str.85.1648, 35

	.type	.L.str.95.1649,@object  # @.str.95.1649
.L.str.95.1649:
	.asciz	"curl_mime *mime%d;"
	.size	.L.str.95.1649, 19

	.type	.L.str.96.1650,@object  # @.str.96.1650
.L.str.96.1650:
	.asciz	"mime%d = NULL;"
	.size	.L.str.96.1650, 15

	.type	.L.str.97.1651,@object  # @.str.97.1651
.L.str.97.1651:
	.asciz	"mime%d = curl_mime_init(hnd);"
	.size	.L.str.97.1651, 30

	.type	.L.str.98.1652,@object  # @.str.98.1652
.L.str.98.1652:
	.asciz	"curl_mime_free(mime%d);"
	.size	.L.str.98.1652, 24

	.type	.L.str.99.1653,@object  # @.str.99.1653
.L.str.99.1653:
	.asciz	"curl_mimepart *part%d;"
	.size	.L.str.99.1653, 23

	.type	.L.str.100.1654,@object # @.str.100.1654
.L.str.100.1654:
	.asciz	"part%d = curl_mime_addpart(mime%d);"
	.size	.L.str.100.1654, 36

	.type	.L.str.101.1655,@object # @.str.101.1655
.L.str.101.1655:
	.asciz	"curl_mime_subparts(part%d, mime%d);"
	.size	.L.str.101.1655, 36

	.type	.L.str.102.1656,@object # @.str.102.1656
.L.str.102.1656:
	.asciz	"curl_mime_data(part%d, \"%s\", CURL_ZERO_TERMINATED);"
	.size	.L.str.102.1656, 52

	.type	.L.str.103.1657,@object # @.str.103.1657
.L.str.103.1657:
	.asciz	"curl_mime_filedata(part%d, \"%s\");"
	.size	.L.str.103.1657, 34

	.type	.L.str.104.1658,@object # @.str.104.1658
.L.str.104.1658:
	.asciz	"curl_mime_filename(part%d, NULL);"
	.size	.L.str.104.1658, 34

	.type	.L.str.105.1659,@object # @.str.105.1659
.L.str.105.1659:
	.asciz	"-"
	.size	.L.str.105.1659, 2

	.type	.L.str.106.1660,@object # @.str.106.1660
.L.str.106.1660:
	.asciz	"curl_mime_data_cb(part%d, -1, (curl_read_callback) fread, \\"
	.size	.L.str.106.1660, 60

	.type	.L.str.107.1661,@object # @.str.107.1661
.L.str.107.1661:
	.asciz	"                  (curl_seek_callback) fseek, NULL, stdin);"
	.size	.L.str.107.1661, 60

	.type	.L.str.108.1662,@object # @.str.108.1662
.L.str.108.1662:
	.asciz	"curl_mime_encoder(part%d, \"%s\");"
	.size	.L.str.108.1662, 33

	.type	.L.str.109.1663,@object # @.str.109.1663
.L.str.109.1663:
	.asciz	"curl_mime_filename(part%d, \"%s\");"
	.size	.L.str.109.1663, 34

	.type	.L.str.110.1664,@object # @.str.110.1664
.L.str.110.1664:
	.asciz	"curl_mime_name(part%d, \"%s\");"
	.size	.L.str.110.1664, 30

	.type	.L.str.111.1665,@object # @.str.111.1665
.L.str.111.1665:
	.asciz	"curl_mime_type(part%d, \"%s\");"
	.size	.L.str.111.1665, 30

	.type	.L.str.112.1666,@object # @.str.112.1666
.L.str.112.1666:
	.asciz	"curl_mime_headers(part%d, slist%d, 1);"
	.size	.L.str.112.1666, 39

	.type	.L.str.84.1645,@object  # @.str.84.1645
.L.str.84.1645:
	.asciz	"%s%luUL);"
	.size	.L.str.84.1645, 10

	.type	.L.str.75.1632,@object  # @.str.75.1632
.L.str.75.1632:
	.asciz	"curl_easy_setopt(hnd, %s, %ldL);"
	.size	.L.str.75.1632, 33

	.type	.L.str.76.1633,@object  # @.str.76.1633
.L.str.76.1633:
	.asciz	"curl_easy_setopt(hnd, %s, (long)%s);"
	.size	.L.str.76.1633, 37

	.type	.L.str.1402,@object     # @.str.1402
.L.str.1402:
	.asciz	"http://"
	.size	.L.str.1402, 8

	.type	.L.str.1.1403,@object   # @.str.1.1403
.L.str.1.1403:
	.asciz	"https://"
	.size	.L.str.1.1403, 9

	.type	.L.str.4.1410,@object   # @.str.4.1410
.L.str.4.1410:
	.asciz	"://"
	.size	.L.str.4.1410, 4

	.type	.L.str.6.1411,@object   # @.str.6.1411
.L.str.6.1411:
	.asciz	"%s/%s"
	.size	.L.str.6.1411, 6

	.type	.L.str.5.1412,@object   # @.str.5.1412
.L.str.5.1412:
	.asciz	"%s%s"
	.size	.L.str.5.1412, 5

	.type	.L.str.6.1727,@object   # @.str.6.1727
.L.str.6.1727:
	.zero	1
	.size	.L.str.6.1727, 1

	.type	.L.str.5.1724,@object   # @.str.5.1724
.L.str.5.1724:
	.asciz	"%0*lu"
	.size	.L.str.5.1724, 6

	.type	.L.str.3.1722,@object   # @.str.3.1722
.L.str.3.1722:
	.asciz	"internal error: invalid pattern type (%d)\n"
	.size	.L.str.3.1722, 43

	.type	.L.str.7.1415,@object   # @.str.7.1415
.L.str.7.1415:
	.zero	1
	.size	.L.str.7.1415, 1

	.type	.L.str.4.1723,@object   # @.str.4.1723
.L.str.4.1723:
	.asciz	"%s"
	.size	.L.str.4.1723, 3

	.type	.L.str.9.1704,@object   # @.str.9.1704
.L.str.9.1704:
	.asciz	"out of memory"
	.size	.L.str.9.1704, 14

	.type	.L.str.10.1705,@object  # @.str.10.1705
.L.str.10.1705:
	.asciz	"unmatched brace"
	.size	.L.str.10.1705, 16

	.type	.L.str.11.1706,@object  # @.str.11.1706
.L.str.11.1706:
	.asciz	"nested brace"
	.size	.L.str.11.1706, 13

	.type	.L.str.12.1707,@object  # @.str.12.1707
.L.str.12.1707:
	.asciz	"empty string within braces"
	.size	.L.str.12.1707, 27

	.type	.L.str.13.1708,@object  # @.str.13.1708
.L.str.13.1708:
	.asciz	"range overflow"
	.size	.L.str.13.1708, 15

	.type	.L.str.14.1709,@object  # @.str.14.1709
.L.str.14.1709:
	.asciz	"unexpected close bracket"
	.size	.L.str.14.1709, 25

	.type	.L.str.15.1710,@object  # @.str.15.1710
.L.str.15.1710:
	.asciz	"%c-%c%c"
	.size	.L.str.15.1710, 8

	.type	.L.str.16.1711,@object  # @.str.16.1711
.L.str.16.1711:
	.asciz	"bad range"
	.size	.L.str.16.1711, 10

	.type	.L.str.17.1712,@object  # @.str.17.1712
.L.str.17.1712:
	.asciz	"bad range specification"
	.size	.L.str.17.1712, 24

	.type	.L.str.7.1713,@object   # @.str.7.1713
.L.str.7.1713:
	.asciz	"unmatched close brace/bracket"
	.size	.L.str.7.1713, 30

	.type	.L.str.8.1714,@object   # @.str.8.1714
.L.str.8.1714:
	.asciz	"too many globs"
	.size	.L.str.8.1714, 15

	.type	.L.str.1715,@object     # @.str.1715
.L.str.1715:
	.asciz	"%s in URL position %zu:\n%s\n%*s^"
	.size	.L.str.1715, 32

	.type	.L.str.1.1716,@object   # @.str.1.1716
.L.str.1.1716:
	.asciz	" "
	.size	.L.str.1.1716, 2

	.type	.L.str.2.1717,@object   # @.str.2.1717
.L.str.2.1717:
	.asciz	"curl: (%d) %s\n"
	.size	.L.str.2.1717, 15

	.type	all_dlalready,@object   # @all_dlalready
	.local	all_dlalready
	.comm	all_dlalready,8,8
	.type	all_ulalready,@object   # @all_ulalready
	.local	all_ulalready
	.comm	all_ulalready,8,8
	.type	all_dltotal,@object     # @all_dltotal
	.local	all_dltotal
	.comm	all_dltotal,8,8
	.type	all_ultotal,@object     # @all_ultotal
	.local	all_ultotal
	.comm	all_ultotal,8,8
	.type	.L.str.234.1382,@object # @.str.234.1382
.L.str.234.1382:
	.asciz	"curl: (%d) %s\n"
	.size	.L.str.234.1382, 15

	.type	.L.str.235.1383,@object # @.str.235.1383
.L.str.235.1383:
	.asciz	"More details here: https://curl.se/docs/sslcerts.html\n\ncurl failed to verify the legitimacy of the server and therefore could not\nestablish a secure connection to it. To learn more about this situation and\nhow to fix it, please visit the web page mentioned above.\n"
	.size	.L.str.235.1383, 265

	.type	.L.str.236.1384,@object # @.str.236.1384
.L.str.236.1384:
	.asciz	"curl: (%d) The requested URL returned error: %ld\n"
	.size	.L.str.236.1384, 50

	.type	.L.str.237.1385,@object # @.str.237.1385
.L.str.237.1385:
	.asciz	"Error setting extended attributes on '%s': %s\n"
	.size	.L.str.237.1385, 47

	.type	.L.str.238.1386,@object # @.str.238.1386
.L.str.238.1386:
	.asciz	"curl: (%d) Failed writing body\n"
	.size	.L.str.238.1386, 32

	.type	post_per_transfer.m,@object # @post_per_transfer.m
	.section	.rodata,"a",@progbits
	.p2align	4
post_per_transfer.m:
	.quad	0
	.quad	.L.str.239.1393
	.quad	.L.str.240.1394
	.quad	.L.str.241.1395
	.quad	.L.str.242.1396
	.quad	.L.str.243.1397
	.size	post_per_transfer.m, 48

	.type	.L.str.245.1387,@object # @.str.245.1387
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.245.1387:
	.asciz	"Problem %s. Will retry in %ld seconds. %ld retries left.\n"
	.size	.L.str.245.1387, 58

	.type	.L.str.246.1388,@object # @.str.246.1388
.L.str.246.1388:
	.asciz	"Throwing away %ld bytes\n"
	.size	.L.str.246.1388, 25

	.type	.L.str.247.1389,@object # @.str.247.1389
.L.str.247.1389:
	.asciz	"curl: (23) Failed to truncate file\n"
	.size	.L.str.247.1389, 36

	.type	.L.str.248.1390,@object # @.str.248.1390
.L.str.248.1390:
	.asciz	"curl: (23) Failed seeking to end of file\n"
	.size	.L.str.248.1390, 42

	.type	.L.str.244.1391,@object # @.str.244.1391
.L.str.244.1391:
	.asciz	"The Retry-After: time would make this command line exceed the maximum allowed time for retries."
	.size	.L.str.244.1391, 96

	.type	.L.str.249.1392,@object # @.str.249.1392
.L.str.249.1392:
	.asciz	"\n"
	.size	.L.str.249.1392, 2

	.type	.L.str.2.1734,@object   # @.str.2.1734
.L.str.2.1734:
	.asciz	"content_type"
	.size	.L.str.2.1734, 13

	.type	variables,@object       # @variables
	.section	.rodata,"a",@progbits
	.p2align	4
variables:
	.quad	.L.str.2.1734
	.long	3                       # 0x3
	.long	1048594                 # 0x100012
	.quad	writeString
	.quad	.L.str.3.1737
	.long	7                       # 0x7
	.long	0                       # 0x0
	.quad	writeString
	.quad	.L.str.4.1738
	.long	8                       # 0x8
	.long	0                       # 0x0
	.quad	writeLong
	.quad	.L.str.5.1739
	.long	4                       # 0x4
	.long	0                       # 0x0
	.quad	writeString
	.quad	.L.str.6.1740
	.long	9                       # 0x9
	.long	1048606                 # 0x10001e
	.quad	writeString
	.quad	.L.str.7.1741
	.long	11                      # 0xb
	.long	2097154                 # 0x200002
	.quad	writeLong
	.quad	.L.str.8.1742
	.long	12                      # 0xc
	.long	2097174                 # 0x200016
	.quad	writeLong
	.quad	.L.str.9.1743
	.long	13                      # 0xd
	.long	2097198                 # 0x20002e
	.quad	writeString
	.quad	.L.str.10.1744
	.long	15                      # 0xf
	.long	0                       # 0x0
	.quad	0
	.quad	.L.str.11.1745
	.long	16                      # 0x10
	.long	1048617                 # 0x100029
	.quad	writeString
	.quad	.L.str.12.1746
	.long	17                      # 0x11
	.long	2097194                 # 0x20002a
	.quad	writeLong
	.quad	.L.str.13.1747
	.long	5                       # 0x5
	.long	1048634                 # 0x10003a
	.quad	writeString
	.quad	.L.str.14.1748
	.long	19                      # 0x13
	.long	2097178                 # 0x20001a
	.quad	writeLong
	.quad	.L.str.15.1749
	.long	20                      # 0x14
	.long	0                       # 0x0
	.quad	writeLong
	.quad	.L.str.16.1750
	.long	26                      # 0x1a
	.long	2097172                 # 0x200014
	.quad	writeLong
	.quad	.L.str.17.1751
	.long	21                      # 0x15
	.long	0                       # 0x0
	.quad	0
	.quad	.L.str.18.1752
	.long	25                      # 0x19
	.long	2097199                 # 0x20002f
	.quad	writeLong
	.quad	.L.str.19.1753
	.long	28                      # 0x1c
	.long	1048607                 # 0x10001f
	.quad	writeString
	.quad	.L.str.20.1754
	.long	29                      # 0x1d
	.long	1048636                 # 0x10003c
	.quad	writeString
	.quad	.L.str.21.1755
	.long	23                      # 0x17
	.long	1048608                 # 0x100020
	.quad	writeString
	.quad	.L.str.22.1756
	.long	24                      # 0x18
	.long	2097192                 # 0x200028
	.quad	writeLong
	.quad	.L.str.23.1757
	.long	11                      # 0xb
	.long	2097154                 # 0x200002
	.quad	writeLong
	.quad	.L.str.24.1758
	.long	31                      # 0x1f
	.long	1048625                 # 0x100031
	.quad	writeString
	.quad	.L.str.25.1759
	.long	32                      # 0x20
	.long	6291464                 # 0x600008
	.quad	writeOffset
	.quad	.L.str.26.1760
	.long	10                      # 0xa
	.long	2097163                 # 0x20000b
	.quad	writeLong
	.quad	.L.str.27.1761
	.long	30                      # 0x1e
	.long	2097164                 # 0x20000c
	.quad	writeLong
	.quad	.L.str.28.1762
	.long	33                      # 0x21
	.long	6291463                 # 0x600007
	.quad	writeOffset
	.quad	.L.str.29.1763
	.long	34                      # 0x22
	.long	6291465                 # 0x600009
	.quad	writeOffset
	.quad	.L.str.30.1764
	.long	35                      # 0x23
	.long	6291466                 # 0x60000a
	.quad	writeOffset
	.quad	.L.str.31.1765
	.long	36                      # 0x24
	.long	2097165                 # 0x20000d
	.quad	writeLong
	.quad	.L.str.32.1766
	.long	38                      # 0x26
	.long	0                       # 0x0
	.quad	0
	.quad	.L.str.33.1767
	.long	39                      # 0x27
	.long	0                       # 0x0
	.quad	0
	.quad	.L.str.34.1768
	.long	1                       # 0x1
	.long	6291512                 # 0x600038
	.quad	writeTime
	.quad	.L.str.35.1769
	.long	2                       # 0x2
	.long	6291508                 # 0x600034
	.quad	writeTime
	.quad	.L.str.36.1770
	.long	18                      # 0x12
	.long	6291507                 # 0x600033
	.quad	writeTime
	.quad	.L.str.37.1771
	.long	22                      # 0x16
	.long	6291509                 # 0x600035
	.quad	writeTime
	.quad	.L.str.38.1772
	.long	27                      # 0x1b
	.long	6291511                 # 0x600037
	.quad	writeTime
	.quad	.L.str.39.1773
	.long	37                      # 0x25
	.long	6291510                 # 0x600036
	.quad	writeTime
	.quad	.L.str.40.1774
	.long	40                      # 0x28
	.long	6291506                 # 0x600032
	.quad	writeTime
	.quad	.L.str.41.1775
	.long	14                      # 0xe
	.long	0                       # 0x0
	.quad	writeString
	.quad	.L.str.42.1776
	.long	6                       # 0x6
	.long	1048577                 # 0x100001
	.quad	writeString
	.quad	.L.str.43.1777
	.long	41                      # 0x29
	.long	0                       # 0x0
	.quad	writeLong
	.zero	24
	.size	variables, 1032

	.type	.L.str.1.1735,@object   # @.str.1.1735
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1.1735:
	.asciz	"curl: unknown --write-out variable: '%s'\n"
	.size	.L.str.1.1735, 42

	.type	.L.str.1736,@object     # @.str.1736
.L.str.1736:
	.asciz	"%{"
	.size	.L.str.1736, 3

	.type	.L.str.8.1803,@object   # @.str.8.1803
.L.str.8.1803:
	.asciz	"{"
	.size	.L.str.8.1803, 2

	.type	.L.str.9.1804,@object   # @.str.9.1804
.L.str.9.1804:
	.asciz	","
	.size	.L.str.9.1804, 2

	.type	.L.str.10.1805,@object  # @.str.10.1805
.L.str.10.1805:
	.asciz	"\"curl_version\":\""
	.size	.L.str.10.1805, 17

	.type	.L.str.11.1806,@object  # @.str.11.1806
.L.str.11.1806:
	.asciz	"\"}"
	.size	.L.str.11.1806, 3

	.type	.L.str.1793,@object     # @.str.1793
.L.str.1793:
	.asciz	"\\\\"
	.size	.L.str.1793, 3

	.type	.L.str.1.1794,@object   # @.str.1.1794
.L.str.1.1794:
	.asciz	"\\\""
	.size	.L.str.1.1794, 3

	.type	.L.str.2.1795,@object   # @.str.2.1795
.L.str.2.1795:
	.asciz	"\\b"
	.size	.L.str.2.1795, 3

	.type	.L.str.3.1796,@object   # @.str.3.1796
.L.str.3.1796:
	.asciz	"\\f"
	.size	.L.str.3.1796, 3

	.type	.L.str.4.1797,@object   # @.str.4.1797
.L.str.4.1797:
	.asciz	"\\n"
	.size	.L.str.4.1797, 3

	.type	.L.str.5.1798,@object   # @.str.5.1798
.L.str.5.1798:
	.asciz	"\\r"
	.size	.L.str.5.1798, 3

	.type	.L.str.6.1799,@object   # @.str.6.1799
.L.str.6.1799:
	.asciz	"\\t"
	.size	.L.str.6.1799, 3

	.type	.L.str.7.1800,@object   # @.str.7.1800
.L.str.7.1800:
	.asciz	"u%04x"
	.size	.L.str.7.1800, 6

	.type	.L.str.3.1737,@object   # @.str.3.1737
.L.str.3.1737:
	.asciz	"errormsg"
	.size	.L.str.3.1737, 9

	.type	.L.str.4.1738,@object   # @.str.4.1738
.L.str.4.1738:
	.asciz	"exitcode"
	.size	.L.str.4.1738, 9

	.type	.L.str.5.1739,@object   # @.str.5.1739
.L.str.5.1739:
	.asciz	"filename_effective"
	.size	.L.str.5.1739, 19

	.type	.L.str.6.1740,@object   # @.str.6.1740
.L.str.6.1740:
	.asciz	"ftp_entry_path"
	.size	.L.str.6.1740, 15

	.type	.L.str.7.1741,@object   # @.str.7.1741
.L.str.7.1741:
	.asciz	"http_code"
	.size	.L.str.7.1741, 10

	.type	.L.str.8.1742,@object   # @.str.8.1742
.L.str.8.1742:
	.asciz	"http_connect"
	.size	.L.str.8.1742, 13

	.type	.L.str.9.1743,@object   # @.str.9.1743
.L.str.9.1743:
	.asciz	"http_version"
	.size	.L.str.9.1743, 13

	.type	.L.str.10.1744,@object  # @.str.10.1744
.L.str.10.1744:
	.asciz	"json"
	.size	.L.str.10.1744, 5

	.type	.L.str.11.1745,@object  # @.str.11.1745
.L.str.11.1745:
	.asciz	"local_ip"
	.size	.L.str.11.1745, 9

	.type	.L.str.12.1746,@object  # @.str.12.1746
.L.str.12.1746:
	.asciz	"local_port"
	.size	.L.str.12.1746, 11

	.type	.L.str.13.1747,@object  # @.str.13.1747
.L.str.13.1747:
	.asciz	"method"
	.size	.L.str.13.1747, 7

	.type	.L.str.14.1748,@object  # @.str.14.1748
.L.str.14.1748:
	.asciz	"num_connects"
	.size	.L.str.14.1748, 13

	.type	.L.str.15.1749,@object  # @.str.15.1749
.L.str.15.1749:
	.asciz	"num_headers"
	.size	.L.str.15.1749, 12

	.type	.L.str.16.1750,@object  # @.str.16.1750
.L.str.16.1750:
	.asciz	"num_redirects"
	.size	.L.str.16.1750, 14

	.type	.L.str.17.1751,@object  # @.str.17.1751
.L.str.17.1751:
	.asciz	"onerror"
	.size	.L.str.17.1751, 8

	.type	.L.str.18.1752,@object  # @.str.18.1752
.L.str.18.1752:
	.asciz	"proxy_ssl_verify_result"
	.size	.L.str.18.1752, 24

	.type	.L.str.19.1753,@object  # @.str.19.1753
.L.str.19.1753:
	.asciz	"redirect_url"
	.size	.L.str.19.1753, 13

	.type	.L.str.20.1754,@object  # @.str.20.1754
.L.str.20.1754:
	.asciz	"referer"
	.size	.L.str.20.1754, 8

	.type	.L.str.21.1755,@object  # @.str.21.1755
.L.str.21.1755:
	.asciz	"remote_ip"
	.size	.L.str.21.1755, 10

	.type	.L.str.22.1756,@object  # @.str.22.1756
.L.str.22.1756:
	.asciz	"remote_port"
	.size	.L.str.22.1756, 12

	.type	.L.str.23.1757,@object  # @.str.23.1757
.L.str.23.1757:
	.asciz	"response_code"
	.size	.L.str.23.1757, 14

	.type	.L.str.24.1758,@object  # @.str.24.1758
.L.str.24.1758:
	.asciz	"scheme"
	.size	.L.str.24.1758, 7

	.type	.L.str.25.1759,@object  # @.str.25.1759
.L.str.25.1759:
	.asciz	"size_download"
	.size	.L.str.25.1759, 14

	.type	.L.str.26.1760,@object  # @.str.26.1760
.L.str.26.1760:
	.asciz	"size_header"
	.size	.L.str.26.1760, 12

	.type	.L.str.27.1761,@object  # @.str.27.1761
.L.str.27.1761:
	.asciz	"size_request"
	.size	.L.str.27.1761, 13

	.type	.L.str.28.1762,@object  # @.str.28.1762
.L.str.28.1762:
	.asciz	"size_upload"
	.size	.L.str.28.1762, 12

	.type	.L.str.29.1763,@object  # @.str.29.1763
.L.str.29.1763:
	.asciz	"speed_download"
	.size	.L.str.29.1763, 15

	.type	.L.str.30.1764,@object  # @.str.30.1764
.L.str.30.1764:
	.asciz	"speed_upload"
	.size	.L.str.30.1764, 13

	.type	.L.str.31.1765,@object  # @.str.31.1765
.L.str.31.1765:
	.asciz	"ssl_verify_result"
	.size	.L.str.31.1765, 18

	.type	.L.str.32.1766,@object  # @.str.32.1766
.L.str.32.1766:
	.asciz	"stderr"
	.size	.L.str.32.1766, 7

	.type	.L.str.33.1767,@object  # @.str.33.1767
.L.str.33.1767:
	.asciz	"stdout"
	.size	.L.str.33.1767, 7

	.type	.L.str.34.1768,@object  # @.str.34.1768
.L.str.34.1768:
	.asciz	"time_appconnect"
	.size	.L.str.34.1768, 16

	.type	.L.str.35.1769,@object  # @.str.35.1769
.L.str.35.1769:
	.asciz	"time_connect"
	.size	.L.str.35.1769, 13

	.type	.L.str.36.1770,@object  # @.str.36.1770
.L.str.36.1770:
	.asciz	"time_namelookup"
	.size	.L.str.36.1770, 16

	.type	.L.str.37.1771,@object  # @.str.37.1771
.L.str.37.1771:
	.asciz	"time_pretransfer"
	.size	.L.str.37.1771, 17

	.type	.L.str.38.1772,@object  # @.str.38.1772
.L.str.38.1772:
	.asciz	"time_redirect"
	.size	.L.str.38.1772, 14

	.type	.L.str.39.1773,@object  # @.str.39.1773
.L.str.39.1773:
	.asciz	"time_starttransfer"
	.size	.L.str.39.1773, 19

	.type	.L.str.40.1774,@object  # @.str.40.1774
.L.str.40.1774:
	.asciz	"time_total"
	.size	.L.str.40.1774, 11

	.type	.L.str.41.1775,@object  # @.str.41.1775
.L.str.41.1775:
	.asciz	"url"
	.size	.L.str.41.1775, 4

	.type	.L.str.42.1776,@object  # @.str.42.1776
.L.str.42.1776:
	.asciz	"url_effective"
	.size	.L.str.42.1776, 14

	.type	.L.str.43.1777,@object  # @.str.43.1777
.L.str.43.1777:
	.asciz	"urlnum"
	.size	.L.str.43.1777, 7

	.type	.L.str.55.1778,@object  # @.str.55.1778
.L.str.55.1778:
	.asciz	"\"%s\":"
	.size	.L.str.55.1778, 6

	.type	.L.str.56.1779,@object  # @.str.56.1779
.L.str.56.1779:
	.asciz	"%lu.%06lu"
	.size	.L.str.56.1779, 10

	.type	.L.str.46.1780,@object  # @.str.46.1780
.L.str.46.1780:
	.asciz	"\"%s\":null"
	.size	.L.str.46.1780, 10

	.type	.L.str.54.1781,@object  # @.str.54.1781
.L.str.54.1781:
	.asciz	"%ld"
	.size	.L.str.54.1781, 4

	.type	.L.str.52.1782,@object  # @.str.52.1782
.L.str.52.1782:
	.asciz	"\"%s\":%ld"
	.size	.L.str.52.1782, 9

	.type	.L.str.53.1783,@object  # @.str.53.1783
.L.str.53.1783:
	.asciz	"%03ld"
	.size	.L.str.53.1783, 6

	.type	http_version,@object    # @http_version
	.section	.rodata,"a",@progbits
	.p2align	4
http_version:
	.quad	.L.str.47.1786
	.quad	.L.str.48.1787
	.quad	.L.str.49.1788
	.quad	.L.str.50.1789
	.quad	.L.str.51.1790
	.size	http_version, 40

	.type	.L.str.44.1784,@object  # @.str.44.1784
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.44.1784:
	.asciz	"\"%s\":\""
	.size	.L.str.44.1784, 7

	.type	.L.str.45.1785,@object  # @.str.45.1785
.L.str.45.1785:
	.asciz	"\""
	.size	.L.str.45.1785, 2

	.type	.L.str.47.1786,@object  # @.str.47.1786
.L.str.47.1786:
	.asciz	"0"
	.size	.L.str.47.1786, 2

	.type	.L.str.48.1787,@object  # @.str.48.1787
.L.str.48.1787:
	.asciz	"1"
	.size	.L.str.48.1787, 2

	.type	.L.str.49.1788,@object  # @.str.49.1788
.L.str.49.1788:
	.asciz	"1.1"
	.size	.L.str.49.1788, 4

	.type	.L.str.50.1789,@object  # @.str.50.1789
.L.str.50.1789:
	.asciz	"2"
	.size	.L.str.50.1789, 2

	.type	.L.str.51.1790,@object  # @.str.51.1790
.L.str.51.1790:
	.asciz	"3"
	.size	.L.str.51.1790, 2

	.type	.L.str.239.1393,@object # @.str.239.1393
.L.str.239.1393:
	.asciz	"(retrying all errors)"
	.size	.L.str.239.1393, 22

	.type	.L.str.240.1394,@object # @.str.240.1394
.L.str.240.1394:
	.asciz	": timeout"
	.size	.L.str.240.1394, 10

	.type	.L.str.241.1395,@object # @.str.241.1395
.L.str.241.1395:
	.asciz	": connection refused"
	.size	.L.str.241.1395, 21

	.type	.L.str.242.1396,@object # @.str.242.1396
.L.str.242.1396:
	.asciz	": HTTP error"
	.size	.L.str.242.1396, 13

	.type	.L.str.243.1397,@object # @.str.243.1397
.L.str.243.1397:
	.asciz	": FTP error"
	.size	.L.str.243.1397, 12

	.type	mappings,@object        # @mappings
	.section	.rodata,"a",@progbits
	.p2align	4
mappings:
	.quad	.L.str.1809
	.long	1048636                 # 0x10003c
	.zero	4
	.quad	.L.str.1.1810
	.long	1048577                 # 0x100001
	.zero	4
	.quad	.L.str.2.1811
	.long	1048594                 # 0x100012
	.zero	4
	.zero	16
	.size	mappings, 64

	.type	.L.str.1809,@object     # @.str.1809
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1809:
	.asciz	"user.xdg.referrer.url"
	.size	.L.str.1809, 22

	.type	.L.str.1.1810,@object   # @.str.1.1810
.L.str.1.1810:
	.asciz	"user.xdg.origin.url"
	.size	.L.str.1.1810, 20

	.type	.L.str.2.1811,@object   # @.str.2.1811
.L.str.2.1811:
	.asciz	"user.mime_type"
	.size	.L.str.2.1811, 15

	.type	progress_meter.stamp.0,@object # @progress_meter.stamp.0
	.local	progress_meter.stamp.0
	.comm	progress_meter.stamp.0,8,8
	.type	progress_meter.stamp.1,@object # @progress_meter.stamp.1
	.local	progress_meter.stamp.1
	.comm	progress_meter.stamp.1,8,8
	.type	progress_meter.header,@object # @progress_meter.header
	.local	progress_meter.header
	.comm	progress_meter.header,1,1
	.type	.L.str.1516,@object     # @.str.1516
.L.str.1516:
	.asciz	"DL% UL%  Dled  Uled  Xfers  Live   Qd Total     Current  Left    Speed\n"
	.size	.L.str.1516, 72

	.type	.L.str.1.1517,@object   # @.str.1.1517
.L.str.1.1517:
	.asciz	"%3ld"
	.size	.L.str.1.1517, 5

	.type	speedindex,@object      # @speedindex
	.local	speedindex
	.comm	speedindex,4,4
	.type	speedstore,@object      # @speedstore
	.local	speedstore
	.comm	speedstore,320,16
	.type	indexwrapped,@object    # @indexwrapped
	.local	indexwrapped
	.comm	indexwrapped,1,1
	.type	.L.str.5.1518,@object   # @.str.5.1518
.L.str.5.1518:
	.asciz	"--:--:--"
	.size	.L.str.5.1518, 9

	.type	.L.str.3.1519,@object   # @.str.3.1519
.L.str.3.1519:
	.asciz	"\n"
	.size	.L.str.3.1519, 2

	.type	.L.str.4.1520,@object   # @.str.4.1520
.L.str.4.1520:
	.zero	1
	.size	.L.str.4.1520, 1

	.type	.L.str.2.1521,@object   # @.str.2.1521
.L.str.2.1521:
	.asciz	"\r%-3s %-3s %s %s %5ld %5ld %5ld %s %s %s %s %5s"
	.size	.L.str.2.1521, 48

	.type	.L.str.9.1522,@object   # @.str.9.1522
.L.str.9.1522:
	.asciz	"%5ld"
	.size	.L.str.9.1522, 5

	.type	.L.str.10.1523,@object  # @.str.10.1523
.L.str.10.1523:
	.asciz	"%4ldk"
	.size	.L.str.10.1523, 6

	.type	.L.str.11.1524,@object  # @.str.11.1524
.L.str.11.1524:
	.asciz	"%2ld.%0ldM"
	.size	.L.str.11.1524, 11

	.type	.L.str.12.1525,@object  # @.str.12.1525
.L.str.12.1525:
	.asciz	"%4ldM"
	.size	.L.str.12.1525, 6

	.type	.L.str.13.1526,@object  # @.str.13.1526
.L.str.13.1526:
	.asciz	"%2ld.%0ldG"
	.size	.L.str.13.1526, 11

	.type	.L.str.14.1527,@object  # @.str.14.1527
.L.str.14.1527:
	.asciz	"%4ldG"
	.size	.L.str.14.1527, 6

	.type	.L.str.15.1528,@object  # @.str.15.1528
.L.str.15.1528:
	.asciz	"%4ldT"
	.size	.L.str.15.1528, 6

	.type	.L.str.16.1529,@object  # @.str.16.1529
.L.str.16.1529:
	.asciz	"%4ldP"
	.size	.L.str.16.1529, 6

	.type	.L.str.6.1530,@object   # @.str.6.1530
.L.str.6.1530:
	.asciz	"%2ld:%02ld:%02ld"
	.size	.L.str.6.1530, 17

	.type	.L.str.7.1531,@object   # @.str.7.1531
.L.str.7.1531:
	.asciz	"%3ldd %02ldh"
	.size	.L.str.7.1531, 13

	.type	.L.str.8.1532,@object   # @.str.8.1532
.L.str.8.1532:
	.asciz	"%7ldd"
	.size	.L.str.8.1532, 6

	.type	.L.str.36.1486,@object  # @.str.36.1486
.L.str.36.1486:
	.asciz	"host"
	.size	.L.str.36.1486, 5

	.type	.L.str.37.1487,@object  # @.str.37.1487
.L.str.37.1487:
	.asciz	"proxy"
	.size	.L.str.37.1487, 6

	.type	.L.str.47.1488,@object  # @.str.47.1488
.L.str.47.1488:
	.asciz	"curl/7.80.0-DEV"
	.size	.L.str.47.1488, 16

	.type	.L.str.38.1489,@object  # @.str.38.1489
.L.str.38.1489:
	.asciz	"out of memory\n"
	.size	.L.str.38.1489, 15

	.type	.L.str.44.1490,@object  # @.str.44.1490
.L.str.44.1490:
	.asciz	"Enter %s password for user '%s':"
	.size	.L.str.44.1490, 33

	.type	.L.str.45.1491,@object  # @.str.45.1491
.L.str.45.1491:
	.asciz	"Enter %s password for user '%s' on URL #%zu:"
	.size	.L.str.45.1491, 45

	.type	.L.str.46.1492,@object  # @.str.46.1492
.L.str.46.1492:
	.asciz	"%s:%s"
	.size	.L.str.46.1492, 6

	.type	_ctr,@object            # @_ctr
	.bss
	.globl	_ctr
	.p2align	2
_ctr:
	.long	0                       # 0x0
	.size	_ctr, 4

	.type	ptr_map,@object         # @ptr_map
	.globl	ptr_map
	.p2align	3
ptr_map:
	.quad	0
	.size	ptr_map, 8

	.type	_buf,@object            # @_buf
	.comm	_buf,200,16
	.type	PTRTRACKER,@object      # @PTRTRACKER
	.comm	PTRTRACKER,800,16
	.type	.L.str.575,@object      # @.str.575
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.575:
	.asciz	"Allocated Pointer: %d\n"
	.size	.L.str.575, 23

	.type	.L.str.1.576,@object    # @.str.1.576
.L.str.1.576:
	.asciz	"Freeing Pointer: %d\n"
	.size	.L.str.1.576, 21

	.type	.L.str.2.577,@object    # @.str.2.577
.L.str.2.577:
	.asciz	"/home/ian/Desktop/Grad_Research-main/experiment/src/results/results_curl.txt"
	.size	.L.str.2.577, 77

	.type	.L.str.3.578,@object    # @.str.3.578
.L.str.3.578:
	.asciz	"w"
	.size	.L.str.3.578, 2

	.type	.L.str.4.579,@object    # @.str.4.579
.L.str.4.579:
	.asciz	"\n!!!Saved by long jump!!!\n"
	.size	.L.str.4.579, 27

	.type	.L.str.5.580,@object    # @.str.5.580
.L.str.5.580:
	.asciz	"\n___Start_Main___\n"
	.size	.L.str.5.580, 19

	.type	.L.str.6.581,@object    # @.str.6.581
.L.str.6.581:
	.asciz	"%f\n"
	.size	.L.str.6.581, 4

	.type	.L.str.7.582,@object    # @.str.7.582
.L.str.7.582:
	.asciz	"\n---Done with Testing---\n"
	.size	.L.str.7.582, 26

	.type	.L.str.8.583,@object    # @.str.8.583
.L.str.8.583:
	.asciz	"Time to test: %f\n"
	.size	.L.str.8.583, 18

	.type	easysrc_decl_copy,@object # @easysrc_decl_copy
	.bss
	.globl	easysrc_decl_copy
	.p2align	3
easysrc_decl_copy:
	.quad	0
	.size	easysrc_decl_copy, 8

	.type	easysrc_data_copy,@object # @easysrc_data_copy
	.globl	easysrc_data_copy
	.p2align	3
easysrc_data_copy:
	.quad	0
	.size	easysrc_data_copy, 8

	.type	easysrc_code_copy,@object # @easysrc_code_copy
	.globl	easysrc_code_copy
	.p2align	3
easysrc_code_copy:
	.quad	0
	.size	easysrc_code_copy, 8

	.type	easysrc_toohard_copy,@object # @easysrc_toohard_copy
	.globl	easysrc_toohard_copy
	.p2align	3
easysrc_toohard_copy:
	.quad	0
	.size	easysrc_toohard_copy, 8

	.type	easysrc_clean_copy,@object # @easysrc_clean_copy
	.globl	easysrc_clean_copy
	.p2align	3
easysrc_clean_copy:
	.quad	0
	.size	easysrc_clean_copy, 8

	.type	easysrc_mime_count_copy,@object # @easysrc_mime_count_copy
	.globl	easysrc_mime_count_copy
	.p2align	2
easysrc_mime_count_copy:
	.long	0                       # 0x0
	.size	easysrc_mime_count_copy, 4

	.type	easysrc_slist_count_copy,@object # @easysrc_slist_count_copy
	.globl	easysrc_slist_count_copy
	.p2align	2
easysrc_slist_count_copy:
	.long	0                       # 0x0
	.size	easysrc_slist_count_copy, 4

	.type	built_in_protos_copy,@object # @built_in_protos_copy
	.globl	built_in_protos_copy
	.p2align	3
built_in_protos_copy:
	.quad	0                       # 0x0
	.size	built_in_protos_copy, 8

	.type	transfers_copy,@object  # @transfers_copy
	.comm	transfers_copy,8,8
	.type	all_xfers_copy,@object  # @all_xfers_copy
	.globl	all_xfers_copy
	.p2align	3
all_xfers_copy:
	.quad	0                       # 0x0
	.size	all_xfers_copy, 8

	.type	ascii_copy,@object      # @ascii_copy
	.section	.rodata,"a",@progbits
	.p2align	4
ascii_copy:
	.ascii	"         (((((                  \210\020\020\020\020\020\020\020\020\020\020\020\020\020\020\020\004\004\004\004\004\004\004\004\004\004\020\020\020\020\020\020\020AAAAAA\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\020\020\020\020\020\020BBBBBB\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\020\020\020\020 "
	.size	ascii_copy, 128

	.type	sinus_copy,@object      # @sinus_copy
	.p2align	4
sinus_copy:
	.long	515704                  # 0x7de78
	.long	531394                  # 0x81bc2
	.long	547052                  # 0x858ec
	.long	562664                  # 0x895e8
	.long	578214                  # 0x8d2a6
	.long	593687                  # 0x90f17
	.long	609068                  # 0x94b2c
	.long	624341                  # 0x986d5
	.long	639491                  # 0x9c203
	.long	654504                  # 0x9fca8
	.long	669364                  # 0xa36b4
	.long	684057                  # 0xa7019
	.long	698568                  # 0xaa8c8
	.long	712883                  # 0xae0b3
	.long	726989                  # 0xb17cd
	.long	740870                  # 0xb4e06
	.long	754513                  # 0xb8351
	.long	767906                  # 0xbb7a2
	.long	781034                  # 0xbeaea
	.long	793885                  # 0xc1d1d
	.long	806445                  # 0xc4e2d
	.long	818704                  # 0xc7e10
	.long	830647                  # 0xcacb7
	.long	842265                  # 0xcda19
	.long	853545                  # 0xd0629
	.long	864476                  # 0xd30dc
	.long	875047                  # 0xd5a27
	.long	885248                  # 0xd8200
	.long	895069                  # 0xda85d
	.long	904500                  # 0xdcd34
	.long	913532                  # 0xdf07c
	.long	922156                  # 0xe122c
	.long	930363                  # 0xe323b
	.long	938145                  # 0xe50a1
	.long	945495                  # 0xe6d57
	.long	952406                  # 0xe8856
	.long	958870                  # 0xea196
	.long	964881                  # 0xeb911
	.long	970434                  # 0xecec2
	.long	975522                  # 0xee2a2
	.long	980141                  # 0xef4ad
	.long	984286                  # 0xf04de
	.long	987954                  # 0xf1332
	.long	991139                  # 0xf1fa3
	.long	993840                  # 0xf2a30
	.long	996054                  # 0xf32d6
	.long	997778                  # 0xf3992
	.long	999011                  # 0xf3e63
	.long	999752                  # 0xf4148
	.long	999999                  # 0xf423f
	.long	999754                  # 0xf414a
	.long	999014                  # 0xf3e66
	.long	997783                  # 0xf3997
	.long	996060                  # 0xf32dc
	.long	993848                  # 0xf2a38
	.long	991148                  # 0xf1fac
	.long	987964                  # 0xf133c
	.long	984298                  # 0xf04ea
	.long	980154                  # 0xef4ba
	.long	975536                  # 0xee2b0
	.long	970449                  # 0xeced1
	.long	964898                  # 0xeb922
	.long	958888                  # 0xea1a8
	.long	952426                  # 0xe886a
	.long	945516                  # 0xe6d6c
	.long	938168                  # 0xe50b8
	.long	930386                  # 0xe3252
	.long	922180                  # 0xe1244
	.long	913558                  # 0xdf096
	.long	904527                  # 0xdcd4f
	.long	895097                  # 0xda879
	.long	885277                  # 0xd821d
	.long	875077                  # 0xd5a45
	.long	864507                  # 0xd30fb
	.long	853577                  # 0xd0649
	.long	842299                  # 0xcda3b
	.long	830682                  # 0xcacda
	.long	818739                  # 0xc7e33
	.long	806482                  # 0xc4e52
	.long	793922                  # 0xc1d42
	.long	781072                  # 0xbeb10
	.long	767945                  # 0xbb7c9
	.long	754553                  # 0xb8379
	.long	740910                  # 0xb4e2e
	.long	727030                  # 0xb17f6
	.long	712925                  # 0xae0dd
	.long	698610                  # 0xaa8f2
	.long	684100                  # 0xa7044
	.long	669407                  # 0xa36df
	.long	654548                  # 0x9fcd4
	.long	639536                  # 0x9c230
	.long	624386                  # 0x98702
	.long	609113                  # 0x94b59
	.long	593733                  # 0x90f45
	.long	578260                  # 0x8d2d4
	.long	562710                  # 0x89616
	.long	547098                  # 0x8591a
	.long	531440                  # 0x81bf0
	.long	515751                  # 0x7dea7
	.long	500046                  # 0x7a14e
	.long	484341                  # 0x763f5
	.long	468651                  # 0x726ab
	.long	452993                  # 0x6e981
	.long	437381                  # 0x6ac85
	.long	421830                  # 0x66fc6
	.long	406357                  # 0x63355
	.long	390976                  # 0x5f740
	.long	375703                  # 0x5bb97
	.long	360552                  # 0x58068
	.long	345539                  # 0x545c3
	.long	330679                  # 0x50bb7
	.long	315985                  # 0x4d251
	.long	301474                  # 0x499a2
	.long	287158                  # 0x461b6
	.long	273052                  # 0x42a9c
	.long	259170                  # 0x3f462
	.long	245525                  # 0x3bf15
	.long	232132                  # 0x38ac4
	.long	219003                  # 0x3577b
	.long	206152                  # 0x32548
	.long	193590                  # 0x2f436
	.long	181331                  # 0x2c453
	.long	169386                  # 0x295aa
	.long	157768                  # 0x26848
	.long	146487                  # 0x23c37
	.long	135555                  # 0x21183
	.long	124983                  # 0x1e837
	.long	114781                  # 0x1c05d
	.long	104959                  # 0x199ff
	.long	95526                   # 0x17526
	.long	86493                   # 0x151dd
	.long	77868                   # 0x1302c
	.long	69660                   # 0x1101c
	.long	61876                   # 0xf1b4
	.long	54525                   # 0xd4fd
	.long	47613                   # 0xb9fd
	.long	41147                   # 0xa0bb
	.long	35135                   # 0x893f
	.long	29581                   # 0x738d
	.long	24491                   # 0x5fab
	.long	19871                   # 0x4d9f
	.long	15724                   # 0x3d6c
	.long	12056                   # 0x2f18
	.long	8868                    # 0x22a4
	.long	6166                    # 0x1816
	.long	3951                    # 0xf6f
	.long	2225                    # 0x8b1
	.long	990                     # 0x3de
	.long	248                     # 0xf8
	.long	0                       # 0x0
	.long	244                     # 0xf4
	.long	982                     # 0x3d6
	.long	2212                    # 0x8a4
	.long	3933                    # 0xf5d
	.long	6144                    # 0x1800
	.long	8842                    # 0x228a
	.long	12025                   # 0x2ef9
	.long	15690                   # 0x3d4a
	.long	19832                   # 0x4d78
	.long	24448                   # 0x5f80
	.long	29534                   # 0x735e
	.long	35084                   # 0x890c
	.long	41092                   # 0xa084
	.long	47554                   # 0xb9c2
	.long	54462                   # 0xd4be
	.long	61809                   # 0xf171
	.long	69589                   # 0x10fd5
	.long	77794                   # 0x12fe2
	.long	86415                   # 0x1518f
	.long	95445                   # 0x174d5
	.long	104873                  # 0x199a9
	.long	114692                  # 0x1c004
	.long	124891                  # 0x1e7db
	.long	135460                  # 0x21124
	.long	146389                  # 0x23bd5
	.long	157667                  # 0x267e3
	.long	169282                  # 0x29542
	.long	181224                  # 0x2c3e8
	.long	193480                  # 0x2f3c8
	.long	206039                  # 0x324d7
	.long	218888                  # 0x35708
	.long	232015                  # 0x38a4f
	.long	245406                  # 0x3be9e
	.long	259048                  # 0x3f3e8
	.long	272928                  # 0x42a20
	.long	287032                  # 0x46138
	.long	301346                  # 0x49922
	.long	315856                  # 0x4d1d0
	.long	330548                  # 0x50b34
	.long	345407                  # 0x5453f
	.long	360419                  # 0x57fe3
	.long	375568                  # 0x5bb10
	.long	390841                  # 0x5f6b9
	.long	406221                  # 0x632cd
	.long	421693                  # 0x66f3d
	.long	437243                  # 0x6abfb
	.long	452854                  # 0x6e8f6
	.long	468513                  # 0x72621
	.long	484202                  # 0x7636a
	.long	499907                  # 0x7a0c3
	.size	sinus_copy, 800

	.type	srchard_copy,@object    # @srchard_copy
	.p2align	4
srchard_copy:
	.quad	.L.str.12.52
	.quad	.L.str.13.53
	.quad	.L.str.14.54
	.quad	.L.str.1.49
	.quad	0
	.size	srchard_copy, 40

	.type	srchead_copy,@object    # @srchead_copy
	.p2align	4
srchead_copy:
	.quad	.L.str.15.64
	.quad	.L.str.16.65
	.quad	.L.str.17.66
	.quad	.L.str.18.67
	.quad	.L.str.19.68
	.quad	.L.str.1.49
	.quad	.L.str.20.69
	.quad	.L.str.21.70
	.quad	.L.str.22.71
	.quad	.L.str.23.72
	.quad	0
	.size	srchead_copy, 88

	.type	aliases_copy,@object    # @aliases_copy
	.p2align	4
aliases_copy:
	.quad	.L.str.39
	.quad	.L.str.40
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.41.132
	.quad	.L.str.42
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.43
	.quad	.L.str.44
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.45
	.quad	.L.str.46
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.47
	.quad	.L.str.48.133
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.49
	.quad	.L.str.50
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.51
	.quad	.L.str.52
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.53
	.quad	.L.str.54
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.55
	.quad	.L.str.56
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.57
	.quad	.L.str.58
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.59
	.quad	.L.str.60
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.61
	.quad	.L.str.62
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.63
	.quad	.L.str.64
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.65
	.quad	.L.str.66
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.67
	.quad	.L.str.68
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.69
	.quad	.L.str.70
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.71
	.quad	.L.str.72
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.73.134
	.quad	.L.str.74
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.75
	.quad	.L.str.76
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.77.135
	.quad	.L.str.78
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.79
	.quad	.L.str.80
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.81
	.quad	.L.str.82
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.83
	.quad	.L.str.84
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.85
	.quad	.L.str.86
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.87
	.quad	.L.str.88
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.89
	.quad	.L.str.90
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.91
	.quad	.L.str.92
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.93
	.quad	.L.str.94
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.95
	.quad	.L.str.96
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.97
	.quad	.L.str.98
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.99
	.quad	.L.str.100
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.101
	.quad	.L.str.102
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.103
	.quad	.L.str.104.136
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.105
	.quad	.L.str.106
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.107
	.quad	.L.str.108
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.109
	.quad	.L.str.110
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.111
	.quad	.L.str.112
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.111
	.quad	.L.str.113
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.114
	.quad	.L.str.115
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.116
	.quad	.L.str.8.112
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.117
	.quad	.L.str.118
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.119
	.quad	.L.str.120
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.121
	.quad	.L.str.122
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.123
	.quad	.L.str.124
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.123
	.quad	.L.str.125
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.126
	.quad	.L.str.127
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.128
	.quad	.L.str.129
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.130
	.quad	.L.str.131
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.132
	.quad	.L.str.133
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.134
	.quad	.L.str.135
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.136
	.quad	.L.str.137
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.138
	.quad	.L.str.139
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.140
	.quad	.L.str.141
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.142
	.quad	.L.str.143
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.144
	.quad	.L.str.145
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.146
	.quad	.L.str.147
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.148
	.quad	.L.str.149
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.150
	.quad	.L.str.151
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.152
	.quad	.L.str.153
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.154
	.quad	.L.str.155
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.156
	.quad	.L.str.157
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.158
	.quad	.L.str.159
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.160
	.quad	.L.str.161
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.162
	.quad	.L.str.163
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.164
	.quad	.L.str.165
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.166
	.quad	.L.str.167
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.166
	.quad	.L.str.168
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.169
	.quad	.L.str.170
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.171
	.quad	.L.str.172
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.173
	.quad	.L.str.174
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.175
	.quad	.L.str.176
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.177
	.quad	.L.str.178
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.179
	.quad	.L.str.180
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.181
	.quad	.L.str.182
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.183
	.quad	.L.str.184
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.185
	.quad	.L.str.186
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.187
	.quad	.L.str.188
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.189
	.quad	.L.str.190
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.191
	.quad	.L.str.192
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.193
	.quad	.L.str.194
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.195
	.quad	.L.str.196
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.197
	.quad	.L.str.198
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.199
	.quad	.L.str.200
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.201
	.quad	.L.str.202
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.203
	.quad	.L.str.204
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.205
	.quad	.L.str.206
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.207
	.quad	.L.str.208
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.209
	.quad	.L.str.210
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.211
	.quad	.L.str.212
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.213
	.quad	.L.str.214
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.215
	.quad	.L.str.216
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.217
	.quad	.L.str.218
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.219
	.quad	.L.str.220
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.221
	.quad	.L.str.222
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.223
	.quad	.L.str.224
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.225
	.quad	.L.str.226
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.227
	.quad	.L.str.228
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.229
	.quad	.L.str.230
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.229
	.quad	.L.str.231
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.232
	.quad	.L.str.233
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.234
	.quad	.L.str.235
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.236
	.quad	.L.str.237
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.238
	.quad	.L.str.239
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.240
	.quad	.L.str.241
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.242
	.quad	.L.str.243
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.244
	.quad	.L.str.245
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.246
	.quad	.L.str.247
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.248
	.quad	.L.str.249
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.250
	.quad	.L.str.251
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.252
	.quad	.L.str.253
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.254
	.quad	.L.str.255
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.256
	.quad	.L.str.257
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.258
	.quad	.L.str.259
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.260
	.quad	.L.str.261
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.262
	.quad	.L.str.263
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.264
	.quad	.L.str.265
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.266
	.quad	.L.str.267
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.268
	.quad	.L.str.269
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.270
	.quad	.L.str.271
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.272
	.quad	.L.str.273
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.274
	.quad	.L.str.275
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.276
	.quad	.L.str.277
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.278
	.quad	.L.str.279
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.280
	.quad	.L.str.281
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.282
	.quad	.L.str.283
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.284
	.quad	.L.str.285
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.286
	.quad	.L.str.287
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.288
	.quad	.L.str.289
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.290
	.quad	.L.str.291
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.292
	.quad	.L.str.293
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.294
	.quad	.L.str.295
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.296
	.quad	.L.str.297
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.298
	.quad	.L.str.299
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.300
	.quad	.L.str.301
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.302
	.quad	.L.str.303
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.304
	.quad	.L.str.305
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.306
	.quad	.L.str.307
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.308
	.quad	.L.str.309
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.310
	.quad	.L.str.311
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.312
	.quad	.L.str.313
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.314
	.quad	.L.str.315
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.316
	.quad	.L.str.317
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.318
	.quad	.L.str.319
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.320
	.quad	.L.str.321
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.322
	.quad	.L.str.323
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.324
	.quad	.L.str.325
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.326
	.quad	.L.str.327
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.328
	.quad	.L.str.329
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.330
	.quad	.L.str.331
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.332
	.quad	.L.str.333
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.334
	.quad	.L.str.335
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.336
	.quad	.L.str.337
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.338
	.quad	.L.str.339
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.340
	.quad	.L.str.341
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.342
	.quad	.L.str.343
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.344
	.quad	.L.str.345
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.346
	.quad	.L.str.347
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.348
	.quad	.L.str.349
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.350
	.quad	.L.str.351
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.352
	.quad	.L.str.353
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.354
	.quad	.L.str.355
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.356
	.quad	.L.str.357
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.358
	.quad	.L.str.359
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.360
	.quad	.L.str.361
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.362
	.quad	.L.str.363
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.364
	.quad	.L.str.365
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.366
	.quad	.L.str.367
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.368
	.quad	.L.str.369
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.370
	.quad	.L.str.371
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.372
	.quad	.L.str.373
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.374
	.quad	.L.str.375
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.376
	.quad	.L.str.377
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.378
	.quad	.L.str.379
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.380
	.quad	.L.str.381
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.382
	.quad	.L.str.383
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.384
	.quad	.L.str.385
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.386
	.quad	.L.str.387
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.388
	.quad	.L.str.389
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.390
	.quad	.L.str.391
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.392
	.quad	.L.str.393
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.394
	.quad	.L.str.395
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.396
	.quad	.L.str.397
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.398
	.quad	.L.str.399
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.400
	.quad	.L.str.401
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.402
	.quad	.L.str.403
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.404
	.quad	.L.str.405
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.406
	.quad	.L.str.407
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.408
	.quad	.L.str.409
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.410
	.quad	.L.str.411
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.412
	.quad	.L.str.413
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.414
	.quad	.L.str.415
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.416
	.quad	.L.str.417
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.418
	.quad	.L.str.419
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.420
	.quad	.L.str.421
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.422
	.quad	.L.str.423
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.424
	.quad	.L.str.425
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.426
	.quad	.L.str.427
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.428
	.quad	.L.str.429
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.430
	.quad	.L.str.431
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.432
	.quad	.L.str.433
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.434
	.quad	.L.str.435
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.436
	.quad	.L.str.437
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.438
	.quad	.L.str.439
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.440
	.quad	.L.str.441
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.442
	.quad	.L.str.443
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.444
	.quad	.L.str.445
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.446
	.quad	.L.str.447
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.448
	.quad	.L.str.449
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.450
	.quad	.L.str.451
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.452
	.quad	.L.str.453
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.454
	.quad	.L.str.455
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.456
	.quad	.L.str.457
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.458
	.quad	.L.str.459
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.460
	.quad	.L.str.461
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.462
	.quad	.L.str.463
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.464
	.quad	.L.str.465
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.466
	.quad	.L.str.467
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.468
	.quad	.L.str.469
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.470
	.quad	.L.str.471
	.long	0                       # 0x0
	.zero	4
	.quad	.L.str.472
	.quad	.L.str.473
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.474
	.quad	.L.str.475
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.476
	.quad	.L.str.477
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.478
	.quad	.L.str.479
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.480
	.quad	.L.str.481
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.482
	.quad	.L.str.483
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.22.126
	.quad	.L.str.484
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.485
	.quad	.L.str.486
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.487
	.quad	.L.str.488
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.489
	.quad	.L.str.490
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.491
	.quad	.L.str.492
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.493
	.quad	.L.str.494
	.long	3                       # 0x3
	.zero	4
	.quad	.L.str.495
	.quad	.L.str.496
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.497
	.quad	.L.str.498
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.499
	.quad	.L.str.500
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.501
	.quad	.L.str.502
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.6.110
	.quad	.L.str.503
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.504
	.quad	.L.str.505
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.506
	.quad	.L.str.507
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.508
	.quad	.L.str.509
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.510
	.quad	.L.str.511
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.512
	.quad	.L.str.513
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.514
	.quad	.L.str.515
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.516
	.quad	.L.str.517
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.518
	.quad	.L.str.519
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.520
	.quad	.L.str.521
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.522
	.quad	.L.str.523
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.524
	.quad	.L.str.525
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.36
	.quad	.L.str.526
	.long	0                       # 0x0
	.zero	4
	.size	aliases_copy, 5952

	.type	categories_copy,@object # @categories_copy
	.p2align	4
categories_copy:
	.quad	.L.str.502.538
	.quad	.L.str.503.539
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.504.540
	.quad	.L.str.505.541
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.506.542
	.quad	.L.str.507.543
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.508.544
	.quad	.L.str.509.545
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.510.546
	.quad	.L.str.511.547
	.long	32                      # 0x20
	.zero	4
	.quad	.L.str.512.548
	.quad	.L.str.513.549
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.514.550
	.quad	.L.str.515.551
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.516.552
	.quad	.L.str.517.553
	.long	256                     # 0x100
	.zero	4
	.quad	.L.str.518.554
	.quad	.L.str.519.555
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.520.556
	.quad	.L.str.521.557
	.long	2048                    # 0x800
	.zero	4
	.quad	.L.str.522.558
	.quad	.L.str.523.559
	.long	4096                    # 0x1000
	.zero	4
	.quad	.L.str.524.560
	.quad	.L.str.525.561
	.long	8192                    # 0x2000
	.zero	4
	.quad	.L.str.526.562
	.quad	.L.str.527.563
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.528.564
	.quad	.L.str.529.565
	.long	32768                   # 0x8000
	.zero	4
	.quad	.L.str.530.566
	.quad	.L.str.531.567
	.long	65536                   # 0x10000
	.zero	4
	.quad	.L.str.532
	.quad	.L.str.533.568
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.534
	.quad	.L.str.535
	.long	262144                  # 0x40000
	.zero	4
	.quad	.L.str.536
	.quad	.L.str.537
	.long	524288                  # 0x80000
	.zero	4
	.quad	.L.str.538
	.quad	.L.str.539
	.long	1048576                 # 0x100000
	.zero	4
	.quad	.L.str.540
	.quad	.L.str.541
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.542
	.quad	.L.str.543
	.long	4194304                 # 0x400000
	.zero	4
	.quad	.L.str.544
	.quad	.L.str.545
	.long	8388608                 # 0x800000
	.zero	4
	.quad	0
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.size	categories_copy, 552

	.type	helptext_copy,@object   # @helptext_copy
	.p2align	4
helptext_copy:
	.quad	.L.str.19.570
	.quad	.L.str.20.572
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.21.573
	.quad	.L.str.22.574
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.23.575
	.quad	.L.str.24.576
	.long	16514                   # 0x4082
	.zero	4
	.quad	.L.str.25.577
	.quad	.L.str.26.578
	.long	65600                   # 0x10040
	.zero	4
	.quad	.L.str.27.579
	.quad	.L.str.28.580
	.long	130                     # 0x82
	.zero	4
	.quad	.L.str.29.581
	.quad	.L.str.30.582
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.31.583
	.quad	.L.str.32.584
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.33.585
	.quad	.L.str.34.586
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.35.587
	.quad	.L.str.36.588
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.37.589
	.quad	.L.str.38.590
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.39.591
	.quad	.L.str.40.592
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.41.593
	.quad	.L.str.42.594
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.43.595
	.quad	.L.str.44.596
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.45.597
	.quad	.L.str.46.598
	.long	294912                  # 0x48000
	.zero	4
	.quad	.L.str.47.599
	.quad	.L.str.48.600
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.49.601
	.quad	.L.str.50.602
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.51.603
	.quad	.L.str.52.604
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.53.605
	.quad	.L.str.54.606
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.55.607
	.quad	.L.str.56.608
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.57.609
	.quad	.L.str.58.610
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.59.611
	.quad	.L.str.60.612
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.61.613
	.quad	.L.str.62.614
	.long	4292640                 # 0x418020
	.zero	4
	.quad	.L.str.63.615
	.quad	.L.str.64.616
	.long	131136                  # 0x20040
	.zero	4
	.quad	.L.str.65.617
	.quad	.L.str.66.618
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.67.619
	.quad	.L.str.68.620
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.69.621
	.quad	.L.str.70.622
	.long	4203136                 # 0x402280
	.zero	4
	.quad	.L.str.71.623
	.quad	.L.str.72.624
	.long	4202624                 # 0x402080
	.zero	4
	.quad	.L.str.73.625
	.quad	.L.str.74.626
	.long	4202624                 # 0x402080
	.zero	4
	.quad	.L.str.75.627
	.quad	.L.str.76.628
	.long	4202624                 # 0x402080
	.zero	4
	.quad	.L.str.77.629
	.quad	.L.str.78.630
	.long	4202624                 # 0x402080
	.zero	4
	.quad	.L.str.79.631
	.quad	.L.str.80.632
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.81.633
	.quad	.L.str.82.634
	.long	16514                   # 0x4082
	.zero	4
	.quad	.L.str.83.635
	.quad	.L.str.84.636
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.85.637
	.quad	.L.str.86.638
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.87.639
	.quad	.L.str.88.640
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.89.641
	.quad	.L.str.90.642
	.long	136                     # 0x88
	.zero	4
	.quad	.L.str.91.643
	.quad	.L.str.92.644
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.93.645
	.quad	.L.str.94.646
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.95.647
	.quad	.L.str.96.648
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.97.649
	.quad	.L.str.98.650
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.99.651
	.quad	.L.str.100.652
	.long	2097168                 # 0x200010
	.zero	4
	.quad	.L.str.101.653
	.quad	.L.str.102.654
	.long	2097168                 # 0x200010
	.zero	4
	.quad	.L.str.103.655
	.quad	.L.str.104.656
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.105.657
	.quad	.L.str.106.658
	.long	192                     # 0xc0
	.zero	4
	.quad	.L.str.107.659
	.quad	.L.str.108.660
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.109.661
	.quad	.L.str.110.662
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.111.663
	.quad	.L.str.112.664
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.113.665
	.quad	.L.str.114.666
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.115.667
	.quad	.L.str.116.668
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.117.669
	.quad	.L.str.118.670
	.long	640                     # 0x280
	.zero	4
	.quad	.L.str.119.671
	.quad	.L.str.120.672
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.121.673
	.quad	.L.str.122.674
	.long	2176                    # 0x880
	.zero	4
	.quad	.L.str.123.675
	.quad	.L.str.124.676
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.125.677
	.quad	.L.str.126.678
	.long	4194432                 # 0x400080
	.zero	4
	.quad	.L.str.127.679
	.quad	.L.str.126.678
	.long	4194432                 # 0x400080
	.zero	4
	.quad	.L.str.128.680
	.quad	.L.str.129.681
	.long	66                      # 0x42
	.zero	4
	.quad	.L.str.130.682
	.quad	.L.str.131.683
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.132.684
	.quad	.L.str.133.685
	.long	65608                   # 0x10048
	.zero	4
	.quad	.L.str.134.686
	.quad	.L.str.135.687
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.136.688
	.quad	.L.str.137.689
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.138.690
	.quad	.L.str.139.691
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.140.692
	.quad	.L.str.141.693
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.142.694
	.quad	.L.str.143.695
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.144.696
	.quad	.L.str.145.697
	.long	2097216                 # 0x200040
	.zero	4
	.quad	.L.str.146.698
	.quad	.L.str.147.699
	.long	2097216                 # 0x200040
	.zero	4
	.quad	.L.str.148.700
	.quad	.L.str.149.701
	.long	2097216                 # 0x200040
	.zero	4
	.quad	.L.str.150.702
	.quad	.L.str.151.703
	.long	4194432                 # 0x400080
	.zero	4
	.quad	.L.str.152.704
	.quad	.L.str.153.705
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.154.706
	.quad	.L.str.155.707
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.156.708
	.quad	.L.str.157.709
	.long	16512                   # 0x4080
	.zero	4
	.quad	.L.str.158.710
	.quad	.L.str.159.711
	.long	224                     # 0xe0
	.zero	4
	.quad	.L.str.160.712
	.quad	.L.str.161.713
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.162.714
	.quad	.L.str.163.715
	.long	520                     # 0x208
	.zero	4
	.quad	.L.str.164.716
	.quad	.L.str.165.717
	.long	98304                   # 0x18000
	.zero	4
	.quad	.L.str.166.718
	.quad	.L.str.167.719
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.168.720
	.quad	.L.str.169.721
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.170.722
	.quad	.L.str.171.723
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.172.724
	.quad	.L.str.173.725
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.174.726
	.quad	.L.str.175.727
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.176.728
	.quad	.L.str.177.729
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.178.730
	.quad	.L.str.179.731
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.180.732
	.quad	.L.str.181.733
	.long	192                     # 0xc0
	.zero	4
	.quad	.L.str.182.734
	.quad	.L.str.183.735
	.long	8389120                 # 0x800200
	.zero	4
	.quad	.L.str.184.736
	.quad	.L.str.185.737
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.186.738
	.quad	.L.str.187.739
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.188.740
	.quad	.L.str.189.741
	.long	20                      # 0x14
	.zero	4
	.quad	.L.str.190.742
	.quad	.L.str.191.743
	.long	20                      # 0x14
	.zero	4
	.quad	.L.str.192.744
	.quad	.L.str.193.745
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.194.746
	.quad	.L.str.195.747
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.196.748
	.quad	.L.str.197.749
	.long	2359296                 # 0x240000
	.zero	4
	.quad	.L.str.198.750
	.quad	.L.str.199.751
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.200.752
	.quad	.L.str.201.753
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.202.754
	.quad	.L.str.203.755
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.204.756
	.quad	.L.str.205.757
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.206.758
	.quad	.L.str.207.759
	.long	4160                    # 0x1040
	.zero	4
	.quad	.L.str.208.760
	.quad	.L.str.209.761
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.210.762
	.quad	.L.str.211.763
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.212.764
	.quad	.L.str.213.765
	.long	130                     # 0x82
	.zero	4
	.quad	.L.str.214.766
	.quad	.L.str.215.767
	.long	135426                  # 0x21102
	.zero	4
	.quad	.L.str.216.768
	.quad	.L.str.217.769
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.218.770
	.quad	.L.str.219.771
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.220.772
	.quad	.L.str.221.773
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.222.774
	.quad	.L.str.223.775
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.224.776
	.quad	.L.str.225.777
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.226.778
	.quad	.L.str.227.779
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.228.780
	.quad	.L.str.229.781
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.230.782
	.quad	.L.str.231.783
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.232.784
	.quad	.L.str.233.785
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.234.786
	.quad	.L.str.235.787
	.long	130                     # 0x82
	.zero	4
	.quad	.L.str.236.788
	.quad	.L.str.237.789
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.238.790
	.quad	.L.str.239.791
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.240.792
	.quad	.L.str.241.793
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.242.794
	.quad	.L.str.243.795
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.244.796
	.quad	.L.str.245.797
	.long	2097280                 # 0x200080
	.zero	4
	.quad	.L.str.246.798
	.quad	.L.str.247.799
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.248.800
	.quad	.L.str.249.801
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.250.802
	.quad	.L.str.251.803
	.long	2097280                 # 0x200080
	.zero	4
	.quad	.L.str.252.804
	.quad	.L.str.253.805
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.254.806
	.quad	.L.str.255.807
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.256.808
	.quad	.L.str.257.809
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.258.810
	.quad	.L.str.259.811
	.long	130                     # 0x82
	.zero	4
	.quad	.L.str.260.812
	.quad	.L.str.261.813
	.long	130                     # 0x82
	.zero	4
	.quad	.L.str.262.814
	.quad	.L.str.263.815
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.264.816
	.quad	.L.str.265.817
	.long	520                     # 0x208
	.zero	4
	.quad	.L.str.266.818
	.quad	.L.str.267.819
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.268.820
	.quad	.L.str.269.821
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.270.822
	.quad	.L.str.271.823
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.272.824
	.quad	.L.str.273.825
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.274.826
	.quad	.L.str.275.827
	.long	2359298                 # 0x240002
	.zero	4
	.quad	.L.str.276.828
	.quad	.L.str.277.829
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.278.830
	.quad	.L.str.279.831
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.280.832
	.quad	.L.str.281.833
	.long	8320                    # 0x2080
	.zero	4
	.quad	.L.str.282.834
	.quad	.L.str.283.835
	.long	8320                    # 0x2080
	.zero	4
	.quad	.L.str.284.836
	.quad	.L.str.285.837
	.long	8320                    # 0x2080
	.zero	4
	.quad	.L.str.286.838
	.quad	.L.str.287.839
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.288.840
	.quad	.L.str.289.841
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.290.842
	.quad	.L.str.291.843
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.292.844
	.quad	.L.str.293.845
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.294.846
	.quad	.L.str.295.847
	.long	12                      # 0xc
	.zero	4
	.quad	.L.str.296.848
	.quad	.L.str.297.849
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.298.850
	.quad	.L.str.299.851
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.300.852
	.quad	.L.str.301.853
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.302.854
	.quad	.L.str.303.855
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.304.856
	.quad	.L.str.305.857
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.306.858
	.quad	.L.str.307.859
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.308.860
	.quad	.L.str.309.861
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.310.862
	.quad	.L.str.311.863
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.312.864
	.quad	.L.str.313.865
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.314.866
	.quad	.L.str.315.867
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.316.868
	.quad	.L.str.317.869
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.318.870
	.quad	.L.str.319.871
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.320.872
	.quad	.L.str.321.873
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.322.874
	.quad	.L.str.323.875
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.324.876
	.quad	.L.str.325.877
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.326.878
	.quad	.L.str.327.879
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.328.880
	.quad	.L.str.329.881
	.long	2113538                 # 0x204002
	.zero	4
	.quad	.L.str.330.882
	.quad	.L.str.331.883
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.332.884
	.quad	.L.str.333.885
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.334.886
	.quad	.L.str.335.887
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.336.888
	.quad	.L.str.337.889
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.338.890
	.quad	.L.str.339.891
	.long	2113536                 # 0x204000
	.zero	4
	.quad	.L.str.340.892
	.quad	.L.str.341.893
	.long	2113538                 # 0x204002
	.zero	4
	.quad	.L.str.342.894
	.quad	.L.str.343.895
	.long	2113538                 # 0x204002
	.zero	4
	.quad	.L.str.344.896
	.quad	.L.str.345.897
	.long	2113538                 # 0x204002
	.zero	4
	.quad	.L.str.346.898
	.quad	.L.str.347.899
	.long	2113538                 # 0x204002
	.zero	4
	.quad	.L.str.348.900
	.quad	.L.str.349.901
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.350.902
	.quad	.L.str.351.903
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.352.904
	.quad	.L.str.353.905
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.354.906
	.quad	.L.str.355.907
	.long	98306                   # 0x18002
	.zero	4
	.quad	.L.str.356.908
	.quad	.L.str.357.909
	.long	65600                   # 0x10040
	.zero	4
	.quad	.L.str.358.910
	.quad	.L.str.359.911
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.360.912
	.quad	.L.str.361.913
	.long	65760                   # 0x100e0
	.zero	4
	.quad	.L.str.362.914
	.quad	.L.str.363.915
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.364.916
	.quad	.L.str.365.917
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.366.918
	.quad	.L.str.367.919
	.long	2048                    # 0x800
	.zero	4
	.quad	.L.str.368.920
	.quad	.L.str.369.921
	.long	2560                    # 0xa00
	.zero	4
	.quad	.L.str.370.922
	.quad	.L.str.371.923
	.long	2048                    # 0x800
	.zero	4
	.quad	.L.str.372.924
	.quad	.L.str.373.925
	.long	2048                    # 0x800
	.zero	4
	.quad	.L.str.374.926
	.quad	.L.str.375.927
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.376.928
	.quad	.L.str.377.929
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.378.930
	.quad	.L.str.379.931
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.380.932
	.quad	.L.str.381.933
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.382.934
	.quad	.L.str.383.935
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.384.936
	.quad	.L.str.385.937
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.386.938
	.quad	.L.str.387.939
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.388.940
	.quad	.L.str.389.941
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.390.942
	.quad	.L.str.391.943
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.392.944
	.quad	.L.str.393.945
	.long	2                       # 0x2
	.zero	4
	.quad	.L.str.394.946
	.quad	.L.str.395.947
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.396.948
	.quad	.L.str.397.949
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.398.950
	.quad	.L.str.399.951
	.long	8389120                 # 0x800200
	.zero	4
	.quad	.L.str.400.952
	.quad	.L.str.401.953
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.402.954
	.quad	.L.str.403.955
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.404.956
	.quad	.L.str.405.957
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.406.958
	.quad	.L.str.407.959
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.408.960
	.quad	.L.str.409.961
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.410.962
	.quad	.L.str.411.963
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.412.964
	.quad	.L.str.413.965
	.long	16386                   # 0x4002
	.zero	4
	.quad	.L.str.414.966
	.quad	.L.str.415.967
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.416.968
	.quad	.L.str.417.969
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.418.970
	.quad	.L.str.419.971
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.420.972
	.quad	.L.str.421.973
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.422.974
	.quad	.L.str.423.975
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.424.976
	.quad	.L.str.425.977
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.426.978
	.quad	.L.str.427.979
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.428.980
	.quad	.L.str.429.981
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.430.982
	.quad	.L.str.431.983
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.432.984
	.quad	.L.str.433.985
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.434.986
	.quad	.L.str.435.987
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.436.988
	.quad	.L.str.437.989
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.438.990
	.quad	.L.str.439.991
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.440.992
	.quad	.L.str.441.993
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.442.994
	.quad	.L.str.443.995
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.444.996
	.quad	.L.str.445.997
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.446.998
	.quad	.L.str.447.999
	.long	524288                  # 0x80000
	.zero	4
	.quad	.L.str.448.1000
	.quad	.L.str.449.1001
	.long	1048576                 # 0x100000
	.zero	4
	.quad	.L.str.450.1002
	.quad	.L.str.451.1003
	.long	1048576                 # 0x100000
	.zero	4
	.quad	.L.str.452.1004
	.quad	.L.str.453.1005
	.long	192                     # 0xc0
	.zero	4
	.quad	.L.str.454.1006
	.quad	.L.str.455.1007
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.456.1008
	.quad	.L.str.457.1009
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.458.1010
	.quad	.L.str.459.1011
	.long	2097154                 # 0x200002
	.zero	4
	.quad	.L.str.460.1012
	.quad	.L.str.461.1013
	.long	2097154                 # 0x200002
	.zero	4
	.quad	.L.str.462.1014
	.quad	.L.str.463.1015
	.long	2097154                 # 0x200002
	.zero	4
	.quad	.L.str.464.1016
	.quad	.L.str.465.1017
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.466.1018
	.quad	.L.str.465.1017
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.467.1019
	.quad	.L.str.468.1020
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.469.1021
	.quad	.L.str.470.1022
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.471.1023
	.quad	.L.str.472.1024
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.473.1025
	.quad	.L.str.474.1026
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.475.1027
	.quad	.L.str.476.1028
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.477.1029
	.quad	.L.str.478.1030
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.479.1031
	.quad	.L.str.480.1032
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.481.1033
	.quad	.L.str.482.1034
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.483.1035
	.quad	.L.str.484.1036
	.long	4194816                 # 0x400200
	.zero	4
	.quad	.L.str.485.1037
	.quad	.L.str.486.1038
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.487.1039
	.quad	.L.str.488.1040
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.489.1041
	.quad	.L.str.490.1042
	.long	514                     # 0x202
	.zero	4
	.quad	.L.str.491.1043
	.quad	.L.str.492.1044
	.long	640                     # 0x280
	.zero	4
	.quad	.L.str.493.1045
	.quad	.L.str.494.1046
	.long	8389120                 # 0x800200
	.zero	4
	.quad	.L.str.495.1047
	.quad	.L.str.496.1048
	.long	520                     # 0x208
	.zero	4
	.quad	.L.str.497.1049
	.quad	.L.str.498.1050
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.499.1051
	.quad	.L.str.500.1052
	.long	1024                    # 0x400
	.zero	4
	.quad	0
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.size	helptext_copy, 5832

	.type	feats_copy,@object      # @feats_copy
	.p2align	4
feats_copy:
	.quad	.L.str.547
	.long	128                     # 0x80
	.zero	4
	.quad	.L.str.548
	.long	64                      # 0x40
	.zero	4
	.quad	.L.str.549
	.long	8192                    # 0x2000
	.zero	4
	.quad	.L.str.550
	.long	1024                    # 0x400
	.zero	4
	.quad	.L.str.551
	.long	1                       # 0x1
	.zero	4
	.quad	.L.str.552
	.long	512                     # 0x200
	.zero	4
	.quad	.L.str.553
	.long	134217728               # 0x8000000
	.zero	4
	.quad	.L.str.554
	.long	2048                    # 0x800
	.zero	4
	.quad	.L.str.555
	.long	131072                  # 0x20000
	.zero	4
	.quad	.L.str.556
	.long	262144                  # 0x40000
	.zero	4
	.quad	.L.str.557
	.long	256                     # 0x100
	.zero	4
	.quad	.L.str.558
	.long	16                      # 0x10
	.zero	4
	.quad	.L.str.559
	.long	32768                   # 0x8000
	.zero	4
	.quad	.L.str.560
	.long	4                       # 0x4
	.zero	4
	.quad	.L.str.561
	.long	8                       # 0x8
	.zero	4
	.quad	.L.str.562
	.long	8388608                 # 0x800000
	.zero	4
	.quad	.L.str.563
	.long	67108864                # 0x4000000
	.zero	4
	.quad	.L.str.564
	.long	4096                    # 0x1000
	.zero	4
	.quad	.L.str.565
	.long	16384                   # 0x4000
	.zero	4
	.quad	.L.str.566
	.long	65536                   # 0x10000
	.zero	4
	.quad	.L.str.567
	.long	33554432                # 0x2000000
	.zero	4
	.quad	.L.str.568
	.long	524288                  # 0x80000
	.zero	4
	.quad	.L.str.569
	.long	2097152                 # 0x200000
	.zero	4
	.quad	.L.str.570
	.long	4194304                 # 0x400000
	.zero	4
	.quad	.L.str.571
	.long	1048576                 # 0x100000
	.zero	4
	.quad	.L.str.572
	.long	16777216                # 0x1000000
	.zero	4
	.quad	.L.str.573
	.long	268435456               # 0x10000000
	.zero	4
	.quad	.L.str.574
	.long	536870912               # 0x20000000
	.zero	4
	.size	feats_copy, 448

	.type	all_added_copy,@object  # @all_added_copy
	.local	all_added_copy
	.comm	all_added_copy,8,8
	.type	transfersl_copy,@object # @transfersl_copy
	.local	transfersl_copy
	.comm	transfersl_copy,8,8
	.type	all_dlalready_copy,@object # @all_dlalready_copy
	.local	all_dlalready_copy
	.comm	all_dlalready_copy,8,8
	.type	all_ulalready_copy,@object # @all_ulalready_copy
	.local	all_ulalready_copy
	.comm	all_ulalready_copy,8,8
	.type	all_dltotal_copy,@object # @all_dltotal_copy
	.local	all_dltotal_copy
	.comm	all_dltotal_copy,8,8
	.type	all_ultotal_copy,@object # @all_ultotal_copy
	.local	all_ultotal_copy
	.comm	all_ultotal_copy,8,8
	.type	variables_copy,@object  # @variables_copy
	.p2align	4
variables_copy:
	.quad	.L.str.2.1734
	.long	3                       # 0x3
	.long	1048594                 # 0x100012
	.quad	writeString
	.quad	.L.str.3.1737
	.long	7                       # 0x7
	.long	0                       # 0x0
	.quad	writeString
	.quad	.L.str.4.1738
	.long	8                       # 0x8
	.long	0                       # 0x0
	.quad	writeLong
	.quad	.L.str.5.1739
	.long	4                       # 0x4
	.long	0                       # 0x0
	.quad	writeString
	.quad	.L.str.6.1740
	.long	9                       # 0x9
	.long	1048606                 # 0x10001e
	.quad	writeString
	.quad	.L.str.7.1741
	.long	11                      # 0xb
	.long	2097154                 # 0x200002
	.quad	writeLong
	.quad	.L.str.8.1742
	.long	12                      # 0xc
	.long	2097174                 # 0x200016
	.quad	writeLong
	.quad	.L.str.9.1743
	.long	13                      # 0xd
	.long	2097198                 # 0x20002e
	.quad	writeString
	.quad	.L.str.10.1744
	.long	15                      # 0xf
	.long	0                       # 0x0
	.quad	0
	.quad	.L.str.11.1745
	.long	16                      # 0x10
	.long	1048617                 # 0x100029
	.quad	writeString
	.quad	.L.str.12.1746
	.long	17                      # 0x11
	.long	2097194                 # 0x20002a
	.quad	writeLong
	.quad	.L.str.13.1747
	.long	5                       # 0x5
	.long	1048634                 # 0x10003a
	.quad	writeString
	.quad	.L.str.14.1748
	.long	19                      # 0x13
	.long	2097178                 # 0x20001a
	.quad	writeLong
	.quad	.L.str.15.1749
	.long	20                      # 0x14
	.long	0                       # 0x0
	.quad	writeLong
	.quad	.L.str.16.1750
	.long	26                      # 0x1a
	.long	2097172                 # 0x200014
	.quad	writeLong
	.quad	.L.str.17.1751
	.long	21                      # 0x15
	.long	0                       # 0x0
	.quad	0
	.quad	.L.str.18.1752
	.long	25                      # 0x19
	.long	2097199                 # 0x20002f
	.quad	writeLong
	.quad	.L.str.19.1753
	.long	28                      # 0x1c
	.long	1048607                 # 0x10001f
	.quad	writeString
	.quad	.L.str.20.1754
	.long	29                      # 0x1d
	.long	1048636                 # 0x10003c
	.quad	writeString
	.quad	.L.str.21.1755
	.long	23                      # 0x17
	.long	1048608                 # 0x100020
	.quad	writeString
	.quad	.L.str.22.1756
	.long	24                      # 0x18
	.long	2097192                 # 0x200028
	.quad	writeLong
	.quad	.L.str.23.1757
	.long	11                      # 0xb
	.long	2097154                 # 0x200002
	.quad	writeLong
	.quad	.L.str.24.1758
	.long	31                      # 0x1f
	.long	1048625                 # 0x100031
	.quad	writeString
	.quad	.L.str.25.1759
	.long	32                      # 0x20
	.long	6291464                 # 0x600008
	.quad	writeOffset
	.quad	.L.str.26.1760
	.long	10                      # 0xa
	.long	2097163                 # 0x20000b
	.quad	writeLong
	.quad	.L.str.27.1761
	.long	30                      # 0x1e
	.long	2097164                 # 0x20000c
	.quad	writeLong
	.quad	.L.str.28.1762
	.long	33                      # 0x21
	.long	6291463                 # 0x600007
	.quad	writeOffset
	.quad	.L.str.29.1763
	.long	34                      # 0x22
	.long	6291465                 # 0x600009
	.quad	writeOffset
	.quad	.L.str.30.1764
	.long	35                      # 0x23
	.long	6291466                 # 0x60000a
	.quad	writeOffset
	.quad	.L.str.31.1765
	.long	36                      # 0x24
	.long	2097165                 # 0x20000d
	.quad	writeLong
	.quad	.L.str.32.1766
	.long	38                      # 0x26
	.long	0                       # 0x0
	.quad	0
	.quad	.L.str.33.1767
	.long	39                      # 0x27
	.long	0                       # 0x0
	.quad	0
	.quad	.L.str.34.1768
	.long	1                       # 0x1
	.long	6291512                 # 0x600038
	.quad	writeTime
	.quad	.L.str.35.1769
	.long	2                       # 0x2
	.long	6291508                 # 0x600034
	.quad	writeTime
	.quad	.L.str.36.1770
	.long	18                      # 0x12
	.long	6291507                 # 0x600033
	.quad	writeTime
	.quad	.L.str.37.1771
	.long	22                      # 0x16
	.long	6291509                 # 0x600035
	.quad	writeTime
	.quad	.L.str.38.1772
	.long	27                      # 0x1b
	.long	6291511                 # 0x600037
	.quad	writeTime
	.quad	.L.str.39.1773
	.long	37                      # 0x25
	.long	6291510                 # 0x600036
	.quad	writeTime
	.quad	.L.str.40.1774
	.long	40                      # 0x28
	.long	6291506                 # 0x600032
	.quad	writeTime
	.quad	.L.str.41.1775
	.long	14                      # 0xe
	.long	0                       # 0x0
	.quad	writeString
	.quad	.L.str.42.1776
	.long	6                       # 0x6
	.long	1048577                 # 0x100001
	.quad	writeString
	.quad	.L.str.43.1777
	.long	41                      # 0x29
	.long	0                       # 0x0
	.quad	writeLong
	.zero	24
	.size	variables_copy, 1032

	.type	mappings_copy,@object   # @mappings_copy
	.p2align	4
mappings_copy:
	.quad	.L.str.1809
	.long	1048636                 # 0x10003c
	.zero	4
	.quad	.L.str.1.1810
	.long	1048577                 # 0x100001
	.zero	4
	.quad	.L.str.2.1811
	.long	1048594                 # 0x100012
	.zero	4
	.zero	16
	.size	mappings_copy, 64

	.type	speedindex_copy,@object # @speedindex_copy
	.local	speedindex_copy
	.comm	speedindex_copy,4,4
	.type	speedstore_copy,@object # @speedstore_copy
	.local	speedstore_copy
	.comm	speedstore_copy,320,16
	.type	indexwrapped_copy,@object # @indexwrapped_copy
	.local	indexwrapped_copy
	.comm	indexwrapped_copy,1,1
	.type	_ctr_copy,@object       # @_ctr_copy
	.bss
	.globl	_ctr_copy
	.p2align	2
_ctr_copy:
	.long	0                       # 0x0
	.size	_ctr_copy, 4

	.type	ptr_map_copy,@object    # @ptr_map_copy
	.globl	ptr_map_copy
	.p2align	3
ptr_map_copy:
	.quad	0
	.size	ptr_map_copy, 8

	.type	PTRTRACKER_copy,@object # @PTRTRACKER_copy
	.comm	PTRTRACKER_copy,800,16
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.ident	"clang version 10.0.0-4ubuntu1 "
	.section	".note.GNU-stack","",@progbits
